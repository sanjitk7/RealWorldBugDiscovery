package org.apache.commons.math.stat;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str5 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency6 = new org.apache.commons.math.stat.Frequency();
        long long8 = frequency6.getCumFreq('#');
        double double10 = frequency6.getPct((long) (short) 100);
        long long11 = frequency0.getCount((java.lang.Object) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor12 = frequency0.valuesIterator();
        double double14 = frequency0.getCumPct(0L);
        long long16 = frequency0.getCount(1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str5, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor12);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        double double11 = frequency0.getPct((int) ' ');
        double double13 = frequency0.getCumPct(' ');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double10 = frequency0.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor11 = frequency0.valuesIterator();
        double double13 = frequency0.getPct('4');
        java.lang.String str14 = frequency0.toString();
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        long long18 = frequency16.getCumFreq('#');
        double double20 = frequency16.getPct('#');
        double double22 = frequency16.getPct((java.lang.Object) (-1.0f));
        long long24 = frequency16.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double26 = frequency16.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor27 = frequency16.valuesIterator();
        double double29 = frequency16.getPct('4');
        java.lang.String str30 = frequency16.toString();
        boolean boolean31 = frequency0.equals((java.lang.Object) frequency16);
        frequency0.addValue('a');
        long long35 = frequency0.getCumFreq('a');
        org.apache.commons.math.stat.Frequency frequency36 = new org.apache.commons.math.stat.Frequency();
        long long38 = frequency36.getCumFreq('#');
        double double40 = frequency36.getPct((long) (short) 100);
        long long42 = frequency36.getCount((java.lang.Comparable<java.lang.String>) "");
        double double44 = frequency36.getPct(' ');
        frequency36.addValue((long) (byte) 10);
        long long48 = frequency36.getCount((int) (byte) -1);
        boolean boolean49 = frequency0.equals((java.lang.Object) frequency36);
        org.apache.commons.math.stat.Frequency frequency50 = new org.apache.commons.math.stat.Frequency();
        long long52 = frequency50.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency53 = new org.apache.commons.math.stat.Frequency();
        long long55 = frequency53.getCumFreq('#');
        double double57 = frequency53.getPct('#');
        double double58 = frequency50.getCumPct((java.lang.Object) '#');
        java.lang.Object obj59 = null;
        double double60 = frequency50.getPct(obj59);
        long long62 = frequency50.getCumFreq(0L);
        long long64 = frequency50.getCount((long) '4');
        java.lang.String str65 = frequency50.toString();
        double double67 = frequency50.getPct((int) '4');
        double double68 = frequency36.getPct((java.lang.Object) double67);
        long long70 = frequency36.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(wildcardComparableItor11);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str14, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(wildcardComparableItor27);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str30, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str65, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor8 = frequency0.valuesIterator();
        java.lang.String str9 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        long long14 = frequency10.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long16 = frequency10.getCumFreq((int) (short) -1);
        double double18 = frequency10.getCumPct(1L);
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        long long21 = frequency19.getCumFreq('#');
        double double23 = frequency19.getPct((java.lang.Object) (-1.0d));
        long long25 = frequency19.getCount('#');
        frequency10.addValue((java.lang.Object) long25);
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency();
        long long29 = frequency27.getCumFreq('#');
        double double31 = frequency27.getPct((long) (short) 100);
        long long33 = frequency27.getCount((java.lang.Comparable<java.lang.String>) "");
        long long35 = frequency27.getCumFreq((int) (short) 0);
        double double37 = frequency27.getPct(' ');
        boolean boolean38 = frequency10.equals((java.lang.Object) frequency27);
        double double39 = frequency0.getCumPct((java.lang.Object) boolean38);
        java.lang.Class<?> wildcardClass40 = frequency0.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(wildcardComparableItor8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str9, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        frequency0.addValue((int) '4');
        double double13 = frequency0.getCumPct(' ');
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency();
        long long16 = frequency14.getCumFreq('#');
        long long18 = frequency14.getCumFreq((java.lang.Object) (byte) 1);
        double double20 = frequency14.getPct((int) '4');
        double double22 = frequency14.getCumPct((long) (short) 1);
        double double23 = frequency0.getCumPct((java.lang.Object) (short) 1);
        long long25 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double27 = frequency0.getPct((int) (byte) 10);
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency();
        long long30 = frequency28.getCumFreq('#');
        double double32 = frequency28.getPct((java.lang.Object) (-1.0d));
        long long34 = frequency28.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long36 = frequency28.getCount((int) (short) 0);
        boolean boolean37 = frequency0.equals((java.lang.Object) frequency28);
        double double39 = frequency28.getPct((int) '4');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        double double17 = frequency10.getPct((int) (byte) 100);
        long long19 = frequency10.getCount(10);
        double double20 = frequency0.getPct((java.lang.Object) 10);
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        double double22 = frequency0.getCumPct(strComparable21);
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency();
        long long25 = frequency23.getCumFreq('#');
        double double27 = frequency23.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor28 = frequency23.valuesIterator();
        java.lang.String str29 = frequency23.toString();
        double double31 = frequency23.getPct('4');
        frequency23.addValue((java.lang.Integer) (-1));
        double double35 = frequency23.getPct((int) (short) 100);
        double double37 = frequency23.getCumPct((long) 1);
        frequency0.addValue((java.lang.Object) 1);
        org.apache.commons.math.stat.Frequency frequency39 = new org.apache.commons.math.stat.Frequency();
        long long41 = frequency39.getCumFreq('#');
        double double43 = frequency39.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor44 = frequency39.valuesIterator();
        double double46 = frequency39.getCumPct('#');
        frequency39.addValue((int) (short) -1);
        frequency39.addValue((int) '4');
        double double52 = frequency39.getCumPct(' ');
        frequency39.addValue((java.lang.Integer) 10);
        frequency39.clear();
        long long56 = frequency39.getSumFreq();
        double double57 = frequency0.getCumPct((java.lang.Object) long56);
        long long59 = frequency0.getCumFreq((long) (byte) 10);
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency();
        long long62 = frequency60.getCumFreq('#');
        double double64 = frequency60.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor65 = frequency60.valuesIterator();
        double double67 = frequency60.getCumPct('#');
        frequency60.addValue((int) (short) -1);
        long long71 = frequency60.getCount((int) ' ');
        boolean boolean73 = frequency60.equals((java.lang.Object) true);
        double double75 = frequency60.getCumPct((java.lang.Object) 0.0f);
        double double77 = frequency60.getCumPct((java.lang.Object) "");
        org.apache.commons.math.stat.Frequency frequency78 = new org.apache.commons.math.stat.Frequency();
        long long80 = frequency78.getCumFreq('#');
        double double82 = frequency78.getPct((long) (short) 100);
        long long84 = frequency78.getCount((java.lang.Comparable<java.lang.String>) "");
        frequency78.addValue((java.lang.Integer) 0);
        long long88 = frequency78.getCumFreq(1L);
        long long90 = frequency78.getCumFreq(10L);
        frequency60.addValue((java.lang.Object) long90);
        double double93 = frequency60.getPct((int) (short) 10);
        double double94 = frequency0.getCumPct((java.lang.Object) double93);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(wildcardComparableItor28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str29, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(wildcardComparableItor44);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(wildcardComparableItor65);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 1L + "'", long88 == 1L);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 1L + "'", long90 == 1L);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCount(0L);
        double double8 = frequency0.getPct('a');
        frequency0.clear();
        frequency0.clear();
        double double12 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        long long14 = frequency0.getCount('#');
        long long15 = frequency0.getSumFreq();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        double double17 = frequency10.getPct((int) (byte) 100);
        long long19 = frequency10.getCount(10);
        double double20 = frequency0.getPct((java.lang.Object) 10);
        long long22 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double24 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long26 = frequency0.getCount((int) (short) 100);
        frequency0.addValue((int) (byte) 0);
        double double30 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        long long6 = frequency0.getCount('#');
        double double8 = frequency0.getCumPct('#');
        frequency0.clear();
        long long11 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double13 = frequency0.getPct((int) (byte) -1);
        frequency0.addValue((java.lang.Integer) 100);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        frequency0.addValue((long) (short) 1);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor7 = frequency0.valuesIterator();
        double double9 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long11 = frequency0.getCount('#');
        long long13 = frequency0.getCount(' ');
        java.lang.String str14 = frequency0.toString();
        frequency0.clear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n" + "'", str14, "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount('a');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor10 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        long long13 = frequency11.getCumFreq('#');
        double double15 = frequency11.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor16 = frequency11.valuesIterator();
        long long17 = frequency11.getSumFreq();
        frequency11.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long20 = frequency11.getSumFreq();
        long long21 = frequency0.getCumFreq((java.lang.Object) long20);
        long long23 = frequency0.getCumFreq('a');
        frequency0.clear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(wildcardComparableItor16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getPct((int) (byte) 100);
        long long9 = frequency0.getCount(10);
        java.lang.String str10 = frequency0.toString();
        long long12 = frequency0.getCount((int) '4');
        double double14 = frequency0.getPct((int) '#');
        double double16 = frequency0.getCumPct(0L);
        long long18 = frequency0.getCumFreq('#');
        long long20 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "");
        java.lang.String str23 = frequency0.toString();
        double double25 = frequency0.getPct(10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str10, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n" + "'", str23, "Value \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        double double17 = frequency10.getPct((int) (byte) 100);
        long long19 = frequency10.getCount(10);
        double double20 = frequency0.getPct((java.lang.Object) 10);
        frequency0.addValue(100L);
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency();
        long long25 = frequency23.getCumFreq('#');
        double double27 = frequency23.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor28 = frequency23.valuesIterator();
        double double30 = frequency23.getCumPct('#');
        frequency23.addValue((int) (short) -1);
        long long34 = frequency23.getCount((int) ' ');
        boolean boolean36 = frequency23.equals((java.lang.Object) true);
        double double38 = frequency23.getCumPct((java.lang.Object) 0.0f);
        frequency23.clear();
        org.apache.commons.math.stat.Frequency frequency40 = new org.apache.commons.math.stat.Frequency();
        long long42 = frequency40.getCumFreq('#');
        double double44 = frequency40.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor45 = frequency40.valuesIterator();
        double double47 = frequency40.getCumPct('#');
        long long49 = frequency40.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency50 = new org.apache.commons.math.stat.Frequency();
        long long52 = frequency50.getCumFreq('#');
        double double54 = frequency50.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor55 = frequency50.valuesIterator();
        double double57 = frequency50.getPct((int) (byte) 100);
        long long59 = frequency50.getCount(10);
        double double60 = frequency40.getPct((java.lang.Object) 10);
        boolean boolean61 = frequency23.equals((java.lang.Object) frequency40);
        long long63 = frequency23.getCount('#');
        long long64 = frequency0.getCount((java.lang.Object) long63);
        frequency0.addValue((java.lang.Integer) 0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(wildcardComparableItor28);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(wildcardComparableItor45);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(wildcardComparableItor55);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        boolean boolean7 = frequency0.equals((java.lang.Object) 0.5d);
        long long9 = frequency0.getCumFreq((int) (byte) 10);
        double double11 = frequency0.getPct((long) (byte) 1);
        double double13 = frequency0.getCumPct((long) (byte) -1);
        double double15 = frequency0.getCumPct((int) (byte) 0);
        long long17 = frequency0.getCount((int) (byte) 0);
        double double19 = frequency0.getCumPct(1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getPct((int) (byte) 100);
        long long9 = frequency0.getCount(10);
        java.lang.String str10 = frequency0.toString();
        long long12 = frequency0.getCount((int) '4');
        double double14 = frequency0.getPct((int) '#');
        long long16 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t33%\t33%\n10\t1\t33%\t67%\n52\t1\t33%\t100%\n");
        double double18 = frequency0.getCumPct((long) ' ');
        long long20 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency();
        long long23 = frequency21.getCumFreq('#');
        long long25 = frequency21.getCumFreq((java.lang.Object) (byte) 1);
        double double27 = frequency21.getPct((int) '4');
        long long29 = frequency21.getCumFreq((long) (byte) -1);
        frequency21.addValue((java.lang.Comparable<java.lang.String>) "hi!");
        double double32 = frequency0.getPct((java.lang.Object) "hi!");
        double double34 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        double double36 = frequency0.getCumPct((long) (short) 10);
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency();
        long long39 = frequency37.getCumFreq('#');
        double double41 = frequency37.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor42 = frequency37.valuesIterator();
        java.lang.String str43 = frequency37.toString();
        double double45 = frequency37.getPct('4');
        frequency37.addValue((java.lang.Integer) (-1));
        double double49 = frequency37.getPct((int) (short) 100);
        double double51 = frequency37.getCumPct('4');
        long long53 = frequency37.getCount(100L);
        long long55 = frequency37.getCumFreq(' ');
        org.apache.commons.math.stat.Frequency frequency56 = new org.apache.commons.math.stat.Frequency();
        long long58 = frequency56.getCumFreq('#');
        double double60 = frequency56.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor61 = frequency56.valuesIterator();
        java.lang.String str62 = frequency56.toString();
        double double64 = frequency56.getPct('4');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor65 = frequency56.valuesIterator();
        boolean boolean66 = frequency37.equals((java.lang.Object) wildcardComparableItor65);
        double double67 = frequency0.getPct((java.lang.Object) boolean66);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str10, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(wildcardComparableItor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str43, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(wildcardComparableItor61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str62, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(wildcardComparableItor65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency8 = new org.apache.commons.math.stat.Frequency();
        long long10 = frequency8.getCumFreq('#');
        double double12 = frequency8.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor13 = frequency8.valuesIterator();
        double double15 = frequency8.getCumPct('#');
        long long17 = frequency8.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        frequency8.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        long long21 = frequency8.getCount('#');
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency();
        long long24 = frequency22.getCumFreq('#');
        double double26 = frequency22.getPct('#');
        double double28 = frequency22.getPct((java.lang.Object) (-1.0f));
        long long30 = frequency22.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double32 = frequency22.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor33 = frequency22.valuesIterator();
        frequency22.addValue(0L);
        long long37 = frequency22.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor38 = frequency22.valuesIterator();
        boolean boolean39 = frequency8.equals((java.lang.Object) frequency22);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Object) frequency8);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(wildcardComparableItor13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(wildcardComparableItor33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        boolean boolean10 = frequency0.equals((java.lang.Object) (short) 0);
        long long12 = frequency0.getCount(100);
        java.lang.Class<?> wildcardClass13 = frequency0.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        long long10 = frequency0.getCumFreq(0);
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        long long15 = frequency13.getCumFreq('#');
        double double17 = frequency13.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor18 = frequency13.valuesIterator();
        java.lang.String str19 = frequency13.toString();
        frequency13.addValue('a');
        long long22 = frequency13.getSumFreq();
        long long24 = frequency13.getCumFreq((int) (short) 0);
        long long26 = frequency13.getCount((long) (short) 10);
        double double28 = frequency13.getPct((int) (short) -1);
        long long29 = frequency0.getCount((java.lang.Object) (short) -1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(wildcardComparableItor18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str19, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        long long11 = frequency0.getCount((int) ' ');
        boolean boolean13 = frequency0.equals((java.lang.Object) true);
        double double15 = frequency0.getCumPct((java.lang.Object) 0.0f);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor16 = frequency0.valuesIterator();
        long long17 = frequency0.getSumFreq();
        java.lang.String str18 = frequency0.toString();
        double double20 = frequency0.getCumPct((long) 'a');
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency();
        long long23 = frequency21.getCumFreq('#');
        double double25 = frequency21.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor26 = frequency21.valuesIterator();
        java.lang.String str27 = frequency21.toString();
        double double29 = frequency21.getPct('4');
        frequency21.addValue((java.lang.Integer) (-1));
        double double33 = frequency21.getPct('4');
        long long35 = frequency21.getCount((long) (short) 1);
        java.lang.String str36 = frequency21.toString();
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency();
        long long39 = frequency37.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency40 = new org.apache.commons.math.stat.Frequency();
        long long42 = frequency40.getCumFreq('#');
        double double44 = frequency40.getPct('#');
        double double45 = frequency37.getCumPct((java.lang.Object) '#');
        java.lang.Object obj46 = null;
        double double47 = frequency37.getPct(obj46);
        long long49 = frequency37.getCumFreq(0L);
        long long51 = frequency37.getCumFreq((long) (short) 100);
        frequency21.addValue((java.lang.Object) long51);
        boolean boolean53 = frequency0.equals((java.lang.Object) long51);
        org.apache.commons.math.stat.Frequency frequency54 = new org.apache.commons.math.stat.Frequency();
        long long56 = frequency54.getCumFreq('#');
        double double58 = frequency54.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor59 = frequency54.valuesIterator();
        double double61 = frequency54.getCumPct('#');
        long long63 = frequency54.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency64 = new org.apache.commons.math.stat.Frequency();
        long long66 = frequency64.getCumFreq('#');
        double double68 = frequency64.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor69 = frequency64.valuesIterator();
        double double71 = frequency64.getPct((int) (byte) 100);
        long long73 = frequency64.getCount(10);
        double double74 = frequency54.getPct((java.lang.Object) 10);
        long long76 = frequency54.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double78 = frequency54.getPct(0L);
        double double80 = frequency54.getCumPct((int) (byte) 100);
        frequency54.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n" + "'", str18, "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(wildcardComparableItor26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str27, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n" + "'", str36, "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(wildcardComparableItor59);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(wildcardComparableItor69);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long10 = frequency0.getSumFreq();
        long long12 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        long long15 = frequency13.getCumFreq('#');
        long long17 = frequency13.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long19 = frequency13.getCount((int) ' ');
        long long21 = frequency13.getCumFreq((long) '#');
        double double22 = frequency0.getPct((java.lang.Object) long21);
        double double24 = frequency0.getCumPct(0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCount(1);
        long long7 = frequency0.getSumFreq();
        long long9 = frequency0.getCumFreq('4');
        frequency0.addValue((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCumFreq((int) (short) -1);
        frequency0.addValue((java.lang.Integer) 10);
        double double10 = frequency0.getPct('#');
        long long12 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        frequency0.addValue((int) (short) 10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        java.lang.String str6 = frequency0.toString();
        frequency0.addValue('a');
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        long long11 = frequency9.getCumFreq('#');
        double double13 = frequency9.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor14 = frequency9.valuesIterator();
        double double16 = frequency9.getCumPct('#');
        long long18 = frequency9.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        long long21 = frequency19.getCumFreq('#');
        double double23 = frequency19.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor24 = frequency19.valuesIterator();
        double double26 = frequency19.getPct((int) (byte) 100);
        long long28 = frequency19.getCount(10);
        double double29 = frequency9.getPct((java.lang.Object) 10);
        boolean boolean30 = frequency0.equals((java.lang.Object) 10);
        double double32 = frequency0.getCumPct('a');
        long long33 = frequency0.getSumFreq();
        org.apache.commons.math.stat.Frequency frequency34 = new org.apache.commons.math.stat.Frequency();
        long long36 = frequency34.getCumFreq('#');
        double double38 = frequency34.getPct((java.lang.Object) (-1.0d));
        long long40 = frequency34.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long42 = frequency34.getCumFreq((long) (short) -1);
        double double44 = frequency34.getPct((long) (byte) 0);
        long long46 = frequency34.getCount(0L);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor47 = frequency34.valuesIterator();
        frequency34.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency50 = new org.apache.commons.math.stat.Frequency();
        long long52 = frequency50.getCumFreq('#');
        long long54 = frequency50.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str55 = frequency50.toString();
        long long57 = frequency50.getCount(0);
        frequency50.clear();
        double double60 = frequency50.getCumPct((int) 'a');
        double double62 = frequency50.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        frequency50.addValue((int) (short) 10);
        long long65 = frequency34.getCount((java.lang.Object) (short) 10);
        boolean boolean66 = frequency0.equals((java.lang.Object) (short) 10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str6, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(wildcardComparableItor14);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(wildcardComparableItor24);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor47);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str55, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        boolean boolean10 = frequency0.equals((java.lang.Object) (short) 0);
        double double12 = frequency0.getPct((int) (byte) 0);
        double double14 = frequency0.getCumPct((long) (byte) 1);
        frequency0.clear();
        double double17 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n\t1\t100%\t100%\n");
        long long19 = frequency0.getCount(' ');
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        long long22 = frequency20.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency();
        long long25 = frequency23.getCumFreq('#');
        double double27 = frequency23.getPct('#');
        double double28 = frequency20.getCumPct((java.lang.Object) '#');
        java.lang.Object obj29 = null;
        double double30 = frequency20.getPct(obj29);
        long long32 = frequency20.getCumFreq(0L);
        long long34 = frequency20.getCumFreq((long) (byte) 100);
        frequency20.addValue((long) (-1));
        long long37 = frequency20.getSumFreq();
        long long38 = frequency0.getCount((java.lang.Object) long37);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        java.lang.String str6 = frequency0.toString();
        long long7 = frequency0.getSumFreq();
        long long8 = frequency0.getSumFreq();
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        double double10 = frequency0.getPct(strComparable9);
        long long12 = frequency0.getCount((long) '4');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str6, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCumFreq(0L);
        double double14 = frequency0.getPct((long) '#');
        double double16 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "");
        frequency0.addValue('a');
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        long long21 = frequency19.getCumFreq('#');
        double double23 = frequency19.getPct('#');
        long long25 = frequency19.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        long long26 = frequency0.getCumFreq((java.lang.Object) "hi!");
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency();
        long long29 = frequency27.getCumFreq('#');
        long long31 = frequency27.getCumFreq((java.lang.Object) (byte) 1);
        long long33 = frequency27.getCumFreq((java.lang.Object) 10.0d);
        frequency27.addValue((long) (byte) 1);
        double double37 = frequency27.getCumPct((int) 'a');
        double double39 = frequency27.getCumPct((int) (short) 10);
        double double40 = frequency0.getCumPct((java.lang.Object) double39);
        java.lang.String str41 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency();
        long long44 = frequency42.getCumFreq('#');
        double double46 = frequency42.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor47 = frequency42.valuesIterator();
        java.lang.String str48 = frequency42.toString();
        frequency42.addValue('a');
        org.apache.commons.math.stat.Frequency frequency51 = new org.apache.commons.math.stat.Frequency();
        long long53 = frequency51.getCumFreq('#');
        double double55 = frequency51.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor56 = frequency51.valuesIterator();
        double double58 = frequency51.getCumPct('#');
        long long60 = frequency51.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency61 = new org.apache.commons.math.stat.Frequency();
        long long63 = frequency61.getCumFreq('#');
        double double65 = frequency61.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor66 = frequency61.valuesIterator();
        double double68 = frequency61.getPct((int) (byte) 100);
        long long70 = frequency61.getCount(10);
        double double71 = frequency51.getPct((java.lang.Object) 10);
        boolean boolean72 = frequency42.equals((java.lang.Object) 10);
        long long74 = frequency42.getCount((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Object) long74);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n" + "'", str41, "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(wildcardComparableItor47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str48, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(wildcardComparableItor56);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(wildcardComparableItor66);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getPct((int) (byte) 100);
        long long9 = frequency0.getCount(10);
        java.lang.String str10 = frequency0.toString();
        long long12 = frequency0.getCount((int) '4');
        double double14 = frequency0.getPct((int) '#');
        long long16 = frequency0.getCumFreq((java.lang.Object) 'a');
        long long18 = frequency0.getCount('4');
        double double20 = frequency0.getPct('4');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str10, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCumFreq(0L);
        double double14 = frequency0.getPct((long) '#');
        long long16 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t33%\t33%\n2\t1\t33%\t67%\n10\t1\t33%\t100%\n");
        frequency0.addValue('4');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor19 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor19);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCumFreq((int) (short) -1);
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency0.clear();
        java.lang.Object obj10 = null;
        double double11 = frequency0.getPct(obj10);
        long long13 = frequency0.getCount(2L);
        frequency0.addValue(10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        long long11 = frequency0.getCount((int) ' ');
        boolean boolean13 = frequency0.equals((java.lang.Object) true);
        double double15 = frequency0.getCumPct((java.lang.Object) 0.0f);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor16 = frequency0.valuesIterator();
        long long17 = frequency0.getSumFreq();
        double double19 = frequency0.getPct((-1));
        double double21 = frequency0.getPct((long) ' ');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        long long6 = frequency0.getSumFreq();
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor7 = frequency0.valuesIterator();
        long long9 = frequency0.getCount((long) 100);
        long long11 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCumFreq((java.lang.Object) 10.0d);
        frequency0.addValue((long) (byte) 1);
        double double10 = frequency0.getCumPct((int) 'a');
        long long12 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double14 = frequency0.getPct('4');
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        long long18 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        double double20 = frequency0.getPct((int) (short) 10);
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long22 = frequency0.getCumFreq(strComparable21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCumFreq((int) (short) -1);
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency0.clear();
        long long11 = frequency0.getCount((long) (byte) -1);
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency();
        long long14 = frequency12.getCumFreq('#');
        double double16 = frequency12.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor17 = frequency12.valuesIterator();
        java.lang.String str18 = frequency12.toString();
        double double20 = frequency12.getPct('4');
        frequency12.addValue((java.lang.Integer) (-1));
        double double24 = frequency12.getPct((int) (short) 100);
        double double26 = frequency12.getCumPct((long) 1);
        frequency0.addValue((java.lang.Object) 1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(wildcardComparableItor17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str18, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCumFreq((int) (short) -1);
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency0.clear();
        double double11 = frequency0.getPct((int) (short) 0);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor12 = frequency0.valuesIterator();
        frequency0.clear();
        long long15 = frequency0.getCount(0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(wildcardComparableItor12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCount(0L);
        double double8 = frequency0.getPct(0);
        long long10 = frequency0.getCount(' ');
        double double12 = frequency0.getPct((int) ' ');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        long long6 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long8 = frequency0.getCumFreq((long) (short) -1);
        double double10 = frequency0.getPct((long) (byte) 0);
        double double12 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str13 = frequency0.toString();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str13, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        long long11 = frequency9.getCumFreq('#');
        double double13 = frequency9.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor14 = frequency9.valuesIterator();
        double double16 = frequency9.getCumPct('#');
        long long18 = frequency9.getCount((java.lang.Object) (short) -1);
        long long20 = frequency9.getCumFreq((int) (short) 100);
        double double21 = frequency0.getPct((java.lang.Object) (short) 100);
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency();
        long long24 = frequency22.getCumFreq('#');
        double double26 = frequency22.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor27 = frequency22.valuesIterator();
        java.lang.String str28 = frequency22.toString();
        double double30 = frequency22.getPct('4');
        long long31 = frequency0.getCount((java.lang.Object) double30);
        double double33 = frequency0.getPct((int) 'a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(wildcardComparableItor14);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(wildcardComparableItor27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str28, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCumFreq(0L);
        long long14 = frequency0.getCumFreq((long) (byte) 100);
        frequency0.addValue('4');
        frequency0.addValue('a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        java.lang.String str6 = frequency0.toString();
        frequency0.addValue('a');
        frequency0.clear();
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        java.lang.String str16 = frequency10.toString();
        frequency10.addValue('a');
        long long19 = frequency10.getSumFreq();
        long long20 = frequency0.getCumFreq((java.lang.Object) long19);
        frequency0.addValue((java.lang.Integer) 0);
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency();
        long long25 = frequency23.getCumFreq('#');
        double double27 = frequency23.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor28 = frequency23.valuesIterator();
        long long29 = frequency23.getSumFreq();
        frequency23.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long33 = frequency23.getCumFreq('#');
        boolean boolean35 = frequency23.equals((java.lang.Object) 1.0d);
        long long37 = frequency23.getCumFreq((long) 100);
        long long38 = frequency0.getCount((java.lang.Object) 100);
        long long40 = frequency0.getCount((int) '4');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str6, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str16, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(wildcardComparableItor28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCumFreq(0L);
        double double14 = frequency0.getPct((long) '#');
        double double16 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "");
        frequency0.addValue('a');
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        long long21 = frequency19.getCumFreq('#');
        double double23 = frequency19.getPct('#');
        long long25 = frequency19.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        long long26 = frequency0.getCumFreq((java.lang.Object) "hi!");
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency();
        long long29 = frequency27.getCumFreq('#');
        long long31 = frequency27.getCumFreq((java.lang.Object) (byte) 1);
        long long33 = frequency27.getCumFreq((java.lang.Object) 10.0d);
        frequency27.addValue((long) (byte) 1);
        double double37 = frequency27.getCumPct((int) 'a');
        double double39 = frequency27.getCumPct((int) (short) 10);
        double double40 = frequency0.getCumPct((java.lang.Object) double39);
        java.lang.String str41 = frequency0.toString();
        long long43 = frequency0.getCumFreq('a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n" + "'", str41, "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        long long11 = frequency0.getCount('a');
        double double13 = frequency0.getCumPct(0L);
        frequency0.addValue(' ');
        frequency0.clear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        long long6 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long8 = frequency0.getCumFreq((long) (short) -1);
        java.lang.String str9 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct('#');
        frequency10.addValue(100);
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        long long19 = frequency17.getCumFreq('#');
        double double21 = frequency17.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor22 = frequency17.valuesIterator();
        double double24 = frequency17.getCumPct('#');
        frequency17.addValue((int) (short) -1);
        frequency17.addValue((int) '4');
        double double30 = frequency17.getCumPct(' ');
        frequency17.addValue((java.lang.Integer) 10);
        boolean boolean33 = frequency10.equals((java.lang.Object) frequency17);
        long long35 = frequency10.getCumFreq((int) '#');
        frequency10.addValue((int) (short) 1);
        double double38 = frequency0.getCumPct((java.lang.Object) (short) 1);
        double double40 = frequency0.getCumPct('#');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str9, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(wildcardComparableItor22);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct(100);
        long long12 = frequency0.getCount((int) (short) 0);
        long long14 = frequency0.getCumFreq('a');
        frequency0.addValue((long) (-1));
        frequency0.addValue((long) 1);
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        long long21 = frequency19.getCumFreq('#');
        long long23 = frequency19.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long24 = frequency0.getCount((java.lang.Object) long23);
        long long26 = frequency0.getCount((long) 1);
        double double28 = frequency0.getCumPct(100L);
        java.lang.Class<?> wildcardClass29 = frequency0.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getPct((int) (byte) 100);
        long long9 = frequency0.getCount(10);
        java.lang.String str10 = frequency0.toString();
        long long12 = frequency0.getCount((int) '4');
        double double14 = frequency0.getPct((int) '#');
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        long long17 = frequency15.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency();
        long long20 = frequency18.getCumFreq('#');
        double double22 = frequency18.getPct('#');
        double double23 = frequency15.getCumPct((java.lang.Object) '#');
        java.lang.Object obj24 = null;
        double double25 = frequency15.getPct(obj24);
        double double26 = frequency0.getPct(obj24);
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency();
        long long29 = frequency27.getCumFreq('#');
        double double31 = frequency27.getPct('#');
        double double33 = frequency27.getPct((java.lang.Object) (-1.0f));
        long long35 = frequency27.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double37 = frequency27.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor38 = frequency27.valuesIterator();
        frequency27.addValue(0L);
        long long42 = frequency27.getCumFreq(' ');
        org.apache.commons.math.stat.Frequency frequency43 = new org.apache.commons.math.stat.Frequency();
        long long45 = frequency43.getCumFreq('#');
        long long47 = frequency43.getCumFreq((java.lang.Object) (byte) 1);
        long long49 = frequency43.getCount(0L);
        double double50 = frequency27.getCumPct((java.lang.Object) long49);
        boolean boolean51 = frequency0.equals((java.lang.Object) long49);
        org.apache.commons.math.stat.Frequency frequency52 = new org.apache.commons.math.stat.Frequency();
        long long54 = frequency52.getCumFreq('#');
        long long56 = frequency52.getCumFreq((java.lang.Object) (byte) 1);
        long long58 = frequency52.getCumFreq((java.lang.Object) 10.0d);
        frequency52.addValue((long) (byte) 1);
        double double62 = frequency52.getCumPct((int) 'a');
        org.apache.commons.math.stat.Frequency frequency63 = new org.apache.commons.math.stat.Frequency();
        long long65 = frequency63.getCumFreq('#');
        long long67 = frequency63.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long69 = frequency63.getCumFreq((int) (short) -1);
        double double71 = frequency63.getCumPct(1L);
        org.apache.commons.math.stat.Frequency frequency72 = new org.apache.commons.math.stat.Frequency();
        long long74 = frequency72.getCumFreq('#');
        double double76 = frequency72.getPct((java.lang.Object) (-1.0d));
        long long78 = frequency72.getCount('#');
        frequency63.addValue((java.lang.Object) long78);
        long long81 = frequency63.getCumFreq((-1L));
        long long82 = frequency52.getCumFreq((java.lang.Object) (-1L));
        long long84 = frequency52.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        java.lang.String str85 = frequency52.toString();
        frequency52.addValue((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            long long88 = frequency0.getCumFreq((java.lang.Object) frequency52);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str10, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(wildcardComparableItor38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n" + "'", str85, "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        long long11 = frequency0.getCount((int) ' ');
        boolean boolean13 = frequency0.equals((java.lang.Object) true);
        double double15 = frequency0.getCumPct((java.lang.Object) 0.0f);
        double double17 = frequency0.getCumPct((java.lang.Object) "");
        double double19 = frequency0.getCumPct(0);
        double double21 = frequency0.getPct((int) (byte) -1);
        long long23 = frequency0.getCount('4');
        double double25 = frequency0.getCumPct('4');
        org.apache.commons.math.stat.Frequency frequency26 = new org.apache.commons.math.stat.Frequency();
        long long28 = frequency26.getCumFreq('#');
        double double30 = frequency26.getPct((java.lang.Object) (-1.0d));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor31 = frequency26.valuesIterator();
        long long33 = frequency26.getCumFreq(0L);
        long long35 = frequency26.getCount(100L);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor36 = frequency26.valuesIterator();
        // The following exception was thrown during execution in test generation
        try {
            long long37 = frequency0.getCount((java.lang.Object) frequency26);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(wildcardComparableItor31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor36);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        long long10 = frequency0.getCumFreq((long) (short) 0);
        frequency0.addValue((long) 100);
        double double14 = frequency0.getPct((long) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Comparable<java.lang.String>) "hi!");
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double10 = frequency0.getPct((-1));
        long long12 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long14 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        double double16 = frequency0.getCumPct(0L);
        frequency0.addValue('#');
        long long20 = frequency0.getCount((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor21 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency();
        long long24 = frequency22.getCumFreq('#');
        double double26 = frequency22.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor27 = frequency22.valuesIterator();
        frequency22.addValue('#');
        double double31 = frequency22.getPct((int) '4');
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency();
        long long34 = frequency32.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency35 = new org.apache.commons.math.stat.Frequency();
        long long37 = frequency35.getCumFreq('#');
        double double39 = frequency35.getPct('#');
        double double40 = frequency32.getCumPct((java.lang.Object) '#');
        java.lang.Object obj41 = null;
        double double42 = frequency32.getPct(obj41);
        long long44 = frequency32.getCumFreq(0L);
        long long46 = frequency32.getCount((long) '4');
        java.lang.String str47 = frequency32.toString();
        double double48 = frequency22.getCumPct((java.lang.Object) str47);
        double double50 = frequency22.getCumPct(10);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Object) double50);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(wildcardComparableItor27);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str47, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        double double17 = frequency10.getPct((int) (byte) 100);
        long long19 = frequency10.getCount(10);
        double double20 = frequency0.getPct((java.lang.Object) 10);
        long long22 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency();
        long long25 = frequency23.getCumFreq('#');
        double double27 = frequency23.getPct('#');
        long long29 = frequency23.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        frequency23.addValue((long) 0);
        long long33 = frequency23.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        frequency23.addValue((int) ' ');
        boolean boolean36 = frequency0.equals((java.lang.Object) frequency23);
        double double38 = frequency0.getPct((long) 0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        long long6 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long8 = frequency0.getCount((java.lang.Object) 1.0d);
        double double10 = frequency0.getCumPct((int) (byte) 10);
        long long12 = frequency0.getCount((int) '4');
        long long14 = frequency0.getCumFreq('a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCumFreq((java.lang.Object) 10.0d);
        frequency0.addValue((long) (byte) 1);
        double double10 = frequency0.getCumPct((int) 'a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        long long13 = frequency11.getCumFreq('#');
        long long15 = frequency11.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long17 = frequency11.getCumFreq((int) (short) -1);
        double double19 = frequency11.getCumPct(1L);
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        long long22 = frequency20.getCumFreq('#');
        double double24 = frequency20.getPct((java.lang.Object) (-1.0d));
        long long26 = frequency20.getCount('#');
        frequency11.addValue((java.lang.Object) long26);
        long long29 = frequency11.getCumFreq((-1L));
        long long30 = frequency0.getCumFreq((java.lang.Object) (-1L));
        frequency0.addValue((java.lang.Integer) 0);
        double double34 = frequency0.getPct((long) (short) 1);
        long long36 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.5d + "'", double34 == 0.5d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        double double6 = frequency0.getPct((int) '4');
        long long8 = frequency0.getCumFreq((long) (byte) -1);
        long long10 = frequency0.getCumFreq(0L);
        long long12 = frequency0.getCumFreq('a');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        double double16 = frequency0.getPct('4');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        frequency0.addValue((long) (byte) -1);
        org.apache.commons.math.stat.Frequency frequency8 = new org.apache.commons.math.stat.Frequency();
        long long10 = frequency8.getCumFreq('#');
        double double12 = frequency8.getPct('#');
        frequency8.addValue(100);
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        long long17 = frequency15.getCumFreq('#');
        double double19 = frequency15.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor20 = frequency15.valuesIterator();
        double double22 = frequency15.getCumPct('#');
        frequency15.addValue((int) (short) -1);
        frequency15.addValue((int) '4');
        double double28 = frequency15.getCumPct(' ');
        frequency15.addValue((java.lang.Integer) 10);
        boolean boolean31 = frequency8.equals((java.lang.Object) frequency15);
        long long33 = frequency8.getCumFreq((int) '#');
        frequency8.clear();
        boolean boolean35 = frequency0.equals((java.lang.Object) frequency8);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(wildcardComparableItor20);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        boolean boolean7 = frequency0.equals((java.lang.Object) 0.5d);
        java.lang.String str8 = frequency0.toString();
        long long10 = frequency0.getCount((long) 0);
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        long long13 = frequency11.getCumFreq('#');
        double double15 = frequency11.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor16 = frequency11.valuesIterator();
        boolean boolean17 = frequency0.equals((java.lang.Object) wildcardComparableItor16);
        long long19 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        double double21 = frequency0.getPct((long) (short) 100);
        long long23 = frequency0.getCount(0);
        frequency0.addValue((java.lang.Integer) 100);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue('4');
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(wildcardComparableItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        long long6 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((long) (short) 1);
        long long10 = frequency0.getCumFreq('a');
        double double12 = frequency0.getPct('a');
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        long long15 = frequency13.getCumFreq('#');
        double double17 = frequency13.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor18 = frequency13.valuesIterator();
        double double20 = frequency13.getPct((int) (byte) 100);
        long long22 = frequency13.getCount(10);
        java.lang.String str23 = frequency13.toString();
        long long25 = frequency13.getCount((int) '4');
        double double27 = frequency13.getPct((int) '#');
        long long29 = frequency13.getCumFreq((long) (byte) 10);
        boolean boolean30 = frequency0.equals((java.lang.Object) long29);
        long long31 = frequency0.getSumFreq();
        double double33 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n");
        long long34 = frequency0.getSumFreq();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(wildcardComparableItor18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str23, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCumFreq(0L);
        long long14 = frequency0.getCumFreq((long) (byte) 100);
        long long16 = frequency0.getCount(' ');
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        long long19 = frequency17.getCumFreq('#');
        double double21 = frequency17.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor22 = frequency17.valuesIterator();
        java.lang.String str23 = frequency17.toString();
        double double25 = frequency17.getPct('4');
        frequency17.addValue((java.lang.Integer) (-1));
        double double29 = frequency17.getPct('4');
        double double31 = frequency17.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        frequency17.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double33 = frequency0.getPct((java.lang.Object) frequency17);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(wildcardComparableItor22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str23, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double8 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double10 = frequency0.getPct('#');
        long long11 = frequency0.getSumFreq();
        double double13 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        long long15 = frequency0.getCumFreq('a');
        long long17 = frequency0.getCumFreq('#');
        long long19 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        frequency0.addValue(100);
        double double6 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double8 = frequency0.getCumPct((int) '#');
        long long10 = frequency0.getCount((long) 0);
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        long long13 = frequency11.getCumFreq('#');
        long long15 = frequency11.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long17 = frequency11.getCumFreq((int) (short) -1);
        frequency11.addValue((java.lang.Integer) 10);
        double double21 = frequency11.getPct('#');
        double double23 = frequency11.getCumPct((long) (short) 10);
        double double24 = frequency0.getPct((java.lang.Object) (short) 10);
        double double26 = frequency0.getCumPct('4');
        double double28 = frequency0.getPct((int) (byte) 0);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor29 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor29);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        double double17 = frequency10.getPct((int) (byte) 100);
        long long19 = frequency10.getCount(10);
        double double20 = frequency0.getPct((java.lang.Object) 10);
        long long22 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double24 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long25 = frequency0.getSumFreq();
        long long27 = frequency0.getCumFreq((long) 'a');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor28 = frequency0.valuesIterator();
        double double30 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        long long32 = frequency0.getCount('4');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor28);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        frequency0.addValue((int) '4');
        long long13 = frequency0.getCount(0);
        double double15 = frequency0.getPct((long) (byte) -1);
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        long long18 = frequency16.getCumFreq('#');
        long long20 = frequency16.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency16.addValue((int) (byte) 0);
        long long24 = frequency16.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        frequency16.addValue((java.lang.Integer) 1);
        double double27 = frequency0.getCumPct((java.lang.Object) 1);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor28 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.5d + "'", double27 == 0.5d);
        org.junit.Assert.assertNotNull(wildcardComparableItor28);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str5 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency6 = new org.apache.commons.math.stat.Frequency();
        long long8 = frequency6.getCumFreq('#');
        double double10 = frequency6.getPct((long) (short) 100);
        long long11 = frequency0.getCount((java.lang.Object) (short) 100);
        double double13 = frequency0.getPct('4');
        double double15 = frequency0.getCumPct((long) ' ');
        double double17 = frequency0.getCumPct((int) (short) 1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str5, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        long long11 = frequency0.getCount((int) ' ');
        boolean boolean13 = frequency0.equals((java.lang.Object) true);
        double double15 = frequency0.getCumPct((java.lang.Object) 0.0f);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor16 = frequency0.valuesIterator();
        double double18 = frequency0.getCumPct((long) ' ');
        java.lang.Class<?> wildcardClass19 = frequency0.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCount(10);
        java.lang.String str13 = frequency0.toString();
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor16 = frequency0.valuesIterator();
        long long18 = frequency0.getCumFreq('4');
        long long19 = frequency0.getSumFreq();
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        long long22 = frequency20.getCumFreq('#');
        long long24 = frequency20.getCumFreq((java.lang.Object) (byte) 1);
        long long26 = frequency20.getCumFreq((java.lang.Object) 10.0d);
        frequency20.addValue((long) (byte) 1);
        double double30 = frequency20.getCumPct((int) 'a');
        org.apache.commons.math.stat.Frequency frequency31 = new org.apache.commons.math.stat.Frequency();
        long long33 = frequency31.getCumFreq('#');
        long long35 = frequency31.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long37 = frequency31.getCumFreq((int) (short) -1);
        double double39 = frequency31.getCumPct(1L);
        org.apache.commons.math.stat.Frequency frequency40 = new org.apache.commons.math.stat.Frequency();
        long long42 = frequency40.getCumFreq('#');
        double double44 = frequency40.getPct((java.lang.Object) (-1.0d));
        long long46 = frequency40.getCount('#');
        frequency31.addValue((java.lang.Object) long46);
        long long49 = frequency31.getCumFreq((-1L));
        long long50 = frequency20.getCumFreq((java.lang.Object) (-1L));
        long long52 = frequency20.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        double double53 = frequency0.getCumPct((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long55 = frequency0.getCumFreq((long) (byte) 0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str13, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertNotNull(wildcardComparableItor16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        boolean boolean7 = frequency0.equals((java.lang.Object) 0.5d);
        frequency0.addValue('a');
        long long11 = frequency0.getCount(0);
        long long13 = frequency0.getCumFreq(10);
        long long15 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        java.lang.String str7 = frequency0.toString();
        long long9 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        frequency0.addValue(1L);
        long long13 = frequency0.getCumFreq((int) '4');
        long long15 = frequency0.getCumFreq('#');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str7, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        long long6 = frequency0.getSumFreq();
        double double8 = frequency0.getCumPct('#');
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        long long11 = frequency9.getCumFreq('#');
        long long13 = frequency9.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long15 = frequency9.getCumFreq((int) (short) -1);
        frequency9.addValue((java.lang.Integer) 10);
        double double19 = frequency9.getCumPct('#');
        frequency0.addValue((java.lang.Object) '#');
        long long22 = frequency0.getCount((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((int) (byte) 100);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCumFreq((int) (short) -1);
        double double8 = frequency0.getCumPct(1L);
        long long10 = frequency0.getCount(' ');
        java.lang.Object obj11 = null;
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue(obj11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double10 = frequency0.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor11 = frequency0.valuesIterator();
        frequency0.addValue(0L);
        long long15 = frequency0.getCumFreq(' ');
        long long17 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency();
        long long20 = frequency18.getCumFreq('#');
        double double22 = frequency18.getPct((java.lang.Object) (-1.0d));
        long long24 = frequency18.getCount('#');
        double double25 = frequency0.getCumPct((java.lang.Object) '#');
        double double27 = frequency0.getCumPct((long) (short) -1);
        java.lang.String str28 = frequency0.toString();
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n\t1\t100%\t100%\n");
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(wildcardComparableItor11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n" + "'", str28, "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        double double6 = frequency0.getPct((int) '4');
        double double8 = frequency0.getCumPct((long) (short) 1);
        frequency0.addValue('4');
        double double12 = frequency0.getCumPct(100);
        long long13 = frequency0.getSumFreq();
        long long14 = frequency0.getSumFreq();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        long long6 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long8 = frequency0.getCumFreq((long) (short) -1);
        double double10 = frequency0.getPct((long) (byte) 0);
        long long12 = frequency0.getCount(0L);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor13 = frequency0.valuesIterator();
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        long long18 = frequency16.getCumFreq('#');
        long long20 = frequency16.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str21 = frequency16.toString();
        long long23 = frequency16.getCount(0);
        frequency16.clear();
        double double26 = frequency16.getCumPct((int) 'a');
        double double28 = frequency16.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        frequency16.addValue((int) (short) 10);
        long long31 = frequency0.getCount((java.lang.Object) (short) 10);
        double double33 = frequency0.getCumPct((-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor13);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str5 = frequency0.toString();
        double double7 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        java.lang.String str8 = frequency0.toString();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \nhi!\t1\t100%\t100%\n" + "'", str5, "Value \t Freq. \t Pct. \t Cum Pct. \nhi!\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \nhi!\t1\t100%\t100%\n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \nhi!\t1\t100%\t100%\n");
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        double double9 = frequency0.getPct((long) (short) 0);
        double double11 = frequency0.getCumPct('#');
        double double13 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        long long6 = frequency0.getSumFreq();
        double double8 = frequency0.getCumPct('#');
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        long long11 = frequency9.getCumFreq('#');
        long long13 = frequency9.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long15 = frequency9.getCumFreq((int) (short) -1);
        frequency9.addValue((java.lang.Integer) 10);
        double double19 = frequency9.getCumPct('#');
        frequency0.addValue((java.lang.Object) '#');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor21 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency();
        long long24 = frequency22.getCumFreq('#');
        long long26 = frequency22.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long28 = frequency22.getCumFreq((int) (short) -1);
        double double30 = frequency22.getCumPct(1L);
        long long32 = frequency22.getCount(' ');
        org.apache.commons.math.stat.Frequency frequency33 = new org.apache.commons.math.stat.Frequency();
        long long35 = frequency33.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency36 = new org.apache.commons.math.stat.Frequency();
        long long38 = frequency36.getCumFreq('#');
        double double40 = frequency36.getPct('#');
        double double41 = frequency33.getCumPct((java.lang.Object) '#');
        java.lang.Object obj42 = null;
        double double43 = frequency33.getPct(obj42);
        long long45 = frequency33.getCumFreq(0L);
        double double47 = frequency33.getPct((long) '#');
        double double49 = frequency33.getPct((java.lang.Comparable<java.lang.String>) "");
        boolean boolean50 = frequency22.equals((java.lang.Object) double49);
        double double51 = frequency0.getCumPct((java.lang.Object) boolean50);
        long long53 = frequency0.getCount(0);
        double double55 = frequency0.getPct((long) 1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        long long11 = frequency0.getCount((int) ' ');
        boolean boolean13 = frequency0.equals((java.lang.Object) true);
        long long15 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double17 = frequency0.getPct('4');
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency();
        long long20 = frequency18.getCumFreq('#');
        double double22 = frequency18.getPct('#');
        long long24 = frequency18.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        frequency18.addValue((long) 0);
        frequency0.addValue((java.lang.Object) 0);
        frequency0.addValue((java.lang.Integer) 100);
        double double31 = frequency0.getPct((int) '#');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCumFreq(0L);
        long long14 = frequency0.getCumFreq((long) (byte) 100);
        frequency0.addValue('4');
        java.lang.String str17 = frequency0.toString();
        double double19 = frequency0.getPct((int) (short) 1);
        frequency0.clear();
        java.lang.Class<?> wildcardClass21 = frequency0.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n" + "'", str17, "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCumFreq((int) (short) -1);
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency0.clear();
        frequency0.addValue((long) '4');
        double double13 = frequency0.getCumPct((long) 100);
        long long14 = frequency0.getSumFreq();
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        long long17 = frequency15.getCumFreq('#');
        double double19 = frequency15.getPct((java.lang.Object) (-1.0d));
        double double21 = frequency15.getPct('a');
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency();
        long long24 = frequency22.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency25 = new org.apache.commons.math.stat.Frequency();
        long long27 = frequency25.getCumFreq('#');
        double double29 = frequency25.getPct('#');
        double double30 = frequency22.getCumPct((java.lang.Object) '#');
        long long32 = frequency22.getCumFreq((long) (short) 0);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor33 = frequency22.valuesIterator();
        boolean boolean34 = frequency15.equals((java.lang.Object) frequency22);
        // The following exception was thrown during execution in test generation
        try {
            long long35 = frequency0.getCount((java.lang.Object) frequency22);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        java.lang.String str7 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency8 = new org.apache.commons.math.stat.Frequency();
        long long10 = frequency8.getCumFreq('#');
        double double12 = frequency8.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor13 = frequency8.valuesIterator();
        java.lang.String str14 = frequency8.toString();
        double double16 = frequency8.getPct('4');
        frequency8.addValue((java.lang.Integer) (-1));
        double double20 = frequency8.getPct('4');
        boolean boolean21 = frequency0.equals((java.lang.Object) double20);
        long long23 = frequency0.getCount('a');
        double double25 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nhi!\t1\t100%\t100%\n");
        java.lang.String str26 = frequency0.toString();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str7, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(wildcardComparableItor13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str14, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str26, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCount((long) '4');
        frequency0.addValue((java.lang.Integer) 100);
        long long16 = frequency0.getCumFreq((int) (short) -1);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor17 = frequency0.valuesIterator();
        double double19 = frequency0.getPct(10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCount(1);
        long long7 = frequency0.getSumFreq();
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t33%\t33%\n2\t1\t33%\t67%\n10\t1\t33%\t100%\n");
        long long11 = frequency0.getCount((long) 10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        double double6 = frequency0.getPct((int) '4');
        double double8 = frequency0.getCumPct((long) (short) 1);
        frequency0.addValue('4');
        double double12 = frequency0.getCumPct(100);
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        long long15 = frequency13.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        long long18 = frequency16.getCumFreq('#');
        double double20 = frequency16.getPct('#');
        double double21 = frequency13.getCumPct((java.lang.Object) '#');
        java.lang.Object obj22 = null;
        double double23 = frequency13.getPct(obj22);
        long long25 = frequency13.getCumFreq(0L);
        double double27 = frequency13.getPct((long) '#');
        double double29 = frequency13.getPct((java.lang.Comparable<java.lang.String>) "");
        frequency13.addValue('a');
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency();
        long long34 = frequency32.getCumFreq('#');
        double double36 = frequency32.getPct('#');
        long long38 = frequency32.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        long long39 = frequency13.getCumFreq((java.lang.Object) "hi!");
        org.apache.commons.math.stat.Frequency frequency40 = new org.apache.commons.math.stat.Frequency();
        long long42 = frequency40.getCumFreq('#');
        long long44 = frequency40.getCumFreq((java.lang.Object) (byte) 1);
        long long46 = frequency40.getCumFreq((java.lang.Object) 10.0d);
        frequency40.addValue((long) (byte) 1);
        double double50 = frequency40.getCumPct((int) 'a');
        double double52 = frequency40.getCumPct((int) (short) 10);
        double double53 = frequency13.getCumPct((java.lang.Object) double52);
        long long55 = frequency13.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        long long57 = frequency13.getCount('a');
        long long58 = frequency0.getCount((java.lang.Object) 'a');
        org.apache.commons.math.stat.Frequency frequency59 = new org.apache.commons.math.stat.Frequency();
        long long61 = frequency59.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency62 = new org.apache.commons.math.stat.Frequency();
        long long64 = frequency62.getCumFreq('#');
        double double66 = frequency62.getPct('#');
        double double67 = frequency59.getCumPct((java.lang.Object) '#');
        java.lang.Object obj68 = null;
        double double69 = frequency59.getPct(obj68);
        long long71 = frequency59.getCumFreq(0L);
        long long73 = frequency59.getCumFreq((long) (byte) 100);
        long long74 = frequency59.getSumFreq();
        long long76 = frequency59.getCumFreq((int) (short) -1);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor77 = frequency59.valuesIterator();
        frequency59.addValue((long) (short) 1);
        boolean boolean80 = frequency0.equals((java.lang.Object) frequency59);
        long long82 = frequency59.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        double double10 = frequency0.getPct((long) (short) -1);
        double double12 = frequency0.getCumPct((int) (short) 100);
        boolean boolean14 = frequency0.equals((java.lang.Object) 1.0f);
        double double16 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        long long18 = frequency0.getCount('a');
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        long long21 = frequency19.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency();
        long long24 = frequency22.getCumFreq('#');
        double double26 = frequency22.getPct('#');
        double double27 = frequency19.getCumPct((java.lang.Object) '#');
        java.lang.Object obj28 = null;
        double double29 = frequency19.getPct(obj28);
        long long31 = frequency19.getCumFreq(0L);
        double double33 = frequency19.getPct((long) '#');
        org.apache.commons.math.stat.Frequency frequency34 = new org.apache.commons.math.stat.Frequency();
        long long36 = frequency34.getCumFreq('#');
        double double38 = frequency34.getPct((long) (short) 100);
        java.lang.String str39 = frequency34.toString();
        boolean boolean40 = frequency19.equals((java.lang.Object) str39);
        double double42 = frequency19.getPct(0L);
        double double44 = frequency19.getCumPct(100L);
        org.apache.commons.math.stat.Frequency frequency45 = new org.apache.commons.math.stat.Frequency();
        long long47 = frequency45.getCumFreq('#');
        double double49 = frequency45.getPct((java.lang.Object) (-1.0d));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor50 = frequency45.valuesIterator();
        boolean boolean52 = frequency45.equals((java.lang.Object) 0.5d);
        java.lang.String str53 = frequency45.toString();
        long long55 = frequency45.getCount((long) 0);
        org.apache.commons.math.stat.Frequency frequency56 = new org.apache.commons.math.stat.Frequency();
        long long58 = frequency56.getCumFreq('#');
        double double60 = frequency56.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor61 = frequency56.valuesIterator();
        boolean boolean62 = frequency45.equals((java.lang.Object) wildcardComparableItor61);
        double double63 = frequency19.getPct((java.lang.Object) boolean62);
        long long65 = frequency19.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor66 = frequency19.valuesIterator();
        long long68 = frequency19.getCumFreq(0L);
        java.lang.Object obj69 = null;
        double double70 = frequency19.getPct(obj69);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue(obj69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str39, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(wildcardComparableItor50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str53, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(wildcardComparableItor61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        long long6 = frequency0.getSumFreq();
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        double double10 = frequency0.getCumPct((-1L));
        long long12 = frequency0.getCumFreq(10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCumFreq((int) (short) -1);
        double double8 = frequency0.getCumPct(1L);
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        long long11 = frequency9.getCumFreq('#');
        double double13 = frequency9.getPct((java.lang.Object) (-1.0d));
        long long15 = frequency9.getCount('#');
        frequency0.addValue((java.lang.Object) long15);
        long long18 = frequency0.getCumFreq((-1L));
        frequency0.addValue(0L);
        double double22 = frequency0.getCumPct(' ');
        double double24 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        frequency0.addValue((long) ' ');
        long long28 = frequency0.getCount((int) (short) 10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double10 = frequency0.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor11 = frequency0.valuesIterator();
        frequency0.addValue(0L);
        long long15 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        double double17 = frequency0.getCumPct((int) (short) 100);
        double double19 = frequency0.getPct('4');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(wildcardComparableItor11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCumFreq((java.lang.Object) 10.0d);
        frequency0.addValue((long) (byte) 1);
        double double10 = frequency0.getCumPct((int) 'a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        long long13 = frequency11.getCumFreq('#');
        long long15 = frequency11.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long17 = frequency11.getCumFreq((int) (short) -1);
        double double19 = frequency11.getCumPct(1L);
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        long long22 = frequency20.getCumFreq('#');
        double double24 = frequency20.getPct((java.lang.Object) (-1.0d));
        long long26 = frequency20.getCount('#');
        frequency11.addValue((java.lang.Object) long26);
        long long29 = frequency11.getCumFreq((-1L));
        long long30 = frequency0.getCumFreq((java.lang.Object) (-1L));
        long long32 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        double double34 = frequency0.getPct('a');
        java.lang.String str35 = frequency0.toString();
        long long37 = frequency0.getCount(' ');
        double double39 = frequency0.getPct('a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n" + "'", str35, "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double10 = frequency0.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor11 = frequency0.valuesIterator();
        double double13 = frequency0.getPct('4');
        java.lang.String str14 = frequency0.toString();
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        long long18 = frequency16.getCumFreq('#');
        double double20 = frequency16.getPct('#');
        double double22 = frequency16.getPct((java.lang.Object) (-1.0f));
        long long24 = frequency16.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double26 = frequency16.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor27 = frequency16.valuesIterator();
        double double29 = frequency16.getPct('4');
        java.lang.String str30 = frequency16.toString();
        boolean boolean31 = frequency0.equals((java.lang.Object) frequency16);
        frequency0.addValue('a');
        long long35 = frequency0.getCumFreq('a');
        org.apache.commons.math.stat.Frequency frequency36 = new org.apache.commons.math.stat.Frequency();
        long long38 = frequency36.getCumFreq('#');
        double double40 = frequency36.getPct((long) (short) 100);
        long long42 = frequency36.getCount((java.lang.Comparable<java.lang.String>) "");
        double double44 = frequency36.getPct(' ');
        frequency36.addValue((long) (byte) 10);
        long long48 = frequency36.getCount((int) (byte) -1);
        boolean boolean49 = frequency0.equals((java.lang.Object) frequency36);
        long long51 = frequency0.getCount((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(wildcardComparableItor11);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str14, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(wildcardComparableItor27);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str30, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        long long11 = frequency0.getCount((int) ' ');
        boolean boolean13 = frequency0.equals((java.lang.Object) true);
        double double15 = frequency0.getCumPct((java.lang.Object) 0.0f);
        double double17 = frequency0.getCumPct((java.lang.Object) "");
        double double19 = frequency0.getCumPct(0);
        double double21 = frequency0.getPct((int) (byte) -1);
        long long23 = frequency0.getCount('4');
        double double25 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency26 = new org.apache.commons.math.stat.Frequency();
        long long28 = frequency26.getCumFreq('#');
        double double30 = frequency26.getPct('#');
        double double32 = frequency26.getPct((java.lang.Object) (-1.0f));
        long long34 = frequency26.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double36 = frequency26.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor37 = frequency26.valuesIterator();
        double double39 = frequency26.getPct('4');
        long long41 = frequency26.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long43 = frequency26.getCount((int) '4');
        frequency26.clear();
        boolean boolean45 = frequency0.equals((java.lang.Object) frequency26);
        long long47 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t50%\t50%\n0\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(wildcardComparableItor37);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCount(1);
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        long long9 = frequency7.getCumFreq('#');
        long long11 = frequency7.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long13 = frequency7.getCumFreq((int) (short) -1);
        long long15 = frequency7.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency7.clear();
        java.lang.Object obj17 = null;
        double double18 = frequency7.getPct(obj17);
        double double20 = frequency7.getPct('#');
        long long22 = frequency7.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long24 = frequency7.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long25 = frequency0.getCumFreq((java.lang.Object) long24);
        long long27 = frequency0.getCount((long) (short) 0);
        long long29 = frequency0.getCount((int) 'a');
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency();
        long long32 = frequency30.getCumFreq('#');
        double double34 = frequency30.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor35 = frequency30.valuesIterator();
        double double37 = frequency30.getCumPct('#');
        long long39 = frequency30.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        frequency30.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        long long43 = frequency30.getCount('#');
        long long45 = frequency30.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        frequency30.addValue((java.lang.Comparable<java.lang.String>) "hi!");
        // The following exception was thrown during execution in test generation
        try {
            double double48 = frequency0.getPct((java.lang.Object) frequency30);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(wildcardComparableItor35);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        double double17 = frequency10.getCumPct('#');
        long long19 = frequency10.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        long long22 = frequency20.getCumFreq('#');
        double double24 = frequency20.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor25 = frequency20.valuesIterator();
        double double27 = frequency20.getPct((int) (byte) 100);
        long long29 = frequency20.getCount(10);
        double double30 = frequency10.getPct((java.lang.Object) 10);
        long long32 = frequency10.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        long long34 = frequency10.getCount('#');
        double double36 = frequency10.getCumPct(0L);
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency();
        long long39 = frequency37.getCumFreq('#');
        double double41 = frequency37.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor42 = frequency37.valuesIterator();
        double double44 = frequency37.getCumPct('#');
        long long46 = frequency37.getCount((java.lang.Object) (short) -1);
        boolean boolean47 = frequency10.equals((java.lang.Object) frequency37);
        double double48 = frequency0.getCumPct((java.lang.Object) boolean47);
        double double50 = frequency0.getCumPct((long) (short) 1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(wildcardComparableItor25);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(wildcardComparableItor42);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        double double6 = frequency0.getCumPct(0);
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        long long10 = frequency0.getCumFreq(100);
        long long12 = frequency0.getCount((long) 1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCumFreq((int) (short) -1);
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getPct('#');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCumFreq(0L);
        long long14 = frequency0.getCount((long) '4');
        frequency0.addValue(' ');
        long long18 = frequency0.getCumFreq(' ');
        long long20 = frequency0.getCumFreq('4');
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency();
        long long23 = frequency21.getCumFreq('#');
        double double25 = frequency21.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor26 = frequency21.valuesIterator();
        double double28 = frequency21.getCumPct('#');
        frequency21.addValue((int) (short) -1);
        boolean boolean31 = frequency0.equals((java.lang.Object) frequency21);
        frequency0.clear();
        long long34 = frequency0.getCumFreq(0);
        org.apache.commons.math.stat.Frequency frequency35 = new org.apache.commons.math.stat.Frequency();
        long long37 = frequency35.getCumFreq('#');
        double double39 = frequency35.getPct((long) (short) 100);
        long long41 = frequency35.getCount((java.lang.Comparable<java.lang.String>) "");
        double double43 = frequency35.getPct(' ');
        long long45 = frequency35.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long47 = frequency35.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double49 = frequency35.getPct((int) (byte) 100);
        frequency35.addValue('a');
        double double52 = frequency0.getPct((java.lang.Object) 'a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(wildcardComparableItor26);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCumFreq((int) (short) -1);
        double double8 = frequency0.getCumPct(1L);
        long long10 = frequency0.getCount(' ');
        double double12 = frequency0.getPct(10);
        frequency0.addValue((java.lang.Integer) 100);
        long long16 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n\t1\t100%\t100%\n");
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        frequency0.addValue((java.lang.Integer) 0);
        long long10 = frequency0.getCumFreq(1L);
        frequency0.addValue(2L);
        frequency0.addValue((java.lang.Integer) 10);
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        long long17 = frequency15.getCumFreq('#');
        long long19 = frequency15.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str20 = frequency15.toString();
        long long21 = frequency0.getCount((java.lang.Object) str20);
        frequency0.addValue((int) (short) 100);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str20, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCumFreq(0L);
        long long14 = frequency0.getCumFreq((long) (byte) 100);
        frequency0.addValue('4');
        double double18 = frequency0.getPct((int) '#');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor19 = frequency0.valuesIterator();
        long long21 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        java.lang.String str22 = frequency0.toString();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n" + "'", str22, "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount('a');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor10 = frequency0.valuesIterator();
        long long12 = frequency0.getCumFreq((long) ' ');
        frequency0.addValue(0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double8 = frequency0.getPct(' ');
        long long10 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long12 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double14 = frequency0.getPct((int) (byte) 100);
        frequency0.addValue((java.lang.Integer) 10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCumFreq((int) (short) -1);
        double double8 = frequency0.getCumPct(1L);
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        long long11 = frequency9.getCumFreq('#');
        double double13 = frequency9.getPct((java.lang.Object) (-1.0d));
        long long15 = frequency9.getCount('#');
        frequency0.addValue((java.lang.Object) long15);
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        long long19 = frequency17.getCumFreq('#');
        double double21 = frequency17.getPct((long) (short) 100);
        long long23 = frequency17.getCount((java.lang.Comparable<java.lang.String>) "");
        long long25 = frequency17.getCumFreq((int) (short) 0);
        double double27 = frequency17.getPct(' ');
        boolean boolean28 = frequency0.equals((java.lang.Object) frequency17);
        frequency17.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        // The following exception was thrown during execution in test generation
        try {
            frequency17.addValue((long) (byte) -1);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        java.lang.String str6 = frequency0.toString();
        double double8 = frequency0.getPct('4');
        frequency0.addValue((java.lang.Integer) (-1));
        frequency0.addValue((long) ' ');
        long long13 = frequency0.getSumFreq();
        long long14 = frequency0.getSumFreq();
        frequency0.clear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str6, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2L + "'", long13 == 2L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2L + "'", long14 == 2L);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long10 = frequency0.getSumFreq();
        frequency0.addValue((int) 'a');
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        long long15 = frequency13.getCumFreq('#');
        double double17 = frequency13.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor18 = frequency13.valuesIterator();
        long long19 = frequency13.getSumFreq();
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor20 = frequency13.valuesIterator();
        long long22 = frequency13.getCount((long) 100);
        long long24 = frequency13.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        double double26 = frequency13.getCumPct((int) '4');
        long long27 = frequency13.getSumFreq();
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Object) frequency13);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(wildcardComparableItor18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        long long11 = frequency0.getCount('a');
        long long13 = frequency0.getCount(10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        double double6 = frequency0.getCumPct(0);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor7 = frequency0.valuesIterator();
        frequency0.addValue((java.lang.Integer) 10);
        java.lang.Object obj10 = null;
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue(obj10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(wildcardComparableItor7);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        java.lang.String str6 = frequency0.toString();
        double double8 = frequency0.getPct('4');
        frequency0.addValue((java.lang.Integer) (-1));
        double double12 = frequency0.getPct('4');
        double double14 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        long long17 = frequency15.getCumFreq('#');
        double double19 = frequency15.getPct('#');
        double double21 = frequency15.getPct((java.lang.Object) (-1.0f));
        long long23 = frequency15.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double25 = frequency15.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor26 = frequency15.valuesIterator();
        frequency15.addValue(0L);
        long long30 = frequency15.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long31 = frequency0.getCumFreq((java.lang.Object) "hi!");
        long long33 = frequency0.getCumFreq((long) (short) -1);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor34 = frequency0.valuesIterator();
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor35 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency36 = new org.apache.commons.math.stat.Frequency();
        long long38 = frequency36.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency39 = new org.apache.commons.math.stat.Frequency();
        long long41 = frequency39.getCumFreq('#');
        double double43 = frequency39.getPct('#');
        double double44 = frequency36.getCumPct((java.lang.Object) '#');
        java.lang.Object obj45 = null;
        double double46 = frequency36.getPct(obj45);
        long long48 = frequency36.getCumFreq(0L);
        double double50 = frequency36.getPct((long) (short) 100);
        double double52 = frequency36.getPct(0);
        org.apache.commons.math.stat.Frequency frequency53 = new org.apache.commons.math.stat.Frequency();
        long long55 = frequency53.getCumFreq('#');
        double double57 = frequency53.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor58 = frequency53.valuesIterator();
        java.lang.String str59 = frequency53.toString();
        double double61 = frequency53.getPct('4');
        long long62 = frequency36.getCount((java.lang.Object) double61);
        double double63 = frequency0.getCumPct((java.lang.Object) long62);
        long long65 = frequency0.getCount((int) (short) 10);
        double double67 = frequency0.getPct((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str6, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(wildcardComparableItor26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertNotNull(wildcardComparableItor34);
        org.junit.Assert.assertNotNull(wildcardComparableItor35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(wildcardComparableItor58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str59, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getPct((int) (byte) 100);
        double double9 = frequency0.getCumPct(0);
        double double11 = frequency0.getPct((long) 10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str5 = frequency0.toString();
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "hi!");
        double double9 = frequency0.getCumPct('4');
        frequency0.clear();
        double double12 = frequency0.getPct('#');
        double double14 = frequency0.getPct((long) 100);
        long long16 = frequency0.getCount((long) 10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str5, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        long long6 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long8 = frequency0.getCount((java.lang.Object) 1.0d);
        long long10 = frequency0.getCount((int) (short) -1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double10 = frequency0.getPct((-1));
        long long12 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long14 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        long long16 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        double double18 = frequency0.getCumPct('a');
        java.lang.Comparable<java.lang.String> strComparable19 = null;
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue(strComparable19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        double double6 = frequency0.getPct(' ');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getPct((int) (byte) 100);
        long long9 = frequency0.getCount(10);
        java.lang.String str10 = frequency0.toString();
        long long12 = frequency0.getCount((int) '4');
        double double14 = frequency0.getPct((int) '#');
        long long16 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t33%\t33%\n10\t1\t33%\t67%\n52\t1\t33%\t100%\n");
        double double18 = frequency0.getCumPct((long) ' ');
        long long20 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency();
        long long23 = frequency21.getCumFreq('#');
        long long25 = frequency21.getCumFreq((java.lang.Object) (byte) 1);
        double double27 = frequency21.getPct((int) '4');
        long long29 = frequency21.getCumFreq((long) (byte) -1);
        frequency21.addValue((java.lang.Comparable<java.lang.String>) "hi!");
        double double32 = frequency0.getPct((java.lang.Object) "hi!");
        org.apache.commons.math.stat.Frequency frequency33 = new org.apache.commons.math.stat.Frequency();
        long long35 = frequency33.getCumFreq('#');
        long long37 = frequency33.getCumFreq((java.lang.Object) (byte) 1);
        long long39 = frequency33.getCount(0L);
        frequency33.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long42 = frequency33.getSumFreq();
        long long44 = frequency33.getCount((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        java.lang.String str45 = frequency33.toString();
        double double47 = frequency33.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        double double49 = frequency33.getCumPct((int) (short) -1);
        long long51 = frequency33.getCumFreq((-1));
        // The following exception was thrown during execution in test generation
        try {
            double double52 = frequency0.getPct((java.lang.Object) frequency33);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str10, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n" + "'", str45, "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        double double6 = frequency0.getCumPct('#');
        double double8 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        long long8 = frequency0.getCount(' ');
        long long10 = frequency0.getCumFreq((long) '#');
        long long12 = frequency0.getCount(100L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCount(10);
        java.lang.String str13 = frequency0.toString();
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor16 = frequency0.valuesIterator();
        frequency0.clear();
        frequency0.clear();
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        long long21 = frequency19.getCumFreq('#');
        double double23 = frequency19.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor24 = frequency19.valuesIterator();
        double double26 = frequency19.getPct((int) (byte) 100);
        long long28 = frequency19.getCount(10);
        java.lang.String str29 = frequency19.toString();
        long long31 = frequency19.getCount((int) '4');
        double double33 = frequency19.getPct((int) '#');
        long long35 = frequency19.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t33%\t33%\n10\t1\t33%\t67%\n52\t1\t33%\t100%\n");
        double double37 = frequency19.getCumPct((long) ' ');
        long long39 = frequency19.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.apache.commons.math.stat.Frequency frequency40 = new org.apache.commons.math.stat.Frequency();
        long long42 = frequency40.getCumFreq('#');
        long long44 = frequency40.getCumFreq((java.lang.Object) (byte) 1);
        double double46 = frequency40.getPct((int) '4');
        long long48 = frequency40.getCumFreq((long) (byte) -1);
        frequency40.addValue((java.lang.Comparable<java.lang.String>) "hi!");
        double double51 = frequency19.getPct((java.lang.Object) "hi!");
        double double53 = frequency19.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        long long55 = frequency19.getCumFreq(100L);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor56 = frequency19.valuesIterator();
        boolean boolean57 = frequency0.equals((java.lang.Object) wildcardComparableItor56);
        long long59 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t50%\t50%\n0\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str13, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertNotNull(wildcardComparableItor16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(wildcardComparableItor24);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str29, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double10 = frequency0.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor11 = frequency0.valuesIterator();
        frequency0.addValue(0L);
        long long15 = frequency0.getCumFreq(' ');
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        long long18 = frequency16.getCumFreq('#');
        long long20 = frequency16.getCumFreq((java.lang.Object) (byte) 1);
        long long22 = frequency16.getCount(0L);
        double double23 = frequency0.getCumPct((java.lang.Object) long22);
        double double25 = frequency0.getCumPct((int) (byte) 0);
        double double27 = frequency0.getCumPct((long) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(wildcardComparableItor11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        java.lang.String str6 = frequency0.toString();
        double double8 = frequency0.getPct('4');
        frequency0.addValue((java.lang.Integer) (-1));
        double double12 = frequency0.getPct('4');
        double double14 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        frequency0.clear();
        frequency0.addValue((long) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue(' ');
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str6, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        long long6 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long8 = frequency0.getCumFreq((long) (short) -1);
        double double10 = frequency0.getPct((long) (byte) 0);
        long long12 = frequency0.getCount(0L);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor13 = frequency0.valuesIterator();
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n");
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue('4');
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor13);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str5 = frequency0.toString();
        long long7 = frequency0.getCount(0);
        frequency0.clear();
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        long long11 = frequency9.getCumFreq('#');
        long long13 = frequency9.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str14 = frequency9.toString();
        long long16 = frequency9.getCount(0);
        frequency9.clear();
        double double19 = frequency9.getCumPct((int) 'a');
        frequency9.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double21 = frequency0.getPct((java.lang.Object) frequency9);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str5, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str14, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        frequency0.addValue((int) '4');
        double double13 = frequency0.getCumPct(' ');
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency();
        long long16 = frequency14.getCumFreq('#');
        long long18 = frequency14.getCumFreq((java.lang.Object) (byte) 1);
        double double20 = frequency14.getPct((int) '4');
        double double22 = frequency14.getCumPct((long) (short) 1);
        double double23 = frequency0.getCumPct((java.lang.Object) (short) 1);
        long long25 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double27 = frequency0.getPct((int) (byte) 10);
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency();
        long long30 = frequency28.getCumFreq('#');
        double double32 = frequency28.getPct((java.lang.Object) (-1.0d));
        long long34 = frequency28.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long36 = frequency28.getCount((int) (short) 0);
        boolean boolean37 = frequency0.equals((java.lang.Object) frequency28);
        frequency28.clear();
        java.lang.Object obj39 = null;
        long long40 = frequency28.getCumFreq(obj39);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCumFreq((int) (short) -1);
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency0.clear();
        double double11 = frequency0.getPct((int) (short) 0);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor12 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        long long15 = frequency13.getCumFreq('#');
        double double17 = frequency13.getPct((java.lang.Object) (-1.0d));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor18 = frequency13.valuesIterator();
        boolean boolean20 = frequency13.equals((java.lang.Object) 0.5d);
        java.lang.String str21 = frequency13.toString();
        long long23 = frequency13.getCount((long) 0);
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency();
        long long26 = frequency24.getCumFreq('#');
        double double28 = frequency24.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor29 = frequency24.valuesIterator();
        boolean boolean30 = frequency13.equals((java.lang.Object) wildcardComparableItor29);
        long long32 = frequency13.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        double double34 = frequency13.getPct((long) (short) 100);
        long long36 = frequency13.getCount(0);
        double double37 = frequency0.getPct((java.lang.Object) 0);
        long long39 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(wildcardComparableItor12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(wildcardComparableItor18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(wildcardComparableItor29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.lang.String str5 = frequency0.toString();
        double double7 = frequency0.getPct('#');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str5, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double8 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double10 = frequency0.getPct('#');
        long long11 = frequency0.getSumFreq();
        double double13 = frequency0.getPct(' ');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCount(0L);
        double double8 = frequency0.getPct('a');
        frequency0.clear();
        frequency0.clear();
        long long12 = frequency0.getCumFreq(0);
        double double14 = frequency0.getPct((long) 100);
        java.lang.String str15 = frequency0.toString();
        long long17 = frequency0.getCumFreq((long) (short) 10);
        frequency0.addValue(0);
        long long20 = frequency0.getSumFreq();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str15, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        double double17 = frequency10.getPct((int) (byte) 100);
        long long19 = frequency10.getCount(10);
        double double20 = frequency0.getPct((java.lang.Object) 10);
        long long22 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double24 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long25 = frequency0.getSumFreq();
        long long27 = frequency0.getCumFreq((long) 'a');
        frequency0.addValue(2L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double10 = frequency0.getPct((-1));
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        long long13 = frequency11.getCumFreq('#');
        double double15 = frequency11.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor16 = frequency11.valuesIterator();
        double double18 = frequency11.getCumPct('#');
        long long20 = frequency11.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long21 = frequency11.getSumFreq();
        double double22 = frequency0.getPct((java.lang.Object) long21);
        long long24 = frequency0.getCumFreq((long) (-1));
        double double26 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency();
        long long29 = frequency27.getCumFreq('#');
        double double31 = frequency27.getPct((java.lang.Object) (-1.0d));
        long long33 = frequency27.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long35 = frequency27.getCumFreq((long) (short) -1);
        double double37 = frequency27.getPct((long) (byte) 0);
        double double39 = frequency27.getPct('#');
        frequency27.addValue((java.lang.Integer) 0);
        double double43 = frequency27.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n\t1\t100%\t100%\n");
        double double44 = frequency0.getPct((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(wildcardComparableItor16);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCumFreq((java.lang.Object) 10.0d);
        frequency0.addValue((long) (byte) 1);
        double double10 = frequency0.getCumPct((int) 'a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        long long13 = frequency11.getCumFreq('#');
        long long15 = frequency11.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long17 = frequency11.getCumFreq((int) (short) -1);
        double double19 = frequency11.getCumPct(1L);
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        long long22 = frequency20.getCumFreq('#');
        double double24 = frequency20.getPct((java.lang.Object) (-1.0d));
        long long26 = frequency20.getCount('#');
        frequency11.addValue((java.lang.Object) long26);
        long long29 = frequency11.getCumFreq((-1L));
        long long30 = frequency0.getCumFreq((java.lang.Object) (-1L));
        long long32 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        double double34 = frequency0.getPct('a');
        double double36 = frequency0.getPct((long) '4');
        long long38 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue('#');
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        long long11 = frequency0.getCount((int) ' ');
        boolean boolean13 = frequency0.equals((java.lang.Object) true);
        double double15 = frequency0.getCumPct((java.lang.Object) 0.0f);
        double double17 = frequency0.getCumPct((java.lang.Object) "");
        double double19 = frequency0.getCumPct(0);
        double double21 = frequency0.getPct((int) (byte) -1);
        long long23 = frequency0.getCount('4');
        double double25 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double27 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        java.lang.String str28 = frequency0.toString();
        long long30 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n" + "'", str28, "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str5 = frequency0.toString();
        java.lang.String str6 = frequency0.toString();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str5, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str6, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        frequency0.addValue((int) '4');
        double double13 = frequency0.getCumPct(' ');
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency();
        long long16 = frequency14.getCumFreq('#');
        long long18 = frequency14.getCumFreq((java.lang.Object) (byte) 1);
        double double20 = frequency14.getPct((int) '4');
        double double22 = frequency14.getCumPct((long) (short) 1);
        double double23 = frequency0.getCumPct((java.lang.Object) (short) 1);
        long long25 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double27 = frequency0.getPct((int) (byte) 10);
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency();
        long long30 = frequency28.getCumFreq('#');
        double double32 = frequency28.getPct((java.lang.Object) (-1.0d));
        long long34 = frequency28.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long36 = frequency28.getCount((int) (short) 0);
        boolean boolean37 = frequency0.equals((java.lang.Object) frequency28);
        long long39 = frequency28.getCumFreq(1);
        double double41 = frequency28.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        long long6 = frequency0.getSumFreq();
        double double8 = frequency0.getCumPct('#');
        double double10 = frequency0.getCumPct((int) (byte) 1);
        long long12 = frequency0.getCumFreq(0);
        long long14 = frequency0.getCumFreq((int) ' ');
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        long long17 = frequency15.getCumFreq('#');
        double double19 = frequency15.getPct('#');
        double double21 = frequency15.getPct((java.lang.Object) (-1.0f));
        long long23 = frequency15.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double25 = frequency15.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor26 = frequency15.valuesIterator();
        frequency15.addValue(0L);
        long long30 = frequency15.getCumFreq(' ');
        double double32 = frequency15.getPct('#');
        frequency15.clear();
        double double35 = frequency15.getPct((-1));
        double double36 = frequency0.getCumPct((java.lang.Object) double35);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(wildcardComparableItor26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        long long7 = frequency0.getCumFreq(0L);
        long long9 = frequency0.getCount(100L);
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        long long13 = frequency0.getCumFreq((long) (byte) 100);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount('a');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor10 = frequency0.valuesIterator();
        long long12 = frequency0.getCumFreq((long) ' ');
        double double14 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        long long17 = frequency15.getCumFreq('#');
        double double19 = frequency15.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor20 = frequency15.valuesIterator();
        double double22 = frequency15.getCumPct('#');
        long long24 = frequency15.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency25 = new org.apache.commons.math.stat.Frequency();
        long long27 = frequency25.getCumFreq('#');
        double double29 = frequency25.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor30 = frequency25.valuesIterator();
        double double32 = frequency25.getPct((int) (byte) 100);
        long long34 = frequency25.getCount(10);
        double double35 = frequency15.getPct((java.lang.Object) 10);
        long long37 = frequency15.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double39 = frequency15.getPct(' ');
        double double41 = frequency15.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        long long42 = frequency15.getSumFreq();
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Object) frequency15);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(wildcardComparableItor20);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(wildcardComparableItor30);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        frequency0.addValue((int) '4');
        double double13 = frequency0.getCumPct(' ');
        frequency0.clear();
        java.lang.Object obj15 = null;
        long long16 = frequency0.getCumFreq(obj15);
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        long long19 = frequency17.getCumFreq('#');
        double double21 = frequency17.getPct((java.lang.Object) (-1.0d));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor22 = frequency17.valuesIterator();
        long long24 = frequency17.getCumFreq(0L);
        long long25 = frequency0.getCount((java.lang.Object) long24);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(wildcardComparableItor22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        java.lang.String str6 = frequency0.toString();
        double double8 = frequency0.getPct('4');
        frequency0.addValue((java.lang.Integer) (-1));
        double double12 = frequency0.getPct((int) (short) 100);
        double double14 = frequency0.getCumPct('4');
        long long16 = frequency0.getCount(100L);
        long long18 = frequency0.getCumFreq(' ');
        double double20 = frequency0.getCumPct('4');
        long long22 = frequency0.getCumFreq((int) (short) 0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str6, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double10 = frequency0.getPct((-1));
        long long12 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long14 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        double double16 = frequency0.getCumPct(0L);
        double double18 = frequency0.getCumPct((long) (short) 0);
        double double20 = frequency0.getCumPct(0);
        double double22 = frequency0.getPct(0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        double double17 = frequency10.getPct((int) (byte) 100);
        long long19 = frequency10.getCount(10);
        double double20 = frequency0.getPct((java.lang.Object) 10);
        long long22 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double24 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long25 = frequency0.getSumFreq();
        long long27 = frequency0.getCumFreq((long) 'a');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor28 = frequency0.valuesIterator();
        double double30 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        frequency0.addValue((long) (byte) -1);
        java.lang.Comparable<java.lang.String> strComparable33 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double34 = frequency0.getCumPct(strComparable33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor28);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        frequency0.addValue((java.lang.Integer) 0);
        long long10 = frequency0.getCumFreq(1L);
        frequency0.addValue(2L);
        frequency0.addValue((java.lang.Integer) 10);
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        long long17 = frequency15.getCumFreq('#');
        long long19 = frequency15.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str20 = frequency15.toString();
        long long21 = frequency0.getCount((java.lang.Object) str20);
        frequency0.addValue((java.lang.Integer) (-1));
        double double25 = frequency0.getPct((long) (short) 10);
        long long27 = frequency0.getCount((long) (short) -1);
        long long29 = frequency0.getCumFreq((long) (short) 100);
        long long31 = frequency0.getCount((long) (byte) 0);
        frequency0.addValue(0L);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue('a');
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str20, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.25d + "'", double25 == 0.25d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 4L + "'", long29 == 4L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCumFreq(0L);
        double double14 = frequency0.getPct((long) (short) 100);
        java.lang.Comparable<java.lang.String> strComparable15 = null;
        long long16 = frequency0.getCumFreq(strComparable15);
        double double18 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor19 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(wildcardComparableItor19);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long5 = frequency0.getSumFreq();
        frequency0.addValue(10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        long long14 = frequency10.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long16 = frequency10.getCumFreq((int) (short) -1);
        double double18 = frequency10.getCumPct(1L);
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        long long21 = frequency19.getCumFreq('#');
        double double23 = frequency19.getPct((java.lang.Object) (-1.0d));
        long long25 = frequency19.getCount('#');
        frequency10.addValue((java.lang.Object) long25);
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency();
        long long29 = frequency27.getCumFreq('#');
        double double31 = frequency27.getPct((long) (short) 100);
        long long33 = frequency27.getCount((java.lang.Comparable<java.lang.String>) "");
        long long35 = frequency27.getCumFreq((int) (short) 0);
        double double37 = frequency27.getPct(' ');
        boolean boolean38 = frequency10.equals((java.lang.Object) frequency27);
        long long40 = frequency10.getCount(0);
        double double42 = frequency10.getCumPct(' ');
        org.apache.commons.math.stat.Frequency frequency43 = new org.apache.commons.math.stat.Frequency();
        long long45 = frequency43.getCumFreq('#');
        long long47 = frequency43.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long49 = frequency43.getCumFreq((int) (short) -1);
        frequency43.addValue((java.lang.Integer) 10);
        long long53 = frequency43.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        long long55 = frequency43.getCumFreq((long) (byte) 10);
        java.lang.String str56 = frequency43.toString();
        double double57 = frequency10.getPct((java.lang.Object) str56);
        boolean boolean58 = frequency0.equals((java.lang.Object) frequency10);
        double double60 = frequency10.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1L + "'", long55 == 1L);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n" + "'", str56, "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        frequency0.addValue(100);
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        long long9 = frequency7.getCumFreq('#');
        double double11 = frequency7.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor12 = frequency7.valuesIterator();
        double double14 = frequency7.getCumPct('#');
        frequency7.addValue((int) (short) -1);
        frequency7.addValue((int) '4');
        double double20 = frequency7.getCumPct(' ');
        frequency7.addValue((java.lang.Integer) 10);
        boolean boolean23 = frequency0.equals((java.lang.Object) frequency7);
        long long25 = frequency0.getCumFreq((int) '#');
        frequency0.clear();
        long long28 = frequency0.getCount('a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(wildcardComparableItor12);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCount(0L);
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getPct(0);
        long long12 = frequency0.getCount((java.lang.Object) (short) -1);
        double double14 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double16 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        long long19 = frequency17.getCumFreq('#');
        double double21 = frequency17.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor22 = frequency17.valuesIterator();
        double double24 = frequency17.getCumPct('#');
        long long26 = frequency17.getCount('a');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor27 = frequency17.valuesIterator();
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Object) frequency17);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(wildcardComparableItor22);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor27);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        boolean boolean7 = frequency0.equals((java.lang.Object) 0.5d);
        long long8 = frequency0.getSumFreq();
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str5 = frequency0.toString();
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "hi!");
        double double9 = frequency0.getCumPct('4');
        double double11 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        double double13 = frequency0.getCumPct((long) (short) -1);
        boolean boolean15 = frequency0.equals((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        double double17 = frequency0.getCumPct((long) (byte) 1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str5, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        java.lang.String str7 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency8 = new org.apache.commons.math.stat.Frequency();
        long long10 = frequency8.getCumFreq('#');
        double double12 = frequency8.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor13 = frequency8.valuesIterator();
        java.lang.String str14 = frequency8.toString();
        double double16 = frequency8.getPct('4');
        frequency8.addValue((java.lang.Integer) (-1));
        double double20 = frequency8.getPct('4');
        boolean boolean21 = frequency0.equals((java.lang.Object) double20);
        long long23 = frequency0.getCount('a');
        double double25 = frequency0.getCumPct((int) (short) 10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str7, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(wildcardComparableItor13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str14, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCount(1);
        long long7 = frequency0.getSumFreq();
        long long9 = frequency0.getCumFreq('4');
        long long11 = frequency0.getCumFreq((int) '#');
        double double13 = frequency0.getPct(100);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCount(10);
        double double14 = frequency0.getPct('4');
        double double16 = frequency0.getPct(0L);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor17 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency();
        long long20 = frequency18.getCumFreq('#');
        double double22 = frequency18.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor23 = frequency18.valuesIterator();
        double double25 = frequency18.getCumPct('#');
        frequency18.addValue((int) (short) -1);
        long long29 = frequency18.getCount((int) ' ');
        boolean boolean31 = frequency18.equals((java.lang.Object) true);
        frequency18.addValue((int) '4');
        long long35 = frequency18.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean36 = frequency0.equals((java.lang.Object) long35);
        long long38 = frequency0.getCount('a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(wildcardComparableItor17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(wildcardComparableItor23);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double8 = frequency0.getPct(' ');
        frequency0.addValue((long) (byte) 10);
        long long12 = frequency0.getCumFreq((long) '#');
        long long13 = frequency0.getSumFreq();
        double double15 = frequency0.getCumPct('a');
        long long17 = frequency0.getCumFreq((int) (byte) 0);
        double double19 = frequency0.getCumPct('#');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getPct((int) (byte) 100);
        long long9 = frequency0.getCount(10);
        java.lang.String str10 = frequency0.toString();
        long long12 = frequency0.getCount((int) '4');
        double double14 = frequency0.getPct((int) '#');
        long long16 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t33%\t33%\n10\t1\t33%\t67%\n52\t1\t33%\t100%\n");
        double double18 = frequency0.getCumPct((long) ' ');
        double double20 = frequency0.getCumPct('a');
        long long22 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        java.lang.Class<?> wildcardClass25 = frequency0.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str10, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getPct((int) (byte) 100);
        long long9 = frequency0.getCount(10);
        java.lang.String str10 = frequency0.toString();
        long long12 = frequency0.getCount((int) '4');
        double double14 = frequency0.getPct((int) '#');
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        long long17 = frequency15.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency();
        long long20 = frequency18.getCumFreq('#');
        double double22 = frequency18.getPct('#');
        double double23 = frequency15.getCumPct((java.lang.Object) '#');
        java.lang.Object obj24 = null;
        double double25 = frequency15.getPct(obj24);
        double double26 = frequency0.getPct(obj24);
        frequency0.addValue((java.lang.Integer) (-1));
        long long30 = frequency0.getCumFreq(10);
        java.lang.String str31 = frequency0.toString();
        double double33 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t33%\t33%\n2\t1\t33%\t67%\n10\t1\t33%\t100%\n");
        long long35 = frequency0.getCumFreq((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n\t1\t100%\t100%\n");
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str10, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n" + "'", str31, "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCount(0L);
        frequency0.addValue((long) 100);
        frequency0.addValue((int) (short) 1);
        double double12 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        long long15 = frequency13.getCumFreq('#');
        double double17 = frequency13.getPct((java.lang.Object) (-1.0d));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor18 = frequency13.valuesIterator();
        boolean boolean20 = frequency13.equals((java.lang.Object) 0.5d);
        java.lang.String str21 = frequency13.toString();
        long long23 = frequency13.getCount((long) 0);
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency();
        long long26 = frequency24.getCumFreq('#');
        double double28 = frequency24.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor29 = frequency24.valuesIterator();
        boolean boolean30 = frequency13.equals((java.lang.Object) wildcardComparableItor29);
        long long32 = frequency13.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        double double34 = frequency13.getPct((long) (short) 100);
        long long36 = frequency13.getCount(0);
        double double37 = frequency0.getPct((java.lang.Object) long36);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor38 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(wildcardComparableItor18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(wildcardComparableItor29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor38);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCumFreq((long) (byte) 10);
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        long long6 = frequency0.getCount('#');
        frequency0.addValue('a');
        long long10 = frequency0.getCumFreq('a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        double double17 = frequency10.getPct((int) (byte) 100);
        long long19 = frequency10.getCount(10);
        double double20 = frequency0.getPct((java.lang.Object) 10);
        long long22 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        long long24 = frequency0.getCount('#');
        frequency0.addValue((java.lang.Integer) 0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCumFreq(0L);
        long long14 = frequency0.getCumFreq((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        long long17 = frequency15.getCumFreq('#');
        double double19 = frequency15.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor20 = frequency15.valuesIterator();
        double double22 = frequency15.getCumPct('#');
        frequency15.addValue((int) (short) -1);
        double double25 = frequency0.getPct((java.lang.Object) (short) -1);
        long long27 = frequency0.getCumFreq(100);
        long long29 = frequency0.getCumFreq('a');
        double double31 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t50%\t50%\n1\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(wildcardComparableItor20);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        java.lang.Object obj10 = null;
        boolean boolean11 = frequency0.equals(obj10);
        frequency0.addValue((int) '#');
        long long15 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        long long10 = frequency0.getCumFreq((long) (byte) -1);
        long long12 = frequency0.getCumFreq(0L);
        frequency0.addValue((java.lang.Integer) 0);
        java.lang.Comparable<java.lang.String> strComparable15 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double16 = frequency0.getPct(strComparable15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor8 = frequency0.valuesIterator();
        java.lang.String str9 = frequency0.toString();
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor10 = frequency0.valuesIterator();
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor11 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(wildcardComparableItor8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str9, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertNotNull(wildcardComparableItor10);
        org.junit.Assert.assertNotNull(wildcardComparableItor11);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        java.lang.String str6 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        long long9 = frequency7.getCumFreq('#');
        long long11 = frequency7.getCumFreq((java.lang.Object) (byte) 1);
        long long13 = frequency7.getCount(0L);
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency();
        long long16 = frequency14.getCumFreq('#');
        double double17 = frequency7.getPct((java.lang.Object) long16);
        frequency7.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        boolean boolean20 = frequency0.equals((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double22 = frequency0.getPct((long) (short) 1);
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency();
        long long25 = frequency23.getCumFreq('#');
        double double27 = frequency23.getPct('#');
        double double29 = frequency23.getPct((java.lang.Object) (-1.0f));
        long long31 = frequency23.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double33 = frequency23.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor34 = frequency23.valuesIterator();
        frequency23.addValue(0L);
        long long38 = frequency23.getCumFreq(' ');
        long long40 = frequency23.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency41 = new org.apache.commons.math.stat.Frequency();
        long long43 = frequency41.getCumFreq('#');
        double double45 = frequency41.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor46 = frequency41.valuesIterator();
        double double48 = frequency41.getCumPct('#');
        frequency41.addValue((int) (short) -1);
        frequency41.addValue((int) '4');
        double double54 = frequency41.getCumPct(' ');
        org.apache.commons.math.stat.Frequency frequency55 = new org.apache.commons.math.stat.Frequency();
        long long57 = frequency55.getCumFreq('#');
        long long59 = frequency55.getCumFreq((java.lang.Object) (byte) 1);
        double double61 = frequency55.getPct((int) '4');
        double double63 = frequency55.getCumPct((long) (short) 1);
        double double64 = frequency41.getCumPct((java.lang.Object) (short) 1);
        long long66 = frequency41.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        boolean boolean67 = frequency23.equals((java.lang.Object) frequency41);
        frequency41.clear();
        java.lang.String str69 = frequency41.toString();
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor70 = frequency41.valuesIterator();
        boolean boolean71 = frequency0.equals((java.lang.Object) wildcardComparableItor70);
        double double73 = frequency0.getPct(10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str6, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(wildcardComparableItor34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(wildcardComparableItor46);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str69, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertNotNull(wildcardComparableItor70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        frequency0.addValue((java.lang.Integer) 0);
        long long10 = frequency0.getCumFreq(1L);
        long long12 = frequency0.getCumFreq(10L);
        double double14 = frequency0.getPct(' ');
        java.lang.String str15 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        long long18 = frequency16.getCumFreq('#');
        double double20 = frequency16.getPct('#');
        frequency16.addValue(100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor23 = frequency16.valuesIterator();
        // The following exception was thrown during execution in test generation
        try {
            double double24 = frequency0.getCumPct((java.lang.Object) frequency16);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n" + "'", str15, "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(wildcardComparableItor23);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        java.lang.String str6 = frequency0.toString();
        double double8 = frequency0.getPct('4');
        frequency0.addValue((java.lang.Integer) (-1));
        double double12 = frequency0.getPct((int) (short) 100);
        double double14 = frequency0.getCumPct('4');
        long long16 = frequency0.getCount(100L);
        long long18 = frequency0.getCumFreq(' ');
        double double20 = frequency0.getCumPct('4');
        long long22 = frequency0.getCumFreq((int) (short) 100);
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency();
        long long25 = frequency23.getCumFreq('#');
        double double27 = frequency23.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor28 = frequency23.valuesIterator();
        java.lang.String str29 = frequency23.toString();
        double double31 = frequency23.getPct('4');
        frequency23.addValue((java.lang.Integer) (-1));
        double double35 = frequency23.getPct((int) (short) 100);
        double double37 = frequency23.getCumPct((long) 1);
        boolean boolean38 = frequency0.equals((java.lang.Object) double37);
        org.apache.commons.math.stat.Frequency frequency39 = new org.apache.commons.math.stat.Frequency();
        long long41 = frequency39.getCumFreq('#');
        double double43 = frequency39.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor44 = frequency39.valuesIterator();
        java.lang.String str45 = frequency39.toString();
        double double47 = frequency39.getPct('4');
        frequency39.addValue((java.lang.Integer) (-1));
        double double51 = frequency39.getPct((int) (short) 100);
        double double53 = frequency39.getCumPct('4');
        long long55 = frequency39.getCount(100L);
        long long57 = frequency39.getCumFreq(' ');
        double double59 = frequency39.getCumPct(0L);
        double double61 = frequency39.getCumPct(10L);
        // The following exception was thrown during execution in test generation
        try {
            long long62 = frequency0.getCumFreq((java.lang.Object) frequency39);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str6, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(wildcardComparableItor28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str29, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(wildcardComparableItor44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str45, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        double double17 = frequency10.getPct((int) (byte) 100);
        long long19 = frequency10.getCount(10);
        double double20 = frequency0.getPct((java.lang.Object) 10);
        long long22 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double24 = frequency0.getPct(0L);
        double double26 = frequency0.getCumPct(1L);
        frequency0.addValue((long) '#');
        long long30 = frequency0.getCount('#');
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t50%\t50%\n0\t1\t50%\t100%\n");
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        double double17 = frequency10.getPct((int) (byte) 100);
        long long19 = frequency10.getCount(10);
        double double20 = frequency0.getPct((java.lang.Object) 10);
        long long22 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double24 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long25 = frequency0.getSumFreq();
        long long27 = frequency0.getCumFreq((long) 'a');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor28 = frequency0.valuesIterator();
        double double30 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        frequency0.addValue((long) (byte) -1);
        double double34 = frequency0.getPct(0);
        long long36 = frequency0.getCumFreq('#');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor28);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        double double17 = frequency10.getPct((int) (byte) 100);
        long long19 = frequency10.getCount(10);
        double double20 = frequency0.getPct((java.lang.Object) 10);
        long long22 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double24 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long25 = frequency0.getSumFreq();
        long long27 = frequency0.getCount((long) (byte) 100);
        double double29 = frequency0.getPct((long) 0);
        long long31 = frequency0.getCount((int) (short) 100);
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency();
        long long34 = frequency32.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency35 = new org.apache.commons.math.stat.Frequency();
        long long37 = frequency35.getCumFreq('#');
        double double39 = frequency35.getPct('#');
        double double40 = frequency32.getCumPct((java.lang.Object) '#');
        java.lang.Object obj41 = null;
        double double42 = frequency32.getPct(obj41);
        long long44 = frequency32.getCumFreq(0L);
        long long46 = frequency32.getCumFreq((long) (short) 100);
        java.lang.String str47 = frequency32.toString();
        double double48 = frequency0.getCumPct((java.lang.Object) str47);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str47, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct(100);
        long long12 = frequency0.getCount((int) (short) 0);
        frequency0.clear();
        long long15 = frequency0.getCount(10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCumFreq(0L);
        long long14 = frequency0.getCount((long) '4');
        frequency0.addValue((int) (short) 10);
        frequency0.clear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getPct((int) (byte) 100);
        long long9 = frequency0.getCount(10);
        java.lang.String str10 = frequency0.toString();
        long long12 = frequency0.getCount((int) '4');
        double double14 = frequency0.getPct((int) '#');
        long long16 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t33%\t33%\n10\t1\t33%\t67%\n52\t1\t33%\t100%\n");
        double double18 = frequency0.getCumPct((long) ' ');
        double double20 = frequency0.getCumPct('a');
        long long22 = frequency0.getCount((long) 0);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor23 = frequency0.valuesIterator();
        long long24 = frequency0.getSumFreq();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str10, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        frequency0.addValue(100);
        double double6 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor7 = frequency0.valuesIterator();
        java.lang.String str8 = frequency0.toString();
        double double10 = frequency0.getPct((int) (byte) -1);
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        long long13 = frequency11.getCumFreq('#');
        double double15 = frequency11.getPct((java.lang.Object) (-1.0d));
        long long17 = frequency11.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long19 = frequency11.getCount((int) (short) 0);
        double double21 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "");
        boolean boolean22 = frequency0.equals((java.lang.Object) "");
        double double24 = frequency0.getPct((long) (short) 10);
        long long26 = frequency0.getCumFreq((int) (byte) 1);
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency();
        long long29 = frequency27.getCumFreq('#');
        double double31 = frequency27.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor32 = frequency27.valuesIterator();
        double double34 = frequency27.getCumPct('#');
        long long36 = frequency27.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency();
        long long39 = frequency37.getCumFreq('#');
        double double41 = frequency37.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor42 = frequency37.valuesIterator();
        double double44 = frequency37.getPct((int) (byte) 100);
        long long46 = frequency37.getCount(10);
        double double47 = frequency27.getPct((java.lang.Object) 10);
        long long49 = frequency27.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        long long51 = frequency27.getCount('#');
        frequency27.addValue((int) ' ');
        double double54 = frequency0.getPct((java.lang.Object) ' ');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(wildcardComparableItor32);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(wildcardComparableItor42);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCount(0L);
        double double8 = frequency0.getPct(0);
        long long10 = frequency0.getCount(0L);
        long long11 = frequency0.getSumFreq();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        long long10 = frequency0.getCumFreq(0);
        frequency0.clear();
        frequency0.addValue('4');
        double double15 = frequency0.getCumPct((long) 100);
        double double17 = frequency0.getPct((-1));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor8 = frequency0.valuesIterator();
        java.lang.Object obj9 = null;
        long long10 = frequency0.getCumFreq(obj9);
        long long12 = frequency0.getCount((int) ' ');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(wildcardComparableItor8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCount(0L);
        double double8 = frequency0.getPct('a');
        frequency0.clear();
        frequency0.clear();
        long long12 = frequency0.getCumFreq(0);
        double double14 = frequency0.getPct((long) 100);
        java.lang.String str15 = frequency0.toString();
        frequency0.addValue((java.lang.Integer) (-1));
        double double19 = frequency0.getCumPct(' ');
        long long21 = frequency0.getCount(' ');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str15, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCount(1);
        long long7 = frequency0.getSumFreq();
        double double9 = frequency0.getCumPct((int) (byte) 0);
        long long11 = frequency0.getCount(1L);
        double double13 = frequency0.getPct('#');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCumFreq((int) (short) -1);
        double double8 = frequency0.getCumPct(1L);
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        long long11 = frequency9.getCumFreq('#');
        double double13 = frequency9.getPct((java.lang.Object) (-1.0d));
        long long15 = frequency9.getCount('#');
        frequency0.addValue((java.lang.Object) long15);
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        long long19 = frequency17.getCumFreq('#');
        double double21 = frequency17.getPct((long) (short) 100);
        long long23 = frequency17.getCount((java.lang.Comparable<java.lang.String>) "");
        long long25 = frequency17.getCumFreq((int) (short) 0);
        double double27 = frequency17.getPct(' ');
        boolean boolean28 = frequency0.equals((java.lang.Object) frequency17);
        frequency0.clear();
        java.lang.String str30 = frequency0.toString();
        java.lang.String str31 = frequency0.toString();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str30, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str31, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        double double6 = frequency0.getPct(100);
        frequency0.addValue((long) (short) 1);
        long long10 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        long long12 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        boolean boolean7 = frequency0.equals((java.lang.Object) 0.5d);
        java.lang.String str8 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        long long11 = frequency9.getCumFreq('#');
        double double13 = frequency9.getPct((long) (short) 100);
        long long15 = frequency9.getCount((java.lang.Comparable<java.lang.String>) "");
        double double17 = frequency9.getPct(' ');
        frequency9.addValue((long) (byte) 10);
        long long21 = frequency9.getCumFreq((long) '#');
        long long22 = frequency9.getSumFreq();
        boolean boolean23 = frequency0.equals((java.lang.Object) long22);
        long long25 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        double double27 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n\t1\t100%\t100%\n");
        long long29 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCount(10);
        double double14 = frequency0.getPct('4');
        double double16 = frequency0.getPct(0L);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor17 = frequency0.valuesIterator();
        double double19 = frequency0.getCumPct('a');
        java.lang.String str20 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency();
        long long23 = frequency21.getCumFreq('#');
        double double25 = frequency21.getPct((java.lang.Object) (-1.0d));
        long long27 = frequency21.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        frequency21.addValue((long) (short) 1);
        frequency21.clear();
        long long32 = frequency21.getCumFreq(100);
        double double34 = frequency21.getCumPct('a');
        long long36 = frequency21.getCumFreq(' ');
        boolean boolean37 = frequency0.equals((java.lang.Object) frequency21);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(wildcardComparableItor17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str20, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        long long11 = frequency0.getCount((int) ' ');
        boolean boolean13 = frequency0.equals((java.lang.Object) true);
        frequency0.addValue((int) '4');
        frequency0.addValue((long) (short) 10);
        double double19 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        java.lang.String str20 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency();
        long long23 = frequency21.getCumFreq('#');
        long long25 = frequency21.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str26 = frequency21.toString();
        frequency21.addValue((java.lang.Comparable<java.lang.String>) "hi!");
        double double30 = frequency21.getCumPct('4');
        double double32 = frequency21.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        double double34 = frequency21.getCumPct((long) (short) -1);
        long long35 = frequency0.getCount((java.lang.Object) (short) -1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t33%\t33%\n10\t1\t33%\t67%\n52\t1\t33%\t100%\n" + "'", str20, "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t33%\t33%\n10\t1\t33%\t67%\n52\t1\t33%\t100%\n");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str26, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        long long10 = frequency0.getCumFreq(0);
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        double double14 = frequency0.getPct(1);
        double double16 = frequency0.getPct((long) 'a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str5 = frequency0.toString();
        long long7 = frequency0.getCount(0);
        frequency0.clear();
        double double10 = frequency0.getCumPct((int) 'a');
        frequency0.clear();
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency();
        long long14 = frequency12.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        long long17 = frequency15.getCumFreq('#');
        double double19 = frequency15.getPct('#');
        double double20 = frequency12.getCumPct((java.lang.Object) '#');
        java.lang.Object obj21 = null;
        double double22 = frequency12.getPct(obj21);
        long long24 = frequency12.getCumFreq(0L);
        long long26 = frequency12.getCount((long) '4');
        frequency12.addValue(' ');
        long long30 = frequency12.getCumFreq(' ');
        long long32 = frequency12.getCumFreq('4');
        org.apache.commons.math.stat.Frequency frequency33 = new org.apache.commons.math.stat.Frequency();
        long long35 = frequency33.getCumFreq('#');
        double double37 = frequency33.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor38 = frequency33.valuesIterator();
        double double40 = frequency33.getCumPct('#');
        frequency33.addValue((int) (short) -1);
        boolean boolean43 = frequency12.equals((java.lang.Object) frequency33);
        // The following exception was thrown during execution in test generation
        try {
            long long44 = frequency0.getCount((java.lang.Object) frequency12);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str5, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(wildcardComparableItor38);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        long long11 = frequency0.getCount((int) ' ');
        boolean boolean13 = frequency0.equals((java.lang.Object) true);
        double double15 = frequency0.getCumPct((java.lang.Object) 0.0f);
        double double17 = frequency0.getCumPct((java.lang.Object) "");
        double double19 = frequency0.getCumPct(0);
        double double21 = frequency0.getPct((int) (byte) -1);
        long long23 = frequency0.getCount('4');
        double double25 = frequency0.getCumPct('#');
        double double27 = frequency0.getCumPct((long) 10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double10 = frequency0.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor11 = frequency0.valuesIterator();
        double double13 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double15 = frequency0.getPct((int) (byte) -1);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor16 = frequency0.valuesIterator();
        double double18 = frequency0.getCumPct(' ');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(wildcardComparableItor11);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(wildcardComparableItor16);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCumFreq(0L);
        double double14 = frequency0.getPct((long) (short) 100);
        java.lang.Comparable<java.lang.String> strComparable15 = null;
        long long16 = frequency0.getCumFreq(strComparable15);
        double double18 = frequency0.getCumPct((long) '#');
        frequency0.addValue((java.lang.Integer) 0);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t50%\t50%\n0\t1\t50%\t100%\n");
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        long long7 = frequency0.getCount('#');
        long long9 = frequency0.getCount((long) '#');
        long long11 = frequency0.getCumFreq((int) (byte) 10);
        java.lang.Object obj12 = null;
        double double13 = frequency0.getCumPct(obj12);
        double double15 = frequency0.getPct((int) (byte) 1);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor16 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(wildcardComparableItor16);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((long) 0);
        long long10 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long12 = frequency0.getCount('#');
        long long13 = frequency0.getSumFreq();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        long long6 = frequency0.getSumFreq();
        double double8 = frequency0.getCumPct('#');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        long long12 = frequency0.getCumFreq('#');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCumFreq((java.lang.Object) 10.0d);
        frequency0.addValue((long) (byte) 1);
        double double10 = frequency0.getCumPct((int) 'a');
        double double12 = frequency0.getCumPct((int) (short) 10);
        double double14 = frequency0.getCumPct((long) (short) 1);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency0.valuesIterator();
        java.lang.String str16 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        long long19 = frequency17.getCumFreq('#');
        long long21 = frequency17.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long23 = frequency17.getCumFreq((int) (short) -1);
        long long25 = frequency17.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency17.clear();
        java.lang.Object obj27 = null;
        double double28 = frequency17.getPct(obj27);
        double double30 = frequency17.getPct('#');
        long long32 = frequency17.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        // The following exception was thrown during execution in test generation
        try {
            long long33 = frequency0.getCumFreq((java.lang.Object) frequency17);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n" + "'", str16, "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCount(0L);
        double double8 = frequency0.getPct('a');
        frequency0.clear();
        frequency0.clear();
        long long12 = frequency0.getCumFreq(0);
        double double14 = frequency0.getPct((long) 100);
        java.lang.String str15 = frequency0.toString();
        frequency0.addValue((java.lang.Integer) (-1));
        double double19 = frequency0.getCumPct(' ');
        double double21 = frequency0.getPct('a');
        long long23 = frequency0.getCumFreq('4');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str15, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCumFreq(0L);
        long long14 = frequency0.getCumFreq((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        long long17 = frequency15.getCumFreq('#');
        double double19 = frequency15.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor20 = frequency15.valuesIterator();
        double double22 = frequency15.getCumPct('#');
        frequency15.addValue((int) (short) -1);
        double double25 = frequency0.getPct((java.lang.Object) (short) -1);
        double double27 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        double double29 = frequency0.getCumPct((int) ' ');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(wildcardComparableItor20);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        double double17 = frequency10.getPct((int) (byte) 100);
        long long19 = frequency10.getCount(10);
        double double20 = frequency0.getPct((java.lang.Object) 10);
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        double double22 = frequency0.getCumPct(strComparable21);
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency();
        long long25 = frequency23.getCumFreq('#');
        double double27 = frequency23.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor28 = frequency23.valuesIterator();
        java.lang.String str29 = frequency23.toString();
        double double31 = frequency23.getPct('4');
        frequency23.addValue((java.lang.Integer) (-1));
        double double35 = frequency23.getPct((int) (short) 100);
        double double37 = frequency23.getCumPct((long) 1);
        frequency0.addValue((java.lang.Object) 1);
        org.apache.commons.math.stat.Frequency frequency39 = new org.apache.commons.math.stat.Frequency();
        long long41 = frequency39.getCumFreq('#');
        double double43 = frequency39.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor44 = frequency39.valuesIterator();
        double double46 = frequency39.getCumPct('#');
        frequency39.addValue((int) (short) -1);
        frequency39.addValue((int) '4');
        double double52 = frequency39.getCumPct(' ');
        frequency39.addValue((java.lang.Integer) 10);
        frequency39.clear();
        long long56 = frequency39.getSumFreq();
        double double57 = frequency0.getCumPct((java.lang.Object) long56);
        org.apache.commons.math.stat.Frequency frequency58 = new org.apache.commons.math.stat.Frequency();
        long long60 = frequency58.getCumFreq('#');
        double double62 = frequency58.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor63 = frequency58.valuesIterator();
        java.lang.String str64 = frequency58.toString();
        double double66 = frequency58.getPct('4');
        frequency58.addValue((java.lang.Integer) (-1));
        double double70 = frequency58.getPct((int) (short) 100);
        double double72 = frequency58.getCumPct('4');
        long long74 = frequency58.getCount(100L);
        long long76 = frequency58.getCumFreq(' ');
        boolean boolean77 = frequency0.equals((java.lang.Object) frequency58);
        long long79 = frequency0.getCount((int) (short) 10);
        double double81 = frequency0.getCumPct(0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(wildcardComparableItor28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str29, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(wildcardComparableItor44);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(wildcardComparableItor63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str64, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCumFreq(0L);
        long long14 = frequency0.getCount((long) '4');
        long long16 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        long long10 = frequency0.getCumFreq((long) (short) 0);
        frequency0.addValue((long) 100);
        double double14 = frequency0.getPct((long) (byte) 0);
        frequency0.addValue((java.lang.Integer) 10);
        frequency0.addValue((int) (short) 0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCount(10);
        java.lang.String str13 = frequency0.toString();
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor16 = frequency0.valuesIterator();
        long long18 = frequency0.getCumFreq('4');
        long long20 = frequency0.getCumFreq(0L);
        long long22 = frequency0.getCumFreq((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor23 = frequency0.valuesIterator();
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Integer) 10);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str13, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertNotNull(wildcardComparableItor16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor23);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        long long6 = frequency0.getCount('#');
        double double8 = frequency0.getCumPct('#');
        double double10 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t33%\t33%\n2\t1\t33%\t67%\n10\t1\t33%\t100%\n");
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        long long12 = frequency0.getCumFreq(strComparable11);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        double double17 = frequency10.getPct((int) (byte) 100);
        long long19 = frequency10.getCount(10);
        double double20 = frequency0.getPct((java.lang.Object) 10);
        long long22 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double24 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long26 = frequency0.getCount((int) (short) 100);
        frequency0.addValue((int) (byte) 0);
        long long29 = frequency0.getSumFreq();
        double double31 = frequency0.getCumPct((int) (short) 0);
        double double33 = frequency0.getCumPct(' ');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        frequency0.addValue((int) '4');
        double double13 = frequency0.getCumPct(' ');
        frequency0.addValue((java.lang.Integer) 10);
        frequency0.clear();
        long long17 = frequency0.getSumFreq();
        long long19 = frequency0.getCount('#');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        long long11 = frequency0.getCount((int) ' ');
        boolean boolean13 = frequency0.equals((java.lang.Object) true);
        double double15 = frequency0.getCumPct((java.lang.Object) 0.0f);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor16 = frequency0.valuesIterator();
        java.lang.String str17 = frequency0.toString();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n" + "'", str17, "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        double double6 = frequency0.getPct((int) '4');
        double double8 = frequency0.getCumPct((long) (short) 1);
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        long long11 = frequency9.getCumFreq('#');
        long long13 = frequency9.getCumFreq((java.lang.Object) (byte) 1);
        long long15 = frequency9.getCount(0L);
        frequency9.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double19 = frequency9.getPct(0);
        long long21 = frequency9.getCount((java.lang.Object) (short) -1);
        double double23 = frequency9.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        boolean boolean24 = frequency0.equals((java.lang.Object) double23);
        double double26 = frequency0.getCumPct((long) 1);
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency();
        long long29 = frequency27.getCumFreq('#');
        long long31 = frequency27.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        double double33 = frequency27.getPct(100);
        double double34 = frequency0.getCumPct((java.lang.Object) double33);
        long long35 = frequency0.getSumFreq();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        long long11 = frequency0.getCount((int) ' ');
        double double13 = frequency0.getPct(1);
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency();
        long long16 = frequency14.getCumFreq('#');
        long long18 = frequency14.getCumFreq((java.lang.Object) (byte) 1);
        long long20 = frequency14.getCumFreq((java.lang.Object) 10.0d);
        long long22 = frequency14.getCumFreq('a');
        long long23 = frequency0.getCount((java.lang.Object) long22);
        long long25 = frequency0.getCumFreq('a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        long long11 = frequency0.getCount((int) ' ');
        boolean boolean13 = frequency0.equals((java.lang.Object) true);
        frequency0.addValue((int) '4');
        long long17 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long19 = frequency0.getCumFreq(10L);
        long long21 = frequency0.getCumFreq('4');
        long long23 = frequency0.getCumFreq(' ');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        java.lang.String str6 = frequency0.toString();
        double double8 = frequency0.getPct('4');
        frequency0.addValue((java.lang.Integer) (-1));
        double double12 = frequency0.getPct((int) (short) 100);
        double double14 = frequency0.getCumPct('4');
        java.lang.Class<?> wildcardClass15 = frequency0.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str6, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        double double17 = frequency10.getPct((int) (byte) 100);
        long long19 = frequency10.getCount(10);
        double double20 = frequency0.getPct((java.lang.Object) 10);
        frequency0.addValue(100L);
        java.lang.Class<?> wildcardClass23 = frequency0.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        double double6 = frequency0.getCumPct('#');
        long long8 = frequency0.getCumFreq('a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        long long11 = frequency0.getCount((int) ' ');
        boolean boolean13 = frequency0.equals((java.lang.Object) true);
        double double15 = frequency0.getCumPct((java.lang.Object) 0.0f);
        double double17 = frequency0.getCumPct((java.lang.Object) "");
        double double19 = frequency0.getCumPct(0);
        double double21 = frequency0.getPct((int) (byte) -1);
        long long23 = frequency0.getCount('4');
        double double25 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency26 = new org.apache.commons.math.stat.Frequency();
        long long28 = frequency26.getCumFreq('#');
        double double30 = frequency26.getPct('#');
        double double32 = frequency26.getPct((java.lang.Object) (-1.0f));
        long long34 = frequency26.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double36 = frequency26.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor37 = frequency26.valuesIterator();
        double double39 = frequency26.getPct('4');
        long long41 = frequency26.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long43 = frequency26.getCount((int) '4');
        frequency26.clear();
        boolean boolean45 = frequency0.equals((java.lang.Object) frequency26);
        long long47 = frequency26.getCount('#');
        double double49 = frequency26.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        frequency26.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(wildcardComparableItor37);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        boolean boolean7 = frequency0.equals((java.lang.Object) 0.5d);
        long long9 = frequency0.getCumFreq((int) (byte) 10);
        double double11 = frequency0.getPct((long) (byte) 1);
        long long13 = frequency0.getCount('4');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCumFreq((int) (short) -1);
        double double8 = frequency0.getCumPct(1L);
        long long10 = frequency0.getCount(' ');
        double double12 = frequency0.getPct(10);
        frequency0.addValue((java.lang.Integer) 100);
        double double16 = frequency0.getCumPct(0L);
        java.lang.Class<?> wildcardClass17 = frequency0.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        long long6 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long8 = frequency0.getCumFreq((long) (short) -1);
        double double10 = frequency0.getPct((long) (byte) 0);
        long long12 = frequency0.getCount(0L);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor13 = frequency0.valuesIterator();
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        long long18 = frequency16.getCumFreq('#');
        long long20 = frequency16.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str21 = frequency16.toString();
        long long23 = frequency16.getCount(0);
        frequency16.clear();
        double double26 = frequency16.getCumPct((int) 'a');
        double double28 = frequency16.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        frequency16.addValue((int) (short) 10);
        long long31 = frequency0.getCount((java.lang.Object) (short) 10);
        java.lang.Object obj32 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long33 = frequency0.getCount(obj32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor13);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getPct((int) (byte) 100);
        long long9 = frequency0.getCount(10);
        java.lang.String str10 = frequency0.toString();
        long long12 = frequency0.getCount((int) '4');
        double double14 = frequency0.getPct((int) '#');
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        long long17 = frequency15.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency();
        long long20 = frequency18.getCumFreq('#');
        double double22 = frequency18.getPct('#');
        double double23 = frequency15.getCumPct((java.lang.Object) '#');
        java.lang.Object obj24 = null;
        double double25 = frequency15.getPct(obj24);
        double double26 = frequency0.getPct(obj24);
        frequency0.addValue((java.lang.Integer) (-1));
        long long30 = frequency0.getCumFreq((int) (byte) -1);
        long long32 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str10, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double8 = frequency0.getPct(' ');
        frequency0.addValue((long) (byte) 10);
        long long12 = frequency0.getCumFreq((long) '#');
        long long13 = frequency0.getSumFreq();
        long long15 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        double double17 = frequency0.getCumPct('a');
        double double19 = frequency0.getCumPct(100L);
        long long20 = frequency0.getSumFreq();
        long long21 = frequency0.getSumFreq();
        java.lang.Object obj22 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long23 = frequency0.getCount(obj22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        long long11 = frequency0.getCount('a');
        double double13 = frequency0.getCumPct(0L);
        frequency0.addValue(' ');
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        java.lang.String str6 = frequency0.toString();
        frequency0.addValue('a');
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        long long11 = frequency9.getCumFreq('#');
        double double13 = frequency9.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor14 = frequency9.valuesIterator();
        double double16 = frequency9.getCumPct('#');
        long long18 = frequency9.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        long long21 = frequency19.getCumFreq('#');
        double double23 = frequency19.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor24 = frequency19.valuesIterator();
        double double26 = frequency19.getPct((int) (byte) 100);
        long long28 = frequency19.getCount(10);
        double double29 = frequency9.getPct((java.lang.Object) 10);
        boolean boolean30 = frequency0.equals((java.lang.Object) 10);
        java.lang.String str31 = frequency0.toString();
        boolean boolean33 = frequency0.equals((java.lang.Object) (byte) -1);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor34 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str6, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(wildcardComparableItor14);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(wildcardComparableItor24);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n" + "'", str31, "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardComparableItor34);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCumFreq(0L);
        long long14 = frequency0.getCumFreq((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        long long17 = frequency15.getCumFreq('#');
        double double19 = frequency15.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor20 = frequency15.valuesIterator();
        double double22 = frequency15.getCumPct('#');
        frequency15.addValue((int) (short) -1);
        double double25 = frequency0.getPct((java.lang.Object) (short) -1);
        long long27 = frequency0.getCumFreq(100);
        long long29 = frequency0.getCount((long) (short) 10);
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t33%\t33%\n10\t1\t33%\t67%\n52\t1\t33%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(wildcardComparableItor20);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCumFreq(0L);
        long long14 = frequency0.getCumFreq((long) (byte) 100);
        long long16 = frequency0.getCount(0);
        double double18 = frequency0.getPct('a');
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        long long21 = frequency19.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency();
        long long24 = frequency22.getCumFreq('#');
        double double26 = frequency22.getPct('#');
        double double27 = frequency19.getCumPct((java.lang.Object) '#');
        java.lang.Object obj28 = null;
        double double29 = frequency19.getPct(obj28);
        long long31 = frequency19.getCumFreq(0L);
        double double33 = frequency19.getPct((long) (short) 100);
        java.lang.Comparable<java.lang.String> strComparable34 = null;
        long long35 = frequency19.getCumFreq(strComparable34);
        boolean boolean36 = frequency0.equals((java.lang.Object) frequency19);
        frequency19.addValue('4');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        long long6 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct((java.lang.Object) 100.0f);
        double double12 = frequency0.getPct((int) (short) 1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double8 = frequency0.getPct(' ');
        frequency0.addValue('#');
        long long12 = frequency0.getCumFreq(1);
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        long long15 = frequency13.getCumFreq('#');
        double double17 = frequency13.getPct((java.lang.Object) (-1.0d));
        long long19 = frequency13.getCount('#');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor20 = frequency13.valuesIterator();
        // The following exception was thrown during execution in test generation
        try {
            double double21 = frequency0.getCumPct((java.lang.Object) wildcardComparableItor20);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.TreeMap$KeyIterator cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor20);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount('a');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor10 = frequency0.valuesIterator();
        long long12 = frequency0.getCumFreq((long) ' ');
        long long14 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t50%\t50%\n1\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCount(10);
        java.lang.String str13 = frequency0.toString();
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor16 = frequency0.valuesIterator();
        long long18 = frequency0.getCumFreq('4');
        long long20 = frequency0.getCumFreq(0L);
        double double22 = frequency0.getPct(100);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue('4');
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str13, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertNotNull(wildcardComparableItor16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double8 = frequency0.getPct(' ');
        long long10 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long12 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double14 = frequency0.getPct((int) (byte) 100);
        frequency0.addValue('a');
        long long18 = frequency0.getCumFreq((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        long long21 = frequency19.getCumFreq('#');
        long long23 = frequency19.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long25 = frequency19.getCumFreq((int) (short) -1);
        double double27 = frequency19.getCumPct(1L);
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency();
        long long30 = frequency28.getCumFreq('#');
        double double32 = frequency28.getPct((java.lang.Object) (-1.0d));
        long long34 = frequency28.getCount('#');
        frequency19.addValue((java.lang.Object) long34);
        org.apache.commons.math.stat.Frequency frequency36 = new org.apache.commons.math.stat.Frequency();
        long long38 = frequency36.getCumFreq('#');
        double double40 = frequency36.getPct((long) (short) 100);
        long long42 = frequency36.getCount((java.lang.Comparable<java.lang.String>) "");
        long long44 = frequency36.getCumFreq((int) (short) 0);
        double double46 = frequency36.getPct(' ');
        boolean boolean47 = frequency19.equals((java.lang.Object) frequency36);
        long long49 = frequency19.getCount(0);
        double double51 = frequency19.getPct((int) (byte) 0);
        double double53 = frequency19.getCumPct('a');
        double double54 = frequency0.getCumPct((java.lang.Object) double53);
        double double56 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCount(10);
        double double14 = frequency0.getPct('4');
        double double16 = frequency0.getPct(0L);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor17 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency();
        long long20 = frequency18.getCumFreq('#');
        double double22 = frequency18.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor23 = frequency18.valuesIterator();
        double double25 = frequency18.getCumPct('#');
        long long27 = frequency18.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency();
        long long30 = frequency28.getCumFreq('#');
        double double32 = frequency28.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor33 = frequency28.valuesIterator();
        double double35 = frequency28.getPct((int) (byte) 100);
        long long37 = frequency28.getCount(10);
        double double38 = frequency18.getPct((java.lang.Object) 10);
        long long40 = frequency18.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double42 = frequency18.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long43 = frequency18.getSumFreq();
        long long45 = frequency18.getCumFreq((long) 'a');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor46 = frequency18.valuesIterator();
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Object) wildcardComparableItor46);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(wildcardComparableItor17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(wildcardComparableItor23);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(wildcardComparableItor33);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor46);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str5 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency6 = new org.apache.commons.math.stat.Frequency();
        long long8 = frequency6.getCumFreq('#');
        double double10 = frequency6.getPct((long) (short) 100);
        long long11 = frequency0.getCount((java.lang.Object) (short) 100);
        double double13 = frequency0.getPct('4');
        long long15 = frequency0.getCumFreq('4');
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        long long18 = frequency16.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        long long21 = frequency19.getCumFreq('#');
        double double23 = frequency19.getPct('#');
        double double24 = frequency16.getCumPct((java.lang.Object) '#');
        java.lang.Object obj25 = null;
        double double26 = frequency16.getPct(obj25);
        long long28 = frequency16.getCumFreq(0L);
        double double30 = frequency16.getPct((long) '#');
        long long32 = frequency16.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t33%\t33%\n2\t1\t33%\t67%\n10\t1\t33%\t100%\n");
        long long34 = frequency16.getCumFreq(' ');
        double double36 = frequency16.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t50%\t50%\n1\t1\t50%\t100%\n");
        java.lang.String str37 = frequency16.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long38 = frequency0.getCumFreq((java.lang.Object) frequency16);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str5, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str37, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        frequency0.addValue((java.lang.Integer) 0);
        long long10 = frequency0.getCumFreq(1L);
        long long12 = frequency0.getCumFreq(10L);
        double double14 = frequency0.getPct(' ');
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        long long17 = frequency15.getCumFreq('#');
        double double19 = frequency15.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor20 = frequency15.valuesIterator();
        double double22 = frequency15.getCumPct('#');
        frequency15.addValue((int) (short) -1);
        long long26 = frequency15.getCount((int) ' ');
        boolean boolean28 = frequency15.equals((java.lang.Object) true);
        double double30 = frequency15.getCumPct((java.lang.Object) 0.0f);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor31 = frequency15.valuesIterator();
        long long32 = frequency15.getSumFreq();
        boolean boolean33 = frequency0.equals((java.lang.Object) frequency15);
        double double35 = frequency15.getPct((int) (short) 10);
        double double37 = frequency15.getCumPct(' ');
        org.apache.commons.math.stat.Frequency frequency38 = new org.apache.commons.math.stat.Frequency();
        long long40 = frequency38.getCumFreq('#');
        double double42 = frequency38.getPct((java.lang.Object) (-1.0d));
        long long44 = frequency38.getCount('#');
        frequency38.addValue('a');
        // The following exception was thrown during execution in test generation
        try {
            long long47 = frequency15.getCount((java.lang.Object) frequency38);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(wildcardComparableItor20);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCumFreq(0L);
        long long14 = frequency0.getCumFreq((long) (byte) 100);
        long long15 = frequency0.getSumFreq();
        double double17 = frequency0.getCumPct(' ');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCount(10);
        double double14 = frequency0.getPct('4');
        double double16 = frequency0.getPct(0L);
        long long17 = frequency0.getSumFreq();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        long long6 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long8 = frequency0.getCumFreq((long) (short) -1);
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        long long11 = frequency9.getCumFreq('#');
        double double13 = frequency9.getPct('#');
        double double15 = frequency9.getPct((java.lang.Object) (-1.0f));
        long long17 = frequency9.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double19 = frequency9.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor20 = frequency9.valuesIterator();
        frequency9.addValue(0L);
        long long24 = frequency9.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.commons.math.stat.Frequency frequency25 = new org.apache.commons.math.stat.Frequency();
        long long27 = frequency25.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency();
        long long30 = frequency28.getCumFreq('#');
        double double32 = frequency28.getPct('#');
        double double33 = frequency25.getCumPct((java.lang.Object) '#');
        java.lang.Object obj34 = null;
        double double35 = frequency25.getPct(obj34);
        long long37 = frequency25.getCount(10);
        java.lang.String str38 = frequency25.toString();
        frequency25.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor41 = frequency25.valuesIterator();
        long long43 = frequency25.getCumFreq('4');
        long long45 = frequency25.getCumFreq(0L);
        long long47 = frequency25.getCumFreq((long) (short) 100);
        boolean boolean48 = frequency9.equals((java.lang.Object) (short) 100);
        frequency0.addValue((java.lang.Object) (short) 100);
        long long51 = frequency0.getCount(0L);
        org.apache.commons.math.stat.Frequency frequency52 = new org.apache.commons.math.stat.Frequency();
        long long54 = frequency52.getCumFreq('#');
        frequency52.addValue(100);
        double double58 = frequency52.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor59 = frequency52.valuesIterator();
        // The following exception was thrown during execution in test generation
        try {
            long long60 = frequency0.getCumFreq((java.lang.Object) wildcardComparableItor59);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.TreeMap$KeyIterator cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(wildcardComparableItor20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str38, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertNotNull(wildcardComparableItor41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor59);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        long long11 = frequency0.getCount((int) ' ');
        boolean boolean13 = frequency0.equals((java.lang.Object) true);
        long long15 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double17 = frequency0.getPct('4');
        java.lang.String str18 = frequency0.toString();
        long long20 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        double double22 = frequency0.getPct('#');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n" + "'", str18, "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        long long11 = frequency0.getCount((int) ' ');
        boolean boolean13 = frequency0.equals((java.lang.Object) true);
        frequency0.addValue((int) '4');
        frequency0.addValue((java.lang.Integer) 100);
        long long19 = frequency0.getCount((long) (byte) -1);
        long long21 = frequency0.getCount(0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        java.lang.String str6 = frequency0.toString();
        double double8 = frequency0.getPct('4');
        long long10 = frequency0.getCumFreq(1L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str6, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double10 = frequency0.getPct((-1));
        long long12 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long14 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        long long16 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((int) (short) -1);
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        long long21 = frequency19.getCumFreq('#');
        long long23 = frequency19.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long25 = frequency19.getCount(1);
        long long26 = frequency19.getSumFreq();
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency();
        long long29 = frequency27.getCumFreq('#');
        double double31 = frequency27.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor32 = frequency27.valuesIterator();
        double double34 = frequency27.getCumPct('#');
        long long36 = frequency27.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency();
        long long39 = frequency37.getCumFreq('#');
        double double41 = frequency37.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor42 = frequency37.valuesIterator();
        double double44 = frequency37.getPct((int) (byte) 100);
        long long46 = frequency37.getCount(10);
        double double47 = frequency27.getPct((java.lang.Object) 10);
        long long49 = frequency27.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double51 = frequency27.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long53 = frequency27.getCount((int) (short) 100);
        frequency27.addValue((int) (byte) 0);
        long long56 = frequency27.getSumFreq();
        double double58 = frequency27.getCumPct('4');
        boolean boolean59 = frequency19.equals((java.lang.Object) double58);
        frequency19.addValue((java.lang.Integer) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double62 = frequency0.getPct((java.lang.Object) frequency19);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(wildcardComparableItor32);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(wildcardComparableItor42);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        long long6 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long8 = frequency0.getCumFreq((long) (short) -1);
        double double10 = frequency0.getPct((long) (byte) 0);
        double double12 = frequency0.getPct('#');
        frequency0.addValue((java.lang.Integer) 1);
        double double16 = frequency0.getPct(100);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        frequency0.addValue(100);
        double double6 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double8 = frequency0.getCumPct((int) '#');
        long long10 = frequency0.getCount((long) 0);
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        long long13 = frequency11.getCumFreq('#');
        long long15 = frequency11.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long17 = frequency11.getCumFreq((int) (short) -1);
        frequency11.addValue((java.lang.Integer) 10);
        double double21 = frequency11.getPct('#');
        double double23 = frequency11.getCumPct((long) (short) 10);
        double double24 = frequency0.getPct((java.lang.Object) (short) 10);
        long long26 = frequency0.getCount(' ');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCumFreq((int) (short) -1);
        frequency0.addValue((java.lang.Integer) 10);
        double double10 = frequency0.getPct('#');
        double double12 = frequency0.getCumPct((long) (short) 10);
        frequency0.addValue(4L);
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        long long17 = frequency15.getCumFreq('#');
        double double19 = frequency15.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor20 = frequency15.valuesIterator();
        double double22 = frequency15.getCumPct('#');
        long long24 = frequency15.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency25 = new org.apache.commons.math.stat.Frequency();
        long long27 = frequency25.getCumFreq('#');
        double double29 = frequency25.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor30 = frequency25.valuesIterator();
        double double32 = frequency25.getPct((int) (byte) 100);
        long long34 = frequency25.getCount(10);
        double double35 = frequency15.getPct((java.lang.Object) 10);
        long long37 = frequency15.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double39 = frequency15.getPct(0L);
        double double41 = frequency15.getCumPct(1L);
        boolean boolean42 = frequency0.equals((java.lang.Object) double41);
        long long43 = frequency0.getSumFreq();
        double double45 = frequency0.getCumPct((int) (byte) 10);
        long long47 = frequency0.getCount((long) (short) 100);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(wildcardComparableItor20);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(wildcardComparableItor30);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 2L + "'", long43 == 2L);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        java.lang.String str6 = frequency0.toString();
        double double8 = frequency0.getPct('4');
        frequency0.addValue((java.lang.Integer) (-1));
        double double12 = frequency0.getPct((int) (short) 100);
        double double14 = frequency0.getCumPct('4');
        long long16 = frequency0.getCount(100L);
        long long18 = frequency0.getCumFreq(' ');
        double double20 = frequency0.getCumPct(0L);
        long long21 = frequency0.getSumFreq();
        long long23 = frequency0.getCumFreq('a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str6, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double8 = frequency0.getPct(' ');
        frequency0.addValue('#');
        double double12 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "");
        double double14 = frequency0.getPct((long) 'a');
        long long16 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getPct((int) (byte) 100);
        long long9 = frequency0.getCount(10);
        java.lang.String str10 = frequency0.toString();
        long long12 = frequency0.getCount((int) '4');
        double double14 = frequency0.getPct((int) '#');
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        long long17 = frequency15.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency();
        long long20 = frequency18.getCumFreq('#');
        double double22 = frequency18.getPct('#');
        double double23 = frequency15.getCumPct((java.lang.Object) '#');
        java.lang.Object obj24 = null;
        double double25 = frequency15.getPct(obj24);
        double double26 = frequency0.getPct(obj24);
        frequency0.addValue((java.lang.Integer) (-1));
        long long30 = frequency0.getCumFreq(10);
        java.lang.String str31 = frequency0.toString();
        double double33 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t33%\t33%\n2\t1\t33%\t67%\n10\t1\t33%\t100%\n");
        long long35 = frequency0.getCumFreq((int) 'a');
        org.apache.commons.math.stat.Frequency frequency36 = new org.apache.commons.math.stat.Frequency();
        long long38 = frequency36.getCumFreq('#');
        double double40 = frequency36.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor41 = frequency36.valuesIterator();
        double double43 = frequency36.getCumPct('#');
        frequency36.addValue((int) (short) -1);
        frequency36.addValue((int) '4');
        double double49 = frequency36.getCumPct(' ');
        org.apache.commons.math.stat.Frequency frequency50 = new org.apache.commons.math.stat.Frequency();
        long long52 = frequency50.getCumFreq('#');
        long long54 = frequency50.getCumFreq((java.lang.Object) (byte) 1);
        double double56 = frequency50.getPct((int) '4');
        double double58 = frequency50.getCumPct((long) (short) 1);
        double double59 = frequency36.getCumPct((java.lang.Object) (short) 1);
        long long61 = frequency36.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double63 = frequency36.getPct((int) (byte) 10);
        org.apache.commons.math.stat.Frequency frequency64 = new org.apache.commons.math.stat.Frequency();
        long long66 = frequency64.getCumFreq('#');
        double double68 = frequency64.getPct((java.lang.Object) (-1.0d));
        long long70 = frequency64.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long72 = frequency64.getCount((int) (short) 0);
        boolean boolean73 = frequency36.equals((java.lang.Object) frequency64);
        long long75 = frequency64.getCumFreq(1);
        double double76 = frequency0.getCumPct((java.lang.Object) 1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str10, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n" + "'", str31, "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(wildcardComparableItor41);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0d + "'", double76 == 1.0d);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        boolean boolean7 = frequency0.equals((java.lang.Object) 0.5d);
        java.lang.String str8 = frequency0.toString();
        double double10 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n\t1\t100%\t100%\n");
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str13 = frequency0.toString();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \nhi!\t1\t100%\t100%\n" + "'", str13, "Value \t Freq. \t Pct. \t Cum Pct. \nhi!\t1\t100%\t100%\n");
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        double double17 = frequency10.getPct((int) (byte) 100);
        long long19 = frequency10.getCount(10);
        double double20 = frequency0.getPct((java.lang.Object) 10);
        long long22 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency();
        long long25 = frequency23.getCumFreq('#');
        double double27 = frequency23.getPct((java.lang.Object) (-1.0d));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor28 = frequency23.valuesIterator();
        boolean boolean30 = frequency23.equals((java.lang.Object) 0.5d);
        java.lang.String str31 = frequency23.toString();
        long long33 = frequency23.getCount((long) 0);
        org.apache.commons.math.stat.Frequency frequency34 = new org.apache.commons.math.stat.Frequency();
        long long36 = frequency34.getCumFreq('#');
        double double38 = frequency34.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor39 = frequency34.valuesIterator();
        boolean boolean40 = frequency23.equals((java.lang.Object) wildcardComparableItor39);
        boolean boolean41 = frequency0.equals((java.lang.Object) boolean40);
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency();
        long long44 = frequency42.getCumFreq('#');
        double double46 = frequency42.getPct((java.lang.Object) (-1.0d));
        long long48 = frequency42.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        frequency42.addValue((long) (short) 1);
        java.lang.Class<?> wildcardClass51 = frequency42.getClass();
        // The following exception was thrown during execution in test generation
        try {
            long long52 = frequency0.getCount((java.lang.Object) frequency42);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(wildcardComparableItor28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str31, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(wildcardComparableItor39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double8 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((java.lang.Integer) 1);
        long long12 = frequency0.getCumFreq((int) (short) 0);
        long long14 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double16 = frequency0.getPct(0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        long long6 = frequency0.getSumFreq();
        double double8 = frequency0.getCumPct('#');
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        long long11 = frequency9.getCumFreq('#');
        long long13 = frequency9.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long15 = frequency9.getCumFreq((int) (short) -1);
        frequency9.addValue((java.lang.Integer) 10);
        double double19 = frequency9.getCumPct('#');
        frequency0.addValue((java.lang.Object) '#');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor21 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency();
        long long24 = frequency22.getCumFreq('#');
        long long26 = frequency22.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long28 = frequency22.getCumFreq((int) (short) -1);
        double double30 = frequency22.getCumPct(1L);
        long long32 = frequency22.getCount(' ');
        org.apache.commons.math.stat.Frequency frequency33 = new org.apache.commons.math.stat.Frequency();
        long long35 = frequency33.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency36 = new org.apache.commons.math.stat.Frequency();
        long long38 = frequency36.getCumFreq('#');
        double double40 = frequency36.getPct('#');
        double double41 = frequency33.getCumPct((java.lang.Object) '#');
        java.lang.Object obj42 = null;
        double double43 = frequency33.getPct(obj42);
        long long45 = frequency33.getCumFreq(0L);
        double double47 = frequency33.getPct((long) '#');
        double double49 = frequency33.getPct((java.lang.Comparable<java.lang.String>) "");
        boolean boolean50 = frequency22.equals((java.lang.Object) double49);
        double double51 = frequency0.getCumPct((java.lang.Object) boolean50);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor52 = frequency0.valuesIterator();
        long long54 = frequency0.getCount((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double10 = frequency0.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor11 = frequency0.valuesIterator();
        double double13 = frequency0.getPct('4');
        long long15 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        frequency0.addValue('4');
        double double19 = frequency0.getPct((long) (byte) 10);
        long long21 = frequency0.getCount(0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(wildcardComparableItor11);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((long) 0);
        long long10 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        frequency0.clear();
        double double13 = frequency0.getCumPct((long) 'a');
        long long15 = frequency0.getCumFreq((long) '#');
        long long17 = frequency0.getCount((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        double double12 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str13 = frequency0.toString();
        frequency0.addValue(4L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str13, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.lang.String str5 = frequency0.toString();
        long long7 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        long long8 = frequency0.getSumFreq();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str5, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCount(0L);
        double double8 = frequency0.getPct('a');
        frequency0.clear();
        frequency0.clear();
        long long12 = frequency0.getCumFreq(0);
        double double14 = frequency0.getPct((long) 100);
        long long16 = frequency0.getCumFreq('4');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor17 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor17);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        double double17 = frequency10.getPct((int) (byte) 100);
        long long19 = frequency10.getCount(10);
        double double20 = frequency0.getPct((java.lang.Object) 10);
        long long22 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double24 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long25 = frequency0.getSumFreq();
        long long27 = frequency0.getCumFreq((long) 'a');
        long long29 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        long long30 = frequency0.getSumFreq();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCumFreq((int) (short) -1);
        frequency0.addValue((java.lang.Integer) 10);
        double double10 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue('a');
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct(100);
        long long12 = frequency0.getCount((int) (short) 0);
        long long14 = frequency0.getCumFreq('a');
        frequency0.addValue((-1));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        frequency0.addValue((int) '4');
        double double13 = frequency0.getCumPct(' ');
        frequency0.addValue((java.lang.Integer) 10);
        frequency0.clear();
        long long17 = frequency0.getSumFreq();
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency();
        long long20 = frequency18.getCumFreq('#');
        double double22 = frequency18.getPct((java.lang.Object) (-1.0d));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor23 = frequency18.valuesIterator();
        long long25 = frequency18.getCount('#');
        long long27 = frequency18.getCount((long) '#');
        long long29 = frequency18.getCumFreq((int) (byte) 10);
        boolean boolean30 = frequency0.equals((java.lang.Object) frequency18);
        long long32 = frequency18.getCumFreq((long) '#');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(wildcardComparableItor23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        frequency0.addValue((int) '4');
        double double13 = frequency0.getCumPct(' ');
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency();
        long long16 = frequency14.getCumFreq('#');
        long long18 = frequency14.getCumFreq((java.lang.Object) (byte) 1);
        double double20 = frequency14.getPct((int) '4');
        double double22 = frequency14.getCumPct((long) (short) 1);
        double double23 = frequency0.getCumPct((java.lang.Object) (short) 1);
        long long25 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double27 = frequency0.getPct((int) (byte) 10);
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency();
        long long30 = frequency28.getCumFreq('#');
        double double32 = frequency28.getPct((java.lang.Object) (-1.0d));
        long long34 = frequency28.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long36 = frequency28.getCount((int) (short) 0);
        boolean boolean37 = frequency0.equals((java.lang.Object) frequency28);
        long long39 = frequency0.getCount(' ');
        double double41 = frequency0.getCumPct((long) (short) 0);
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency();
        long long44 = frequency42.getCumFreq('#');
        long long46 = frequency42.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long48 = frequency42.getCumFreq((int) (short) -1);
        long long50 = frequency42.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency42.clear();
        frequency42.addValue((long) '4');
        double double55 = frequency42.getCumPct((long) ' ');
        java.lang.Class<?> wildcardClass56 = frequency42.getClass();
        boolean boolean57 = frequency0.equals((java.lang.Object) frequency42);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.5d + "'", double41 == 0.5d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        double double6 = frequency0.getPct((int) '4');
        double double8 = frequency0.getCumPct((long) (short) 1);
        frequency0.addValue('4');
        long long11 = frequency0.getSumFreq();
        long long13 = frequency0.getCumFreq(0);
        long long15 = frequency0.getCount((long) ' ');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor16 = frequency0.valuesIterator();
        double double18 = frequency0.getPct('4');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long10 = frequency0.getSumFreq();
        frequency0.addValue(0);
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        long long15 = frequency13.getCumFreq('#');
        double double17 = frequency13.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor18 = frequency13.valuesIterator();
        double double20 = frequency13.getCumPct('#');
        long long22 = frequency13.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency();
        long long25 = frequency23.getCumFreq('#');
        double double27 = frequency23.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor28 = frequency23.valuesIterator();
        double double30 = frequency23.getPct((int) (byte) 100);
        long long32 = frequency23.getCount(10);
        double double33 = frequency13.getPct((java.lang.Object) 10);
        long long35 = frequency13.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double37 = frequency13.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long38 = frequency13.getSumFreq();
        long long40 = frequency13.getCumFreq((long) 'a');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor41 = frequency13.valuesIterator();
        double double43 = frequency13.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        long long44 = frequency0.getCumFreq((java.lang.Object) double43);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(wildcardComparableItor18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(wildcardComparableItor28);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor41);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        long long6 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long8 = frequency0.getCumFreq((long) (short) -1);
        double double10 = frequency0.getPct((long) (byte) 0);
        double double12 = frequency0.getPct('#');
        long long14 = frequency0.getCumFreq((int) (byte) 10);
        frequency0.clear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        boolean boolean7 = frequency0.equals((java.lang.Object) 0.5d);
        java.lang.String str8 = frequency0.toString();
        double double10 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n\t1\t100%\t100%\n");
        long long11 = frequency0.getSumFreq();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double8 = frequency0.getPct(' ');
        frequency0.addValue('#');
        long long12 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double14 = frequency0.getCumPct((int) (short) -1);
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n\t1\t100%\t100%\n");
        long long18 = frequency0.getCumFreq('4');
        long long20 = frequency0.getCumFreq((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCumFreq((int) (short) -1);
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency0.clear();
        frequency0.addValue((long) '4');
        double double13 = frequency0.getCumPct((long) ' ');
        frequency0.addValue((java.lang.Integer) 100);
        frequency0.addValue((java.lang.Integer) 10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCumFreq(0L);
        double double14 = frequency0.getPct((long) '#');
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        long long17 = frequency15.getCumFreq('#');
        double double19 = frequency15.getPct((long) (short) 100);
        java.lang.String str20 = frequency15.toString();
        boolean boolean21 = frequency0.equals((java.lang.Object) str20);
        double double23 = frequency0.getPct(0L);
        double double25 = frequency0.getCumPct(100L);
        org.apache.commons.math.stat.Frequency frequency26 = new org.apache.commons.math.stat.Frequency();
        long long28 = frequency26.getCumFreq('#');
        double double30 = frequency26.getPct((java.lang.Object) (-1.0d));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor31 = frequency26.valuesIterator();
        boolean boolean33 = frequency26.equals((java.lang.Object) 0.5d);
        java.lang.String str34 = frequency26.toString();
        long long36 = frequency26.getCount((long) 0);
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency();
        long long39 = frequency37.getCumFreq('#');
        double double41 = frequency37.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor42 = frequency37.valuesIterator();
        boolean boolean43 = frequency26.equals((java.lang.Object) wildcardComparableItor42);
        double double44 = frequency0.getPct((java.lang.Object) boolean43);
        long long46 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor47 = frequency0.valuesIterator();
        frequency0.addValue((int) (short) 10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str20, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(wildcardComparableItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str34, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(wildcardComparableItor42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor47);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double8 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double10 = frequency0.getPct('#');
        long long12 = frequency0.getCount(10);
        java.lang.String str13 = frequency0.toString();
        java.lang.String str14 = frequency0.toString();
        frequency0.addValue(4L);
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        long long19 = frequency17.getCumFreq('#');
        double double21 = frequency17.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor22 = frequency17.valuesIterator();
        java.lang.String str23 = frequency17.toString();
        double double25 = frequency17.getPct('4');
        frequency17.addValue((java.lang.Integer) (-1));
        double double29 = frequency17.getPct((int) (short) 100);
        double double31 = frequency17.getCumPct((long) '#');
        frequency17.clear();
        double double34 = frequency17.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        boolean boolean35 = frequency0.equals((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long37 = frequency0.getCount(0);
        double double39 = frequency0.getCumPct((long) 'a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str13, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str14, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(wildcardComparableItor22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str23, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        long long10 = frequency0.getCumFreq((long) (byte) -1);
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        long long13 = frequency11.getCumFreq('#');
        double double15 = frequency11.getPct((long) (short) 100);
        long long17 = frequency11.getCount((java.lang.Comparable<java.lang.String>) "");
        double double19 = frequency11.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency11.addValue((java.lang.Integer) 1);
        long long23 = frequency11.getCount((int) (short) -1);
        double double25 = frequency11.getPct(1);
        double double26 = frequency0.getPct((java.lang.Object) 1);
        long long28 = frequency0.getCount('#');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        double double17 = frequency10.getPct((int) (byte) 100);
        long long19 = frequency10.getCount(10);
        double double20 = frequency0.getPct((java.lang.Object) 10);
        long long22 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double24 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long25 = frequency0.getSumFreq();
        long long27 = frequency0.getCount((long) (byte) 100);
        double double29 = frequency0.getPct((long) 0);
        frequency0.addValue((int) '4');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        java.lang.String str6 = frequency0.toString();
        double double8 = frequency0.getPct('4');
        frequency0.addValue((java.lang.Integer) (-1));
        double double12 = frequency0.getPct('4');
        double double14 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        long long17 = frequency15.getCumFreq('#');
        double double19 = frequency15.getPct('#');
        double double21 = frequency15.getPct((java.lang.Object) (-1.0f));
        long long23 = frequency15.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double25 = frequency15.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor26 = frequency15.valuesIterator();
        frequency15.addValue(0L);
        long long30 = frequency15.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long31 = frequency0.getCumFreq((java.lang.Object) "hi!");
        long long33 = frequency0.getCumFreq((long) (short) -1);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor34 = frequency0.valuesIterator();
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor35 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency36 = new org.apache.commons.math.stat.Frequency();
        long long38 = frequency36.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency39 = new org.apache.commons.math.stat.Frequency();
        long long41 = frequency39.getCumFreq('#');
        double double43 = frequency39.getPct('#');
        double double44 = frequency36.getCumPct((java.lang.Object) '#');
        java.lang.Object obj45 = null;
        double double46 = frequency36.getPct(obj45);
        long long48 = frequency36.getCumFreq(0L);
        double double50 = frequency36.getPct((long) (short) 100);
        double double52 = frequency36.getPct(0);
        org.apache.commons.math.stat.Frequency frequency53 = new org.apache.commons.math.stat.Frequency();
        long long55 = frequency53.getCumFreq('#');
        double double57 = frequency53.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor58 = frequency53.valuesIterator();
        java.lang.String str59 = frequency53.toString();
        double double61 = frequency53.getPct('4');
        long long62 = frequency36.getCount((java.lang.Object) double61);
        double double63 = frequency0.getCumPct((java.lang.Object) long62);
        long long65 = frequency0.getCount((int) (short) 10);
        frequency0.addValue(0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str6, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(wildcardComparableItor26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertNotNull(wildcardComparableItor34);
        org.junit.Assert.assertNotNull(wildcardComparableItor35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(wildcardComparableItor58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str59, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        long long10 = frequency0.getCumFreq((long) (short) 0);
        frequency0.addValue((long) 100);
        double double14 = frequency0.getPct((long) (byte) 0);
        frequency0.addValue((java.lang.Integer) 10);
        long long18 = frequency0.getCumFreq('a');
        frequency0.clear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCumFreq(0L);
        long long14 = frequency0.getCumFreq((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        long long17 = frequency15.getCumFreq('#');
        double double19 = frequency15.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor20 = frequency15.valuesIterator();
        double double22 = frequency15.getCumPct('#');
        frequency15.addValue((int) (short) -1);
        double double25 = frequency0.getPct((java.lang.Object) (short) -1);
        long long27 = frequency0.getCumFreq(100);
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t50%\t50%\n1\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(wildcardComparableItor20);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double8 = frequency0.getPct(' ');
        frequency0.addValue((long) (byte) 10);
        long long12 = frequency0.getCumFreq((long) '#');
        long long13 = frequency0.getSumFreq();
        double double15 = frequency0.getCumPct('a');
        long long17 = frequency0.getCumFreq((int) (byte) 0);
        frequency0.addValue((int) (short) 0);
        double double21 = frequency0.getPct((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.5d + "'", double21 == 0.5d);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCumFreq(0L);
        double double14 = frequency0.getPct((long) '#');
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        long long17 = frequency15.getCumFreq('#');
        double double19 = frequency15.getPct((long) (short) 100);
        java.lang.String str20 = frequency15.toString();
        boolean boolean21 = frequency0.equals((java.lang.Object) str20);
        double double23 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        double double25 = frequency0.getCumPct(10L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str20, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        long long10 = frequency0.getCumFreq((long) (short) 0);
        frequency0.addValue((long) 100);
        long long14 = frequency0.getCount((int) ' ');
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        long long17 = frequency15.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency();
        long long20 = frequency18.getCumFreq('#');
        double double22 = frequency18.getPct('#');
        double double23 = frequency15.getCumPct((java.lang.Object) '#');
        java.lang.Object obj24 = null;
        double double25 = frequency15.getPct(obj24);
        long long27 = frequency15.getCumFreq(0L);
        double double29 = frequency15.getPct((long) (short) 100);
        long long31 = frequency15.getCount(0);
        frequency15.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n\t1\t100%\t100%\n");
        double double34 = frequency0.getPct((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n\t1\t100%\t100%\n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor35 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor35);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCumFreq((int) (short) -1);
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency0.clear();
        java.lang.Object obj10 = null;
        double double11 = frequency0.getPct(obj10);
        double double13 = frequency0.getPct('#');
        long long15 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((long) 0);
        double double19 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double21 = frequency0.getPct('4');
        double double23 = frequency0.getPct(0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double8 = frequency0.getPct(' ');
        frequency0.addValue('#');
        long long12 = frequency0.getCumFreq((int) (short) -1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCumFreq((int) (short) -1);
        double double8 = frequency0.getCumPct(1L);
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        long long11 = frequency9.getCumFreq('#');
        double double13 = frequency9.getPct((java.lang.Object) (-1.0d));
        long long15 = frequency9.getCount('#');
        frequency0.addValue((java.lang.Object) long15);
        long long18 = frequency0.getCumFreq((-1L));
        frequency0.addValue(0L);
        double double22 = frequency0.getCumPct(' ');
        double double24 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        double double26 = frequency0.getCumPct('4');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCumFreq(0L);
        double double14 = frequency0.getPct((long) '#');
        double double16 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "");
        frequency0.addValue('a');
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        long long21 = frequency19.getCumFreq('#');
        double double23 = frequency19.getPct('#');
        long long25 = frequency19.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        long long26 = frequency0.getCumFreq((java.lang.Object) "hi!");
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency();
        long long29 = frequency27.getCumFreq('#');
        long long31 = frequency27.getCumFreq((java.lang.Object) (byte) 1);
        long long33 = frequency27.getCumFreq((java.lang.Object) 10.0d);
        frequency27.addValue((long) (byte) 1);
        double double37 = frequency27.getCumPct((int) 'a');
        double double39 = frequency27.getCumPct((int) (short) 10);
        double double40 = frequency0.getCumPct((java.lang.Object) double39);
        java.lang.String str41 = frequency0.toString();
        long long43 = frequency0.getCumFreq((long) 0);
        long long45 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        long long46 = frequency0.getSumFreq();
        org.apache.commons.math.stat.Frequency frequency47 = new org.apache.commons.math.stat.Frequency();
        long long49 = frequency47.getCumFreq('#');
        double double51 = frequency47.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor52 = frequency47.valuesIterator();
        long long53 = frequency47.getSumFreq();
        frequency47.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long57 = frequency47.getCumFreq('#');
        long long59 = frequency47.getCount(0L);
        boolean boolean60 = frequency0.equals((java.lang.Object) long59);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n" + "'", str41, "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(wildcardComparableItor52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor8 = frequency0.valuesIterator();
        java.lang.String str9 = frequency0.toString();
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor10 = frequency0.valuesIterator();
        double double12 = frequency0.getPct('a');
        double double14 = frequency0.getCumPct((long) (byte) 100);
        double double16 = frequency0.getCumPct((long) (byte) 100);
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        long long19 = frequency17.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        long long22 = frequency20.getCumFreq('#');
        double double24 = frequency20.getPct('#');
        double double25 = frequency17.getCumPct((java.lang.Object) '#');
        java.lang.Object obj26 = null;
        double double27 = frequency17.getPct(obj26);
        long long29 = frequency17.getCumFreq(0L);
        double double31 = frequency17.getPct((long) (short) 100);
        java.lang.Comparable<java.lang.String> strComparable32 = null;
        long long33 = frequency17.getCumFreq(strComparable32);
        double double35 = frequency17.getCumPct((long) '#');
        double double36 = frequency0.getPct((java.lang.Object) double35);
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency();
        long long39 = frequency37.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency40 = new org.apache.commons.math.stat.Frequency();
        long long42 = frequency40.getCumFreq('#');
        double double44 = frequency40.getPct('#');
        double double45 = frequency37.getCumPct((java.lang.Object) '#');
        java.lang.Object obj46 = null;
        double double47 = frequency37.getPct(obj46);
        long long49 = frequency37.getCumFreq(0L);
        long long51 = frequency37.getCumFreq((long) (short) 100);
        org.apache.commons.math.stat.Frequency frequency52 = new org.apache.commons.math.stat.Frequency();
        long long54 = frequency52.getCumFreq('#');
        double double56 = frequency52.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor57 = frequency52.valuesIterator();
        double double59 = frequency52.getCumPct('#');
        frequency52.addValue((int) (short) -1);
        double double62 = frequency37.getPct((java.lang.Object) (short) -1);
        double double64 = frequency37.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        // The following exception was thrown during execution in test generation
        try {
            long long65 = frequency0.getCumFreq((java.lang.Object) frequency37);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(wildcardComparableItor8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str9, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertNotNull(wildcardComparableItor10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(wildcardComparableItor57);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        double double17 = frequency10.getPct((int) (byte) 100);
        long long19 = frequency10.getCount(10);
        double double20 = frequency0.getPct((java.lang.Object) 10);
        long long22 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double24 = frequency0.getPct(0L);
        double double26 = frequency0.getCumPct(1L);
        frequency0.addValue((long) '#');
        long long30 = frequency0.getCount('#');
        double double32 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        double double34 = frequency0.getCumPct((long) 0);
        long long36 = frequency0.getCumFreq((int) (byte) 10);
        frequency0.addValue(3L);
        java.lang.String str39 = frequency0.toString();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n3\t1\t50%\t50%\n35\t1\t50%\t100%\n" + "'", str39, "Value \t Freq. \t Pct. \t Cum Pct. \n3\t1\t50%\t50%\n35\t1\t50%\t100%\n");
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getPct((int) (byte) 100);
        long long9 = frequency0.getCount(10);
        java.lang.String str10 = frequency0.toString();
        long long12 = frequency0.getCount((int) '4');
        double double14 = frequency0.getPct((int) '#');
        long long16 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t33%\t33%\n10\t1\t33%\t67%\n52\t1\t33%\t100%\n");
        double double18 = frequency0.getCumPct((long) ' ');
        double double20 = frequency0.getCumPct('a');
        long long22 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        double double24 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str10, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCount(10);
        double double14 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        long long16 = frequency0.getCumFreq(1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        long long11 = frequency0.getCount((int) ' ');
        boolean boolean13 = frequency0.equals((java.lang.Object) true);
        double double15 = frequency0.getCumPct((java.lang.Object) 0.0f);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor16 = frequency0.valuesIterator();
        long long17 = frequency0.getSumFreq();
        java.lang.String str18 = frequency0.toString();
        double double20 = frequency0.getCumPct((long) 'a');
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency();
        long long23 = frequency21.getCumFreq('#');
        double double25 = frequency21.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor26 = frequency21.valuesIterator();
        java.lang.String str27 = frequency21.toString();
        double double29 = frequency21.getPct('4');
        frequency21.addValue((java.lang.Integer) (-1));
        double double33 = frequency21.getPct('4');
        long long35 = frequency21.getCount((long) (short) 1);
        java.lang.String str36 = frequency21.toString();
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency();
        long long39 = frequency37.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency40 = new org.apache.commons.math.stat.Frequency();
        long long42 = frequency40.getCumFreq('#');
        double double44 = frequency40.getPct('#');
        double double45 = frequency37.getCumPct((java.lang.Object) '#');
        java.lang.Object obj46 = null;
        double double47 = frequency37.getPct(obj46);
        long long49 = frequency37.getCumFreq(0L);
        long long51 = frequency37.getCumFreq((long) (short) 100);
        frequency21.addValue((java.lang.Object) long51);
        boolean boolean53 = frequency0.equals((java.lang.Object) long51);
        long long55 = frequency0.getCumFreq(100);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n" + "'", str18, "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(wildcardComparableItor26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str27, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n" + "'", str36, "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1L + "'", long55 == 1L);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct(100);
        long long12 = frequency0.getCount((int) (short) 0);
        long long14 = frequency0.getCumFreq('a');
        frequency0.addValue((long) (-1));
        frequency0.addValue((long) 1);
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        long long21 = frequency19.getCumFreq('#');
        long long23 = frequency19.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long24 = frequency0.getCount((java.lang.Object) long23);
        long long26 = frequency0.getCount((long) 1);
        double double28 = frequency0.getCumPct(100L);
        frequency0.addValue(100);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.lang.String str5 = frequency0.toString();
        long long7 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        java.lang.Object obj8 = null;
        double double9 = frequency0.getCumPct(obj8);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str5, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCount(0L);
        double double8 = frequency0.getPct('a');
        frequency0.clear();
        frequency0.clear();
        long long12 = frequency0.getCumFreq(0);
        double double14 = frequency0.getPct((long) 100);
        double double16 = frequency0.getCumPct((int) (byte) -1);
        long long18 = frequency0.getCount((int) ' ');
        frequency0.addValue((long) '4');
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency();
        long long23 = frequency21.getCumFreq('#');
        long long25 = frequency21.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long27 = frequency21.getCount((int) ' ');
        long long29 = frequency21.getCumFreq((long) '#');
        double double31 = frequency21.getCumPct((long) 1);
        boolean boolean32 = frequency0.equals((java.lang.Object) 1);
        java.lang.Class<?> wildcardClass33 = frequency0.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        long long10 = frequency0.getCumFreq((long) (byte) -1);
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t33%\t33%\n10\t1\t33%\t67%\n52\t1\t33%\t100%\n");
        long long14 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t33%\t33%\n10\t1\t33%\t67%\n52\t1\t33%\t100%\n");
        java.lang.Class<?> wildcardClass15 = frequency0.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        java.lang.String str6 = frequency0.toString();
        double double8 = frequency0.getPct('4');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor9 = frequency0.valuesIterator();
        double double11 = frequency0.getCumPct('a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str6, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(wildcardComparableItor9);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        double double6 = frequency0.getPct((int) '4');
        double double8 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t33%\t33%\n10\t1\t33%\t67%\n52\t1\t33%\t100%\n");
        double double10 = frequency0.getPct('a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str5 = frequency0.toString();
        long long6 = frequency0.getSumFreq();
        double double8 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        long long10 = frequency0.getCount('4');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str5, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        double double17 = frequency10.getPct((int) (byte) 100);
        long long19 = frequency10.getCount(10);
        double double20 = frequency0.getPct((java.lang.Object) 10);
        long long22 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double24 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long25 = frequency0.getSumFreq();
        long long27 = frequency0.getCumFreq((long) 'a');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor28 = frequency0.valuesIterator();
        double double30 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        frequency0.addValue((long) (byte) -1);
        double double34 = frequency0.getPct(0);
        long long36 = frequency0.getCount((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor28);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double10 = frequency0.getPct((-1));
        long long12 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long14 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        double double16 = frequency0.getCumPct(0L);
        frequency0.addValue('#');
        double double20 = frequency0.getPct(0);
        double double22 = frequency0.getCumPct('#');
        double double24 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        long long6 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long8 = frequency0.getCumFreq((long) (short) -1);
        long long10 = frequency0.getCount('#');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        long long6 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct((java.lang.Object) 100.0f);
        double double12 = frequency0.getPct(0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCount(0L);
        double double8 = frequency0.getPct(0);
        long long10 = frequency0.getCumFreq(' ');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        java.lang.String str7 = frequency0.toString();
        long long9 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        frequency0.addValue((-1));
        java.lang.String str12 = frequency0.toString();
        double double14 = frequency0.getCumPct((-1));
        frequency0.clear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str7, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n" + "'", str12, "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCount(0L);
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getPct(0);
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        long long13 = frequency11.getCumFreq('#');
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getPct((java.lang.Object) (-1.0f));
        java.lang.String str18 = frequency11.toString();
        long long20 = frequency11.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        frequency0.addValue((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        long long23 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long24 = frequency0.getSumFreq();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str18, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2L + "'", long23 == 2L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2L + "'", long24 == 2L);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCount(0L);
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getPct(0);
        long long12 = frequency0.getCumFreq((long) (short) 0);
        double double14 = frequency0.getPct((long) (-1));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        long long6 = frequency0.getSumFreq();
        double double8 = frequency0.getCumPct('#');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        long long11 = frequency0.getSumFreq();
        long long13 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double15 = frequency0.getCumPct((long) ' ');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        java.lang.String str6 = frequency0.toString();
        frequency0.addValue('a');
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        long long11 = frequency9.getCumFreq('#');
        double double13 = frequency9.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor14 = frequency9.valuesIterator();
        double double16 = frequency9.getCumPct('#');
        long long18 = frequency9.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        long long21 = frequency19.getCumFreq('#');
        double double23 = frequency19.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor24 = frequency19.valuesIterator();
        double double26 = frequency19.getPct((int) (byte) 100);
        long long28 = frequency19.getCount(10);
        double double29 = frequency9.getPct((java.lang.Object) 10);
        boolean boolean30 = frequency0.equals((java.lang.Object) 10);
        double double32 = frequency0.getCumPct('a');
        long long33 = frequency0.getSumFreq();
        org.apache.commons.math.stat.Frequency frequency34 = new org.apache.commons.math.stat.Frequency();
        long long36 = frequency34.getCumFreq('#');
        double double38 = frequency34.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor39 = frequency34.valuesIterator();
        double double41 = frequency34.getCumPct('#');
        frequency34.addValue((int) (short) -1);
        long long45 = frequency34.getCount((int) ' ');
        boolean boolean47 = frequency34.equals((java.lang.Object) true);
        double double49 = frequency34.getCumPct((java.lang.Object) 0.0f);
        double double51 = frequency34.getCumPct((java.lang.Object) "");
        double double53 = frequency34.getCumPct(0);
        double double55 = frequency34.getPct((int) (byte) -1);
        long long57 = frequency34.getCount('4');
        double double59 = frequency34.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency();
        long long62 = frequency60.getCumFreq('#');
        double double64 = frequency60.getPct('#');
        double double66 = frequency60.getPct((java.lang.Object) (-1.0f));
        long long68 = frequency60.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double70 = frequency60.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor71 = frequency60.valuesIterator();
        double double73 = frequency60.getPct('4');
        long long75 = frequency60.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long77 = frequency60.getCount((int) '4');
        frequency60.clear();
        boolean boolean79 = frequency34.equals((java.lang.Object) frequency60);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Object) boolean79);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str6, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(wildcardComparableItor14);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(wildcardComparableItor24);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(wildcardComparableItor39);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(wildcardComparableItor71);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double8 = frequency0.getPct(' ');
        frequency0.addValue('#');
        double double12 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        long long15 = frequency13.getCumFreq('#');
        long long17 = frequency13.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long19 = frequency13.getCumFreq((int) (short) -1);
        long long21 = frequency13.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency13.clear();
        java.lang.Object obj23 = null;
        double double24 = frequency13.getPct(obj23);
        double double26 = frequency13.getPct('#');
        long long28 = frequency13.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long30 = frequency13.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        double double32 = frequency13.getCumPct(0);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Object) double32);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        double double6 = frequency0.getPct((int) '4');
        double double8 = frequency0.getCumPct((long) (short) 1);
        frequency0.addValue('4');
        double double12 = frequency0.getCumPct(100);
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        long long15 = frequency13.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        long long18 = frequency16.getCumFreq('#');
        double double20 = frequency16.getPct('#');
        double double21 = frequency13.getCumPct((java.lang.Object) '#');
        java.lang.Object obj22 = null;
        double double23 = frequency13.getPct(obj22);
        long long25 = frequency13.getCumFreq(0L);
        double double27 = frequency13.getPct((long) '#');
        double double29 = frequency13.getPct((java.lang.Comparable<java.lang.String>) "");
        frequency13.addValue('a');
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency();
        long long34 = frequency32.getCumFreq('#');
        double double36 = frequency32.getPct('#');
        long long38 = frequency32.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        long long39 = frequency13.getCumFreq((java.lang.Object) "hi!");
        org.apache.commons.math.stat.Frequency frequency40 = new org.apache.commons.math.stat.Frequency();
        long long42 = frequency40.getCumFreq('#');
        long long44 = frequency40.getCumFreq((java.lang.Object) (byte) 1);
        long long46 = frequency40.getCumFreq((java.lang.Object) 10.0d);
        frequency40.addValue((long) (byte) 1);
        double double50 = frequency40.getCumPct((int) 'a');
        double double52 = frequency40.getCumPct((int) (short) 10);
        double double53 = frequency13.getCumPct((java.lang.Object) double52);
        long long55 = frequency13.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        long long57 = frequency13.getCount('a');
        long long58 = frequency0.getCount((java.lang.Object) 'a');
        org.apache.commons.math.stat.Frequency frequency59 = new org.apache.commons.math.stat.Frequency();
        long long61 = frequency59.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency62 = new org.apache.commons.math.stat.Frequency();
        long long64 = frequency62.getCumFreq('#');
        double double66 = frequency62.getPct('#');
        double double67 = frequency59.getCumPct((java.lang.Object) '#');
        long long69 = frequency59.getCumFreq((long) (short) 0);
        frequency59.addValue((long) 100);
        frequency59.addValue((int) (byte) 1);
        long long75 = frequency59.getCount(1);
        long long77 = frequency59.getCount((long) (byte) 1);
        double double79 = frequency59.getPct((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Object) (byte) 1);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.5d + "'", double79 == 0.5d);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        java.lang.String str6 = frequency0.toString();
        double double8 = frequency0.getPct('4');
        frequency0.addValue((java.lang.Integer) (-1));
        double double12 = frequency0.getCumPct('4');
        double double14 = frequency0.getPct((int) '4');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str6, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getPct((int) (byte) 100);
        long long9 = frequency0.getCount(10);
        java.lang.String str10 = frequency0.toString();
        long long12 = frequency0.getCount((int) '4');
        double double14 = frequency0.getPct((int) '#');
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        long long17 = frequency15.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency();
        long long20 = frequency18.getCumFreq('#');
        double double22 = frequency18.getPct('#');
        double double23 = frequency15.getCumPct((java.lang.Object) '#');
        java.lang.Object obj24 = null;
        double double25 = frequency15.getPct(obj24);
        double double26 = frequency0.getPct(obj24);
        frequency0.addValue((java.lang.Integer) (-1));
        long long30 = frequency0.getCumFreq(10);
        java.lang.String str31 = frequency0.toString();
        double double33 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t33%\t33%\n2\t1\t33%\t67%\n10\t1\t33%\t100%\n");
        long long35 = frequency0.getCumFreq((int) 'a');
        double double37 = frequency0.getPct(0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str10, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n" + "'", str31, "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        boolean boolean10 = frequency0.equals((java.lang.Object) (short) 0);
        double double12 = frequency0.getPct((int) (byte) 0);
        double double14 = frequency0.getCumPct((long) (byte) 1);
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        long long17 = frequency15.getCumFreq('#');
        long long19 = frequency15.getCumFreq((java.lang.Object) (byte) 1);
        long long21 = frequency15.getCount(0L);
        frequency15.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double25 = frequency15.getPct(0);
        long long27 = frequency15.getCount((java.lang.Object) (short) -1);
        double double29 = frequency15.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str30 = frequency15.toString();
        long long32 = frequency15.getCount('#');
        double double33 = frequency0.getCumPct((java.lang.Object) '#');
        frequency0.addValue(0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n" + "'", str30, "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        long long6 = frequency0.getSumFreq();
        double double8 = frequency0.getCumPct('#');
        double double10 = frequency0.getCumPct((int) (byte) 1);
        double double12 = frequency0.getCumPct((int) '4');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double8 = frequency0.getPct(' ');
        frequency0.addValue((long) (byte) 10);
        long long12 = frequency0.getCumFreq((long) '#');
        long long13 = frequency0.getSumFreq();
        long long15 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        double double17 = frequency0.getCumPct('a');
        double double19 = frequency0.getPct('4');
        long long21 = frequency0.getCount(' ');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        long long6 = frequency0.getSumFreq();
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor7 = frequency0.valuesIterator();
        long long9 = frequency0.getCount((long) 100);
        long long11 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        frequency0.addValue((long) '#');
        long long15 = frequency0.getCumFreq(' ');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        long long6 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((long) (short) 1);
        frequency0.clear();
        java.lang.Object obj10 = null;
        boolean boolean11 = frequency0.equals(obj10);
        double double13 = frequency0.getPct(' ');
        double double15 = frequency0.getCumPct((int) ' ');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCount(0L);
        double double8 = frequency0.getPct('a');
        frequency0.clear();
        frequency0.clear();
        long long12 = frequency0.getCumFreq(0);
        double double14 = frequency0.getPct((long) 100);
        java.lang.String str15 = frequency0.toString();
        frequency0.addValue((java.lang.Integer) (-1));
        long long19 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nhi!\t1\t100%\t100%\n");
        double double21 = frequency0.getCumPct('a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str15, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCount(0L);
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t33%\t33%\n2\t1\t33%\t67%\n10\t1\t33%\t100%\n");
        double double10 = frequency0.getPct('#');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        long long13 = frequency11.getCumFreq('#');
        long long15 = frequency11.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long17 = frequency11.getCumFreq((int) (short) -1);
        double double19 = frequency11.getCumPct(1L);
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        long long22 = frequency20.getCumFreq('#');
        double double24 = frequency20.getPct((java.lang.Object) (-1.0d));
        long long26 = frequency20.getCount('#');
        frequency11.addValue((java.lang.Object) long26);
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency();
        long long30 = frequency28.getCumFreq('#');
        double double32 = frequency28.getPct((long) (short) 100);
        long long34 = frequency28.getCount((java.lang.Comparable<java.lang.String>) "");
        long long36 = frequency28.getCumFreq((int) (short) 0);
        double double38 = frequency28.getPct(' ');
        boolean boolean39 = frequency11.equals((java.lang.Object) frequency28);
        long long41 = frequency11.getCount(0);
        double double43 = frequency11.getCumPct(' ');
        org.apache.commons.math.stat.Frequency frequency44 = new org.apache.commons.math.stat.Frequency();
        long long46 = frequency44.getCumFreq('#');
        long long48 = frequency44.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long50 = frequency44.getCumFreq((int) (short) -1);
        frequency44.addValue((java.lang.Integer) 10);
        long long54 = frequency44.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        long long56 = frequency44.getCumFreq((long) (byte) 10);
        java.lang.String str57 = frequency44.toString();
        double double58 = frequency11.getPct((java.lang.Object) str57);
        // The following exception was thrown during execution in test generation
        try {
            long long59 = frequency0.getCount((java.lang.Object) frequency11);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n" + "'", str57, "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCumFreq((int) (short) -1);
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency0.clear();
        double double11 = frequency0.getPct((int) (short) 0);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor12 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        long long15 = frequency13.getCumFreq('#');
        double double17 = frequency13.getPct((java.lang.Object) (-1.0d));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor18 = frequency13.valuesIterator();
        boolean boolean20 = frequency13.equals((java.lang.Object) 0.5d);
        java.lang.String str21 = frequency13.toString();
        long long23 = frequency13.getCount((long) 0);
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency();
        long long26 = frequency24.getCumFreq('#');
        double double28 = frequency24.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor29 = frequency24.valuesIterator();
        boolean boolean30 = frequency13.equals((java.lang.Object) wildcardComparableItor29);
        long long32 = frequency13.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        double double34 = frequency13.getPct((long) (short) 100);
        long long36 = frequency13.getCount(0);
        double double37 = frequency0.getPct((java.lang.Object) 0);
        java.lang.String str38 = frequency0.toString();
        java.lang.String str39 = frequency0.toString();
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor40 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(wildcardComparableItor12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(wildcardComparableItor18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(wildcardComparableItor29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str38, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str39, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertNotNull(wildcardComparableItor40);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getPct((int) (byte) 100);
        long long9 = frequency0.getCount(10);
        java.lang.String str10 = frequency0.toString();
        long long12 = frequency0.getCount((int) '4');
        double double14 = frequency0.getPct((int) '#');
        long long16 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t33%\t33%\n10\t1\t33%\t67%\n52\t1\t33%\t100%\n");
        double double18 = frequency0.getCumPct((long) ' ');
        long long20 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency();
        long long23 = frequency21.getCumFreq('#');
        long long25 = frequency21.getCumFreq((java.lang.Object) (byte) 1);
        double double27 = frequency21.getPct((int) '4');
        long long29 = frequency21.getCumFreq((long) (byte) -1);
        frequency21.addValue((java.lang.Comparable<java.lang.String>) "hi!");
        double double32 = frequency0.getPct((java.lang.Object) "hi!");
        double double34 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        frequency0.addValue('a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str10, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        long long8 = frequency0.getCumFreq((int) (short) 0);
        double double10 = frequency0.getPct(' ');
        java.lang.Comparable<java.lang.String> strComparable11 = null;
        double double12 = frequency0.getCumPct(strComparable11);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        double double17 = frequency10.getPct((int) (byte) 100);
        long long19 = frequency10.getCount(10);
        double double20 = frequency0.getPct((java.lang.Object) 10);
        long long22 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double24 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long25 = frequency0.getSumFreq();
        long long27 = frequency0.getCount((long) (byte) 100);
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency();
        long long30 = frequency28.getCumFreq('#');
        double double32 = frequency28.getPct((java.lang.Object) (-1.0d));
        long long34 = frequency28.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        frequency28.addValue((long) (short) 1);
        frequency28.clear();
        long long39 = frequency28.getCumFreq(100);
        double double41 = frequency28.getCumPct('a');
        java.lang.Comparable<java.lang.String> strComparable42 = null;
        double double43 = frequency28.getCumPct(strComparable42);
        long long44 = frequency0.getCount((java.lang.Object) double43);
        long long46 = frequency0.getCount((long) 1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        double double6 = frequency0.getPct('a');
        java.lang.String str7 = frequency0.toString();
        long long9 = frequency0.getCount(0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str7, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCount(10);
        java.lang.String str13 = frequency0.toString();
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor16 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        long long19 = frequency17.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        long long22 = frequency20.getCumFreq('#');
        double double24 = frequency20.getPct('#');
        double double25 = frequency17.getCumPct((java.lang.Object) '#');
        java.lang.Object obj26 = null;
        double double27 = frequency17.getPct(obj26);
        long long29 = frequency17.getCumFreq(0L);
        long long31 = frequency17.getCumFreq((long) (byte) 100);
        frequency17.addValue((long) (-1));
        long long34 = frequency17.getSumFreq();
        double double35 = frequency0.getPct((java.lang.Object) long34);
        double double37 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str13, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertNotNull(wildcardComparableItor16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        frequency0.addValue((long) ' ');
        frequency0.clear();
        frequency0.addValue('a');
        long long11 = frequency0.getCumFreq((long) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Integer) 100);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        long long11 = frequency0.getCount((int) ' ');
        boolean boolean13 = frequency0.equals((java.lang.Object) true);
        double double15 = frequency0.getCumPct((java.lang.Object) 0.0f);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor16 = frequency0.valuesIterator();
        double double18 = frequency0.getCumPct('a');
        long long20 = frequency0.getCumFreq((int) '#');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        boolean boolean10 = frequency0.equals((java.lang.Object) (short) 0);
        double double12 = frequency0.getPct((int) (byte) 0);
        double double14 = frequency0.getCumPct((long) (byte) 1);
        java.lang.String str15 = frequency0.toString();
        long long17 = frequency0.getCount((long) '#');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str15, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        long long6 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long8 = frequency0.getCount((int) (short) 0);
        double double10 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        long long13 = frequency11.getCumFreq('#');
        long long15 = frequency11.getCumFreq((java.lang.Object) (byte) 1);
        long long17 = frequency11.getCumFreq((long) (byte) 10);
        frequency11.clear();
        boolean boolean19 = frequency0.equals((java.lang.Object) frequency11);
        frequency0.addValue((long) ' ');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        long long6 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((long) (short) 1);
        double double10 = frequency0.getPct((int) '4');
        double double12 = frequency0.getPct('a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        long long6 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct((java.lang.Object) 100.0f);
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        long long13 = frequency11.getCumFreq('#');
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getPct((java.lang.Object) (-1.0f));
        long long19 = frequency11.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double21 = frequency11.getPct((-1));
        long long23 = frequency11.getCumFreq(10);
        frequency11.clear();
        boolean boolean25 = frequency0.equals((java.lang.Object) frequency11);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        java.lang.String str6 = frequency0.toString();
        double double8 = frequency0.getPct('4');
        frequency0.addValue((java.lang.Integer) (-1));
        double double12 = frequency0.getPct('4');
        long long14 = frequency0.getCount((long) (short) 1);
        java.lang.String str15 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        long long18 = frequency16.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        long long21 = frequency19.getCumFreq('#');
        double double23 = frequency19.getPct('#');
        double double24 = frequency16.getCumPct((java.lang.Object) '#');
        java.lang.Object obj25 = null;
        double double26 = frequency16.getPct(obj25);
        long long28 = frequency16.getCumFreq(0L);
        long long30 = frequency16.getCumFreq((long) (short) 100);
        frequency0.addValue((java.lang.Object) long30);
        long long33 = frequency0.getCumFreq((int) (byte) 0);
        long long35 = frequency0.getCumFreq((int) (short) 1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str6, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n" + "'", str15, "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 2L + "'", long33 == 2L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 2L + "'", long35 == 2L);
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCumFreq(0L);
        long long14 = frequency0.getCumFreq((long) (byte) 100);
        frequency0.addValue('4');
        double double18 = frequency0.getPct((int) '#');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor19 = frequency0.valuesIterator();
        long long21 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue(1);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCount(10);
        double double14 = frequency0.getPct('4');
        double double16 = frequency0.getPct(0L);
        double double18 = frequency0.getCumPct((int) '#');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor19 = frequency0.valuesIterator();
        long long21 = frequency0.getCount((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(wildcardComparableItor19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        frequency0.addValue(100);
        org.apache.commons.math.stat.Frequency frequency5 = new org.apache.commons.math.stat.Frequency();
        long long7 = frequency5.getCumFreq('#');
        double double9 = frequency5.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor10 = frequency5.valuesIterator();
        double double12 = frequency5.getCumPct('#');
        long long14 = frequency5.getCount('a');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency5.valuesIterator();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = frequency0.getCumFreq((java.lang.Object) wildcardComparableItor15);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.TreeMap$KeyIterator cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(wildcardComparableItor10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        frequency0.addValue((long) (short) 1);
        double double8 = frequency0.getPct((int) (short) 1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        long long6 = frequency0.getSumFreq();
        double double8 = frequency0.getCumPct('#');
        double double10 = frequency0.getCumPct((int) (byte) 1);
        long long12 = frequency0.getCumFreq(0);
        double double14 = frequency0.getPct(' ');
        double double16 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCumFreq((int) (short) -1);
        double double8 = frequency0.getCumPct(1L);
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        long long11 = frequency9.getCumFreq('#');
        double double13 = frequency9.getPct((java.lang.Object) (-1.0d));
        long long15 = frequency9.getCount('#');
        frequency0.addValue((java.lang.Object) long15);
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        long long19 = frequency17.getCumFreq('#');
        double double21 = frequency17.getPct((long) (short) 100);
        long long23 = frequency17.getCount((java.lang.Comparable<java.lang.String>) "");
        long long25 = frequency17.getCumFreq((int) (short) 0);
        double double27 = frequency17.getPct(' ');
        boolean boolean28 = frequency0.equals((java.lang.Object) frequency17);
        frequency0.clear();
        long long30 = frequency0.getSumFreq();
        org.apache.commons.math.stat.Frequency frequency31 = new org.apache.commons.math.stat.Frequency();
        long long33 = frequency31.getCumFreq('#');
        double double35 = frequency31.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor36 = frequency31.valuesIterator();
        double double38 = frequency31.getCumPct('#');
        long long40 = frequency31.getCount((java.lang.Object) (short) -1);
        boolean boolean41 = frequency0.equals((java.lang.Object) (short) -1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(wildcardComparableItor36);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        java.lang.String str6 = frequency0.toString();
        long long7 = frequency0.getSumFreq();
        long long8 = frequency0.getSumFreq();
        long long10 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        long long13 = frequency11.getCumFreq('#');
        long long15 = frequency11.getCumFreq((java.lang.Object) (byte) 1);
        long long17 = frequency11.getCumFreq((java.lang.Object) 10.0d);
        frequency11.addValue((long) (byte) 1);
        double double21 = frequency11.getCumPct((int) 'a');
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency();
        long long24 = frequency22.getCumFreq('#');
        long long26 = frequency22.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long28 = frequency22.getCumFreq((int) (short) -1);
        double double30 = frequency22.getCumPct(1L);
        org.apache.commons.math.stat.Frequency frequency31 = new org.apache.commons.math.stat.Frequency();
        long long33 = frequency31.getCumFreq('#');
        double double35 = frequency31.getPct((java.lang.Object) (-1.0d));
        long long37 = frequency31.getCount('#');
        frequency22.addValue((java.lang.Object) long37);
        long long40 = frequency22.getCumFreq((-1L));
        long long41 = frequency11.getCumFreq((java.lang.Object) (-1L));
        frequency11.addValue((java.lang.Integer) 0);
        double double44 = frequency0.getCumPct((java.lang.Object) 0);
        long long46 = frequency0.getCumFreq(' ');
        frequency0.addValue(0);
        double double50 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        double double52 = frequency0.getPct((int) (byte) 10);
        frequency0.addValue((long) (byte) 0);
        double double56 = frequency0.getCumPct(' ');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str6, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct(100);
        long long12 = frequency0.getCount((int) (short) 0);
        frequency0.clear();
        long long15 = frequency0.getCount(0L);
        long long17 = frequency0.getCount((long) 10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCumFreq((int) (short) -1);
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency0.clear();
        double double11 = frequency0.getPct('a');
        java.lang.Comparable<java.lang.String> strComparable12 = null;
        double double13 = frequency0.getCumPct(strComparable12);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getPct((int) (byte) 100);
        long long9 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        long long11 = frequency0.getCount(' ');
        java.lang.Object obj12 = null;
        long long13 = frequency0.getCumFreq(obj12);
        java.lang.String str14 = frequency0.toString();
        double double16 = frequency0.getPct(10);
        double double18 = frequency0.getPct(3L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str14, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCumFreq((int) (short) -1);
        double double8 = frequency0.getCumPct(1L);
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        long long11 = frequency9.getCumFreq('#');
        double double13 = frequency9.getPct((java.lang.Object) (-1.0d));
        long long15 = frequency9.getCount('#');
        frequency0.addValue((java.lang.Object) long15);
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        long long19 = frequency17.getCumFreq('#');
        double double21 = frequency17.getPct((long) (short) 100);
        long long23 = frequency17.getCount((java.lang.Comparable<java.lang.String>) "");
        long long25 = frequency17.getCumFreq((int) (short) 0);
        double double27 = frequency17.getPct(' ');
        boolean boolean28 = frequency0.equals((java.lang.Object) frequency17);
        long long30 = frequency0.getCount(0);
        double double32 = frequency0.getPct((int) (byte) 0);
        long long34 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        double double36 = frequency0.getPct((int) ' ');
        frequency0.addValue((java.lang.Integer) (-1));
        double double40 = frequency0.getCumPct(0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        double double17 = frequency10.getPct((int) (byte) 100);
        long long19 = frequency10.getCount(10);
        double double20 = frequency0.getPct((java.lang.Object) 10);
        long long22 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double24 = frequency0.getPct(0L);
        double double26 = frequency0.getCumPct(1L);
        frequency0.addValue((long) '#');
        long long30 = frequency0.getCount('#');
        double double32 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        long long33 = frequency0.getSumFreq();
        frequency0.addValue((int) (byte) 0);
        long long36 = frequency0.getSumFreq();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 2L + "'", long36 == 2L);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCount(0L);
        double double8 = frequency0.getPct('a');
        frequency0.clear();
        frequency0.clear();
        long long12 = frequency0.getCumFreq(0);
        double double14 = frequency0.getPct((long) 100);
        java.lang.String str15 = frequency0.toString();
        frequency0.addValue((java.lang.Integer) (-1));
        double double19 = frequency0.getCumPct(' ');
        double double21 = frequency0.getPct('a');
        double double23 = frequency0.getCumPct((long) 0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str15, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getPct((int) (byte) 100);
        long long9 = frequency0.getCount(10);
        java.lang.String str10 = frequency0.toString();
        long long12 = frequency0.getCount((int) '4');
        double double14 = frequency0.getPct((int) '#');
        long long16 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t33%\t33%\n10\t1\t33%\t67%\n52\t1\t33%\t100%\n");
        double double18 = frequency0.getCumPct((long) ' ');
        long long20 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long22 = frequency0.getCumFreq((long) (short) 0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str10, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        long long7 = frequency0.getCount('#');
        long long9 = frequency0.getCount((long) '#');
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        long long15 = frequency0.getCount((java.lang.Object) (short) 100);
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        long long18 = frequency16.getCumFreq('#');
        double double20 = frequency16.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor21 = frequency16.valuesIterator();
        java.lang.String str22 = frequency16.toString();
        double double24 = frequency16.getPct('4');
        frequency16.addValue((java.lang.Integer) (-1));
        double double28 = frequency16.getPct('4');
        double double30 = frequency16.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency31 = new org.apache.commons.math.stat.Frequency();
        long long33 = frequency31.getCumFreq('#');
        double double35 = frequency31.getPct('#');
        double double37 = frequency31.getPct((java.lang.Object) (-1.0f));
        long long39 = frequency31.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double41 = frequency31.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor42 = frequency31.valuesIterator();
        frequency31.addValue(0L);
        long long46 = frequency31.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long47 = frequency16.getCumFreq((java.lang.Object) "hi!");
        long long49 = frequency16.getCumFreq((long) (short) -1);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor50 = frequency16.valuesIterator();
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor51 = frequency16.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency52 = new org.apache.commons.math.stat.Frequency();
        long long54 = frequency52.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency55 = new org.apache.commons.math.stat.Frequency();
        long long57 = frequency55.getCumFreq('#');
        double double59 = frequency55.getPct('#');
        double double60 = frequency52.getCumPct((java.lang.Object) '#');
        java.lang.Object obj61 = null;
        double double62 = frequency52.getPct(obj61);
        long long64 = frequency52.getCumFreq(0L);
        double double66 = frequency52.getPct((long) (short) 100);
        double double68 = frequency52.getPct(0);
        org.apache.commons.math.stat.Frequency frequency69 = new org.apache.commons.math.stat.Frequency();
        long long71 = frequency69.getCumFreq('#');
        double double73 = frequency69.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor74 = frequency69.valuesIterator();
        java.lang.String str75 = frequency69.toString();
        double double77 = frequency69.getPct('4');
        long long78 = frequency52.getCount((java.lang.Object) double77);
        double double79 = frequency16.getCumPct((java.lang.Object) long78);
        long long81 = frequency16.getCumFreq((int) '4');
        frequency16.addValue((int) (short) -1);
        double double84 = frequency0.getPct((java.lang.Object) (short) -1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(wildcardComparableItor21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str22, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(wildcardComparableItor42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNotNull(wildcardComparableItor50);
        org.junit.Assert.assertNotNull(wildcardComparableItor51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(wildcardComparableItor74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str75, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1.0d + "'", double79 == 1.0d);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1L + "'", long81 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double8 = frequency0.getPct(' ');
        frequency0.addValue((long) (byte) 10);
        long long12 = frequency0.getCumFreq((long) '#');
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        long long15 = frequency13.getCumFreq('#');
        long long17 = frequency13.getCumFreq((java.lang.Object) (byte) 1);
        long long19 = frequency13.getCount(0L);
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        long long22 = frequency20.getCumFreq('#');
        double double23 = frequency13.getPct((java.lang.Object) long22);
        frequency13.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency13.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double27 = frequency0.getCumPct((java.lang.Object) frequency13);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        long long11 = frequency0.getCount((int) ' ');
        boolean boolean13 = frequency0.equals((java.lang.Object) true);
        double double15 = frequency0.getCumPct((java.lang.Object) 0.0f);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor16 = frequency0.valuesIterator();
        double double18 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        long long20 = frequency0.getCumFreq(1L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        long long10 = frequency0.getCumFreq((long) (byte) -1);
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t33%\t33%\n10\t1\t33%\t67%\n52\t1\t33%\t100%\n");
        long long14 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t33%\t33%\n10\t1\t33%\t67%\n52\t1\t33%\t100%\n");
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        long long18 = frequency0.getCount('#');
        long long20 = frequency0.getCount((-1));
        java.lang.String str21 = frequency0.toString();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t33%\t33%\n10\t1\t33%\t67%\n52\t1\t33%\t100%\n\t1\t100%\t100%\n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t33%\t33%\n10\t1\t33%\t67%\n52\t1\t33%\t100%\n\t1\t100%\t100%\n");
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getPct((int) (byte) 100);
        double double9 = frequency0.getPct(0);
        double double11 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "");
        long long12 = frequency0.getSumFreq();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        long long6 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long8 = frequency0.getCumFreq((long) (short) -1);
        double double10 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double10 = frequency0.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor11 = frequency0.valuesIterator();
        frequency0.addValue(0L);
        long long15 = frequency0.getCumFreq(' ');
        long long17 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        frequency0.clear();
        double double20 = frequency0.getPct('#');
        frequency0.addValue(0);
        long long24 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t33%\t33%\n2\t1\t33%\t67%\n10\t1\t33%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(wildcardComparableItor11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCumFreq((java.lang.Object) 10.0d);
        frequency0.addValue((long) (byte) 1);
        double double10 = frequency0.getCumPct((int) 'a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        long long13 = frequency11.getCumFreq('#');
        long long15 = frequency11.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long17 = frequency11.getCumFreq((int) (short) -1);
        double double19 = frequency11.getCumPct(1L);
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        long long22 = frequency20.getCumFreq('#');
        double double24 = frequency20.getPct((java.lang.Object) (-1.0d));
        long long26 = frequency20.getCount('#');
        frequency11.addValue((java.lang.Object) long26);
        long long29 = frequency11.getCumFreq((-1L));
        long long30 = frequency0.getCumFreq((java.lang.Object) (-1L));
        long long32 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        double double34 = frequency0.getPct('a');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor35 = frequency0.valuesIterator();
        long long36 = frequency0.getSumFreq();
        long long38 = frequency0.getCount((long) 'a');
        long long40 = frequency0.getCumFreq((long) (short) 1);
        double double42 = frequency0.getCumPct((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        long long6 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double10 = frequency0.getCumPct((java.lang.Object) 100.0f);
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        long long13 = frequency11.getCumFreq('#');
        double double15 = frequency11.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor16 = frequency11.valuesIterator();
        double double18 = frequency11.getCumPct('#');
        long long20 = frequency11.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency();
        long long23 = frequency21.getCumFreq('#');
        double double25 = frequency21.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor26 = frequency21.valuesIterator();
        double double28 = frequency21.getPct((int) (byte) 100);
        long long30 = frequency21.getCount(10);
        double double31 = frequency11.getPct((java.lang.Object) 10);
        long long33 = frequency11.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        frequency11.addValue('4');
        java.lang.Class<?> wildcardClass36 = frequency11.getClass();
        // The following exception was thrown during execution in test generation
        try {
            long long37 = frequency0.getCount((java.lang.Object) frequency11);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(wildcardComparableItor16);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(wildcardComparableItor26);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        double double17 = frequency10.getPct((int) (byte) 100);
        long long19 = frequency10.getCount(10);
        double double20 = frequency0.getPct((java.lang.Object) 10);
        frequency0.addValue(100L);
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency();
        long long25 = frequency23.getCumFreq('#');
        double double27 = frequency23.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor28 = frequency23.valuesIterator();
        double double30 = frequency23.getCumPct('#');
        frequency23.addValue((int) (short) -1);
        long long34 = frequency23.getCount((int) ' ');
        boolean boolean36 = frequency23.equals((java.lang.Object) true);
        double double38 = frequency23.getCumPct((java.lang.Object) 0.0f);
        frequency23.clear();
        org.apache.commons.math.stat.Frequency frequency40 = new org.apache.commons.math.stat.Frequency();
        long long42 = frequency40.getCumFreq('#');
        double double44 = frequency40.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor45 = frequency40.valuesIterator();
        double double47 = frequency40.getCumPct('#');
        long long49 = frequency40.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency50 = new org.apache.commons.math.stat.Frequency();
        long long52 = frequency50.getCumFreq('#');
        double double54 = frequency50.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor55 = frequency50.valuesIterator();
        double double57 = frequency50.getPct((int) (byte) 100);
        long long59 = frequency50.getCount(10);
        double double60 = frequency40.getPct((java.lang.Object) 10);
        boolean boolean61 = frequency23.equals((java.lang.Object) frequency40);
        long long63 = frequency23.getCount('#');
        long long64 = frequency0.getCount((java.lang.Object) long63);
        double double66 = frequency0.getPct((int) (byte) 10);
        double double68 = frequency0.getCumPct(2L);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue('#');
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(wildcardComparableItor28);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(wildcardComparableItor45);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(wildcardComparableItor55);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        long long6 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((long) (short) 1);
        long long10 = frequency0.getCumFreq('a');
        double double12 = frequency0.getPct('a');
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        long long15 = frequency13.getCumFreq('#');
        double double17 = frequency13.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor18 = frequency13.valuesIterator();
        double double20 = frequency13.getPct((int) (byte) 100);
        long long22 = frequency13.getCount(10);
        java.lang.String str23 = frequency13.toString();
        long long25 = frequency13.getCount((int) '4');
        double double27 = frequency13.getPct((int) '#');
        long long29 = frequency13.getCumFreq((long) (byte) 10);
        boolean boolean30 = frequency0.equals((java.lang.Object) long29);
        long long31 = frequency0.getSumFreq();
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency();
        long long34 = frequency32.getCumFreq('#');
        double double36 = frequency32.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor37 = frequency32.valuesIterator();
        double double39 = frequency32.getCumPct('#');
        frequency32.addValue((int) (short) -1);
        long long43 = frequency32.getCount((int) ' ');
        boolean boolean45 = frequency32.equals((java.lang.Object) true);
        frequency32.addValue((int) '4');
        long long49 = frequency32.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        frequency32.addValue((long) '4');
        boolean boolean52 = frequency0.equals((java.lang.Object) '4');
        double double54 = frequency0.getPct('a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(wildcardComparableItor18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str23, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(wildcardComparableItor37);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        org.apache.commons.math.stat.Frequency frequency8 = new org.apache.commons.math.stat.Frequency();
        long long10 = frequency8.getCumFreq('#');
        long long12 = frequency8.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        double double14 = frequency8.getPct(100);
        frequency8.addValue((long) (short) 1);
        long long18 = frequency8.getCount((java.lang.Comparable<java.lang.String>) "");
        frequency0.addValue((java.lang.Object) "");
        double double21 = frequency0.getCumPct('a');
        double double23 = frequency0.getCumPct((long) (short) 10);
        double double25 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str5 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency6 = new org.apache.commons.math.stat.Frequency();
        long long8 = frequency6.getCumFreq('#');
        double double10 = frequency6.getPct((long) (short) 100);
        long long11 = frequency0.getCount((java.lang.Object) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor12 = frequency0.valuesIterator();
        double double14 = frequency0.getCumPct((int) (byte) 1);
        double double16 = frequency0.getCumPct((long) (short) 1);
        java.lang.String str17 = frequency0.toString();
        java.lang.String str18 = frequency0.toString();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str5, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor12);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str17, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str18, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        long long11 = frequency0.getCount((int) ' ');
        boolean boolean13 = frequency0.equals((java.lang.Object) true);
        frequency0.addValue((int) '4');
        long long17 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        double double19 = frequency0.getPct('#');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        long long6 = frequency0.getSumFreq();
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long10 = frequency0.getCumFreq('#');
        boolean boolean12 = frequency0.equals((java.lang.Object) 1.0d);
        long long14 = frequency0.getCumFreq((long) 100);
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        long long17 = frequency15.getCumFreq('#');
        double double19 = frequency15.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor20 = frequency15.valuesIterator();
        java.lang.String str21 = frequency15.toString();
        frequency15.addValue('a');
        frequency15.clear();
        frequency15.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        long long28 = frequency15.getCumFreq((long) (byte) 10);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor29 = frequency15.valuesIterator();
        // The following exception was thrown during execution in test generation
        try {
            long long30 = frequency0.getCumFreq((java.lang.Object) frequency15);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(wildcardComparableItor20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor29);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str5 = frequency0.toString();
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "hi!");
        double double9 = frequency0.getCumPct('4');
        double double11 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        double double13 = frequency0.getPct(' ');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str5, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double8 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((java.lang.Integer) 1);
        long long12 = frequency0.getCount((int) (short) -1);
        double double14 = frequency0.getCumPct('#');
        frequency0.clear();
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        long long18 = frequency16.getCumFreq('#');
        long long20 = frequency16.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str21 = frequency16.toString();
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency();
        long long24 = frequency22.getCumFreq('#');
        double double26 = frequency22.getPct((long) (short) 100);
        long long27 = frequency16.getCount((java.lang.Object) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor28 = frequency16.valuesIterator();
        double double30 = frequency16.getCumPct(0L);
        double double32 = frequency16.getCumPct((long) (byte) 10);
        boolean boolean33 = frequency0.equals((java.lang.Object) frequency16);
        long long35 = frequency16.getCumFreq('a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor28);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCumFreq(0L);
        double double14 = frequency0.getPct((long) '#');
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        long long17 = frequency15.getCumFreq('#');
        double double19 = frequency15.getPct((long) (short) 100);
        java.lang.String str20 = frequency15.toString();
        boolean boolean21 = frequency0.equals((java.lang.Object) str20);
        double double23 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency();
        long long26 = frequency24.getCumFreq('#');
        double double28 = frequency24.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor29 = frequency24.valuesIterator();
        double double31 = frequency24.getPct((int) (byte) 100);
        long long33 = frequency24.getCount(10);
        java.lang.String str34 = frequency24.toString();
        long long36 = frequency24.getCount((int) '4');
        double double38 = frequency24.getPct((int) '#');
        org.apache.commons.math.stat.Frequency frequency39 = new org.apache.commons.math.stat.Frequency();
        long long41 = frequency39.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency();
        long long44 = frequency42.getCumFreq('#');
        double double46 = frequency42.getPct('#');
        double double47 = frequency39.getCumPct((java.lang.Object) '#');
        java.lang.Object obj48 = null;
        double double49 = frequency39.getPct(obj48);
        double double50 = frequency24.getPct(obj48);
        frequency24.addValue((java.lang.Integer) (-1));
        long long54 = frequency24.getCount((long) (byte) 1);
        boolean boolean55 = frequency0.equals((java.lang.Object) (byte) 1);
        double double57 = frequency0.getCumPct(0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str20, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(wildcardComparableItor29);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str34, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        double double17 = frequency10.getPct((int) (byte) 100);
        long long19 = frequency10.getCount(10);
        double double20 = frequency0.getPct((java.lang.Object) 10);
        long long22 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double24 = frequency0.getPct(' ');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        frequency0.clear();
        long long29 = frequency0.getCumFreq(10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        long long6 = frequency0.getSumFreq();
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor7 = frequency0.valuesIterator();
        long long9 = frequency0.getCount((long) 100);
        long long11 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        long long13 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t50%\t50%\n1\t1\t50%\t100%\n");
        double double15 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        double double17 = frequency0.getCumPct((long) (short) -1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCumFreq((java.lang.Object) 10.0d);
        long long8 = frequency0.getCumFreq('a');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n \t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCumFreq(0L);
        long long14 = frequency0.getCount((long) '4');
        frequency0.addValue(' ');
        long long18 = frequency0.getCumFreq(' ');
        frequency0.addValue('a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        double double17 = frequency10.getPct((int) (byte) 100);
        long long19 = frequency10.getCount(10);
        double double20 = frequency0.getPct((java.lang.Object) 10);
        java.lang.Comparable<java.lang.String> strComparable21 = null;
        double double22 = frequency0.getCumPct(strComparable21);
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency();
        long long25 = frequency23.getCumFreq('#');
        double double27 = frequency23.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor28 = frequency23.valuesIterator();
        java.lang.String str29 = frequency23.toString();
        double double31 = frequency23.getPct('4');
        frequency23.addValue((java.lang.Integer) (-1));
        double double35 = frequency23.getPct((int) (short) 100);
        double double37 = frequency23.getCumPct((long) 1);
        frequency0.addValue((java.lang.Object) 1);
        org.apache.commons.math.stat.Frequency frequency39 = new org.apache.commons.math.stat.Frequency();
        long long41 = frequency39.getCumFreq('#');
        double double43 = frequency39.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor44 = frequency39.valuesIterator();
        double double46 = frequency39.getCumPct('#');
        frequency39.addValue((int) (short) -1);
        frequency39.addValue((int) '4');
        double double52 = frequency39.getCumPct(' ');
        frequency39.addValue((java.lang.Integer) 10);
        frequency39.clear();
        long long56 = frequency39.getSumFreq();
        double double57 = frequency0.getCumPct((java.lang.Object) long56);
        org.apache.commons.math.stat.Frequency frequency58 = new org.apache.commons.math.stat.Frequency();
        long long60 = frequency58.getCumFreq('#');
        double double62 = frequency58.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor63 = frequency58.valuesIterator();
        java.lang.String str64 = frequency58.toString();
        double double66 = frequency58.getPct('4');
        frequency58.addValue((java.lang.Integer) (-1));
        double double70 = frequency58.getPct((int) (short) 100);
        double double72 = frequency58.getCumPct('4');
        long long74 = frequency58.getCount(100L);
        long long76 = frequency58.getCumFreq(' ');
        boolean boolean77 = frequency0.equals((java.lang.Object) frequency58);
        org.apache.commons.math.stat.Frequency frequency78 = new org.apache.commons.math.stat.Frequency();
        long long80 = frequency78.getCumFreq('#');
        double double82 = frequency78.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor83 = frequency78.valuesIterator();
        double double85 = frequency78.getPct((int) (byte) 100);
        long long87 = frequency78.getCount((java.lang.Comparable<java.lang.String>) "");
        long long89 = frequency78.getCount(' ');
        long long90 = frequency0.getCumFreq((java.lang.Object) ' ');
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(wildcardComparableItor28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str29, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(wildcardComparableItor44);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(wildcardComparableItor63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str64, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(wildcardComparableItor83);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        java.lang.Object obj10 = null;
        boolean boolean11 = frequency0.equals(obj10);
        long long13 = frequency0.getCount((int) (short) 0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        long long6 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((long) (short) 1);
        frequency0.clear();
        long long11 = frequency0.getCumFreq(100);
        double double13 = frequency0.getCumPct('a');
        java.lang.Comparable<java.lang.String> strComparable14 = null;
        double double15 = frequency0.getCumPct(strComparable14);
        double double17 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n3\t1\t50%\t50%\n35\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double8 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double10 = frequency0.getPct('#');
        long long11 = frequency0.getSumFreq();
        double double13 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        long long15 = frequency0.getCumFreq('a');
        long long17 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Integer) 10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double10 = frequency0.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor11 = frequency0.valuesIterator();
        frequency0.addValue(0L);
        long long15 = frequency0.getCumFreq(' ');
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        long long18 = frequency16.getCumFreq('#');
        long long20 = frequency16.getCumFreq((java.lang.Object) (byte) 1);
        long long22 = frequency16.getCount(0L);
        double double23 = frequency0.getCumPct((java.lang.Object) long22);
        double double25 = frequency0.getCumPct((int) (byte) 0);
        frequency0.clear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(wildcardComparableItor11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        frequency0.addValue((int) '4');
        double double13 = frequency0.getCumPct(' ');
        frequency0.addValue((java.lang.Integer) 10);
        frequency0.clear();
        long long17 = frequency0.getSumFreq();
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency();
        long long20 = frequency18.getCumFreq('#');
        double double22 = frequency18.getPct((java.lang.Object) (-1.0d));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor23 = frequency18.valuesIterator();
        long long25 = frequency18.getCount('#');
        long long27 = frequency18.getCount((long) '#');
        long long29 = frequency18.getCumFreq((int) (byte) 10);
        boolean boolean30 = frequency0.equals((java.lang.Object) frequency18);
        long long32 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency33 = new org.apache.commons.math.stat.Frequency();
        long long35 = frequency33.getCumFreq('#');
        double double37 = frequency33.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor38 = frequency33.valuesIterator();
        frequency33.addValue('#');
        double double42 = frequency33.getCumPct(0);
        long long44 = frequency33.getCumFreq(0L);
        long long45 = frequency0.getCount((java.lang.Object) long44);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(wildcardComparableItor23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(wildcardComparableItor38);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        double double17 = frequency10.getPct((int) (byte) 100);
        long long19 = frequency10.getCount(10);
        double double20 = frequency0.getPct((java.lang.Object) 10);
        long long22 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency();
        long long25 = frequency23.getCumFreq('#');
        double double27 = frequency23.getPct('#');
        long long29 = frequency23.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        frequency23.addValue((long) 0);
        long long33 = frequency23.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        frequency23.addValue((int) ' ');
        boolean boolean36 = frequency0.equals((java.lang.Object) frequency23);
        double double38 = frequency23.getPct(10L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCumFreq((int) (short) -1);
        frequency0.addValue((java.lang.Integer) 10);
        long long10 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        long long12 = frequency0.getCumFreq((long) (byte) 10);
        double double14 = frequency0.getCumPct(' ');
        frequency0.addValue((long) (byte) 10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double10 = frequency0.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor11 = frequency0.valuesIterator();
        frequency0.addValue(0L);
        long long15 = frequency0.getCumFreq(' ');
        double double17 = frequency0.getPct('#');
        double double19 = frequency0.getPct(0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(wildcardComparableItor11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCumFreq((int) (short) -1);
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency0.clear();
        double double11 = frequency0.getPct((int) (short) 0);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor12 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        long long15 = frequency13.getCumFreq('#');
        long long17 = frequency13.getCumFreq((java.lang.Object) (byte) 1);
        long long19 = frequency13.getCount(0L);
        double double21 = frequency13.getPct('a');
        frequency13.clear();
        frequency13.clear();
        double double25 = frequency13.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        frequency13.addValue((long) (byte) 10);
        double double29 = frequency13.getPct((long) (byte) 1);
        double double30 = frequency0.getCumPct((java.lang.Object) double29);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(wildcardComparableItor12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        long long11 = frequency0.getCount((int) ' ');
        boolean boolean13 = frequency0.equals((java.lang.Object) true);
        double double15 = frequency0.getCumPct((java.lang.Object) 0.0f);
        double double17 = frequency0.getCumPct((java.lang.Object) "");
        double double19 = frequency0.getCumPct(0);
        double double21 = frequency0.getPct((int) (byte) -1);
        long long23 = frequency0.getCount('4');
        double double25 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency26 = new org.apache.commons.math.stat.Frequency();
        long long28 = frequency26.getCumFreq('#');
        double double30 = frequency26.getPct('#');
        double double32 = frequency26.getPct((java.lang.Object) (-1.0f));
        long long34 = frequency26.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double36 = frequency26.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor37 = frequency26.valuesIterator();
        double double39 = frequency26.getPct('4');
        long long41 = frequency26.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long43 = frequency26.getCount((int) '4');
        frequency26.clear();
        boolean boolean45 = frequency0.equals((java.lang.Object) frequency26);
        long long47 = frequency26.getCount('#');
        double double49 = frequency26.getCumPct(10L);
        long long51 = frequency26.getCount((long) (byte) 10);
        long long53 = frequency26.getCumFreq((long) (byte) -1);
        long long55 = frequency26.getCount('#');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(wildcardComparableItor37);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCumFreq((int) (short) -1);
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency0.clear();
        java.lang.Object obj10 = null;
        double double11 = frequency0.getPct(obj10);
        double double13 = frequency0.getPct('#');
        java.lang.String str14 = frequency0.toString();
        long long16 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        frequency0.addValue('a');
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((long) ' ');
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str14, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getPct((int) (byte) 100);
        long long9 = frequency0.getCount(10);
        java.lang.String str10 = frequency0.toString();
        long long12 = frequency0.getCount((int) '4');
        double double14 = frequency0.getPct((int) '#');
        long long16 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t33%\t33%\n10\t1\t33%\t67%\n52\t1\t33%\t100%\n");
        double double18 = frequency0.getCumPct((long) ' ');
        double double20 = frequency0.getCumPct('a');
        long long22 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        double double24 = frequency0.getPct((-1));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str10, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        long long11 = frequency0.getCount((int) ' ');
        boolean boolean13 = frequency0.equals((java.lang.Object) true);
        double double15 = frequency0.getCumPct((java.lang.Object) 0.0f);
        double double17 = frequency0.getCumPct((java.lang.Object) "");
        double double19 = frequency0.getCumPct(0);
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        long long22 = frequency20.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency();
        long long25 = frequency23.getCumFreq('#');
        double double27 = frequency23.getPct('#');
        double double28 = frequency20.getCumPct((java.lang.Object) '#');
        double double30 = frequency20.getPct((long) (short) -1);
        double double32 = frequency20.getCumPct((int) (short) 100);
        double double34 = frequency20.getPct((long) (byte) 0);
        double double36 = frequency20.getPct(10);
        double double37 = frequency0.getCumPct((java.lang.Object) double36);
        double double39 = frequency0.getCumPct('a');
        long long40 = frequency0.getSumFreq();
        org.apache.commons.math.stat.Frequency frequency41 = new org.apache.commons.math.stat.Frequency();
        long long43 = frequency41.getCumFreq('#');
        double double45 = frequency41.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor46 = frequency41.valuesIterator();
        java.lang.String str47 = frequency41.toString();
        long long48 = frequency41.getSumFreq();
        long long50 = frequency41.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency51 = new org.apache.commons.math.stat.Frequency();
        long long53 = frequency51.getCumFreq('#');
        double double55 = frequency51.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor56 = frequency51.valuesIterator();
        java.lang.String str57 = frequency51.toString();
        long long58 = frequency51.getSumFreq();
        long long59 = frequency51.getSumFreq();
        long long61 = frequency51.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        frequency41.addValue((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        double double64 = frequency41.getPct('a');
        double double66 = frequency41.getPct('#');
        boolean boolean67 = frequency0.equals((java.lang.Object) '#');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(wildcardComparableItor46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str47, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(wildcardComparableItor56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str57, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        boolean boolean10 = frequency0.equals((java.lang.Object) (short) 0);
        double double12 = frequency0.getPct((int) (byte) 0);
        double double14 = frequency0.getCumPct((long) (byte) 1);
        frequency0.clear();
        double double17 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency();
        long long20 = frequency18.getCumFreq('#');
        double double22 = frequency18.getPct((long) (short) 100);
        long long24 = frequency18.getCount((java.lang.Comparable<java.lang.String>) "");
        double double26 = frequency18.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency18.addValue((java.lang.Integer) 1);
        long long30 = frequency18.getCount((int) (short) -1);
        double double32 = frequency18.getCumPct('#');
        frequency18.clear();
        org.apache.commons.math.stat.Frequency frequency34 = new org.apache.commons.math.stat.Frequency();
        long long36 = frequency34.getCumFreq('#');
        long long38 = frequency34.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str39 = frequency34.toString();
        org.apache.commons.math.stat.Frequency frequency40 = new org.apache.commons.math.stat.Frequency();
        long long42 = frequency40.getCumFreq('#');
        double double44 = frequency40.getPct((long) (short) 100);
        long long45 = frequency34.getCount((java.lang.Object) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor46 = frequency34.valuesIterator();
        double double48 = frequency34.getCumPct(0L);
        double double50 = frequency34.getCumPct((long) (byte) 10);
        boolean boolean51 = frequency18.equals((java.lang.Object) frequency34);
        boolean boolean52 = frequency0.equals((java.lang.Object) boolean51);
        org.apache.commons.math.stat.Frequency frequency53 = new org.apache.commons.math.stat.Frequency();
        long long55 = frequency53.getCumFreq('#');
        long long57 = frequency53.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long59 = frequency53.getCumFreq((int) (short) -1);
        double double61 = frequency53.getCumPct(1L);
        org.apache.commons.math.stat.Frequency frequency62 = new org.apache.commons.math.stat.Frequency();
        long long64 = frequency62.getCumFreq('#');
        double double66 = frequency62.getPct((java.lang.Object) (-1.0d));
        long long68 = frequency62.getCount('#');
        frequency53.addValue((java.lang.Object) long68);
        long long71 = frequency53.getCumFreq((-1L));
        frequency53.addValue(0L);
        double double75 = frequency53.getCumPct(' ');
        double double77 = frequency53.getCumPct((int) (short) 100);
        long long79 = frequency53.getCumFreq((int) (byte) 100);
        long long81 = frequency53.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        double double83 = frequency53.getPct(1);
        // The following exception was thrown during execution in test generation
        try {
            double double84 = frequency0.getCumPct((java.lang.Object) frequency53);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str39, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor46);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.0d + "'", double77 == 1.0d);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 2L + "'", long79 == 2L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor10 = frequency0.valuesIterator();
        double double12 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t33%\t33%\n2\t1\t33%\t67%\n10\t1\t33%\t100%\n");
        long long14 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(wildcardComparableItor10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double8 = frequency0.getPct(' ');
        frequency0.addValue((long) (byte) 10);
        long long12 = frequency0.getCumFreq((long) '#');
        long long13 = frequency0.getSumFreq();
        double double15 = frequency0.getCumPct('a');
        double double17 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n3\t1\t50%\t50%\n35\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str5 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency6 = new org.apache.commons.math.stat.Frequency();
        long long8 = frequency6.getCumFreq('#');
        double double10 = frequency6.getPct((long) (short) 100);
        long long11 = frequency0.getCount((java.lang.Object) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor12 = frequency0.valuesIterator();
        double double14 = frequency0.getCumPct(0L);
        long long16 = frequency0.getCount(0);
        frequency0.addValue('a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str5, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor12);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCumFreq(0L);
        double double14 = frequency0.getPct((long) (short) 100);
        double double16 = frequency0.getPct((int) 'a');
        long long18 = frequency0.getCount('a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        long long11 = frequency0.getCount((int) ' ');
        boolean boolean13 = frequency0.equals((java.lang.Object) true);
        double double15 = frequency0.getCumPct((java.lang.Object) 0.0f);
        double double17 = frequency0.getCumPct((java.lang.Object) "");
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency();
        long long20 = frequency18.getCumFreq('#');
        double double22 = frequency18.getPct((long) (short) 100);
        long long24 = frequency18.getCount((java.lang.Comparable<java.lang.String>) "");
        frequency18.addValue((java.lang.Integer) 0);
        double double28 = frequency18.getPct(100);
        long long30 = frequency18.getCount((int) (short) 0);
        long long31 = frequency0.getCount((java.lang.Object) long30);
        double double33 = frequency0.getCumPct('4');
        long long35 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency36 = new org.apache.commons.math.stat.Frequency();
        long long38 = frequency36.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency39 = new org.apache.commons.math.stat.Frequency();
        long long41 = frequency39.getCumFreq('#');
        double double43 = frequency39.getPct('#');
        double double44 = frequency36.getCumPct((java.lang.Object) '#');
        java.lang.Object obj45 = null;
        double double46 = frequency36.getPct(obj45);
        long long48 = frequency36.getCumFreq(0L);
        frequency36.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t33%\t33%\n2\t1\t33%\t67%\n10\t1\t33%\t100%\n");
        double double51 = frequency0.getCumPct((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t33%\t33%\n2\t1\t33%\t67%\n10\t1\t33%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str5 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency6 = new org.apache.commons.math.stat.Frequency();
        long long8 = frequency6.getCumFreq('#');
        double double10 = frequency6.getPct((long) (short) 100);
        long long11 = frequency0.getCount((java.lang.Object) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor12 = frequency0.valuesIterator();
        long long14 = frequency0.getCount('4');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str5, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCount(0L);
        double double8 = frequency0.getPct('a');
        long long10 = frequency0.getCount('a');
        double double12 = frequency0.getCumPct((int) '4');
        double double14 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        java.lang.Class<?> wildcardClass15 = frequency0.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        frequency0.addValue(100);
        double double6 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double8 = frequency0.getCumPct((int) '#');
        long long10 = frequency0.getCount((long) 0);
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        long long13 = frequency11.getCumFreq('#');
        long long15 = frequency11.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long17 = frequency11.getCumFreq((int) (short) -1);
        frequency11.addValue((java.lang.Integer) 10);
        double double21 = frequency11.getPct('#');
        double double23 = frequency11.getCumPct((long) (short) 10);
        double double24 = frequency0.getPct((java.lang.Object) (short) 10);
        double double26 = frequency0.getCumPct('4');
        double double28 = frequency0.getPct('4');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCount(0L);
        double double8 = frequency0.getPct(0);
        long long10 = frequency0.getCount(0L);
        double double12 = frequency0.getPct((long) 100);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCount(10);
        java.lang.String str13 = frequency0.toString();
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor16 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        long long19 = frequency17.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        long long22 = frequency20.getCumFreq('#');
        double double24 = frequency20.getPct('#');
        double double25 = frequency17.getCumPct((java.lang.Object) '#');
        java.lang.Object obj26 = null;
        double double27 = frequency17.getPct(obj26);
        long long29 = frequency17.getCumFreq(0L);
        long long31 = frequency17.getCumFreq((long) (byte) 100);
        frequency17.addValue((long) (-1));
        long long34 = frequency17.getSumFreq();
        double double35 = frequency0.getPct((java.lang.Object) long34);
        long long37 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        double double39 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency40 = new org.apache.commons.math.stat.Frequency();
        long long42 = frequency40.getCumFreq('#');
        double double44 = frequency40.getPct((java.lang.Object) (-1.0d));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor45 = frequency40.valuesIterator();
        long long47 = frequency40.getCumFreq((int) (byte) 100);
        double double49 = frequency40.getPct(0);
        long long50 = frequency0.getCount((java.lang.Object) 0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str13, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertNotNull(wildcardComparableItor16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(wildcardComparableItor45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        frequency0.addValue((long) (short) 1);
        long long6 = frequency0.getCumFreq((int) '#');
        long long7 = frequency0.getSumFreq();
        long long9 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        java.lang.String str6 = frequency0.toString();
        frequency0.addValue('a');
        frequency0.clear();
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        double double13 = frequency0.getCumPct((long) 10);
        long long15 = frequency0.getCumFreq(0L);
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        frequency16.clear();
        frequency16.addValue((java.lang.Integer) 1);
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        long long22 = frequency20.getCumFreq('#');
        double double24 = frequency20.getPct((long) (short) 100);
        long long26 = frequency20.getCount((java.lang.Comparable<java.lang.String>) "");
        frequency20.addValue((java.lang.Integer) 0);
        double double30 = frequency20.getPct(100);
        long long32 = frequency20.getCount((int) (short) 0);
        long long34 = frequency20.getCumFreq('#');
        long long35 = frequency16.getCumFreq((java.lang.Object) long34);
        long long36 = frequency0.getCount((java.lang.Object) long34);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str6, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double10 = frequency0.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor11 = frequency0.valuesIterator();
        double double13 = frequency0.getPct('4');
        frequency0.addValue((java.lang.Integer) 100);
        long long17 = frequency0.getCount((long) '#');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(wildcardComparableItor11);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCount(0L);
        double double8 = frequency0.getPct('a');
        frequency0.clear();
        frequency0.clear();
        long long12 = frequency0.getCumFreq(0);
        double double14 = frequency0.getPct((long) 100);
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        long long17 = frequency15.getCumFreq('#');
        long long19 = frequency15.getCumFreq((java.lang.Object) (byte) 1);
        long long21 = frequency15.getCumFreq((java.lang.Object) 10.0d);
        frequency15.addValue((long) (byte) 1);
        double double25 = frequency15.getCumPct((int) 'a');
        org.apache.commons.math.stat.Frequency frequency26 = new org.apache.commons.math.stat.Frequency();
        long long28 = frequency26.getCumFreq('#');
        long long30 = frequency26.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long32 = frequency26.getCumFreq((int) (short) -1);
        double double34 = frequency26.getCumPct(1L);
        org.apache.commons.math.stat.Frequency frequency35 = new org.apache.commons.math.stat.Frequency();
        long long37 = frequency35.getCumFreq('#');
        double double39 = frequency35.getPct((java.lang.Object) (-1.0d));
        long long41 = frequency35.getCount('#');
        frequency26.addValue((java.lang.Object) long41);
        long long44 = frequency26.getCumFreq((-1L));
        long long45 = frequency15.getCumFreq((java.lang.Object) (-1L));
        frequency15.addValue((java.lang.Integer) 0);
        double double49 = frequency15.getPct((long) (short) 1);
        long long51 = frequency15.getCount(10);
        double double53 = frequency15.getCumPct((long) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double54 = frequency0.getCumPct((java.lang.Object) frequency15);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.5d + "'", double49 == 0.5d);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.5d + "'", double53 == 0.5d);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        org.apache.commons.math.stat.Frequency frequency5 = new org.apache.commons.math.stat.Frequency();
        long long7 = frequency5.getCumFreq('#');
        double double9 = frequency5.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor10 = frequency5.valuesIterator();
        double double12 = frequency5.getCumPct('#');
        frequency5.addValue((int) (short) -1);
        long long16 = frequency5.getCount((int) ' ');
        boolean boolean18 = frequency5.equals((java.lang.Object) true);
        long long20 = frequency5.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double22 = frequency5.getPct('4');
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency();
        long long25 = frequency23.getCumFreq('#');
        double double27 = frequency23.getPct('#');
        long long29 = frequency23.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        frequency23.addValue((long) 0);
        frequency5.addValue((java.lang.Object) 0);
        long long33 = frequency0.getCumFreq((java.lang.Object) 0);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor34 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(wildcardComparableItor10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor34);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        long long7 = frequency0.getCumFreq((java.lang.Object) (short) 10);
        frequency0.addValue((java.lang.Integer) 100);
        double double11 = frequency0.getPct((long) '#');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double8 = frequency0.getPct(' ');
        frequency0.addValue((long) (byte) 10);
        long long12 = frequency0.getCount((int) (byte) -1);
        long long14 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        long long16 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        long long19 = frequency17.getCumFreq('#');
        long long21 = frequency17.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        frequency17.addValue((int) 'a');
        double double25 = frequency17.getCumPct(0);
        double double27 = frequency17.getCumPct(0L);
        double double29 = frequency17.getPct('#');
        long long30 = frequency0.getCumFreq((java.lang.Object) double29);
        org.apache.commons.math.stat.Frequency frequency31 = new org.apache.commons.math.stat.Frequency();
        long long33 = frequency31.getCumFreq('#');
        long long35 = frequency31.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long37 = frequency31.getCumFreq((int) (short) -1);
        long long39 = frequency31.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double40 = frequency0.getPct((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double8 = frequency0.getPct(' ');
        frequency0.addValue('#');
        double double12 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "");
        double double14 = frequency0.getPct((long) 'a');
        long long16 = frequency0.getCumFreq((java.lang.Object) Double.NaN);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        java.lang.String str6 = frequency0.toString();
        double double8 = frequency0.getPct('4');
        frequency0.addValue((java.lang.Integer) (-1));
        double double12 = frequency0.getPct('4');
        double double14 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        double double16 = frequency0.getCumPct('#');
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        long long19 = frequency17.getCumFreq('#');
        double double21 = frequency17.getPct((long) (short) 100);
        long long23 = frequency17.getCount((java.lang.Comparable<java.lang.String>) "");
        frequency17.addValue((java.lang.Integer) 0);
        double double27 = frequency17.getPct(100);
        long long29 = frequency17.getCount((int) (short) 0);
        long long31 = frequency17.getCumFreq('a');
        frequency17.addValue((long) (-1));
        frequency17.addValue((long) 1);
        double double37 = frequency17.getCumPct((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double38 = frequency0.getCumPct((java.lang.Object) frequency17);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str6, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.6666666666666666d + "'", double37 == 0.6666666666666666d);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long8 = frequency0.getSumFreq();
        frequency0.addValue((java.lang.Integer) 0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        long long6 = frequency0.getCount('#');
        frequency0.addValue((java.lang.Integer) (-1));
        frequency0.addValue((java.lang.Integer) 100);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        frequency0.addValue((int) '4');
        long long13 = frequency0.getCount(10L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        frequency0.addValue((java.lang.Integer) 0);
        long long10 = frequency0.getCumFreq(1L);
        long long12 = frequency0.getCumFreq(10L);
        double double14 = frequency0.getPct(' ');
        long long16 = frequency0.getCount(0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        java.lang.String str6 = frequency0.toString();
        double double8 = frequency0.getPct('4');
        frequency0.addValue((java.lang.Integer) (-1));
        frequency0.addValue((long) ' ');
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        long long15 = frequency13.getCumFreq('#');
        double double17 = frequency13.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor18 = frequency13.valuesIterator();
        long long19 = frequency13.getSumFreq();
        double double21 = frequency13.getCumPct('#');
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency();
        long long24 = frequency22.getCumFreq('#');
        long long26 = frequency22.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long28 = frequency22.getCumFreq((int) (short) -1);
        frequency22.addValue((java.lang.Integer) 10);
        double double32 = frequency22.getCumPct('#');
        frequency13.addValue((java.lang.Object) '#');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor34 = frequency13.valuesIterator();
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Object) wildcardComparableItor34);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str6, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(wildcardComparableItor18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor34);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        org.apache.commons.math.stat.Frequency frequency8 = new org.apache.commons.math.stat.Frequency();
        long long10 = frequency8.getCumFreq('#');
        long long12 = frequency8.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        double double14 = frequency8.getPct(100);
        frequency8.addValue((long) (short) 1);
        long long18 = frequency8.getCount((java.lang.Comparable<java.lang.String>) "");
        frequency0.addValue((java.lang.Object) "");
        double double21 = frequency0.getCumPct('a');
        double double23 = frequency0.getCumPct((long) (short) 10);
        double double25 = frequency0.getPct((int) (short) 0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        long long11 = frequency0.getCount((int) ' ');
        boolean boolean13 = frequency0.equals((java.lang.Object) true);
        double double15 = frequency0.getCumPct((java.lang.Object) 0.0f);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor16 = frequency0.valuesIterator();
        boolean boolean18 = frequency0.equals((java.lang.Object) '#');
        long long20 = frequency0.getCount((int) (short) 100);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        long long6 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((long) (short) 1);
        long long10 = frequency0.getCumFreq('a');
        double double12 = frequency0.getPct('a');
        frequency0.addValue(100);
        frequency0.clear();
        long long17 = frequency0.getCount('#');
        double double19 = frequency0.getCumPct((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double8 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((java.lang.Integer) 1);
        long long12 = frequency0.getCount((int) (short) -1);
        double double14 = frequency0.getCumPct('#');
        frequency0.clear();
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        long long18 = frequency16.getCumFreq('#');
        long long20 = frequency16.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str21 = frequency16.toString();
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency();
        long long24 = frequency22.getCumFreq('#');
        double double26 = frequency22.getPct((long) (short) 100);
        long long27 = frequency16.getCount((java.lang.Object) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor28 = frequency16.valuesIterator();
        double double30 = frequency16.getCumPct(0L);
        double double32 = frequency16.getCumPct((long) (byte) 10);
        boolean boolean33 = frequency0.equals((java.lang.Object) frequency16);
        org.apache.commons.math.stat.Frequency frequency34 = new org.apache.commons.math.stat.Frequency();
        long long36 = frequency34.getCumFreq('#');
        double double38 = frequency34.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor39 = frequency34.valuesIterator();
        double double41 = frequency34.getCumPct('#');
        long long43 = frequency34.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency44 = new org.apache.commons.math.stat.Frequency();
        long long46 = frequency44.getCumFreq('#');
        double double48 = frequency44.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor49 = frequency44.valuesIterator();
        double double51 = frequency44.getPct((int) (byte) 100);
        long long53 = frequency44.getCount(10);
        double double54 = frequency34.getPct((java.lang.Object) 10);
        java.lang.Comparable<java.lang.String> strComparable55 = null;
        double double56 = frequency34.getCumPct(strComparable55);
        org.apache.commons.math.stat.Frequency frequency57 = new org.apache.commons.math.stat.Frequency();
        long long59 = frequency57.getCumFreq('#');
        double double61 = frequency57.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor62 = frequency57.valuesIterator();
        java.lang.String str63 = frequency57.toString();
        double double65 = frequency57.getPct('4');
        frequency57.addValue((java.lang.Integer) (-1));
        double double69 = frequency57.getPct((int) (short) 100);
        double double71 = frequency57.getCumPct((long) 1);
        frequency34.addValue((java.lang.Object) 1);
        org.apache.commons.math.stat.Frequency frequency73 = new org.apache.commons.math.stat.Frequency();
        long long75 = frequency73.getCumFreq('#');
        double double77 = frequency73.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor78 = frequency73.valuesIterator();
        double double80 = frequency73.getCumPct('#');
        frequency73.addValue((int) (short) -1);
        frequency73.addValue((int) '4');
        double double86 = frequency73.getCumPct(' ');
        frequency73.addValue((java.lang.Integer) 10);
        frequency73.clear();
        long long90 = frequency73.getSumFreq();
        double double91 = frequency34.getCumPct((java.lang.Object) long90);
        double double93 = frequency34.getPct('#');
        long long94 = frequency16.getCumFreq((java.lang.Object) double93);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor28);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(wildcardComparableItor39);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(wildcardComparableItor49);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(wildcardComparableItor62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str63, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(wildcardComparableItor78);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        frequency0.addValue(100);
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        long long9 = frequency7.getCumFreq('#');
        double double11 = frequency7.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor12 = frequency7.valuesIterator();
        double double14 = frequency7.getCumPct('#');
        frequency7.addValue((int) (short) -1);
        frequency7.addValue((int) '4');
        double double20 = frequency7.getCumPct(' ');
        frequency7.addValue((java.lang.Integer) 10);
        boolean boolean23 = frequency0.equals((java.lang.Object) frequency7);
        double double25 = frequency7.getPct((java.lang.Object) '4');
        double double27 = frequency7.getPct((int) (short) 0);
        long long29 = frequency7.getCount('#');
        double double31 = frequency7.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(wildcardComparableItor12);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        long long10 = frequency0.getCumFreq((long) (short) 0);
        frequency0.addValue((long) 100);
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        long long15 = frequency13.getCumFreq('#');
        double double17 = frequency13.getPct((long) (short) 100);
        long long19 = frequency13.getCount((java.lang.Comparable<java.lang.String>) "");
        double double21 = frequency13.getPct(' ');
        frequency13.addValue((long) (byte) 10);
        long long25 = frequency13.getCumFreq((long) '#');
        long long26 = frequency13.getSumFreq();
        long long28 = frequency13.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        boolean boolean29 = frequency0.equals((java.lang.Object) long28);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor30 = frequency0.valuesIterator();
        double double32 = frequency0.getPct((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardComparableItor30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCount(0L);
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        long long9 = frequency7.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct('#');
        double double15 = frequency7.getCumPct((java.lang.Object) '#');
        java.lang.Object obj16 = null;
        double double17 = frequency7.getPct(obj16);
        long long19 = frequency7.getCount((long) '4');
        frequency7.addValue((java.lang.Integer) 100);
        long long22 = frequency0.getCumFreq((java.lang.Object) 100);
        long long24 = frequency0.getCount(100L);
        long long26 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency();
        long long29 = frequency27.getCumFreq('#');
        long long31 = frequency27.getCumFreq((java.lang.Object) (byte) 1);
        long long33 = frequency27.getCumFreq((java.lang.Object) 10.0d);
        frequency27.addValue((long) (byte) 1);
        double double37 = frequency27.getCumPct((int) 'a');
        double double39 = frequency27.getCumPct((int) (short) 10);
        double double41 = frequency27.getCumPct((long) (short) 1);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor42 = frequency27.valuesIterator();
        java.lang.Object obj43 = null;
        boolean boolean44 = frequency27.equals(obj43);
        // The following exception was thrown during execution in test generation
        try {
            long long45 = frequency0.getCumFreq((java.lang.Object) frequency27);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCount(0L);
        double double8 = frequency0.getPct(0);
        long long10 = frequency0.getCount(0L);
        frequency0.addValue((long) (short) 0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCount(10);
        double double14 = frequency0.getPct('4');
        double double16 = frequency0.getPct(0L);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor17 = frequency0.valuesIterator();
        long long19 = frequency0.getCumFreq('a');
        long long21 = frequency0.getCumFreq(0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(wildcardComparableItor17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        long long11 = frequency0.getCount((int) ' ');
        boolean boolean13 = frequency0.equals((java.lang.Object) true);
        double double15 = frequency0.getCumPct((java.lang.Object) 0.0f);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor16 = frequency0.valuesIterator();
        long long17 = frequency0.getSumFreq();
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency();
        long long20 = frequency18.getCumFreq('#');
        double double22 = frequency18.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor23 = frequency18.valuesIterator();
        double double25 = frequency18.getPct((int) (byte) 100);
        long long27 = frequency18.getCount(10);
        java.lang.String str28 = frequency18.toString();
        long long30 = frequency18.getCount((int) '4');
        double double32 = frequency18.getPct((int) '#');
        long long34 = frequency18.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t33%\t33%\n10\t1\t33%\t67%\n52\t1\t33%\t100%\n");
        double double36 = frequency18.getCumPct((long) ' ');
        long long38 = frequency18.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.apache.commons.math.stat.Frequency frequency39 = new org.apache.commons.math.stat.Frequency();
        long long41 = frequency39.getCumFreq('#');
        long long43 = frequency39.getCumFreq((java.lang.Object) (byte) 1);
        double double45 = frequency39.getPct((int) '4');
        long long47 = frequency39.getCumFreq((long) (byte) -1);
        frequency39.addValue((java.lang.Comparable<java.lang.String>) "hi!");
        double double50 = frequency18.getPct((java.lang.Object) "hi!");
        double double52 = frequency18.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        double double54 = frequency18.getCumPct((long) (short) 10);
        long long55 = frequency0.getCount((java.lang.Object) double54);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(wildcardComparableItor23);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str28, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double10 = frequency0.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor11 = frequency0.valuesIterator();
        double double13 = frequency0.getPct('4');
        frequency0.addValue((java.lang.Integer) 100);
        double double17 = frequency0.getCumPct((long) (short) 10);
        long long19 = frequency0.getCumFreq(' ');
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        long long22 = frequency20.getCumFreq('#');
        double double24 = frequency20.getPct((java.lang.Object) (-1.0d));
        long long26 = frequency20.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        frequency20.addValue((long) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Object) frequency20);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(wildcardComparableItor11);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        boolean boolean7 = frequency0.equals((java.lang.Object) 0.5d);
        double double9 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        double double11 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency();
        long long14 = frequency12.getCumFreq('#');
        long long16 = frequency12.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long18 = frequency12.getCumFreq((int) (short) -1);
        long long20 = frequency12.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency12.clear();
        java.lang.Object obj22 = null;
        double double23 = frequency12.getPct(obj22);
        long long25 = frequency12.getCount(2L);
        frequency12.addValue((java.lang.Integer) 0);
        double double29 = frequency12.getPct((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long30 = frequency0.getCumFreq((java.lang.Object) frequency12);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCount(0L);
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        long long9 = frequency7.getCumFreq('#');
        double double10 = frequency0.getPct((java.lang.Object) long9);
        frequency0.addValue('a');
        long long14 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n");
        double double16 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((int) (short) 0);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        long long11 = frequency0.getCount('a');
        double double13 = frequency0.getPct('#');
        frequency0.addValue((long) (byte) 100);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        long long11 = frequency0.getCount((int) ' ');
        boolean boolean13 = frequency0.equals((java.lang.Object) true);
        double double15 = frequency0.getCumPct((java.lang.Object) 0.0f);
        double double17 = frequency0.getCumPct((java.lang.Object) "");
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency();
        long long20 = frequency18.getCumFreq('#');
        double double22 = frequency18.getPct((long) (short) 100);
        long long24 = frequency18.getCount((java.lang.Comparable<java.lang.String>) "");
        frequency18.addValue((java.lang.Integer) 0);
        long long28 = frequency18.getCumFreq(1L);
        long long30 = frequency18.getCumFreq(10L);
        frequency0.addValue((java.lang.Object) long30);
        double double33 = frequency0.getPct((int) (short) 10);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor34 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor34);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        long long11 = frequency0.getCount((int) ' ');
        boolean boolean13 = frequency0.equals((java.lang.Object) true);
        double double15 = frequency0.getCumPct((java.lang.Object) 0.0f);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor16 = frequency0.valuesIterator();
        double double18 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        long long20 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency();
        long long23 = frequency21.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency();
        long long26 = frequency24.getCumFreq('#');
        double double28 = frequency24.getPct('#');
        double double29 = frequency21.getCumPct((java.lang.Object) '#');
        java.lang.Object obj30 = null;
        double double31 = frequency21.getPct(obj30);
        long long33 = frequency21.getCumFreq(0L);
        double double35 = frequency21.getPct((long) '#');
        double double37 = frequency21.getPct((java.lang.Comparable<java.lang.String>) "");
        frequency21.addValue('a');
        org.apache.commons.math.stat.Frequency frequency40 = new org.apache.commons.math.stat.Frequency();
        long long42 = frequency40.getCumFreq('#');
        double double44 = frequency40.getPct('#');
        long long46 = frequency40.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        long long47 = frequency21.getCumFreq((java.lang.Object) "hi!");
        boolean boolean48 = frequency0.equals((java.lang.Object) long47);
        long long50 = frequency0.getCount('4');
        long long52 = frequency0.getCount(10L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCumFreq(0L);
        long long14 = frequency0.getCumFreq((long) (byte) 100);
        frequency0.addValue((long) (-1));
        long long17 = frequency0.getSumFreq();
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor18 = frequency0.valuesIterator();
        double double20 = frequency0.getCumPct(1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(wildcardComparableItor18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCumFreq((java.lang.Object) 10.0d);
        frequency0.addValue((long) (byte) 1);
        double double10 = frequency0.getCumPct((int) 'a');
        double double12 = frequency0.getCumPct((int) (short) 10);
        double double14 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        long long17 = frequency15.getCumFreq('#');
        double double19 = frequency15.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor20 = frequency15.valuesIterator();
        java.lang.String str21 = frequency15.toString();
        frequency15.addValue('a');
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency();
        long long26 = frequency24.getCumFreq('#');
        double double28 = frequency24.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor29 = frequency24.valuesIterator();
        double double31 = frequency24.getCumPct('#');
        long long33 = frequency24.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency34 = new org.apache.commons.math.stat.Frequency();
        long long36 = frequency34.getCumFreq('#');
        double double38 = frequency34.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor39 = frequency34.valuesIterator();
        double double41 = frequency34.getPct((int) (byte) 100);
        long long43 = frequency34.getCount(10);
        double double44 = frequency24.getPct((java.lang.Object) 10);
        boolean boolean45 = frequency15.equals((java.lang.Object) 10);
        long long46 = frequency0.getCount((java.lang.Object) boolean45);
        double double48 = frequency0.getPct((long) (byte) -1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(wildcardComparableItor20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(wildcardComparableItor29);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(wildcardComparableItor39);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((long) (short) 1);
        frequency0.addValue('#');
        long long10 = frequency0.getCount(' ');
        double double12 = frequency0.getPct('a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        double double17 = frequency10.getPct((int) (byte) 100);
        long long19 = frequency10.getCount(10);
        double double20 = frequency0.getPct((java.lang.Object) 10);
        frequency0.addValue(100L);
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency();
        long long25 = frequency23.getCumFreq('#');
        long long27 = frequency23.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str28 = frequency23.toString();
        boolean boolean30 = frequency23.equals((java.lang.Object) (byte) -1);
        long long32 = frequency23.getCumFreq(0);
        // The following exception was thrown during execution in test generation
        try {
            double double33 = frequency0.getPct((java.lang.Object) frequency23);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str28, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        double double8 = frequency0.getCumPct((int) (short) -1);
        long long10 = frequency0.getCumFreq((long) 10);
        boolean boolean12 = frequency0.equals((java.lang.Object) (-1.0d));
        long long14 = frequency0.getCumFreq('#');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCumFreq((java.lang.Object) 10.0d);
        frequency0.addValue((long) (byte) 1);
        double double10 = frequency0.getCumPct((int) 'a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        long long13 = frequency11.getCumFreq('#');
        long long15 = frequency11.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long17 = frequency11.getCumFreq((int) (short) -1);
        double double19 = frequency11.getCumPct(1L);
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        long long22 = frequency20.getCumFreq('#');
        double double24 = frequency20.getPct((java.lang.Object) (-1.0d));
        long long26 = frequency20.getCount('#');
        frequency11.addValue((java.lang.Object) long26);
        long long29 = frequency11.getCumFreq((-1L));
        long long30 = frequency0.getCumFreq((java.lang.Object) (-1L));
        frequency0.addValue((java.lang.Integer) 0);
        double double34 = frequency0.getPct((long) (short) 1);
        long long36 = frequency0.getCount(100L);
        double double38 = frequency0.getCumPct(' ');
        frequency0.clear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.5d + "'", double34 == 0.5d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double10 = frequency0.getPct((-1));
        long long12 = frequency0.getCumFreq(10);
        long long14 = frequency0.getCount(0);
        frequency0.addValue(100);
        double double18 = frequency0.getPct((int) 'a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double10 = frequency0.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor11 = frequency0.valuesIterator();
        double double13 = frequency0.getPct('4');
        java.lang.String str14 = frequency0.toString();
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        long long18 = frequency16.getCumFreq('#');
        double double20 = frequency16.getPct('#');
        double double22 = frequency16.getPct((java.lang.Object) (-1.0f));
        long long24 = frequency16.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double26 = frequency16.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor27 = frequency16.valuesIterator();
        double double29 = frequency16.getPct('4');
        java.lang.String str30 = frequency16.toString();
        boolean boolean31 = frequency0.equals((java.lang.Object) frequency16);
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency();
        long long34 = frequency32.getCumFreq('#');
        long long36 = frequency32.getCumFreq((java.lang.Object) (byte) 1);
        long long38 = frequency32.getCount(0L);
        double double40 = frequency32.getPct(0);
        long long42 = frequency32.getCumFreq(2L);
        double double44 = frequency32.getCumPct(100);
        frequency32.clear();
        double double47 = frequency32.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        long long48 = frequency0.getCount((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(wildcardComparableItor11);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str14, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(wildcardComparableItor27);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str30, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        long long6 = frequency0.getSumFreq();
        double double8 = frequency0.getCumPct('#');
        long long10 = frequency0.getCumFreq('#');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getPct((int) (byte) 100);
        long long9 = frequency0.getCount(10);
        java.lang.String str10 = frequency0.toString();
        long long12 = frequency0.getCount((int) '4');
        double double14 = frequency0.getPct((int) '#');
        long long16 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t33%\t33%\n10\t1\t33%\t67%\n52\t1\t33%\t100%\n");
        double double18 = frequency0.getCumPct((long) ' ');
        long long20 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency();
        long long23 = frequency21.getCumFreq('#');
        long long25 = frequency21.getCumFreq((java.lang.Object) (byte) 1);
        double double27 = frequency21.getPct((int) '4');
        long long29 = frequency21.getCumFreq((long) (byte) -1);
        frequency21.addValue((java.lang.Comparable<java.lang.String>) "hi!");
        double double32 = frequency0.getPct((java.lang.Object) "hi!");
        frequency0.addValue((long) 100);
        org.apache.commons.math.stat.Frequency frequency35 = new org.apache.commons.math.stat.Frequency();
        long long37 = frequency35.getCumFreq('#');
        double double39 = frequency35.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor40 = frequency35.valuesIterator();
        java.lang.String str41 = frequency35.toString();
        frequency35.addValue('a');
        frequency35.clear();
        org.apache.commons.math.stat.Frequency frequency45 = new org.apache.commons.math.stat.Frequency();
        long long47 = frequency45.getCumFreq('#');
        double double49 = frequency45.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor50 = frequency45.valuesIterator();
        java.lang.String str51 = frequency45.toString();
        frequency45.addValue('a');
        long long54 = frequency45.getSumFreq();
        long long55 = frequency35.getCumFreq((java.lang.Object) long54);
        boolean boolean56 = frequency0.equals((java.lang.Object) long55);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str10, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(wildcardComparableItor40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str41, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(wildcardComparableItor50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str51, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        java.lang.String str6 = frequency0.toString();
        frequency0.addValue('a');
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        long long11 = frequency9.getCumFreq('#');
        double double13 = frequency9.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor14 = frequency9.valuesIterator();
        double double16 = frequency9.getCumPct('#');
        long long18 = frequency9.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        long long21 = frequency19.getCumFreq('#');
        double double23 = frequency19.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor24 = frequency19.valuesIterator();
        double double26 = frequency19.getPct((int) (byte) 100);
        long long28 = frequency19.getCount(10);
        double double29 = frequency9.getPct((java.lang.Object) 10);
        boolean boolean30 = frequency0.equals((java.lang.Object) 10);
        long long32 = frequency0.getCount((int) (byte) 100);
        org.apache.commons.math.stat.Frequency frequency33 = new org.apache.commons.math.stat.Frequency();
        long long35 = frequency33.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency36 = new org.apache.commons.math.stat.Frequency();
        long long38 = frequency36.getCumFreq('#');
        double double40 = frequency36.getPct('#');
        double double41 = frequency33.getCumPct((java.lang.Object) '#');
        java.lang.Object obj42 = null;
        double double43 = frequency33.getPct(obj42);
        long long45 = frequency33.getCount(10);
        java.lang.String str46 = frequency33.toString();
        frequency33.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor49 = frequency33.valuesIterator();
        double double51 = frequency33.getPct(2L);
        long long52 = frequency0.getCumFreq((java.lang.Object) double51);
        double double54 = frequency0.getPct((long) (byte) -1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str6, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(wildcardComparableItor14);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(wildcardComparableItor24);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str46, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertNotNull(wildcardComparableItor49);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        double double17 = frequency10.getPct((int) (byte) 100);
        long long19 = frequency10.getCount(10);
        double double20 = frequency0.getPct((java.lang.Object) 10);
        long long22 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double24 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long26 = frequency0.getCount((int) (short) 100);
        frequency0.addValue((int) (byte) 0);
        frequency0.addValue((java.lang.Integer) 100);
        double double32 = frequency0.getCumPct(1L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.5d + "'", double32 == 0.5d);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCumFreq((int) (short) -1);
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency0.clear();
        java.lang.Object obj10 = null;
        double double11 = frequency0.getPct(obj10);
        long long13 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        long long15 = frequency0.getCount(1);
        double double17 = frequency0.getPct(3L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCount(0L);
        double double8 = frequency0.getPct('a');
        long long10 = frequency0.getCount('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        long long13 = frequency11.getCumFreq('#');
        long long15 = frequency11.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str16 = frequency11.toString();
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        long long19 = frequency17.getCumFreq('#');
        long long21 = frequency17.getCumFreq((java.lang.Object) (byte) 1);
        long long23 = frequency17.getCount(0L);
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency();
        long long26 = frequency24.getCumFreq('#');
        double double27 = frequency17.getPct((java.lang.Object) long26);
        double double28 = frequency11.getCumPct((java.lang.Object) double27);
        long long29 = frequency11.getSumFreq();
        boolean boolean30 = frequency0.equals((java.lang.Object) frequency11);
        long long32 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n");
        long long34 = frequency0.getCumFreq(' ');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str16, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCount(10);
        double double14 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        double double16 = frequency0.getCumPct((int) (short) 100);
        long long18 = frequency0.getCumFreq((int) (short) -1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        java.lang.String str6 = frequency0.toString();
        long long7 = frequency0.getSumFreq();
        long long9 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        java.lang.String str16 = frequency10.toString();
        long long17 = frequency10.getSumFreq();
        long long18 = frequency10.getSumFreq();
        long long20 = frequency10.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency();
        long long23 = frequency21.getCumFreq('#');
        long long25 = frequency21.getCumFreq((java.lang.Object) (byte) 1);
        long long27 = frequency21.getCumFreq((java.lang.Object) 10.0d);
        frequency21.addValue((long) (byte) 1);
        double double31 = frequency21.getCumPct((int) 'a');
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency();
        long long34 = frequency32.getCumFreq('#');
        long long36 = frequency32.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long38 = frequency32.getCumFreq((int) (short) -1);
        double double40 = frequency32.getCumPct(1L);
        org.apache.commons.math.stat.Frequency frequency41 = new org.apache.commons.math.stat.Frequency();
        long long43 = frequency41.getCumFreq('#');
        double double45 = frequency41.getPct((java.lang.Object) (-1.0d));
        long long47 = frequency41.getCount('#');
        frequency32.addValue((java.lang.Object) long47);
        long long50 = frequency32.getCumFreq((-1L));
        long long51 = frequency21.getCumFreq((java.lang.Object) (-1L));
        frequency21.addValue((java.lang.Integer) 0);
        double double54 = frequency10.getCumPct((java.lang.Object) 0);
        long long56 = frequency10.getCumFreq(' ');
        boolean boolean57 = frequency0.equals((java.lang.Object) long56);
        long long58 = frequency0.getSumFreq();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str6, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str16, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCumFreq(0L);
        long long14 = frequency0.getCumFreq((long) (byte) 100);
        frequency0.addValue('4');
        java.lang.String str17 = frequency0.toString();
        double double19 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n \t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n" + "'", str17, "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        long long8 = frequency0.getCumFreq((int) (short) 0);
        long long10 = frequency0.getCumFreq((int) (short) 1);
        double double12 = frequency0.getCumPct((long) (byte) 10);
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        long long15 = frequency13.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        long long18 = frequency16.getCumFreq('#');
        double double20 = frequency16.getPct('#');
        double double21 = frequency13.getCumPct((java.lang.Object) '#');
        java.lang.Object obj22 = null;
        double double23 = frequency13.getPct(obj22);
        long long25 = frequency13.getCumFreq(0L);
        double double27 = frequency13.getPct((long) '#');
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency();
        long long30 = frequency28.getCumFreq('#');
        double double32 = frequency28.getPct((long) (short) 100);
        java.lang.String str33 = frequency28.toString();
        boolean boolean34 = frequency13.equals((java.lang.Object) str33);
        frequency0.addValue((java.lang.Object) boolean34);
        java.lang.Class<?> wildcardClass36 = frequency0.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str33, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCount((long) '4');
        frequency0.addValue((java.lang.Integer) 100);
        long long16 = frequency0.getCumFreq((int) (short) -1);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor17 = frequency0.valuesIterator();
        long long19 = frequency0.getCumFreq(0L);
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        long long22 = frequency20.getCumFreq('#');
        double double24 = frequency20.getPct((long) (short) 100);
        long long26 = frequency20.getCount((java.lang.Comparable<java.lang.String>) "");
        double double28 = frequency20.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        double double30 = frequency20.getPct('#');
        long long32 = frequency20.getCount(10);
        java.lang.String str33 = frequency20.toString();
        java.lang.String str34 = frequency20.toString();
        frequency20.addValue(4L);
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency();
        long long39 = frequency37.getCumFreq('#');
        double double41 = frequency37.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor42 = frequency37.valuesIterator();
        java.lang.String str43 = frequency37.toString();
        double double45 = frequency37.getPct('4');
        frequency37.addValue((java.lang.Integer) (-1));
        double double49 = frequency37.getPct((int) (short) 100);
        double double51 = frequency37.getCumPct((long) '#');
        frequency37.clear();
        double double54 = frequency37.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        boolean boolean55 = frequency20.equals((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        frequency20.clear();
        boolean boolean57 = frequency0.equals((java.lang.Object) frequency20);
        double double59 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str33, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str34, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(wildcardComparableItor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str43, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCumFreq(0L);
        double double14 = frequency0.getPct((long) '#');
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        long long17 = frequency15.getCumFreq('#');
        double double19 = frequency15.getPct((long) (short) 100);
        java.lang.String str20 = frequency15.toString();
        boolean boolean21 = frequency0.equals((java.lang.Object) str20);
        double double23 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor24 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str20, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(wildcardComparableItor24);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        java.lang.String str6 = frequency0.toString();
        double double8 = frequency0.getPct('4');
        frequency0.addValue((java.lang.Integer) (-1));
        double double12 = frequency0.getPct('4');
        double double14 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long16 = frequency0.getCount(10L);
        double double18 = frequency0.getCumPct(' ');
        frequency0.clear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str6, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        boolean boolean7 = frequency0.equals((java.lang.Object) 0.5d);
        java.lang.String str8 = frequency0.toString();
        long long10 = frequency0.getCount((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getPct((int) (byte) 100);
        long long9 = frequency0.getCount(10);
        java.lang.String str10 = frequency0.toString();
        long long12 = frequency0.getCount((int) '4');
        double double14 = frequency0.getPct((int) '#');
        long long16 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t33%\t33%\n10\t1\t33%\t67%\n52\t1\t33%\t100%\n");
        double double18 = frequency0.getCumPct((long) ' ');
        java.lang.String str19 = frequency0.toString();
        java.lang.Class<?> wildcardClass20 = frequency0.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str10, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str19, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct(100);
        long long12 = frequency0.getCount((int) (short) 0);
        frequency0.clear();
        long long15 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t50%\t50%\n0\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double8 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((java.lang.Integer) 1);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor11 = frequency0.valuesIterator();
        java.lang.String str12 = frequency0.toString();
        frequency0.addValue((java.lang.Integer) 10);
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        long long17 = frequency15.getCumFreq('#');
        long long19 = frequency15.getCumFreq((java.lang.Object) (byte) 1);
        long long21 = frequency15.getCumFreq((java.lang.Object) 10.0d);
        frequency15.addValue((long) (byte) 1);
        double double25 = frequency15.getCumPct((int) 'a');
        org.apache.commons.math.stat.Frequency frequency26 = new org.apache.commons.math.stat.Frequency();
        long long28 = frequency26.getCumFreq('#');
        long long30 = frequency26.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long32 = frequency26.getCumFreq((int) (short) -1);
        double double34 = frequency26.getCumPct(1L);
        org.apache.commons.math.stat.Frequency frequency35 = new org.apache.commons.math.stat.Frequency();
        long long37 = frequency35.getCumFreq('#');
        double double39 = frequency35.getPct((java.lang.Object) (-1.0d));
        long long41 = frequency35.getCount('#');
        frequency26.addValue((java.lang.Object) long41);
        long long44 = frequency26.getCumFreq((-1L));
        long long45 = frequency15.getCumFreq((java.lang.Object) (-1L));
        long long47 = frequency15.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        frequency0.addValue((java.lang.Object) long47);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue(' ');
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(wildcardComparableItor11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n" + "'", str12, "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        frequency0.addValue((long) (short) 1);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor7 = frequency0.valuesIterator();
        boolean boolean9 = frequency0.equals((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        double double11 = frequency0.getPct((int) (byte) 10);
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency();
        long long14 = frequency12.getCumFreq('#');
        long long16 = frequency12.getCumFreq((java.lang.Object) (byte) 1);
        long long18 = frequency12.getCount(0L);
        double double20 = frequency12.getPct('a');
        frequency12.clear();
        frequency12.clear();
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency();
        long long25 = frequency23.getCumFreq('#');
        long long27 = frequency23.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long29 = frequency23.getCumFreq((int) (short) -1);
        long long31 = frequency23.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency23.clear();
        java.lang.Object obj33 = null;
        double double34 = frequency23.getPct(obj33);
        long long36 = frequency23.getCumFreq(0L);
        long long37 = frequency12.getCount((java.lang.Object) long36);
        double double38 = frequency0.getCumPct((java.lang.Object) long37);
        frequency0.addValue(0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getPct((int) (byte) 100);
        long long9 = frequency0.getCount(10);
        java.lang.String str10 = frequency0.toString();
        long long12 = frequency0.getCount((int) '4');
        double double14 = frequency0.getPct((int) '#');
        long long16 = frequency0.getCumFreq((java.lang.Object) 'a');
        long long18 = frequency0.getCumFreq((int) ' ');
        frequency0.addValue((int) (short) 1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str10, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str5 = frequency0.toString();
        double double7 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        long long8 = frequency0.getSumFreq();
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((long) 100);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \nhi!\t1\t100%\t100%\n" + "'", str5, "Value \t Freq. \t Pct. \t Cum Pct. \nhi!\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double8 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        long long10 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        long long13 = frequency11.getCumFreq('#');
        double double15 = frequency11.getPct((long) (short) 100);
        long long17 = frequency11.getCount((java.lang.Comparable<java.lang.String>) "");
        double double19 = frequency11.getPct(' ');
        frequency11.addValue((long) (byte) 10);
        long long23 = frequency11.getCount((int) (byte) -1);
        long long25 = frequency11.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        long long27 = frequency11.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        frequency0.addValue((java.lang.Object) long27);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCount((long) '4');
        frequency0.addValue((java.lang.Integer) 100);
        long long16 = frequency0.getCumFreq((int) (short) -1);
        double double18 = frequency0.getPct((int) 'a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct((int) (byte) 100);
        long long9 = frequency0.getCount(0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double10 = frequency0.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor11 = frequency0.valuesIterator();
        double double13 = frequency0.getPct('4');
        java.lang.String str14 = frequency0.toString();
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        long long18 = frequency16.getCumFreq('#');
        double double20 = frequency16.getPct('#');
        double double22 = frequency16.getPct((java.lang.Object) (-1.0f));
        long long24 = frequency16.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double26 = frequency16.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor27 = frequency16.valuesIterator();
        double double29 = frequency16.getPct('4');
        java.lang.String str30 = frequency16.toString();
        boolean boolean31 = frequency0.equals((java.lang.Object) frequency16);
        frequency0.addValue('a');
        long long35 = frequency0.getCumFreq('a');
        double double37 = frequency0.getPct('a');
        double double39 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(wildcardComparableItor11);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str14, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(wildcardComparableItor27);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str30, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        double double17 = frequency10.getPct((int) (byte) 100);
        long long19 = frequency10.getCount(10);
        double double20 = frequency0.getPct((java.lang.Object) 10);
        frequency0.addValue(100L);
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency();
        long long25 = frequency23.getCumFreq('#');
        double double27 = frequency23.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor28 = frequency23.valuesIterator();
        double double30 = frequency23.getCumPct('#');
        frequency23.addValue((int) (short) -1);
        long long34 = frequency23.getCount((int) ' ');
        boolean boolean36 = frequency23.equals((java.lang.Object) true);
        double double38 = frequency23.getCumPct((java.lang.Object) 0.0f);
        frequency23.clear();
        org.apache.commons.math.stat.Frequency frequency40 = new org.apache.commons.math.stat.Frequency();
        long long42 = frequency40.getCumFreq('#');
        double double44 = frequency40.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor45 = frequency40.valuesIterator();
        double double47 = frequency40.getCumPct('#');
        long long49 = frequency40.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency50 = new org.apache.commons.math.stat.Frequency();
        long long52 = frequency50.getCumFreq('#');
        double double54 = frequency50.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor55 = frequency50.valuesIterator();
        double double57 = frequency50.getPct((int) (byte) 100);
        long long59 = frequency50.getCount(10);
        double double60 = frequency40.getPct((java.lang.Object) 10);
        boolean boolean61 = frequency23.equals((java.lang.Object) frequency40);
        long long63 = frequency23.getCount('#');
        long long64 = frequency0.getCount((java.lang.Object) long63);
        org.apache.commons.math.stat.Frequency frequency65 = new org.apache.commons.math.stat.Frequency();
        long long67 = frequency65.getCumFreq('#');
        double double69 = frequency65.getPct((long) (short) 100);
        long long71 = frequency65.getCount((java.lang.Comparable<java.lang.String>) "");
        long long73 = frequency65.getCumFreq((int) (short) 0);
        double double75 = frequency65.getPct(' ');
        double double76 = frequency0.getPct((java.lang.Object) ' ');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor77 = frequency0.valuesIterator();
        frequency0.clear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(wildcardComparableItor28);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(wildcardComparableItor45);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(wildcardComparableItor55);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor77);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCumFreq(0L);
        double double14 = frequency0.getPct((long) (short) 100);
        java.lang.Comparable<java.lang.String> strComparable15 = null;
        long long16 = frequency0.getCumFreq(strComparable15);
        double double18 = frequency0.getCumPct((long) '#');
        frequency0.addValue((java.lang.Integer) 100);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getPct((int) (byte) 100);
        long long9 = frequency0.getCount(10);
        java.lang.String str10 = frequency0.toString();
        long long12 = frequency0.getCount((int) '4');
        double double14 = frequency0.getPct((int) '#');
        long long16 = frequency0.getCumFreq((java.lang.Object) 'a');
        long long18 = frequency0.getCount('4');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor19 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str10, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor19);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        long long6 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long8 = frequency0.getCumFreq((long) (short) -1);
        double double10 = frequency0.getPct((long) (byte) 0);
        long long12 = frequency0.getCount(0L);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor13 = frequency0.valuesIterator();
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency();
        long long18 = frequency16.getCumFreq('#');
        long long20 = frequency16.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str21 = frequency16.toString();
        long long23 = frequency16.getCount(0);
        frequency16.clear();
        double double26 = frequency16.getCumPct((int) 'a');
        double double28 = frequency16.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        frequency16.addValue((int) (short) 10);
        long long31 = frequency0.getCount((java.lang.Object) (short) 10);
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency();
        long long34 = frequency32.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency35 = new org.apache.commons.math.stat.Frequency();
        long long37 = frequency35.getCumFreq('#');
        double double39 = frequency35.getPct('#');
        double double40 = frequency32.getCumPct((java.lang.Object) '#');
        java.lang.Object obj41 = null;
        double double42 = frequency32.getPct(obj41);
        long long44 = frequency32.getCumFreq(0L);
        double double46 = frequency32.getPct((long) (short) 100);
        double double48 = frequency32.getPct(0);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor49 = frequency32.valuesIterator();
        // The following exception was thrown during execution in test generation
        try {
            double double50 = frequency0.getCumPct((java.lang.Object) wildcardComparableItor49);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.TreeMap$KeyIterator cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor13);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(wildcardComparableItor49);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCount(0L);
        double double8 = frequency0.getPct('a');
        long long10 = frequency0.getCount('a');
        long long12 = frequency0.getCount((int) '#');
        double double14 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        frequency0.addValue((java.lang.Integer) 0);
        double double10 = frequency0.getPct(100);
        long long12 = frequency0.getCount((int) (short) 0);
        long long14 = frequency0.getCumFreq('a');
        frequency0.addValue((long) (-1));
        frequency0.addValue((long) 1);
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        long long21 = frequency19.getCumFreq('#');
        long long23 = frequency19.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long24 = frequency0.getCount((java.lang.Object) long23);
        long long26 = frequency0.getCount((long) 1);
        double double28 = frequency0.getPct(0L);
        org.apache.commons.math.stat.Frequency frequency29 = new org.apache.commons.math.stat.Frequency();
        long long31 = frequency29.getCumFreq('#');
        double double33 = frequency29.getPct((java.lang.Object) (-1.0d));
        long long35 = frequency29.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        frequency29.addValue((long) (short) 1);
        frequency29.clear();
        long long40 = frequency29.getCumFreq(100);
        frequency29.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        boolean boolean43 = frequency0.equals((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long45 = frequency0.getCount(10L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.3333333333333333d + "'", double28 == 0.3333333333333333d);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getPct((int) (byte) 100);
        long long9 = frequency0.getCount(10);
        java.lang.String str10 = frequency0.toString();
        long long12 = frequency0.getCount((int) '4');
        double double14 = frequency0.getPct((int) '#');
        long long16 = frequency0.getCumFreq('4');
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        long long19 = frequency17.getCumFreq('#');
        long long21 = frequency17.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str22 = frequency17.toString();
        long long24 = frequency17.getCount(0);
        long long25 = frequency0.getCumFreq((java.lang.Object) 0);
        frequency0.addValue((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t33%\t33%\n10\t1\t33%\t67%\n52\t1\t33%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str10, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str22, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor8 = frequency0.valuesIterator();
        java.lang.String str9 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        long long14 = frequency10.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long16 = frequency10.getCumFreq((int) (short) -1);
        double double18 = frequency10.getCumPct(1L);
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        long long21 = frequency19.getCumFreq('#');
        double double23 = frequency19.getPct((java.lang.Object) (-1.0d));
        long long25 = frequency19.getCount('#');
        frequency10.addValue((java.lang.Object) long25);
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency();
        long long29 = frequency27.getCumFreq('#');
        double double31 = frequency27.getPct((long) (short) 100);
        long long33 = frequency27.getCount((java.lang.Comparable<java.lang.String>) "");
        long long35 = frequency27.getCumFreq((int) (short) 0);
        double double37 = frequency27.getPct(' ');
        boolean boolean38 = frequency10.equals((java.lang.Object) frequency27);
        double double39 = frequency0.getCumPct((java.lang.Object) boolean38);
        frequency0.addValue(0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(wildcardComparableItor8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str9, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double10 = frequency0.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor11 = frequency0.valuesIterator();
        frequency0.addValue(0L);
        long long15 = frequency0.getCumFreq(' ');
        long long17 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency();
        long long20 = frequency18.getCumFreq('#');
        double double22 = frequency18.getPct((java.lang.Object) (-1.0d));
        long long24 = frequency18.getCount('#');
        double double25 = frequency0.getCumPct((java.lang.Object) '#');
        double double27 = frequency0.getCumPct((long) (short) -1);
        frequency0.clear();
        frequency0.addValue(3L);
        java.lang.String str31 = frequency0.toString();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(wildcardComparableItor11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n3\t1\t100%\t100%\n" + "'", str31, "Value \t Freq. \t Pct. \t Cum Pct. \n3\t1\t100%\t100%\n");
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        java.lang.String str6 = frequency0.toString();
        long long7 = frequency0.getSumFreq();
        long long9 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        java.lang.String str16 = frequency10.toString();
        long long17 = frequency10.getSumFreq();
        long long18 = frequency10.getSumFreq();
        long long20 = frequency10.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        frequency0.addValue((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue(0);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str6, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str16, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        long long7 = frequency0.getCount('#');
        double double9 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        long long11 = frequency0.getCount(' ');
        double double13 = frequency0.getCumPct(1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        java.lang.String str6 = frequency0.toString();
        double double8 = frequency0.getPct('4');
        frequency0.addValue((java.lang.Integer) (-1));
        double double12 = frequency0.getPct((int) (short) 100);
        double double14 = frequency0.getCumPct((long) '#');
        double double16 = frequency0.getPct(' ');
        double double18 = frequency0.getCumPct('#');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor19 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str6, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor19);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCumFreq(0L);
        double double14 = frequency0.getPct((long) (short) 100);
        java.lang.Comparable<java.lang.String> strComparable15 = null;
        long long16 = frequency0.getCumFreq(strComparable15);
        double double18 = frequency0.getCumPct((long) '#');
        frequency0.addValue((java.lang.Integer) 0);
        double double22 = frequency0.getPct((int) (short) 0);
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency();
        long long25 = frequency23.getCumFreq('#');
        frequency23.addValue(100);
        double double29 = frequency23.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor30 = frequency23.valuesIterator();
        java.lang.String str31 = frequency23.toString();
        double double33 = frequency23.getPct((int) (byte) -1);
        org.apache.commons.math.stat.Frequency frequency34 = new org.apache.commons.math.stat.Frequency();
        long long36 = frequency34.getCumFreq('#');
        double double38 = frequency34.getPct((java.lang.Object) (-1.0d));
        long long40 = frequency34.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long42 = frequency34.getCount((int) (short) 0);
        double double44 = frequency34.getCumPct((java.lang.Comparable<java.lang.String>) "");
        boolean boolean45 = frequency23.equals((java.lang.Object) "");
        double double47 = frequency23.getPct((long) (short) 10);
        long long49 = frequency23.getCumFreq((int) (byte) 1);
        double double50 = frequency0.getPct((java.lang.Object) (byte) 1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n" + "'", str31, "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double8 = frequency0.getPct(' ');
        frequency0.addValue((long) (byte) 10);
        long long12 = frequency0.getCumFreq((long) '#');
        long long13 = frequency0.getSumFreq();
        long long15 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        double double17 = frequency0.getCumPct('a');
        double double19 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        java.lang.String str6 = frequency0.toString();
        frequency0.addValue('a');
        frequency0.clear();
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long13 = frequency0.getCount('4');
        long long14 = frequency0.getSumFreq();
        double double16 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str6, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        frequency0.addValue(100);
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        long long9 = frequency7.getCumFreq('#');
        double double11 = frequency7.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor12 = frequency7.valuesIterator();
        double double14 = frequency7.getCumPct('#');
        frequency7.addValue((int) (short) -1);
        frequency7.addValue((int) '4');
        double double20 = frequency7.getCumPct(' ');
        frequency7.addValue((java.lang.Integer) 10);
        boolean boolean23 = frequency0.equals((java.lang.Object) frequency7);
        long long25 = frequency7.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        // The following exception was thrown during execution in test generation
        try {
            frequency7.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(wildcardComparableItor12);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double8 = frequency0.getPct(' ');
        frequency0.addValue((long) (byte) 10);
        long long12 = frequency0.getCumFreq((long) '#');
        long long13 = frequency0.getSumFreq();
        double double15 = frequency0.getCumPct('a');
        long long17 = frequency0.getCount((int) (short) 0);
        frequency0.addValue((int) (short) 100);
        frequency0.addValue((int) 'a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        java.lang.String str6 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency();
        long long9 = frequency7.getCumFreq('#');
        long long11 = frequency7.getCumFreq((java.lang.Object) (byte) 1);
        long long13 = frequency7.getCount(0L);
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency();
        long long16 = frequency14.getCumFreq('#');
        double double17 = frequency7.getPct((java.lang.Object) long16);
        frequency7.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        boolean boolean20 = frequency0.equals((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double22 = frequency0.getPct((long) (short) 1);
        long long24 = frequency0.getCumFreq(100L);
        double double26 = frequency0.getCumPct((long) '#');
        frequency0.addValue('#');
        long long30 = frequency0.getCount((-1L));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor31 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str6, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor31);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCumFreq(0L);
        double double14 = frequency0.getPct((long) '#');
        long long16 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t33%\t33%\n2\t1\t33%\t67%\n10\t1\t33%\t100%\n");
        long long18 = frequency0.getCount('a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCount((int) ' ');
        long long7 = frequency0.getSumFreq();
        frequency0.addValue(10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCumFreq((int) (short) -1);
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency0.clear();
        double double11 = frequency0.getPct((int) (short) 0);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor12 = frequency0.valuesIterator();
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        long long15 = frequency13.getCumFreq('#');
        double double17 = frequency13.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor18 = frequency13.valuesIterator();
        double double20 = frequency13.getPct((int) (byte) 100);
        double double22 = frequency13.getPct(0);
        long long23 = frequency0.getCumFreq((java.lang.Object) double22);
        double double25 = frequency0.getCumPct('#');
        org.apache.commons.math.stat.Frequency frequency26 = new org.apache.commons.math.stat.Frequency();
        long long28 = frequency26.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency29 = new org.apache.commons.math.stat.Frequency();
        long long31 = frequency29.getCumFreq('#');
        double double33 = frequency29.getPct('#');
        double double34 = frequency26.getCumPct((java.lang.Object) '#');
        long long36 = frequency26.getCumFreq(0);
        frequency26.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        double double40 = frequency26.getPct(1);
        long long41 = frequency0.getCumFreq((java.lang.Object) double40);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(wildcardComparableItor12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(wildcardComparableItor18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        frequency0.addValue('#');
        double double9 = frequency0.getCumPct(0);
        double double11 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        double double6 = frequency0.getPct((int) '4');
        long long8 = frequency0.getCumFreq((long) (byte) -1);
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "hi!");
        double double12 = frequency0.getPct((int) (short) 10);
        long long14 = frequency0.getCount('a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        double double17 = frequency10.getPct((int) (byte) 100);
        long long19 = frequency10.getCount(10);
        double double20 = frequency0.getPct((java.lang.Object) 10);
        long long22 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double24 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long25 = frequency0.getSumFreq();
        long long27 = frequency0.getCount((long) (byte) 100);
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency();
        long long30 = frequency28.getCumFreq('#');
        double double32 = frequency28.getPct((java.lang.Object) (-1.0d));
        long long34 = frequency28.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        frequency28.addValue((long) (short) 1);
        frequency28.clear();
        long long39 = frequency28.getCumFreq(100);
        double double41 = frequency28.getCumPct('a');
        java.lang.Comparable<java.lang.String> strComparable42 = null;
        double double43 = frequency28.getCumPct(strComparable42);
        long long44 = frequency0.getCount((java.lang.Object) double43);
        long long46 = frequency0.getCumFreq('#');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCumFreq((int) (short) -1);
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency0.clear();
        double double11 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        java.lang.Object obj12 = null;
        boolean boolean13 = frequency0.equals(obj12);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor14 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardComparableItor14);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        double double12 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.clear();
        double double15 = frequency0.getPct((long) 1);
        long long17 = frequency0.getCount(1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor8 = frequency0.valuesIterator();
        java.lang.String str9 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        long long14 = frequency10.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long16 = frequency10.getCumFreq((int) (short) -1);
        double double18 = frequency10.getCumPct(1L);
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency();
        long long21 = frequency19.getCumFreq('#');
        double double23 = frequency19.getPct((java.lang.Object) (-1.0d));
        long long25 = frequency19.getCount('#');
        frequency10.addValue((java.lang.Object) long25);
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency();
        long long29 = frequency27.getCumFreq('#');
        double double31 = frequency27.getPct((long) (short) 100);
        long long33 = frequency27.getCount((java.lang.Comparable<java.lang.String>) "");
        long long35 = frequency27.getCumFreq((int) (short) 0);
        double double37 = frequency27.getPct(' ');
        boolean boolean38 = frequency10.equals((java.lang.Object) frequency27);
        double double39 = frequency0.getCumPct((java.lang.Object) boolean38);
        long long41 = frequency0.getCount(0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(wildcardComparableItor8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str9, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        long long10 = frequency0.getCumFreq((int) 'a');
        frequency0.clear();
        frequency0.addValue('#');
        long long15 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double10 = frequency0.getPct((-1));
        long long12 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long14 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        double double16 = frequency0.getCumPct(0L);
        frequency0.addValue('#');
        long long20 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t33%\t33%\n10\t1\t33%\t67%\n52\t1\t33%\t100%\n\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCount(0L);
        double double8 = frequency0.getPct('a');
        double double10 = frequency0.getCumPct(0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        long long10 = frequency0.getCumFreq(0);
        double double12 = frequency0.getPct((long) (short) 0);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor13 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(wildcardComparableItor13);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCumFreq((int) (short) -1);
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency0.clear();
        java.lang.Object obj10 = null;
        double double11 = frequency0.getPct(obj10);
        long long13 = frequency0.getCount(' ');
        long long15 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        double double17 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCumFreq(0L);
        long long14 = frequency0.getCumFreq((long) (byte) 100);
        long long15 = frequency0.getSumFreq();
        long long17 = frequency0.getCumFreq((int) (short) -1);
        frequency0.addValue((long) (byte) 10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str5 = frequency0.toString();
        long long7 = frequency0.getCount((long) (byte) 10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \nhi!\t1\t100%\t100%\n" + "'", str5, "Value \t Freq. \t Pct. \t Cum Pct. \nhi!\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getPct((int) (byte) 100);
        long long9 = frequency0.getCount(10);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        long long14 = frequency10.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        frequency10.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        long long19 = frequency17.getCumFreq('#');
        long long21 = frequency17.getCumFreq((java.lang.Object) (byte) 1);
        double double22 = frequency10.getCumPct((java.lang.Object) long21);
        java.lang.String str23 = frequency10.toString();
        double double25 = frequency10.getPct('4');
        double double26 = frequency0.getPct((java.lang.Object) double25);
        long long28 = frequency0.getCount('#');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n" + "'", str23, "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        long long11 = frequency0.getCount((int) ' ');
        boolean boolean13 = frequency0.equals((java.lang.Object) true);
        frequency0.addValue((int) '4');
        frequency0.addValue((java.lang.Integer) 100);
        frequency0.addValue(10L);
        double double21 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t50%\t50%\n0\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        long long6 = frequency0.getSumFreq();
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long10 = frequency0.getCumFreq('#');
        long long12 = frequency0.getCount(0L);
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        long long15 = frequency13.getCumFreq('#');
        double double17 = frequency13.getPct('#');
        double double19 = frequency13.getPct((java.lang.Object) (-1.0f));
        java.lang.String str20 = frequency13.toString();
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency();
        long long23 = frequency21.getCumFreq('#');
        double double25 = frequency21.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor26 = frequency21.valuesIterator();
        java.lang.String str27 = frequency21.toString();
        double double29 = frequency21.getPct('4');
        frequency21.addValue((java.lang.Integer) (-1));
        double double33 = frequency21.getPct('4');
        boolean boolean34 = frequency13.equals((java.lang.Object) double33);
        long long35 = frequency0.getCount((java.lang.Object) boolean34);
        org.apache.commons.math.stat.Frequency frequency36 = new org.apache.commons.math.stat.Frequency();
        long long38 = frequency36.getCumFreq('#');
        long long40 = frequency36.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long42 = frequency36.getCumFreq((int) (short) -1);
        long long44 = frequency36.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency36.clear();
        java.lang.Object obj46 = null;
        double double47 = frequency36.getPct(obj46);
        double double49 = frequency36.getPct('#');
        java.lang.String str50 = frequency36.toString();
        long long52 = frequency36.getCount((java.lang.Comparable<java.lang.String>) "");
        long long54 = frequency36.getCount('a');
        boolean boolean55 = frequency0.equals((java.lang.Object) 'a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str20, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(wildcardComparableItor26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str27, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str50, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCumFreq((long) (byte) 10);
        frequency0.addValue(' ');
        double double10 = frequency0.getCumPct((long) (byte) 0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        long long13 = frequency0.getCount('#');
        long long15 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency();
        long long20 = frequency18.getCumFreq('#');
        double double22 = frequency18.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor23 = frequency18.valuesIterator();
        double double25 = frequency18.getCumPct('#');
        frequency18.addValue((int) (short) -1);
        long long29 = frequency18.getCount((int) ' ');
        boolean boolean31 = frequency18.equals((java.lang.Object) true);
        frequency18.addValue((int) '4');
        frequency18.addValue((java.lang.Integer) 100);
        double double37 = frequency18.getCumPct((int) (short) 1);
        double double38 = frequency0.getCumPct((java.lang.Object) double37);
        long long40 = frequency0.getCumFreq((long) 10);
        double double42 = frequency0.getPct((long) (short) 100);
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(wildcardComparableItor23);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.3333333333333333d + "'", double37 == 0.3333333333333333d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        long long6 = frequency0.getSumFreq();
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor7 = frequency0.valuesIterator();
        long long9 = frequency0.getCount((long) 1);
        double double11 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t33%\t33%\n10\t1\t33%\t67%\n52\t1\t33%\t100%\n");
        java.lang.Class<?> wildcardClass12 = frequency0.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        long long6 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((long) (short) 1);
        long long10 = frequency0.getCumFreq('a');
        double double12 = frequency0.getPct('a');
        frequency0.addValue(100);
        long long16 = frequency0.getCumFreq((int) (byte) -1);
        frequency0.clear();
        double double19 = frequency0.getCumPct('#');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        frequency0.addValue((long) (short) 1);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor7 = frequency0.valuesIterator();
        double double9 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long11 = frequency0.getCount('#');
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency();
        long long14 = frequency12.getCumFreq('#');
        double double16 = frequency12.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor17 = frequency12.valuesIterator();
        java.lang.String str18 = frequency12.toString();
        double double20 = frequency12.getPct('4');
        frequency12.addValue((java.lang.Integer) (-1));
        double double24 = frequency12.getPct((int) (short) 100);
        double double26 = frequency12.getCumPct('4');
        long long28 = frequency12.getCount(100L);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor29 = frequency12.valuesIterator();
        boolean boolean30 = frequency0.equals((java.lang.Object) frequency12);
        double double32 = frequency0.getCumPct(' ');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(wildcardComparableItor17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str18, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        frequency0.addValue((int) (short) -1);
        long long11 = frequency0.getCount((int) ' ');
        double double13 = frequency0.getPct(1);
        double double15 = frequency0.getPct((long) 0);
        long long17 = frequency0.getCount('#');
        java.lang.String str18 = frequency0.toString();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n" + "'", str18, "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getPct((int) (byte) 100);
        long long9 = frequency0.getCount(10);
        java.lang.String str10 = frequency0.toString();
        long long12 = frequency0.getCount((int) '4');
        double double14 = frequency0.getPct((int) '#');
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency();
        long long17 = frequency15.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency();
        long long20 = frequency18.getCumFreq('#');
        double double22 = frequency18.getPct('#');
        double double23 = frequency15.getCumPct((java.lang.Object) '#');
        java.lang.Object obj24 = null;
        double double25 = frequency15.getPct(obj24);
        double double26 = frequency0.getPct(obj24);
        frequency0.addValue(1L);
        java.lang.String str29 = frequency0.toString();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str10, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n" + "'", str29, "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCount(0L);
        double double8 = frequency0.getPct('a');
        frequency0.clear();
        frequency0.clear();
        long long12 = frequency0.getCumFreq(0);
        double double14 = frequency0.getPct((long) 100);
        double double16 = frequency0.getCumPct((int) (byte) -1);
        double double18 = frequency0.getPct((-1L));
        double double20 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        long long6 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long8 = frequency0.getCount((int) (short) 0);
        double double10 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        long long13 = frequency11.getCumFreq('#');
        long long15 = frequency11.getCumFreq((java.lang.Object) (byte) 1);
        long long17 = frequency11.getCumFreq((long) (byte) 10);
        frequency11.clear();
        boolean boolean19 = frequency0.equals((java.lang.Object) frequency11);
        double double21 = frequency11.getCumPct('4');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCumFreq((int) (short) -1);
        long long8 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        frequency0.clear();
        java.lang.Object obj10 = null;
        double double11 = frequency0.getPct(obj10);
        double double13 = frequency0.getPct('#');
        long long15 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((long) 0);
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency();
        long long20 = frequency18.getCumFreq('#');
        double double22 = frequency18.getPct('#');
        double double24 = frequency18.getPct((java.lang.Object) (-1.0f));
        long long26 = frequency18.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double28 = frequency18.getPct((-1));
        long long30 = frequency18.getCumFreq(10);
        long long32 = frequency18.getCount(0);
        frequency18.addValue((long) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long35 = frequency0.getCumFreq((java.lang.Object) frequency18);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        long long10 = frequency0.getCumFreq((long) (short) 0);
        frequency0.addValue((long) 100);
        frequency0.addValue((int) (byte) 1);
        long long16 = frequency0.getCount(1);
        long long18 = frequency0.getCount((long) (byte) 1);
        double double20 = frequency0.getCumPct((int) ' ');
        long long22 = frequency0.getCount((int) 'a');
        double double24 = frequency0.getPct('4');
        long long26 = frequency0.getCumFreq(10);
        double double28 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.5d + "'", double20 == 0.5d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str5 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency6 = new org.apache.commons.math.stat.Frequency();
        long long8 = frequency6.getCumFreq('#');
        double double10 = frequency6.getPct((long) (short) 100);
        long long11 = frequency0.getCount((java.lang.Object) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor12 = frequency0.valuesIterator();
        double double14 = frequency0.getCumPct((int) (byte) 1);
        long long16 = frequency0.getCumFreq(100);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str5, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor12);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor8 = frequency0.valuesIterator();
        java.lang.String str9 = frequency0.toString();
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor10 = frequency0.valuesIterator();
        double double12 = frequency0.getPct('a');
        double double14 = frequency0.getCumPct((long) (byte) 100);
        double double16 = frequency0.getCumPct((long) (byte) 100);
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        long long19 = frequency17.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        long long22 = frequency20.getCumFreq('#');
        double double24 = frequency20.getPct('#');
        double double25 = frequency17.getCumPct((java.lang.Object) '#');
        java.lang.Object obj26 = null;
        double double27 = frequency17.getPct(obj26);
        long long29 = frequency17.getCumFreq(0L);
        double double31 = frequency17.getPct((long) (short) 100);
        java.lang.Comparable<java.lang.String> strComparable32 = null;
        long long33 = frequency17.getCumFreq(strComparable32);
        double double35 = frequency17.getCumPct((long) '#');
        double double36 = frequency0.getPct((java.lang.Object) double35);
        frequency0.addValue((java.lang.Integer) 0);
        long long40 = frequency0.getCumFreq((long) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue(' ');
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(wildcardComparableItor8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str9, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertNotNull(wildcardComparableItor10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str5 = frequency0.toString();
        org.apache.commons.math.stat.Frequency frequency6 = new org.apache.commons.math.stat.Frequency();
        long long8 = frequency6.getCumFreq('#');
        long long10 = frequency6.getCumFreq((java.lang.Object) (byte) 1);
        long long12 = frequency6.getCount(0L);
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        long long15 = frequency13.getCumFreq('#');
        double double16 = frequency6.getPct((java.lang.Object) long15);
        double double17 = frequency0.getCumPct((java.lang.Object) double16);
        double double19 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((java.lang.Integer) 1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str5, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "");
        double double8 = frequency0.getPct(' ');
        long long10 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long12 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double14 = frequency0.getPct((int) (byte) 100);
        frequency0.addValue('a');
        long long18 = frequency0.getCumFreq((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long20 = frequency0.getCumFreq(' ');
        java.lang.String str21 = frequency0.toString();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        java.lang.String str6 = frequency0.toString();
        double double8 = frequency0.getPct('4');
        frequency0.addValue((java.lang.Integer) (-1));
        double double12 = frequency0.getPct((int) (short) 100);
        double double14 = frequency0.getCumPct((long) '#');
        double double16 = frequency0.getPct(' ');
        double double18 = frequency0.getCumPct('#');
        long long20 = frequency0.getCount((long) (short) -1);
        frequency0.addValue(2L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str6, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        long long6 = frequency0.getSumFreq();
        double double8 = frequency0.getCumPct('#');
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency();
        long long11 = frequency9.getCumFreq('#');
        long long13 = frequency9.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long15 = frequency9.getCumFreq((int) (short) -1);
        frequency9.addValue((java.lang.Integer) 10);
        double double19 = frequency9.getCumPct('#');
        frequency0.addValue((java.lang.Object) '#');
        long long22 = frequency0.getCumFreq((int) (short) 0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        long long6 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long8 = frequency0.getCumFreq((long) (short) -1);
        double double10 = frequency0.getPct((long) (byte) 0);
        double double12 = frequency0.getCumPct('a');
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        long long15 = frequency13.getCumFreq('#');
        double double17 = frequency13.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor18 = frequency13.valuesIterator();
        java.lang.String str19 = frequency13.toString();
        frequency13.addValue('a');
        frequency13.clear();
        frequency13.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n10\t1\t100%\t100%\n");
        double double26 = frequency13.getCumPct((long) 10);
        long long28 = frequency13.getCumFreq(0L);
        frequency13.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        // The following exception was thrown during execution in test generation
        try {
            long long31 = frequency0.getCumFreq((java.lang.Object) frequency13);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(wildcardComparableItor18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str19, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCumFreq((java.lang.Object) 10.0d);
        frequency0.addValue((long) (byte) 1);
        double double10 = frequency0.getCumPct((int) 'a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        long long13 = frequency11.getCumFreq('#');
        long long15 = frequency11.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long17 = frequency11.getCumFreq((int) (short) -1);
        double double19 = frequency11.getCumPct(1L);
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        long long22 = frequency20.getCumFreq('#');
        double double24 = frequency20.getPct((java.lang.Object) (-1.0d));
        long long26 = frequency20.getCount('#');
        frequency11.addValue((java.lang.Object) long26);
        long long29 = frequency11.getCumFreq((-1L));
        long long30 = frequency0.getCumFreq((java.lang.Object) (-1L));
        long long32 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        double double34 = frequency0.getPct('a');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor35 = frequency0.valuesIterator();
        long long36 = frequency0.getSumFreq();
        long long38 = frequency0.getCumFreq('4');
        frequency0.addValue(0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        long long6 = frequency0.getSumFreq();
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor7 = frequency0.valuesIterator();
        long long9 = frequency0.getCount((long) 100);
        double double11 = frequency0.getPct((long) (short) 1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(wildcardComparableItor7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getCumPct('#');
        long long9 = frequency0.getCount((java.lang.Object) (short) -1);
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency();
        long long12 = frequency10.getCumFreq('#');
        double double14 = frequency10.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor15 = frequency10.valuesIterator();
        double double17 = frequency10.getPct((int) (byte) 100);
        long long19 = frequency10.getCount(10);
        double double20 = frequency0.getPct((java.lang.Object) 10);
        long long22 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        double double24 = frequency0.getCumPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        long long26 = frequency0.getCount((int) (short) 100);
        frequency0.addValue((int) (byte) 0);
        long long29 = frequency0.getSumFreq();
        double double31 = frequency0.getCumPct((int) (short) 0);
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency();
        long long34 = frequency32.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency35 = new org.apache.commons.math.stat.Frequency();
        long long37 = frequency35.getCumFreq('#');
        double double39 = frequency35.getPct('#');
        double double40 = frequency32.getCumPct((java.lang.Object) '#');
        double double42 = frequency32.getPct((long) (short) -1);
        double double44 = frequency32.getCumPct((int) (short) 100);
        boolean boolean46 = frequency32.equals((java.lang.Object) 1.0f);
        double double48 = frequency32.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        double double50 = frequency32.getCumPct((long) (byte) 0);
        double double52 = frequency32.getPct('a');
        frequency32.clear();
        boolean boolean54 = frequency0.equals((java.lang.Object) frequency32);
        double double56 = frequency32.getPct((int) (byte) 100);
        double double58 = frequency32.getPct('a');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardComparableItor15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long6 = frequency0.getCumFreq((int) (short) -1);
        long long7 = frequency0.getSumFreq();
        org.apache.commons.math.stat.Frequency frequency8 = new org.apache.commons.math.stat.Frequency();
        long long10 = frequency8.getCumFreq('#');
        double double12 = frequency8.getPct((java.lang.Object) (-1.0d));
        long long14 = frequency8.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        long long16 = frequency8.getCumFreq((long) (short) -1);
        double double18 = frequency8.getPct((long) (byte) 0);
        double double20 = frequency8.getCumPct((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((java.lang.Object) double20);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((java.lang.Object) (-1.0d));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        long long7 = frequency0.getCumFreq((java.lang.Object) (short) 10);
        double double9 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCount(0L);
        double double8 = frequency0.getPct('a');
        long long10 = frequency0.getCount('a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        long long13 = frequency11.getCumFreq('#');
        long long15 = frequency11.getCumFreq((java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str16 = frequency11.toString();
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency();
        long long19 = frequency17.getCumFreq('#');
        long long21 = frequency17.getCumFreq((java.lang.Object) (byte) 1);
        long long23 = frequency17.getCount(0L);
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency();
        long long26 = frequency24.getCumFreq('#');
        double double27 = frequency17.getPct((java.lang.Object) long26);
        double double28 = frequency11.getCumPct((java.lang.Object) double27);
        long long29 = frequency11.getSumFreq();
        boolean boolean30 = frequency0.equals((java.lang.Object) frequency11);
        long long32 = frequency11.getCumFreq('4');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str16, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        long long4 = frequency0.getCumFreq((java.lang.Object) (byte) 1);
        long long6 = frequency0.getCumFreq((java.lang.Object) 10.0d);
        frequency0.addValue((long) (byte) 1);
        double double10 = frequency0.getCumPct((int) 'a');
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency();
        long long13 = frequency11.getCumFreq('#');
        long long15 = frequency11.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        long long17 = frequency11.getCumFreq((int) (short) -1);
        double double19 = frequency11.getCumPct(1L);
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency();
        long long22 = frequency20.getCumFreq('#');
        double double24 = frequency20.getPct((java.lang.Object) (-1.0d));
        long long26 = frequency20.getCount('#');
        frequency11.addValue((java.lang.Object) long26);
        long long29 = frequency11.getCumFreq((-1L));
        long long30 = frequency0.getCumFreq((java.lang.Object) (-1L));
        long long32 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        double double34 = frequency0.getPct('a');
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor35 = frequency0.valuesIterator();
        long long36 = frequency0.getSumFreq();
        long long38 = frequency0.getCount((long) 1);
        long long40 = frequency0.getCount((long) (-1));
        double double42 = frequency0.getCumPct((long) '4');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardComparableItor35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        double double6 = frequency0.getPct((java.lang.Object) (-1.0f));
        long long8 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        double double10 = frequency0.getPct((-1));
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor11 = frequency0.valuesIterator();
        frequency0.addValue(0L);
        long long15 = frequency0.getCumFreq(' ');
        long long17 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "");
        frequency0.clear();
        long long20 = frequency0.getCount((long) (byte) -1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(wildcardComparableItor11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct((long) (short) 100);
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor5 = frequency0.valuesIterator();
        double double7 = frequency0.getPct((int) (byte) 100);
        long long9 = frequency0.getCount(10);
        java.lang.String str10 = frequency0.toString();
        long long12 = frequency0.getCount((int) '4');
        double double14 = frequency0.getPct((int) '#');
        long long16 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t33%\t33%\n10\t1\t33%\t67%\n52\t1\t33%\t100%\n");
        double double18 = frequency0.getCumPct((long) ' ');
        long long20 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency();
        long long23 = frequency21.getCumFreq('#');
        long long25 = frequency21.getCumFreq((java.lang.Object) (byte) 1);
        double double27 = frequency21.getPct((int) '4');
        long long29 = frequency21.getCumFreq((long) (byte) -1);
        frequency21.addValue((java.lang.Comparable<java.lang.String>) "hi!");
        double double32 = frequency0.getPct((java.lang.Object) "hi!");
        double double34 = frequency0.getPct((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \nValue \t Freq. \t Pct. \t Cum Pct. \n\t1\t100%\t100%\n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor35 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardComparableItor5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str10, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(wildcardComparableItor35);
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        double double4 = frequency0.getPct('#');
        long long6 = frequency0.getCount((java.lang.Comparable<java.lang.String>) "hi!");
        frequency0.addValue((long) 0);
        long long10 = frequency0.getCumFreq((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        java.lang.String str11 = frequency0.toString();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n0\t1\t100%\t100%\n");
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long2 = frequency0.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency();
        long long5 = frequency3.getCumFreq('#');
        double double7 = frequency3.getPct('#');
        double double8 = frequency0.getCumPct((java.lang.Object) '#');
        java.lang.Object obj9 = null;
        double double10 = frequency0.getPct(obj9);
        long long12 = frequency0.getCount(10);
        java.lang.String str13 = frequency0.toString();
        frequency0.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor16 = frequency0.valuesIterator();
        frequency0.clear();
        double double19 = frequency0.getPct('a');
        long long21 = frequency0.getCumFreq((int) (byte) 1);
        java.lang.String str22 = frequency0.toString();
        frequency0.clear();
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency();
        long long26 = frequency24.getCumFreq('#');
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency();
        long long29 = frequency27.getCumFreq('#');
        double double31 = frequency27.getPct('#');
        double double32 = frequency24.getCumPct((java.lang.Object) '#');
        java.lang.Object obj33 = null;
        double double34 = frequency24.getPct(obj33);
        long long36 = frequency24.getCount(10);
        java.lang.String str37 = frequency24.toString();
        frequency24.addValue((java.lang.Comparable<java.lang.String>) "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
        java.util.Iterator<java.lang.Comparable<?>> wildcardComparableItor40 = frequency24.valuesIterator();
        long long42 = frequency24.getCumFreq('4');
        long long43 = frequency24.getSumFreq();
        java.lang.Class<?> wildcardClass44 = frequency24.getClass();
        boolean boolean45 = frequency0.equals((java.lang.Object) frequency24);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str13, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertNotNull(wildcardComparableItor16);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str22, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str37, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertNotNull(wildcardComparableItor40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }
}

