package org.apache.commons.cli;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = null;
        java.lang.String[] strArray2 = new java.lang.String[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine3 = posixParser0.parse(options1, strArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options23 = options18.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options28 = options18.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "[ option:   :: arg ]", "[ Options: [ short {} ] [ long {} ]", "hi!", "arg", "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options28, strArray35);
        org.apache.commons.cli.Options options37 = null;
        org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str45 = option44.getKey();
        java.lang.String str46 = option44.getArgName();
        java.util.List list47 = option44.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup48 = options39.getOptionGroup(option44);
        boolean boolean50 = options39.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray53 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray55 = posixParser38.flatten(options39, strArray53, true);
        org.apache.commons.cli.Options options56 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options61 = options56.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options66 = options56.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray73 = new java.lang.String[] { "[ option:   :: arg ]", "[ Options: [ short {} ] [ long {} ]", "hi!", "arg", "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine74 = posixParser38.parse(options66, strArray73);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.CommandLine commandLine75 = posixParser0.parse(options37, strArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "arg" + "'", str46, "arg");
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(options61);
        org.junit.Assert.assertNotNull(options66);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine74);
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        java.util.ListIterator listIterator21 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processOption("org.apache.commons.cli.UnrecognizedOptionException: [ option:   :: arg ]", listIterator21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = posixParser0.getOptions();
        java.util.List list35 = options34.helpOptions();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(list35);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        posixParser0.burstToken("org.apache.commons.cli.UnrecognizedOptionException: ", false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.cmd;
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        boolean boolean31 = options20.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray34 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray36 = posixParser19.flatten(options20, strArray34, true);
        java.util.Properties properties37 = null;
        posixParser19.processProperties(properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str45 = option44.getKey();
        java.lang.String str46 = option44.getArgName();
        java.util.List list47 = option44.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup48 = options39.getOptionGroup(option44);
        java.lang.String[] strArray49 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine51 = posixParser19.parse(options39, strArray49, true);
        org.apache.commons.cli.CommandLine commandLine52 = posixParser19.cmd;
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options58 = options53.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options63 = options53.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "arg", "arg" };
        org.apache.commons.cli.CommandLine commandLine69 = posixParser19.parse(options63, strArray67, false);
        posixParser0.setOptions(options63);
        org.apache.commons.cli.Option option72 = options63.getOption("org.apache.commons.cli.UnrecognizedOptionException: [ option:   :: arg ]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(commandLine18);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "arg" + "'", str46, "arg");
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNull(option72);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = posixParser0.getOptions();
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.cmd;
        posixParser0.burstToken("[ option:   :: arg ]", true);
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str44 = option43.getKey();
        java.lang.String str45 = option43.getArgName();
        boolean boolean46 = option43.hasArgs();
        java.lang.Object obj47 = option43.getType();
        org.apache.commons.cli.Option option52 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean53 = option52.hasLongOpt();
        boolean boolean54 = option52.hasArgName();
        option52.setDescription("arg");
        boolean boolean57 = option43.equals((java.lang.Object) "arg");
        java.util.ListIterator listIterator58 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option43, listIterator58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "arg" + "'", str45, "arg");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        java.lang.String str34 = options33.toString();
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str40 = option39.getKey();
        java.lang.String str41 = option39.getArgName();
        java.util.List list42 = option39.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup43 = options33.getOptionGroup(option39);
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str51 = option50.getKey();
        java.lang.String str52 = option50.getArgName();
        java.util.List list53 = option50.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup54 = options45.getOptionGroup(option50);
        boolean boolean56 = options45.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray59 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray61 = posixParser44.flatten(options45, strArray59, true);
        java.util.Properties properties62 = null;
        posixParser44.processProperties(properties62);
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str70 = option69.getKey();
        java.lang.String str71 = option69.getArgName();
        java.util.List list72 = option69.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup73 = options64.getOptionGroup(option69);
        java.lang.String[] strArray74 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine76 = posixParser44.parse(options64, strArray74, true);
        org.apache.commons.cli.CommandLine commandLine77 = posixParser44.cmd;
        org.apache.commons.cli.Options options78 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options83 = options78.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options88 = options78.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray92 = new java.lang.String[] { "hi!", "arg", "arg" };
        org.apache.commons.cli.CommandLine commandLine94 = posixParser44.parse(options88, strArray92, false);
        java.lang.String[] strArray96 = posixParser0.flatten(options33, strArray92, true);
        boolean boolean98 = options33.hasOption("");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str34, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "arg" + "'", str41, "arg");
        org.junit.Assert.assertNotNull(list42);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNotNull(list53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "arg" + "'", str71, "arg");
        org.junit.Assert.assertNotNull(list72);
        org.junit.Assert.assertNull(optionGroup73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNotNull(options83);
        org.junit.Assert.assertNotNull(options88);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(commandLine94);
        org.junit.Assert.assertNotNull(strArray96);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        java.lang.String str33 = options20.toString();
        java.util.Collection collection34 = options20.getOptions();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str33, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection34);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("", false, "arg");
        java.lang.Object obj4 = option3.clone();
        boolean boolean5 = option3.isRequired();
        java.lang.String str6 = option3.toString();
        option3.clearValues();
        boolean boolean8 = option3.hasLongOpt();
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str16 = option15.getKey();
        java.lang.String str17 = option15.getArgName();
        java.util.List list18 = option15.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup19 = options10.getOptionGroup(option15);
        boolean boolean21 = options10.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray24 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray26 = posixParser9.flatten(options10, strArray24, true);
        java.util.Properties properties27 = null;
        posixParser9.processProperties(properties27);
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option34 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str35 = option34.getKey();
        java.lang.String str36 = option34.getArgName();
        java.util.List list37 = option34.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup38 = options29.getOptionGroup(option34);
        java.lang.String[] strArray39 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine41 = posixParser9.parse(options29, strArray39, true);
        org.apache.commons.cli.CommandLine commandLine42 = posixParser9.cmd;
        org.apache.commons.cli.Options options43 = posixParser9.getOptions();
        option3.setType((java.lang.Object) posixParser9);
        java.lang.Object obj45 = option3.getType();
        boolean boolean46 = option3.hasLongOpt();
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "[ option:   :: arg ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "[ option:   :: arg ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "[ option:   :: arg ]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[ option:   :: arg ]" + "'", str6, "[ option:   :: arg ]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertNotNull(list18);
        org.junit.Assert.assertNull(optionGroup19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "arg" + "'", str36, "arg");
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNull(optionGroup38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options23 = options18.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options28 = options18.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "[ option:   :: arg ]", "[ Options: [ short {} ] [ long {} ]", "hi!", "arg", "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options28, strArray35);
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str44 = option43.getKey();
        java.lang.String str45 = option43.getArgName();
        java.util.List list46 = option43.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup47 = options38.getOptionGroup(option43);
        boolean boolean49 = options38.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray52 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray54 = posixParser37.flatten(options38, strArray52, true);
        java.util.Properties properties55 = null;
        posixParser37.processProperties(properties55);
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option62 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str63 = option62.getKey();
        java.lang.String str64 = option62.getArgName();
        java.util.List list65 = option62.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup66 = options57.getOptionGroup(option62);
        java.lang.String[] strArray67 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine69 = posixParser37.parse(options57, strArray67, true);
        posixParser0.cmd = commandLine69;
        org.apache.commons.cli.Option option75 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean76 = option75.hasLongOpt();
        java.util.ListIterator listIterator77 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option75, listIterator77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "arg" + "'", str45, "arg");
        org.junit.Assert.assertNotNull(list46);
        org.junit.Assert.assertNull(optionGroup47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "arg" + "'", str64, "arg");
        org.junit.Assert.assertNotNull(list65);
        org.junit.Assert.assertNull(optionGroup66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.cmd;
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        boolean boolean31 = options20.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray34 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray36 = posixParser19.flatten(options20, strArray34, true);
        java.util.Properties properties37 = null;
        posixParser19.processProperties(properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str45 = option44.getKey();
        java.lang.String str46 = option44.getArgName();
        java.util.List list47 = option44.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup48 = options39.getOptionGroup(option44);
        java.lang.String[] strArray49 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine51 = posixParser19.parse(options39, strArray49, true);
        org.apache.commons.cli.CommandLine commandLine52 = posixParser19.cmd;
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options58 = options53.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options63 = options53.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "arg", "arg" };
        org.apache.commons.cli.CommandLine commandLine69 = posixParser19.parse(options63, strArray67, false);
        posixParser0.setOptions(options63);
        java.util.ListIterator listIterator72 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processOption("[ Options: [ short {} ] [ long {} ]", listIterator72);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.cli.UnrecognizedOptionException; message: Unrecognized option: [ Options: [ short {} ] [ long {} ]");
        } catch (org.apache.commons.cli.UnrecognizedOptionException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(commandLine18);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "arg" + "'", str46, "arg");
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(commandLine69);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options39 = options34.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options44 = options34.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "arg", "arg" };
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options44, strArray48, false);
        org.apache.commons.cli.PosixParser posixParser51 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options52 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str58 = option57.getKey();
        java.lang.String str59 = option57.getArgName();
        java.util.List list60 = option57.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup61 = options52.getOptionGroup(option57);
        boolean boolean63 = options52.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray66 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray68 = posixParser51.flatten(options52, strArray66, true);
        java.util.Properties properties69 = null;
        posixParser51.processProperties(properties69);
        org.apache.commons.cli.Options options71 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option76 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str77 = option76.getKey();
        java.lang.String str78 = option76.getArgName();
        java.util.List list79 = option76.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup80 = options71.getOptionGroup(option76);
        java.lang.String[] strArray81 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine83 = posixParser51.parse(options71, strArray81, true);
        java.util.Properties properties85 = commandLine83.getOptionProperties("hi!");
        posixParser0.cmd = commandLine83;
        java.lang.Class<?> wildcardClass87 = commandLine83.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "arg" + "'", str59, "arg");
        org.junit.Assert.assertNotNull(list60);
        org.junit.Assert.assertNull(optionGroup61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "arg" + "'", str78, "arg");
        org.junit.Assert.assertNotNull(list79);
        org.junit.Assert.assertNull(optionGroup80);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(properties85);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.cmd;
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        boolean boolean31 = options20.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray34 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray36 = posixParser19.flatten(options20, strArray34, true);
        java.util.Properties properties37 = null;
        posixParser19.processProperties(properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str45 = option44.getKey();
        java.lang.String str46 = option44.getArgName();
        java.util.List list47 = option44.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup48 = options39.getOptionGroup(option44);
        java.lang.String[] strArray49 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine51 = posixParser19.parse(options39, strArray49, true);
        org.apache.commons.cli.CommandLine commandLine52 = posixParser19.cmd;
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options58 = options53.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options63 = options53.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "arg", "arg" };
        org.apache.commons.cli.CommandLine commandLine69 = posixParser19.parse(options63, strArray67, false);
        posixParser0.setOptions(options63);
        posixParser0.burstToken("[ Options: [ short {} ] [ long {} ]", false);
        java.util.ListIterator listIterator75 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processOption("", listIterator75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(commandLine18);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "arg" + "'", str46, "arg");
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(commandLine69);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        java.lang.String str34 = options33.toString();
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str40 = option39.getKey();
        java.lang.String str41 = option39.getArgName();
        java.util.List list42 = option39.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup43 = options33.getOptionGroup(option39);
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str51 = option50.getKey();
        java.lang.String str52 = option50.getArgName();
        java.util.List list53 = option50.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup54 = options45.getOptionGroup(option50);
        boolean boolean56 = options45.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray59 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray61 = posixParser44.flatten(options45, strArray59, true);
        java.util.Properties properties62 = null;
        posixParser44.processProperties(properties62);
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str70 = option69.getKey();
        java.lang.String str71 = option69.getArgName();
        java.util.List list72 = option69.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup73 = options64.getOptionGroup(option69);
        java.lang.String[] strArray74 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine76 = posixParser44.parse(options64, strArray74, true);
        org.apache.commons.cli.CommandLine commandLine77 = posixParser44.cmd;
        org.apache.commons.cli.Options options78 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options83 = options78.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options88 = options78.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray92 = new java.lang.String[] { "hi!", "arg", "arg" };
        org.apache.commons.cli.CommandLine commandLine94 = posixParser44.parse(options88, strArray92, false);
        java.lang.String[] strArray96 = posixParser0.flatten(options33, strArray92, true);
        posixParser0.burstToken("arg", true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str34, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "arg" + "'", str41, "arg");
        org.junit.Assert.assertNotNull(list42);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNotNull(list53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "arg" + "'", str71, "arg");
        org.junit.Assert.assertNotNull(list72);
        org.junit.Assert.assertNull(optionGroup73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNotNull(options83);
        org.junit.Assert.assertNotNull(options88);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(commandLine94);
        org.junit.Assert.assertNotNull(strArray96);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.Options options36 = options20.addOption("arg", true, "arg");
        org.apache.commons.cli.Option option38 = options36.getOption("[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertNull(option38);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.cmd;
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        boolean boolean31 = options20.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray34 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray36 = posixParser19.flatten(options20, strArray34, true);
        org.apache.commons.cli.Option option41 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean42 = option41.hasLongOpt();
        boolean boolean43 = option41.hasArgName();
        boolean boolean44 = option41.hasArgName();
        org.apache.commons.cli.OptionGroup optionGroup45 = options20.getOptionGroup(option41);
        java.util.Collection collection46 = options20.getOptionGroups();
        org.apache.commons.cli.PosixParser posixParser47 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option53 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str54 = option53.getKey();
        java.lang.String str55 = option53.getArgName();
        java.util.List list56 = option53.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup57 = options48.getOptionGroup(option53);
        boolean boolean59 = options48.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray62 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray64 = posixParser47.flatten(options48, strArray62, true);
        java.util.Properties properties65 = null;
        posixParser47.processProperties(properties65);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option72 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str73 = option72.getKey();
        java.lang.String str74 = option72.getArgName();
        java.util.List list75 = option72.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup76 = options67.getOptionGroup(option72);
        java.lang.String[] strArray77 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine79 = posixParser47.parse(options67, strArray77, true);
        org.apache.commons.cli.CommandLine commandLine80 = posixParser47.cmd;
        org.apache.commons.cli.Options options81 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options86 = options81.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options91 = options81.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray95 = new java.lang.String[] { "hi!", "arg", "arg" };
        org.apache.commons.cli.CommandLine commandLine97 = posixParser47.parse(options91, strArray95, false);
        org.apache.commons.cli.CommandLine commandLine99 = posixParser0.parse(options20, strArray95, true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(commandLine18);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(optionGroup45);
        org.junit.Assert.assertNotNull(collection46);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "arg" + "'", str55, "arg");
        org.junit.Assert.assertNotNull(list56);
        org.junit.Assert.assertNull(optionGroup57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "arg" + "'", str74, "arg");
        org.junit.Assert.assertNotNull(list75);
        org.junit.Assert.assertNull(optionGroup76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(commandLine79);
        org.junit.Assert.assertNotNull(commandLine80);
        org.junit.Assert.assertNotNull(options86);
        org.junit.Assert.assertNotNull(options91);
        org.junit.Assert.assertNotNull(strArray95);
        org.junit.Assert.assertNotNull(commandLine97);
        org.junit.Assert.assertNotNull(commandLine99);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = posixParser0.getOptions();
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.cmd;
        posixParser0.burstToken("[ option:   :: arg ]", true);
        java.util.ListIterator listIterator40 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processOption("org.apache.commons.cli.UnrecognizedOptionException: ", listIterator40);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.cli.UnrecognizedOptionException; message: Unrecognized option: org.apache.commons.cli.UnrecognizedOptionException: ");
        } catch (org.apache.commons.cli.UnrecognizedOptionException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(commandLine35);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("", false, "arg");
        java.lang.Object obj4 = option3.clone();
        boolean boolean5 = option3.isRequired();
        java.lang.String str6 = option3.toString();
        option3.clearValues();
        boolean boolean8 = option3.hasLongOpt();
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str16 = option15.getKey();
        java.lang.String str17 = option15.getArgName();
        java.util.List list18 = option15.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup19 = options10.getOptionGroup(option15);
        boolean boolean21 = options10.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray24 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray26 = posixParser9.flatten(options10, strArray24, true);
        java.util.Properties properties27 = null;
        posixParser9.processProperties(properties27);
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option34 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str35 = option34.getKey();
        java.lang.String str36 = option34.getArgName();
        java.util.List list37 = option34.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup38 = options29.getOptionGroup(option34);
        java.lang.String[] strArray39 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine41 = posixParser9.parse(options29, strArray39, true);
        org.apache.commons.cli.CommandLine commandLine42 = posixParser9.cmd;
        org.apache.commons.cli.Options options43 = posixParser9.getOptions();
        option3.setType((java.lang.Object) posixParser9);
        java.lang.Object obj45 = option3.getType();
        option3.setArgs(0);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "[ option:   :: arg ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "[ option:   :: arg ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "[ option:   :: arg ]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[ option:   :: arg ]" + "'", str6, "[ option:   :: arg ]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertNotNull(list18);
        org.junit.Assert.assertNull(optionGroup19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "arg" + "'", str36, "arg");
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNull(optionGroup38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(obj45);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        java.lang.String str33 = options20.toString();
        java.util.Collection collection34 = options20.getOptionGroups();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str33, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(collection34);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("", false, "arg");
        java.lang.Object obj4 = option3.clone();
        boolean boolean5 = option3.isRequired();
        java.lang.String str6 = option3.toString();
        option3.clearValues();
        boolean boolean8 = option3.hasLongOpt();
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str16 = option15.getKey();
        java.lang.String str17 = option15.getArgName();
        java.util.List list18 = option15.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup19 = options10.getOptionGroup(option15);
        boolean boolean21 = options10.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray24 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray26 = posixParser9.flatten(options10, strArray24, true);
        java.util.Properties properties27 = null;
        posixParser9.processProperties(properties27);
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option34 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str35 = option34.getKey();
        java.lang.String str36 = option34.getArgName();
        java.util.List list37 = option34.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup38 = options29.getOptionGroup(option34);
        java.lang.String[] strArray39 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine41 = posixParser9.parse(options29, strArray39, true);
        org.apache.commons.cli.CommandLine commandLine42 = posixParser9.cmd;
        org.apache.commons.cli.Options options43 = posixParser9.getOptions();
        option3.setType((java.lang.Object) posixParser9);
        java.util.ListIterator listIterator46 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser9.processOption("[ option:   :: arg ]", listIterator46);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.cli.UnrecognizedOptionException; message: Unrecognized option: [ option:   :: arg ]");
        } catch (org.apache.commons.cli.UnrecognizedOptionException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "[ option:   :: arg ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "[ option:   :: arg ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "[ option:   :: arg ]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[ option:   :: arg ]" + "'", str6, "[ option:   :: arg ]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertNotNull(list18);
        org.junit.Assert.assertNull(optionGroup19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "arg" + "'", str36, "arg");
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNull(optionGroup38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(options43);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean23 = option22.hasLongOpt();
        boolean boolean24 = option22.hasArgName();
        boolean boolean25 = option22.hasArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options1.getOptionGroup(option22);
        org.apache.commons.cli.Option option28 = options1.getOption("org.apache.commons.cli.UnrecognizedOptionException: ");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNull(option28);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        java.lang.String[] strArray33 = commandLine32.getArgs();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(strArray33);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean23 = option22.hasLongOpt();
        boolean boolean24 = option22.hasArgName();
        boolean boolean25 = option22.hasArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options1.getOptionGroup(option22);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = option22.addValue("[ Options: [ short {} ] [ long {} ]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(optionGroup26);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("", false, "arg");
        java.lang.Object obj4 = option3.clone();
        boolean boolean5 = option3.isRequired();
        java.lang.String str6 = option3.toString();
        option3.clearValues();
        boolean boolean8 = option3.hasLongOpt();
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str16 = option15.getKey();
        java.lang.String str17 = option15.getArgName();
        java.util.List list18 = option15.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup19 = options10.getOptionGroup(option15);
        boolean boolean21 = options10.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray24 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray26 = posixParser9.flatten(options10, strArray24, true);
        java.util.Properties properties27 = null;
        posixParser9.processProperties(properties27);
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option34 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str35 = option34.getKey();
        java.lang.String str36 = option34.getArgName();
        java.util.List list37 = option34.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup38 = options29.getOptionGroup(option34);
        java.lang.String[] strArray39 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine41 = posixParser9.parse(options29, strArray39, true);
        org.apache.commons.cli.CommandLine commandLine42 = posixParser9.cmd;
        org.apache.commons.cli.Options options43 = posixParser9.getOptions();
        option3.setType((java.lang.Object) posixParser9);
        posixParser9.checkRequiredOptions();
        java.util.ListIterator listIterator47 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser9.processOption("[ Options: [ short {} ] [ long {} ]", listIterator47);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.cli.UnrecognizedOptionException; message: Unrecognized option: [ Options: [ short {} ] [ long {} ]");
        } catch (org.apache.commons.cli.UnrecognizedOptionException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "[ option:   :: arg ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "[ option:   :: arg ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "[ option:   :: arg ]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[ option:   :: arg ]" + "'", str6, "[ option:   :: arg ]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertNotNull(list18);
        org.junit.Assert.assertNull(optionGroup19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "arg" + "'", str36, "arg");
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNull(optionGroup38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(options43);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options39 = options34.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options44 = options34.addOption("arg", "", false, "hi!");
        posixParser0.setOptions(options44);
        boolean boolean47 = options44.hasOption("");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        java.util.Properties properties34 = null;
        posixParser0.processProperties(properties34);
        java.util.List list36 = posixParser0.getRequiredOptions();
        java.util.ListIterator listIterator38 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processOption("hi!", listIterator38);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.cli.UnrecognizedOptionException; message: Unrecognized option: hi!");
        } catch (org.apache.commons.cli.UnrecognizedOptionException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(list36);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        java.lang.String str34 = options33.toString();
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str40 = option39.getKey();
        java.lang.String str41 = option39.getArgName();
        java.util.List list42 = option39.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup43 = options33.getOptionGroup(option39);
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str51 = option50.getKey();
        java.lang.String str52 = option50.getArgName();
        java.util.List list53 = option50.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup54 = options45.getOptionGroup(option50);
        boolean boolean56 = options45.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray59 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray61 = posixParser44.flatten(options45, strArray59, true);
        java.util.Properties properties62 = null;
        posixParser44.processProperties(properties62);
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str70 = option69.getKey();
        java.lang.String str71 = option69.getArgName();
        java.util.List list72 = option69.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup73 = options64.getOptionGroup(option69);
        java.lang.String[] strArray74 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine76 = posixParser44.parse(options64, strArray74, true);
        org.apache.commons.cli.CommandLine commandLine77 = posixParser44.cmd;
        org.apache.commons.cli.Options options78 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options83 = options78.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options88 = options78.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray92 = new java.lang.String[] { "hi!", "arg", "arg" };
        org.apache.commons.cli.CommandLine commandLine94 = posixParser44.parse(options88, strArray92, false);
        java.lang.String[] strArray96 = posixParser0.flatten(options33, strArray92, true);
        java.util.List list97 = options33.getRequiredOptions();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str34, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "arg" + "'", str41, "arg");
        org.junit.Assert.assertNotNull(list42);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNotNull(list53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "arg" + "'", str71, "arg");
        org.junit.Assert.assertNotNull(list72);
        org.junit.Assert.assertNull(optionGroup73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNotNull(options83);
        org.junit.Assert.assertNotNull(options88);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(commandLine94);
        org.junit.Assert.assertNotNull(strArray96);
        org.junit.Assert.assertNotNull(list97);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options39 = options34.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options44 = options34.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "arg", "arg" };
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options44, strArray48, false);
        java.lang.String str53 = commandLine50.getOptionValue("[ Options: [ short {} ] [ long {} ]", "[ option:   :: arg ]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[ option:   :: arg ]" + "'", str53, "[ option:   :: arg ]");
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options23 = options18.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options28 = options18.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "[ option:   :: arg ]", "[ Options: [ short {} ] [ long {} ]", "hi!", "arg", "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options28, strArray35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str43 = option42.getKey();
        java.lang.String str44 = option42.getArgName();
        java.util.List list45 = option42.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup46 = options37.getOptionGroup(option42);
        boolean boolean48 = options37.hasOption("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str56 = option55.getKey();
        java.lang.String str57 = option55.getArgName();
        java.util.List list58 = option55.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup59 = options50.getOptionGroup(option55);
        boolean boolean61 = options50.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray64 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray66 = posixParser49.flatten(options50, strArray64, true);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options72 = options67.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options77 = options67.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray84 = new java.lang.String[] { "[ option:   :: arg ]", "[ Options: [ short {} ] [ long {} ]", "hi!", "arg", "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine85 = posixParser49.parse(options77, strArray84);
        java.lang.String[] strArray87 = posixParser0.flatten(options37, strArray84, true);
        org.apache.commons.cli.CommandLine commandLine88 = posixParser0.cmd;
        posixParser0.checkRequiredOptions();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "arg" + "'", str44, "arg");
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "arg" + "'", str57, "arg");
        org.junit.Assert.assertNotNull(list58);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(options72);
        org.junit.Assert.assertNotNull(options77);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(commandLine85);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(commandLine88);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        java.util.Properties properties34 = commandLine32.getOptionProperties("hi!");
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str40 = option39.getKey();
        boolean boolean41 = option39.isRequired();
        java.lang.String[] strArray42 = option39.getValues();
        commandLine32.addOption(option39);
        java.lang.String str44 = option39.getOpt();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(strArray42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = posixParser0.getOptions();
        posixParser0.burstToken("arg", true);
        java.lang.Class<?> wildcardClass38 = posixParser0.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options23 = options18.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options28 = options18.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "[ option:   :: arg ]", "[ Options: [ short {} ] [ long {} ]", "hi!", "arg", "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options28, strArray35);
        org.apache.commons.cli.Option[] optionArray37 = commandLine36.getOptions();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(optionArray37);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options23 = options18.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options28 = options18.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "[ option:   :: arg ]", "[ Options: [ short {} ] [ long {} ]", "hi!", "arg", "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options28, strArray35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str43 = option42.getKey();
        java.lang.String str44 = option42.getArgName();
        java.util.List list45 = option42.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup46 = options37.getOptionGroup(option42);
        boolean boolean48 = options37.hasOption("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str56 = option55.getKey();
        java.lang.String str57 = option55.getArgName();
        java.util.List list58 = option55.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup59 = options50.getOptionGroup(option55);
        boolean boolean61 = options50.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray64 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray66 = posixParser49.flatten(options50, strArray64, true);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options72 = options67.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options77 = options67.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray84 = new java.lang.String[] { "[ option:   :: arg ]", "[ Options: [ short {} ] [ long {} ]", "hi!", "arg", "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine85 = posixParser49.parse(options77, strArray84);
        java.lang.String[] strArray87 = posixParser0.flatten(options37, strArray84, true);
        posixParser0.checkRequiredOptions();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "arg" + "'", str44, "arg");
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "arg" + "'", str57, "arg");
        org.junit.Assert.assertNotNull(list58);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(options72);
        org.junit.Assert.assertNotNull(options77);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(commandLine85);
        org.junit.Assert.assertNotNull(strArray87);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options23 = options18.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options28 = options18.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "[ option:   :: arg ]", "[ Options: [ short {} ] [ long {} ]", "hi!", "arg", "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options28, strArray35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str43 = option42.getKey();
        java.lang.String str44 = option42.getArgName();
        java.util.List list45 = option42.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup46 = options37.getOptionGroup(option42);
        boolean boolean48 = options37.hasOption("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str56 = option55.getKey();
        java.lang.String str57 = option55.getArgName();
        java.util.List list58 = option55.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup59 = options50.getOptionGroup(option55);
        boolean boolean61 = options50.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray64 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray66 = posixParser49.flatten(options50, strArray64, true);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options72 = options67.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options77 = options67.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray84 = new java.lang.String[] { "[ option:   :: arg ]", "[ Options: [ short {} ] [ long {} ]", "hi!", "arg", "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine85 = posixParser49.parse(options77, strArray84);
        java.lang.String[] strArray87 = posixParser0.flatten(options37, strArray84, true);
        org.apache.commons.cli.CommandLine commandLine88 = posixParser0.cmd;
        java.lang.String[] strArray89 = commandLine88.getArgs();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "arg" + "'", str44, "arg");
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "arg" + "'", str57, "arg");
        org.junit.Assert.assertNotNull(list58);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(options72);
        org.junit.Assert.assertNotNull(options77);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(commandLine85);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(commandLine88);
        org.junit.Assert.assertNotNull(strArray89);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options23 = options18.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options28 = options18.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "[ option:   :: arg ]", "[ Options: [ short {} ] [ long {} ]", "hi!", "arg", "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options28, strArray35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options42 = options37.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str50 = option49.getKey();
        java.lang.String str51 = option49.getArgName();
        java.util.List list52 = option49.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup53 = options44.getOptionGroup(option49);
        boolean boolean55 = options44.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray58 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray60 = posixParser43.flatten(options44, strArray58, true);
        java.util.Properties properties61 = null;
        posixParser43.processProperties(properties61);
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str69 = option68.getKey();
        java.lang.String str70 = option68.getArgName();
        java.util.List list71 = option68.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup72 = options63.getOptionGroup(option68);
        java.lang.String[] strArray73 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine75 = posixParser43.parse(options63, strArray73, true);
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options37, strArray73);
        java.util.ListIterator listIterator78 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processOption("org.apache.commons.cli.MissingArgumentException: [ option:   :: arg ]", listIterator78);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.cli.UnrecognizedOptionException; message: Unrecognized option: org.apache.commons.cli.MissingArgumentException: [ option:   :: arg ]");
        } catch (org.apache.commons.cli.UnrecognizedOptionException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg");
        org.junit.Assert.assertNotNull(list52);
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNotNull(list71);
        org.junit.Assert.assertNull(optionGroup72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(commandLine76);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean23 = option22.hasLongOpt();
        boolean boolean24 = option22.hasArgName();
        boolean boolean25 = option22.hasArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options1.getOptionGroup(option22);
        java.util.Collection collection27 = options1.getOptionGroups();
        org.apache.commons.cli.OptionGroup optionGroup28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options29 = options1.addOptionGroup(optionGroup28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(collection27);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options39 = options34.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options44 = options34.addOption("arg", "", false, "hi!");
        posixParser0.setOptions(options44);
        java.util.List list46 = options44.helpOptions();
        java.util.List list47 = options44.helpOptions();
        boolean boolean49 = options44.hasOption("");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(list46);
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = posixParser0.getOptions();
        java.util.Collection collection35 = options34.getOptions();
        java.util.List list36 = options34.getRequiredOptions();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(collection35);
        org.junit.Assert.assertNotNull(list36);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        java.lang.String str36 = commandLine33.getOptionValue('\000', "org.apache.commons.cli.UnrecognizedOptionException: ");
        java.lang.String[] strArray37 = commandLine33.getArgs();
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean43 = option42.hasLongOpt();
        java.lang.String str44 = option42.getDescription();
        char char45 = option42.getValueSeparator();
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str51 = option50.getKey();
        java.lang.String str52 = option50.getArgName();
        java.lang.String str54 = option50.getValue((int) '#');
        boolean boolean55 = option50.hasLongOpt();
        option42.setType((java.lang.Object) boolean55);
        commandLine33.addOption(option42);
        java.lang.Object obj59 = commandLine33.getOptionObject("");
        java.lang.String[] strArray60 = commandLine33.getArgs();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: " + "'", str36, "org.apache.commons.cli.UnrecognizedOptionException: ");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + '\000' + "'", char45 == '\000');
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(strArray60);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options39 = options34.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options44 = options34.addOption("arg", "", false, "hi!");
        posixParser0.setOptions(options44);
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", false, "arg");
        java.lang.Object obj51 = option50.clone();
        boolean boolean52 = option50.isRequired();
        java.lang.String str53 = option50.toString();
        org.apache.commons.cli.OptionGroup optionGroup54 = options46.getOptionGroup(option50);
        org.apache.commons.cli.Options options55 = options44.addOption(option50);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "[ option:   :: arg ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "[ option:   :: arg ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "[ option:   :: arg ]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[ option:   :: arg ]" + "'", str53, "[ option:   :: arg ]");
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertNotNull(options55);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.cmd;
        org.apache.commons.cli.Options options19 = posixParser0.getOptions();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(commandLine18);
        org.junit.Assert.assertNull(options19);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.cmd;
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        boolean boolean31 = options20.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray34 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray36 = posixParser19.flatten(options20, strArray34, true);
        java.util.Properties properties37 = null;
        posixParser19.processProperties(properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str45 = option44.getKey();
        java.lang.String str46 = option44.getArgName();
        java.util.List list47 = option44.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup48 = options39.getOptionGroup(option44);
        java.lang.String[] strArray49 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine51 = posixParser19.parse(options39, strArray49, true);
        org.apache.commons.cli.CommandLine commandLine52 = posixParser19.cmd;
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options58 = options53.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options63 = options53.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "arg", "arg" };
        org.apache.commons.cli.CommandLine commandLine69 = posixParser19.parse(options63, strArray67, false);
        posixParser0.setOptions(options63);
        posixParser0.burstToken("", true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(commandLine18);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "arg" + "'", str46, "arg");
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(commandLine69);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.cmd;
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        boolean boolean31 = options20.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray34 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray36 = posixParser19.flatten(options20, strArray34, true);
        java.util.Properties properties37 = null;
        posixParser19.processProperties(properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str45 = option44.getKey();
        java.lang.String str46 = option44.getArgName();
        java.util.List list47 = option44.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup48 = options39.getOptionGroup(option44);
        java.lang.String[] strArray49 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine51 = posixParser19.parse(options39, strArray49, true);
        org.apache.commons.cli.CommandLine commandLine52 = posixParser19.cmd;
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options58 = options53.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options63 = options53.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "arg", "arg" };
        org.apache.commons.cli.CommandLine commandLine69 = posixParser19.parse(options63, strArray67, false);
        posixParser0.setOptions(options63);
        posixParser0.checkRequiredOptions();
        java.util.ListIterator listIterator73 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processOption("", listIterator73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(commandLine18);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "arg" + "'", str46, "arg");
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(commandLine69);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.Options options33 = new org.apache.commons.cli.Options();
        java.lang.String str34 = options33.toString();
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str40 = option39.getKey();
        java.lang.String str41 = option39.getArgName();
        java.util.List list42 = option39.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup43 = options33.getOptionGroup(option39);
        org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options45 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str51 = option50.getKey();
        java.lang.String str52 = option50.getArgName();
        java.util.List list53 = option50.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup54 = options45.getOptionGroup(option50);
        boolean boolean56 = options45.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray59 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray61 = posixParser44.flatten(options45, strArray59, true);
        java.util.Properties properties62 = null;
        posixParser44.processProperties(properties62);
        org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option69 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str70 = option69.getKey();
        java.lang.String str71 = option69.getArgName();
        java.util.List list72 = option69.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup73 = options64.getOptionGroup(option69);
        java.lang.String[] strArray74 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine76 = posixParser44.parse(options64, strArray74, true);
        org.apache.commons.cli.CommandLine commandLine77 = posixParser44.cmd;
        org.apache.commons.cli.Options options78 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options83 = options78.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options88 = options78.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray92 = new java.lang.String[] { "hi!", "arg", "arg" };
        org.apache.commons.cli.CommandLine commandLine94 = posixParser44.parse(options88, strArray92, false);
        java.lang.String[] strArray96 = posixParser0.flatten(options33, strArray92, true);
        java.util.ListIterator listIterator98 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processOption("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.UnrecognizedOptionException: ", listIterator98);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.cli.UnrecognizedOptionException; message: Unrecognized option: org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.UnrecognizedOptionException: ");
        } catch (org.apache.commons.cli.UnrecognizedOptionException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str34, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "arg" + "'", str41, "arg");
        org.junit.Assert.assertNotNull(list42);
        org.junit.Assert.assertNull(optionGroup43);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNotNull(list53);
        org.junit.Assert.assertNull(optionGroup54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "arg" + "'", str71, "arg");
        org.junit.Assert.assertNotNull(list72);
        org.junit.Assert.assertNull(optionGroup73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNotNull(options83);
        org.junit.Assert.assertNotNull(options88);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(commandLine94);
        org.junit.Assert.assertNotNull(strArray96);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options23 = options18.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options28 = options18.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "[ option:   :: arg ]", "[ Options: [ short {} ] [ long {} ]", "hi!", "arg", "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options28, strArray35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options42 = options37.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str50 = option49.getKey();
        java.lang.String str51 = option49.getArgName();
        java.util.List list52 = option49.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup53 = options44.getOptionGroup(option49);
        boolean boolean55 = options44.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray58 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray60 = posixParser43.flatten(options44, strArray58, true);
        java.util.Properties properties61 = null;
        posixParser43.processProperties(properties61);
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str69 = option68.getKey();
        java.lang.String str70 = option68.getArgName();
        java.util.List list71 = option68.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup72 = options63.getOptionGroup(option68);
        java.lang.String[] strArray73 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine75 = posixParser43.parse(options63, strArray73, true);
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options37, strArray73);
        java.util.Collection collection77 = options37.getOptionGroups();
        java.util.Collection collection78 = options37.getOptions();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg");
        org.junit.Assert.assertNotNull(list52);
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNotNull(list71);
        org.junit.Assert.assertNull(optionGroup72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(collection77);
        org.junit.Assert.assertNotNull(collection78);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str42 = option41.getKey();
        java.lang.String str43 = option41.getArgName();
        java.util.List list44 = option41.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup45 = options36.getOptionGroup(option41);
        boolean boolean47 = options36.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray50 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray52 = posixParser35.flatten(options36, strArray50, true);
        org.apache.commons.cli.CommandLine commandLine53 = posixParser0.parse(options34, strArray52);
        org.apache.commons.cli.Option option58 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str59 = option58.getKey();
        java.lang.String str60 = option58.getArgName();
        java.util.List list61 = option58.getValuesList();
        boolean boolean62 = option58.hasLongOpt();
        org.apache.commons.cli.Option option67 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str68 = option67.getKey();
        java.lang.String str69 = option67.getArgName();
        java.util.List list70 = option67.getValuesList();
        boolean boolean71 = option67.hasLongOpt();
        boolean boolean72 = option67.hasValueSeparator();
        option67.clearValues();
        boolean boolean74 = option58.equals((java.lang.Object) option67);
        java.util.ListIterator listIterator75 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option67, listIterator75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "arg" + "'", str43, "arg");
        org.junit.Assert.assertNotNull(list44);
        org.junit.Assert.assertNull(optionGroup45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "arg" + "'", str60, "arg");
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "arg" + "'", str69, "arg");
        org.junit.Assert.assertNotNull(list70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.cmd;
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        boolean boolean31 = options20.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray34 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray36 = posixParser19.flatten(options20, strArray34, true);
        java.util.Properties properties37 = null;
        posixParser19.processProperties(properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str45 = option44.getKey();
        java.lang.String str46 = option44.getArgName();
        java.util.List list47 = option44.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup48 = options39.getOptionGroup(option44);
        java.lang.String[] strArray49 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine51 = posixParser19.parse(options39, strArray49, true);
        org.apache.commons.cli.CommandLine commandLine52 = posixParser19.cmd;
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options58 = options53.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options63 = options53.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "arg", "arg" };
        org.apache.commons.cli.CommandLine commandLine69 = posixParser19.parse(options63, strArray67, false);
        posixParser0.setOptions(options63);
        java.util.List list71 = options63.getRequiredOptions();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(commandLine18);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "arg" + "'", str46, "arg");
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(list71);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options23 = options18.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options28 = options18.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "[ option:   :: arg ]", "[ Options: [ short {} ] [ long {} ]", "hi!", "arg", "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options28, strArray35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options42 = options37.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str50 = option49.getKey();
        java.lang.String str51 = option49.getArgName();
        java.util.List list52 = option49.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup53 = options44.getOptionGroup(option49);
        boolean boolean55 = options44.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray58 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray60 = posixParser43.flatten(options44, strArray58, true);
        java.util.Properties properties61 = null;
        posixParser43.processProperties(properties61);
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str69 = option68.getKey();
        java.lang.String str70 = option68.getArgName();
        java.util.List list71 = option68.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup72 = options63.getOptionGroup(option68);
        java.lang.String[] strArray73 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine75 = posixParser43.parse(options63, strArray73, true);
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options37, strArray73);
        org.apache.commons.cli.Option option81 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str82 = option81.getKey();
        option81.setArgName("");
        int int85 = option81.getArgs();
        org.apache.commons.cli.MissingArgumentException missingArgumentException86 = new org.apache.commons.cli.MissingArgumentException(option81);
        option81.setRequired(true);
        java.lang.String str89 = option81.getLongOpt();
        java.lang.String str91 = option81.getValue(0);
        org.apache.commons.cli.OptionGroup optionGroup92 = options37.getOptionGroup(option81);
        java.lang.String str93 = option81.getOpt();
        boolean boolean94 = option81.hasArg();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg");
        org.junit.Assert.assertNotNull(list52);
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNotNull(list71);
        org.junit.Assert.assertNull(optionGroup72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertNull(optionGroup92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = posixParser0.getOptions();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(options20);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options23 = options18.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options28 = options18.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "[ option:   :: arg ]", "[ Options: [ short {} ] [ long {} ]", "hi!", "arg", "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options28, strArray35);
        java.lang.String[] strArray38 = commandLine36.getOptionValues('a');
        org.apache.commons.cli.Option[] optionArray39 = commandLine36.getOptions();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(optionArray39);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = posixParser0.getOptions();
        posixParser0.burstToken("arg", true);
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        posixParser0.setOptions(options38);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options45 = options40.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean51 = option50.hasLongOpt();
        boolean boolean52 = option50.hasArgName();
        option50.setOptionalArg(false);
        java.lang.String str56 = option50.getValue("[ Options: [ short {} ] [ long {} ]");
        java.lang.Object obj57 = option50.getType();
        org.apache.commons.cli.Option option61 = new org.apache.commons.cli.Option("", false, "arg");
        char char62 = option61.getValueSeparator();
        option50.setType((java.lang.Object) option61);
        org.apache.commons.cli.Options options64 = options45.addOption(option61);
        org.apache.commons.cli.PosixParser posixParser65 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str72 = option71.getKey();
        java.lang.String str73 = option71.getArgName();
        java.util.List list74 = option71.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup75 = options66.getOptionGroup(option71);
        boolean boolean77 = options66.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray80 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray82 = posixParser65.flatten(options66, strArray80, true);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options64, strArray82, false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(options45);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str56, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + char62 + "' != '" + '\000' + "'", char62 == '\000');
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "arg" + "'", str73, "arg");
        org.junit.Assert.assertNotNull(list74);
        org.junit.Assert.assertNull(optionGroup75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(commandLine84);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        java.util.Properties properties34 = commandLine32.getOptionProperties("hi!");
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str40 = option39.getKey();
        boolean boolean41 = option39.isRequired();
        java.lang.String[] strArray42 = option39.getValues();
        commandLine32.addOption(option39);
        java.util.Iterator iterator44 = commandLine32.iterator();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(strArray42);
        org.junit.Assert.assertNotNull(iterator44);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        java.lang.String str36 = commandLine33.getOptionValue('\000', "org.apache.commons.cli.UnrecognizedOptionException: ");
        java.lang.String[] strArray37 = commandLine33.getArgs();
        org.apache.commons.cli.Option[] optionArray38 = commandLine33.getOptions();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: " + "'", str36, "org.apache.commons.cli.UnrecognizedOptionException: ");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(optionArray38);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = posixParser0.getOptions();
        posixParser0.burstToken("arg", true);
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        posixParser0.setOptions(options38);
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean45 = option44.hasLongOpt();
        boolean boolean46 = option44.hasArgName();
        option44.setDescription("hi!");
        org.apache.commons.cli.Options options49 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str55 = option54.getKey();
        java.lang.String str56 = option54.getArgName();
        java.util.List list57 = option54.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup58 = options49.getOptionGroup(option54);
        char char59 = option54.getValueSeparator();
        option44.setType((java.lang.Object) option54);
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", false, "arg");
        char char65 = option64.getValueSeparator();
        org.apache.commons.cli.Option option70 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str71 = option70.getKey();
        java.lang.String str72 = option70.getArgName();
        java.lang.String str74 = option70.getValue((int) '#');
        option64.setType((java.lang.Object) str74);
        boolean boolean76 = option64.hasOptionalArg();
        boolean boolean77 = option44.equals((java.lang.Object) option64);
        org.apache.commons.cli.OptionGroup optionGroup78 = options38.getOptionGroup(option64);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "arg" + "'", str56, "arg");
        org.junit.Assert.assertNotNull(list57);
        org.junit.Assert.assertNull(optionGroup58);
        org.junit.Assert.assertTrue("'" + char59 + "' != '" + '\000' + "'", char59 == '\000');
        org.junit.Assert.assertTrue("'" + char65 + "' != '" + '\000' + "'", char65 == '\000');
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "arg" + "'", str72, "arg");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(optionGroup78);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options23 = options18.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options28 = options18.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "[ option:   :: arg ]", "[ Options: [ short {} ] [ long {} ]", "hi!", "arg", "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options28, strArray35);
        java.lang.String[] strArray38 = commandLine36.getOptionValues('a');
        java.lang.String str41 = commandLine36.getOptionValue('4', "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        java.lang.String str36 = commandLine33.getOptionValue('\000', "org.apache.commons.cli.UnrecognizedOptionException: ");
        java.lang.String[] strArray37 = commandLine33.getArgs();
        boolean boolean39 = commandLine33.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.Object obj41 = commandLine33.getOptionObject("org.apache.commons.cli.UnrecognizedOptionException: [ option:   :: arg ]");
        java.lang.String str43 = commandLine33.getOptionValue('a');
        java.util.Properties properties45 = commandLine33.getOptionProperties("org.apache.commons.cli.MissingArgumentException: [ option:   :: arg ]");
        commandLine33.addArg("");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: " + "'", str36, "org.apache.commons.cli.UnrecognizedOptionException: ");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(properties45);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String str2 = options1.toString();
        org.apache.commons.cli.Option option7 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str8 = option7.getKey();
        java.lang.String str9 = option7.getArgName();
        java.util.List list10 = option7.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup11 = options1.getOptionGroup(option7);
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str19 = option18.getKey();
        java.lang.String str20 = option18.getArgName();
        java.util.List list21 = option18.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup22 = options13.getOptionGroup(option18);
        boolean boolean24 = options13.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray27 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray29 = posixParser12.flatten(options13, strArray27, true);
        java.util.Properties properties30 = null;
        posixParser12.processProperties(properties30);
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str38 = option37.getKey();
        java.lang.String str39 = option37.getArgName();
        java.util.List list40 = option37.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup41 = options32.getOptionGroup(option37);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine44 = posixParser12.parse(options32, strArray42, true);
        org.apache.commons.cli.CommandLine commandLine45 = posixParser12.cmd;
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options51 = options46.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options56 = options46.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "arg", "arg" };
        org.apache.commons.cli.CommandLine commandLine62 = posixParser12.parse(options56, strArray60, false);
        org.apache.commons.cli.CommandLine commandLine64 = posixParser0.parse(options1, strArray60, true);
        org.apache.commons.cli.PosixParser posixParser65 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str72 = option71.getKey();
        java.lang.String str73 = option71.getArgName();
        java.util.List list74 = option71.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup75 = options66.getOptionGroup(option71);
        boolean boolean77 = options66.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray80 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray82 = posixParser65.flatten(options66, strArray80, true);
        java.util.Properties properties83 = null;
        posixParser65.processProperties(properties83);
        org.apache.commons.cli.Options options85 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option90 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str91 = option90.getKey();
        java.lang.String str92 = option90.getArgName();
        java.util.List list93 = option90.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup94 = options85.getOptionGroup(option90);
        java.lang.String[] strArray95 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine97 = posixParser65.parse(options85, strArray95, true);
        org.apache.commons.cli.CommandLine commandLine98 = posixParser65.cmd;
        posixParser0.cmd = commandLine98;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str2, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg");
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNull(optionGroup11);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertNull(optionGroup22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "arg" + "'", str39, "arg");
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "arg" + "'", str73, "arg");
        org.junit.Assert.assertNotNull(list74);
        org.junit.Assert.assertNull(optionGroup75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "arg" + "'", str92, "arg");
        org.junit.Assert.assertNotNull(list93);
        org.junit.Assert.assertNull(optionGroup94);
        org.junit.Assert.assertNotNull(strArray95);
        org.junit.Assert.assertNotNull(commandLine97);
        org.junit.Assert.assertNotNull(commandLine98);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.Option[] optionArray33 = commandLine32.getOptions();
        java.lang.String[] strArray35 = commandLine32.getOptionValues("[ option:   :: arg ]");
        java.lang.Object obj37 = commandLine32.getOptionObject("");
        java.lang.String str40 = commandLine32.getOptionValue("[ Options: [ short {arg=[ option: arg  [ARG] :: arg ]} ] [ long {} ]", "arg");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(optionArray33);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "arg" + "'", str40, "arg");
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String str2 = options1.toString();
        org.apache.commons.cli.Option option7 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str8 = option7.getKey();
        java.lang.String str9 = option7.getArgName();
        java.util.List list10 = option7.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup11 = options1.getOptionGroup(option7);
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str19 = option18.getKey();
        java.lang.String str20 = option18.getArgName();
        java.util.List list21 = option18.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup22 = options13.getOptionGroup(option18);
        boolean boolean24 = options13.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray27 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray29 = posixParser12.flatten(options13, strArray27, true);
        java.util.Properties properties30 = null;
        posixParser12.processProperties(properties30);
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str38 = option37.getKey();
        java.lang.String str39 = option37.getArgName();
        java.util.List list40 = option37.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup41 = options32.getOptionGroup(option37);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine44 = posixParser12.parse(options32, strArray42, true);
        org.apache.commons.cli.CommandLine commandLine45 = posixParser12.cmd;
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options51 = options46.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options56 = options46.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "arg", "arg" };
        org.apache.commons.cli.CommandLine commandLine62 = posixParser12.parse(options56, strArray60, false);
        org.apache.commons.cli.CommandLine commandLine64 = posixParser0.parse(options1, strArray60, true);
        java.util.List list65 = options1.helpOptions();
        java.util.List list66 = options1.getRequiredOptions();
        java.util.List list67 = options1.getRequiredOptions();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str2, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg");
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNull(optionGroup11);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertNull(optionGroup22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "arg" + "'", str39, "arg");
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(list65);
        org.junit.Assert.assertNotNull(list66);
        org.junit.Assert.assertNotNull(list67);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        java.util.Properties properties34 = commandLine32.getOptionProperties("hi!");
        boolean boolean36 = commandLine32.hasOption('a');
        java.util.Iterator iterator37 = commandLine32.iterator();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(iterator37);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options23 = options18.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options28 = options18.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "[ option:   :: arg ]", "[ Options: [ short {} ] [ long {} ]", "hi!", "arg", "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options28, strArray35);
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str44 = option43.getKey();
        java.lang.String str45 = option43.getArgName();
        java.util.List list46 = option43.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup47 = options38.getOptionGroup(option43);
        boolean boolean49 = options38.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray52 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray54 = posixParser37.flatten(options38, strArray52, true);
        java.util.Properties properties55 = null;
        posixParser37.processProperties(properties55);
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option62 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str63 = option62.getKey();
        java.lang.String str64 = option62.getArgName();
        java.util.List list65 = option62.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup66 = options57.getOptionGroup(option62);
        java.lang.String[] strArray67 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine69 = posixParser37.parse(options57, strArray67, true);
        posixParser0.cmd = commandLine69;
        java.lang.Object obj72 = commandLine69.getOptionObject(' ');
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "arg" + "'", str45, "arg");
        org.junit.Assert.assertNotNull(list46);
        org.junit.Assert.assertNull(optionGroup47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "arg" + "'", str64, "arg");
        org.junit.Assert.assertNotNull(list65);
        org.junit.Assert.assertNull(optionGroup66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNull(obj72);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        commandLine32.addArg("hi!");
        boolean boolean36 = commandLine32.hasOption('a');
        commandLine32.addArg("[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.cmd;
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        boolean boolean31 = options20.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray34 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray36 = posixParser19.flatten(options20, strArray34, true);
        java.util.Properties properties37 = null;
        posixParser19.processProperties(properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str45 = option44.getKey();
        java.lang.String str46 = option44.getArgName();
        java.util.List list47 = option44.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup48 = options39.getOptionGroup(option44);
        java.lang.String[] strArray49 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine51 = posixParser19.parse(options39, strArray49, true);
        org.apache.commons.cli.CommandLine commandLine52 = posixParser19.cmd;
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options58 = options53.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options63 = options53.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "arg", "arg" };
        org.apache.commons.cli.CommandLine commandLine69 = posixParser19.parse(options63, strArray67, false);
        posixParser0.setOptions(options63);
        java.util.List list71 = options63.helpOptions();
        org.apache.commons.cli.MissingOptionException missingOptionException72 = new org.apache.commons.cli.MissingOptionException(list71);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(commandLine18);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "arg" + "'", str46, "arg");
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(list71);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str42 = option41.getKey();
        java.lang.String str43 = option41.getArgName();
        java.util.List list44 = option41.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup45 = options36.getOptionGroup(option41);
        boolean boolean47 = options36.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray50 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray52 = posixParser35.flatten(options36, strArray50, true);
        org.apache.commons.cli.CommandLine commandLine53 = posixParser0.parse(options34, strArray52);
        java.lang.Object obj55 = commandLine53.getOptionObject("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.UnrecognizedOptionException: ");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "arg" + "'", str43, "arg");
        org.junit.Assert.assertNotNull(list44);
        org.junit.Assert.assertNull(optionGroup45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNull(obj55);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.cmd;
        org.apache.commons.cli.CommandLine commandLine19 = posixParser0.cmd;
        java.util.ListIterator listIterator21 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processOption("[ Options: [ short {} ] [ long {} ]", listIterator21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(commandLine18);
        org.junit.Assert.assertNull(commandLine19);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str42 = option41.getKey();
        java.lang.String str43 = option41.getArgName();
        java.util.List list44 = option41.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup45 = options36.getOptionGroup(option41);
        boolean boolean47 = options36.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray50 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray52 = posixParser35.flatten(options36, strArray50, true);
        org.apache.commons.cli.CommandLine commandLine53 = posixParser0.parse(options34, strArray52);
        java.util.List list54 = posixParser0.getRequiredOptions();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "arg" + "'", str43, "arg");
        org.junit.Assert.assertNotNull(list44);
        org.junit.Assert.assertNull(optionGroup45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(list54);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("", false, "arg");
        java.lang.Object obj4 = option3.clone();
        boolean boolean5 = option3.isRequired();
        java.lang.String str6 = option3.toString();
        option3.clearValues();
        boolean boolean8 = option3.hasLongOpt();
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str16 = option15.getKey();
        java.lang.String str17 = option15.getArgName();
        java.util.List list18 = option15.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup19 = options10.getOptionGroup(option15);
        boolean boolean21 = options10.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray24 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray26 = posixParser9.flatten(options10, strArray24, true);
        java.util.Properties properties27 = null;
        posixParser9.processProperties(properties27);
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option34 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str35 = option34.getKey();
        java.lang.String str36 = option34.getArgName();
        java.util.List list37 = option34.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup38 = options29.getOptionGroup(option34);
        java.lang.String[] strArray39 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine41 = posixParser9.parse(options29, strArray39, true);
        org.apache.commons.cli.CommandLine commandLine42 = posixParser9.cmd;
        org.apache.commons.cli.Options options43 = posixParser9.getOptions();
        option3.setType((java.lang.Object) posixParser9);
        posixParser9.checkRequiredOptions();
        org.apache.commons.cli.CommandLine commandLine46 = posixParser9.cmd;
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "[ option:   :: arg ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "[ option:   :: arg ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "[ option:   :: arg ]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[ option:   :: arg ]" + "'", str6, "[ option:   :: arg ]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertNotNull(list18);
        org.junit.Assert.assertNull(optionGroup19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "arg" + "'", str36, "arg");
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNull(optionGroup38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(commandLine46);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = posixParser0.getOptions();
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.cmd;
        java.lang.String[] strArray37 = commandLine35.getOptionValues("org.apache.commons.cli.MissingArgumentException: [ option:   :: arg ]");
        java.lang.String str39 = commandLine35.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: [ option:   :: arg ]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNull(strArray37);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options23 = options18.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options28 = options18.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "[ option:   :: arg ]", "[ Options: [ short {} ] [ long {} ]", "hi!", "arg", "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options28, strArray35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options42 = options37.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str50 = option49.getKey();
        java.lang.String str51 = option49.getArgName();
        java.util.List list52 = option49.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup53 = options44.getOptionGroup(option49);
        boolean boolean55 = options44.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray58 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray60 = posixParser43.flatten(options44, strArray58, true);
        java.util.Properties properties61 = null;
        posixParser43.processProperties(properties61);
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str69 = option68.getKey();
        java.lang.String str70 = option68.getArgName();
        java.util.List list71 = option68.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup72 = options63.getOptionGroup(option68);
        java.lang.String[] strArray73 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine75 = posixParser43.parse(options63, strArray73, true);
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options37, strArray73);
        posixParser0.checkRequiredOptions();
        java.util.ListIterator listIterator79 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processOption("arg", listIterator79);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.cli.UnrecognizedOptionException; message: Unrecognized option: arg");
        } catch (org.apache.commons.cli.UnrecognizedOptionException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg");
        org.junit.Assert.assertNotNull(list52);
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNotNull(list71);
        org.junit.Assert.assertNull(optionGroup72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(commandLine76);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        java.lang.String str36 = commandLine33.getOptionValue('\000', "org.apache.commons.cli.UnrecognizedOptionException: ");
        java.lang.String[] strArray37 = commandLine33.getArgs();
        boolean boolean39 = commandLine33.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.Object obj41 = commandLine33.getOptionObject("org.apache.commons.cli.UnrecognizedOptionException: [ option:   :: arg ]");
        java.lang.String str43 = commandLine33.getOptionValue('a');
        java.util.Properties properties45 = commandLine33.getOptionProperties("org.apache.commons.cli.MissingArgumentException: [ option:   :: arg ]");
        java.lang.String[] strArray47 = commandLine33.getOptionValues("arg");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: " + "'", str36, "org.apache.commons.cli.UnrecognizedOptionException: ");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertNull(strArray47);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = posixParser0.getOptions();
        posixParser0.burstToken("arg", true);
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str46 = option45.getKey();
        java.lang.String str47 = option45.getArgName();
        java.util.List list48 = option45.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup49 = options40.getOptionGroup(option45);
        boolean boolean51 = options40.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray54 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray56 = posixParser39.flatten(options40, strArray54, true);
        java.util.Properties properties57 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser0.parse(options38, strArray54, properties57, false);
        posixParser0.burstToken("[ option:    ::  ]", false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "arg" + "'", str47, "arg");
        org.junit.Assert.assertNotNull(list48);
        org.junit.Assert.assertNull(optionGroup49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine59);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        java.lang.String str36 = commandLine33.getOptionValue('\000', "org.apache.commons.cli.UnrecognizedOptionException: ");
        java.lang.String[] strArray37 = commandLine33.getArgs();
        boolean boolean39 = commandLine33.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray41 = commandLine33.getOptionValues("[ option:   :: arg ]");
        java.lang.String[] strArray43 = commandLine33.getOptionValues("[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: " + "'", str36, "org.apache.commons.cli.UnrecognizedOptionException: ");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertNull(strArray43);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = posixParser0.getOptions();
        posixParser0.burstToken("arg", true);
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str46 = option45.getKey();
        java.lang.String str47 = option45.getArgName();
        java.util.List list48 = option45.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup49 = options40.getOptionGroup(option45);
        boolean boolean51 = options40.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray54 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray56 = posixParser39.flatten(options40, strArray54, true);
        java.util.Properties properties57 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser0.parse(options38, strArray54, properties57, false);
        java.util.List list60 = options38.helpOptions();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "arg" + "'", str47, "arg");
        org.junit.Assert.assertNotNull(list48);
        org.junit.Assert.assertNull(optionGroup49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(list60);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options23 = options18.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options28 = options18.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "[ option:   :: arg ]", "[ Options: [ short {} ] [ long {} ]", "hi!", "arg", "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options28, strArray35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options42 = options37.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str50 = option49.getKey();
        java.lang.String str51 = option49.getArgName();
        java.util.List list52 = option49.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup53 = options44.getOptionGroup(option49);
        boolean boolean55 = options44.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray58 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray60 = posixParser43.flatten(options44, strArray58, true);
        java.util.Properties properties61 = null;
        posixParser43.processProperties(properties61);
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str69 = option68.getKey();
        java.lang.String str70 = option68.getArgName();
        java.util.List list71 = option68.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup72 = options63.getOptionGroup(option68);
        java.lang.String[] strArray73 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine75 = posixParser43.parse(options63, strArray73, true);
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options37, strArray73);
        posixParser0.checkRequiredOptions();
        org.apache.commons.cli.Option option81 = new org.apache.commons.cli.Option("", false, "arg");
        java.lang.Object obj82 = option81.clone();
        option81.setValueSeparator('a');
        java.util.ListIterator listIterator85 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option81, listIterator85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg");
        org.junit.Assert.assertNotNull(list52);
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNotNull(list71);
        org.junit.Assert.assertNull(optionGroup72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertEquals(obj82.toString(), "[ option:   :: arg ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj82), "[ option:   :: arg ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj82), "[ option:   :: arg ]");
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = posixParser0.getOptions();
        posixParser0.burstToken("arg", true);
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str46 = option45.getKey();
        java.lang.String str47 = option45.getArgName();
        java.util.List list48 = option45.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup49 = options40.getOptionGroup(option45);
        boolean boolean51 = options40.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray54 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray56 = posixParser39.flatten(options40, strArray54, true);
        java.util.Properties properties57 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser0.parse(options38, strArray54, properties57, false);
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str65 = option64.getKey();
        option64.setArgName("");
        int int68 = option64.getArgs();
        org.apache.commons.cli.MissingArgumentException missingArgumentException69 = new org.apache.commons.cli.MissingArgumentException(option64);
        boolean boolean70 = option64.hasArg();
        commandLine59.addOption(option64);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "arg" + "'", str47, "arg");
        org.junit.Assert.assertNotNull(list48);
        org.junit.Assert.assertNull(optionGroup49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = posixParser0.getOptions();
        posixParser0.checkRequiredOptions();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.util.List list37 = options36.getRequiredOptions();
        java.lang.String[] strArray44 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: [ option:   :: arg ]", "[ option:    ::  ]", "", "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.UnrecognizedOptionException: ", "", "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: [ option:   :: arg ]" };
        java.lang.String[] strArray46 = posixParser0.flatten(options36, strArray44, true);
        org.apache.commons.cli.CommandLine commandLine47 = posixParser0.cmd;
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(commandLine47);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        java.util.List list33 = options20.getRequiredOptions();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(list33);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options39 = options34.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options44 = options34.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "arg", "arg" };
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options44, strArray48, false);
        java.lang.Class<?> wildcardClass51 = posixParser0.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = posixParser0.getOptions();
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.cmd;
        java.lang.String[] strArray37 = commandLine35.getOptionValues("org.apache.commons.cli.MissingArgumentException: [ option:   :: arg ]");
        java.lang.String str40 = commandLine35.getOptionValue('a', "[ Options: [ short {arg=[ option: arg  [ARG] :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNull(strArray37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[ Options: [ short {arg=[ option: arg  [ARG] :: arg ]} ] [ long {} ]" + "'", str40, "[ Options: [ short {arg=[ option: arg  [ARG] :: arg ]} ] [ long {} ]");
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean23 = option22.hasLongOpt();
        boolean boolean24 = option22.hasArgName();
        boolean boolean25 = option22.hasArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options1.getOptionGroup(option22);
        org.apache.commons.cli.Options options31 = options1.addOption("", "org.apache.commons.cli.UnrecognizedOptionException: [ option:   :: arg ]", true, "[ option:   :: arg ]");
        org.apache.commons.cli.Option option33 = options31.getOption("org.apache.commons.cli.MissingArgumentException: [ option:   :: arg ]");
        java.util.Collection collection34 = options31.getOptions();
        org.apache.commons.cli.OptionGroup optionGroup35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options36 = options31.addOptionGroup(optionGroup35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertNull(option33);
        org.junit.Assert.assertNotNull(collection34);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str42 = option41.getKey();
        java.lang.String str43 = option41.getArgName();
        java.util.List list44 = option41.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup45 = options36.getOptionGroup(option41);
        boolean boolean47 = options36.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray50 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray52 = posixParser35.flatten(options36, strArray50, true);
        org.apache.commons.cli.CommandLine commandLine53 = posixParser0.parse(options34, strArray52);
        java.util.Collection collection54 = options34.getOptions();
        boolean boolean56 = options34.hasOption("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: [ option:   :: arg ]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "arg" + "'", str43, "arg");
        org.junit.Assert.assertNotNull(list44);
        org.junit.Assert.assertNull(optionGroup45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options23 = options18.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options28 = options18.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "[ option:   :: arg ]", "[ Options: [ short {} ] [ long {} ]", "hi!", "arg", "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options28, strArray35);
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str44 = option43.getKey();
        java.lang.String str45 = option43.getArgName();
        java.util.List list46 = option43.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup47 = options38.getOptionGroup(option43);
        boolean boolean49 = options38.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray52 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray54 = posixParser37.flatten(options38, strArray52, true);
        java.util.Properties properties55 = null;
        posixParser37.processProperties(properties55);
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option62 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str63 = option62.getKey();
        java.lang.String str64 = option62.getArgName();
        java.util.List list65 = option62.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup66 = options57.getOptionGroup(option62);
        java.lang.String[] strArray67 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine69 = posixParser37.parse(options57, strArray67, true);
        posixParser0.cmd = commandLine69;
        java.lang.String str72 = commandLine69.getOptionValue(' ');
        boolean boolean74 = commandLine69.hasOption('#');
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "arg" + "'", str45, "arg");
        org.junit.Assert.assertNotNull(list46);
        org.junit.Assert.assertNull(optionGroup47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "arg" + "'", str64, "arg");
        org.junit.Assert.assertNotNull(list65);
        org.junit.Assert.assertNull(optionGroup66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.lang.String str5 = options4.toString();
        org.apache.commons.cli.Option option10 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str11 = option10.getKey();
        java.lang.String str12 = option10.getArgName();
        java.util.List list13 = option10.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup14 = options4.getOptionGroup(option10);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str22 = option21.getKey();
        java.lang.String str23 = option21.getArgName();
        java.util.List list24 = option21.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup25 = options16.getOptionGroup(option21);
        boolean boolean27 = options16.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray30 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray32 = posixParser15.flatten(options16, strArray30, true);
        java.util.Properties properties33 = null;
        posixParser15.processProperties(properties33);
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str41 = option40.getKey();
        java.lang.String str42 = option40.getArgName();
        java.util.List list43 = option40.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup44 = options35.getOptionGroup(option40);
        java.lang.String[] strArray45 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine47 = posixParser15.parse(options35, strArray45, true);
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options4, strArray45);
        boolean boolean50 = options4.hasOption("arg");
        org.apache.commons.cli.Option option55 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean56 = option55.hasLongOpt();
        boolean boolean57 = option55.hasArgName();
        org.apache.commons.cli.Options options58 = options4.addOption(option55);
        java.lang.String str59 = options58.toString();
        org.apache.commons.cli.Option option61 = options58.getOption("org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.UnrecognizedOptionException: ");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str5, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg");
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNull(optionGroup14);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "arg" + "'", str23, "arg");
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNotNull(list43);
        org.junit.Assert.assertNull(optionGroup44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]" + "'", str59, "[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
        org.junit.Assert.assertNull(option61);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str5 = option4.getKey();
        java.lang.String str6 = option4.getArgName();
        java.lang.String str8 = option4.getValue((int) '#');
        boolean boolean9 = option4.isRequired();
        org.apache.commons.cli.PosixParser posixParser10 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option16 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str17 = option16.getKey();
        java.lang.String str18 = option16.getArgName();
        java.util.List list19 = option16.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup20 = options11.getOptionGroup(option16);
        boolean boolean22 = options11.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray25 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray27 = posixParser10.flatten(options11, strArray25, true);
        java.util.Properties properties28 = null;
        posixParser10.processProperties(properties28);
        org.apache.commons.cli.Options options30 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option35 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str36 = option35.getKey();
        java.lang.String str37 = option35.getArgName();
        java.util.List list38 = option35.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup39 = options30.getOptionGroup(option35);
        java.lang.String[] strArray40 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine42 = posixParser10.parse(options30, strArray40, true);
        org.apache.commons.cli.CommandLine commandLine43 = posixParser10.cmd;
        org.apache.commons.cli.Options options44 = posixParser10.getOptions();
        posixParser10.checkRequiredOptions();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        java.util.List list47 = options46.getRequiredOptions();
        java.lang.String[] strArray54 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: [ option:   :: arg ]", "[ option:    ::  ]", "", "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.UnrecognizedOptionException: ", "", "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: [ option:   :: arg ]" };
        java.lang.String[] strArray56 = posixParser10.flatten(options46, strArray54, true);
        option4.setType((java.lang.Object) strArray56);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "arg" + "'", str18, "arg");
        org.junit.Assert.assertNotNull(list19);
        org.junit.Assert.assertNull(optionGroup20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "arg" + "'", str37, "arg");
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNull(optionGroup39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(commandLine43);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        posixParser0.burstToken("", false);
        org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options();
        java.lang.String str5 = options4.toString();
        org.apache.commons.cli.Option option10 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str11 = option10.getKey();
        java.lang.String str12 = option10.getArgName();
        java.util.List list13 = option10.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup14 = options4.getOptionGroup(option10);
        org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option21 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str22 = option21.getKey();
        java.lang.String str23 = option21.getArgName();
        java.util.List list24 = option21.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup25 = options16.getOptionGroup(option21);
        boolean boolean27 = options16.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray30 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray32 = posixParser15.flatten(options16, strArray30, true);
        java.util.Properties properties33 = null;
        posixParser15.processProperties(properties33);
        org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option40 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str41 = option40.getKey();
        java.lang.String str42 = option40.getArgName();
        java.util.List list43 = option40.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup44 = options35.getOptionGroup(option40);
        java.lang.String[] strArray45 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine47 = posixParser15.parse(options35, strArray45, true);
        org.apache.commons.cli.CommandLine commandLine48 = posixParser0.parse(options4, strArray45);
        java.lang.Object obj50 = commandLine48.getOptionObject("[ option:   :: arg ]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str5, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg");
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertNull(optionGroup14);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "arg" + "'", str23, "arg");
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertNull(optionGroup25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "arg" + "'", str42, "arg");
        org.junit.Assert.assertNotNull(list43);
        org.junit.Assert.assertNull(optionGroup44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(commandLine47);
        org.junit.Assert.assertNotNull(commandLine48);
        org.junit.Assert.assertNull(obj50);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = posixParser0.getOptions();
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str42 = option41.getKey();
        java.lang.String str43 = option41.getArgName();
        java.util.List list44 = option41.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup45 = options36.getOptionGroup(option41);
        boolean boolean47 = options36.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray50 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray52 = posixParser35.flatten(options36, strArray50, true);
        java.util.Properties properties53 = null;
        posixParser35.processProperties(properties53);
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option60 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str61 = option60.getKey();
        java.lang.String str62 = option60.getArgName();
        java.util.List list63 = option60.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup64 = options55.getOptionGroup(option60);
        java.lang.String[] strArray65 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine67 = posixParser35.parse(options55, strArray65, true);
        java.util.Properties properties69 = commandLine67.getOptionProperties("hi!");
        posixParser0.processProperties(properties69);
        posixParser0.checkRequiredOptions();
        posixParser0.checkRequiredOptions();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "arg" + "'", str43, "arg");
        org.junit.Assert.assertNotNull(list44);
        org.junit.Assert.assertNull(optionGroup45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "arg" + "'", str62, "arg");
        org.junit.Assert.assertNotNull(list63);
        org.junit.Assert.assertNull(optionGroup64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(properties69);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        java.lang.String str36 = commandLine33.getOptionValue('\000', "org.apache.commons.cli.UnrecognizedOptionException: ");
        java.lang.String[] strArray37 = commandLine33.getArgs();
        boolean boolean39 = commandLine33.hasOption("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Option[] optionArray40 = commandLine33.getOptions();
        boolean boolean42 = commandLine33.hasOption('4');
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: " + "'", str36, "org.apache.commons.cli.UnrecognizedOptionException: ");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(optionArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("", false, "arg");
        java.lang.Object obj4 = option3.clone();
        boolean boolean5 = option3.isRequired();
        java.lang.String str6 = option3.toString();
        option3.clearValues();
        boolean boolean8 = option3.hasLongOpt();
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str16 = option15.getKey();
        java.lang.String str17 = option15.getArgName();
        java.util.List list18 = option15.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup19 = options10.getOptionGroup(option15);
        boolean boolean21 = options10.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray24 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray26 = posixParser9.flatten(options10, strArray24, true);
        java.util.Properties properties27 = null;
        posixParser9.processProperties(properties27);
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option34 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str35 = option34.getKey();
        java.lang.String str36 = option34.getArgName();
        java.util.List list37 = option34.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup38 = options29.getOptionGroup(option34);
        java.lang.String[] strArray39 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine41 = posixParser9.parse(options29, strArray39, true);
        org.apache.commons.cli.CommandLine commandLine42 = posixParser9.cmd;
        org.apache.commons.cli.Options options43 = posixParser9.getOptions();
        option3.setType((java.lang.Object) posixParser9);
        option3.setType((java.lang.Object) "org.apache.commons.cli.MissingArgumentException: [ option:   :: arg ]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "[ option:   :: arg ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "[ option:   :: arg ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "[ option:   :: arg ]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[ option:   :: arg ]" + "'", str6, "[ option:   :: arg ]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertNotNull(list18);
        org.junit.Assert.assertNull(optionGroup19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "arg" + "'", str36, "arg");
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNull(optionGroup38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(options43);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options39 = options34.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options44 = options34.addOption("arg", "", false, "hi!");
        posixParser0.setOptions(options44);
        java.util.List list46 = options44.helpOptions();
        java.util.List list47 = options44.helpOptions();
        java.util.Collection collection48 = options44.getOptions();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(list46);
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertNotNull(collection48);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options39 = options34.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options44 = options34.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "arg", "arg" };
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options44, strArray48, false);
        org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("", false, "arg");
        char char55 = option54.getValueSeparator();
        org.apache.commons.cli.Option option60 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str61 = option60.getKey();
        java.lang.String str62 = option60.getArgName();
        java.lang.String str64 = option60.getValue((int) '#');
        option54.setType((java.lang.Object) str64);
        option54.setOptionalArg(true);
        java.lang.String str68 = option54.toString();
        java.lang.Object obj69 = option54.clone();
        boolean boolean70 = option54.hasOptionalArg();
        java.util.ListIterator listIterator71 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processArgs(option54, listIterator71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertTrue("'" + char55 + "' != '" + '\000' + "'", char55 == '\000');
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "arg" + "'", str62, "arg");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[ option:   :: arg ]" + "'", str68, "[ option:   :: arg ]");
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "[ option:   :: arg ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "[ option:   :: arg ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "[ option:   :: arg ]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = posixParser0.getOptions();
        posixParser0.burstToken("arg", true);
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        java.lang.String str39 = options38.toString();
        java.util.List list40 = options38.getRequiredOptions();
        org.apache.commons.cli.Options options44 = options38.addOption("", true, "hi!");
        org.apache.commons.cli.PosixParser posixParser45 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str52 = option51.getKey();
        java.lang.String str53 = option51.getArgName();
        java.util.List list54 = option51.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup55 = options46.getOptionGroup(option51);
        boolean boolean57 = options46.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray60 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray62 = posixParser45.flatten(options46, strArray60, true);
        java.util.Properties properties63 = null;
        posixParser45.processProperties(properties63);
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option70 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str71 = option70.getKey();
        java.lang.String str72 = option70.getArgName();
        java.util.List list73 = option70.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup74 = options65.getOptionGroup(option70);
        java.lang.String[] strArray75 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine77 = posixParser45.parse(options65, strArray75, true);
        java.lang.String[] strArray79 = posixParser0.flatten(options44, strArray75, false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str39, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNotNull(list54);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "arg" + "'", str72, "arg");
        org.junit.Assert.assertNotNull(list73);
        org.junit.Assert.assertNull(optionGroup74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNotNull(strArray79);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        java.lang.String str36 = commandLine33.getOptionValue('\000', "org.apache.commons.cli.UnrecognizedOptionException: ");
        java.lang.String[] strArray37 = commandLine33.getArgs();
        boolean boolean39 = commandLine33.hasOption("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Option[] optionArray40 = commandLine33.getOptions();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", false, "arg");
        org.apache.commons.cli.MissingArgumentException missingArgumentException45 = new org.apache.commons.cli.MissingArgumentException(option44);
        org.apache.commons.cli.Option option46 = missingArgumentException45.getOption();
        commandLine33.addOption(option46);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: " + "'", str36, "org.apache.commons.cli.UnrecognizedOptionException: ");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(optionArray40);
        org.junit.Assert.assertNotNull(option46);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options23 = options18.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options28 = options18.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "[ option:   :: arg ]", "[ Options: [ short {} ] [ long {} ]", "hi!", "arg", "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options28, strArray35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options42 = options37.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str50 = option49.getKey();
        java.lang.String str51 = option49.getArgName();
        java.util.List list52 = option49.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup53 = options44.getOptionGroup(option49);
        boolean boolean55 = options44.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray58 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray60 = posixParser43.flatten(options44, strArray58, true);
        java.util.Properties properties61 = null;
        posixParser43.processProperties(properties61);
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str69 = option68.getKey();
        java.lang.String str70 = option68.getArgName();
        java.util.List list71 = option68.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup72 = options63.getOptionGroup(option68);
        java.lang.String[] strArray73 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine75 = posixParser43.parse(options63, strArray73, true);
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options37, strArray73);
        java.util.Collection collection77 = options37.getOptionGroups();
        org.apache.commons.cli.Option option79 = options37.getOption("arg");
        java.util.Collection collection80 = options37.getOptions();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg");
        org.junit.Assert.assertNotNull(list52);
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNotNull(list71);
        org.junit.Assert.assertNull(optionGroup72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(collection77);
        org.junit.Assert.assertNull(option79);
        org.junit.Assert.assertNotNull(collection80);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options23 = options18.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options28 = options18.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "[ option:   :: arg ]", "[ Options: [ short {} ] [ long {} ]", "hi!", "arg", "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options28, strArray35);
        org.apache.commons.cli.CommandLine commandLine37 = posixParser0.cmd;
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options43 = options38.addOption("", "hi!", true, "hi!");
        java.util.Collection collection44 = options43.getOptions();
        org.apache.commons.cli.PosixParser posixParser45 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str52 = option51.getKey();
        java.lang.String str53 = option51.getArgName();
        java.util.List list54 = option51.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup55 = options46.getOptionGroup(option51);
        boolean boolean57 = options46.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray60 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray62 = posixParser45.flatten(options46, strArray60, true);
        java.util.Properties properties63 = null;
        posixParser45.processProperties(properties63);
        org.apache.commons.cli.Options options65 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option70 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str71 = option70.getKey();
        java.lang.String str72 = option70.getArgName();
        java.util.List list73 = option70.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup74 = options65.getOptionGroup(option70);
        java.lang.String[] strArray75 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine77 = posixParser45.parse(options65, strArray75, true);
        org.apache.commons.cli.CommandLine commandLine78 = posixParser45.cmd;
        org.apache.commons.cli.Options options79 = posixParser45.getOptions();
        posixParser45.checkRequiredOptions();
        org.apache.commons.cli.Options options81 = new org.apache.commons.cli.Options();
        java.util.List list82 = options81.getRequiredOptions();
        java.lang.String[] strArray89 = new java.lang.String[] { "org.apache.commons.cli.UnrecognizedOptionException: [ option:   :: arg ]", "[ option:    ::  ]", "", "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.UnrecognizedOptionException: ", "", "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: [ option:   :: arg ]" };
        java.lang.String[] strArray91 = posixParser45.flatten(options81, strArray89, true);
        java.lang.String[] strArray93 = posixParser0.flatten(options43, strArray91, false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(collection44);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNotNull(list54);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "arg" + "'", str72, "arg");
        org.junit.Assert.assertNotNull(list73);
        org.junit.Assert.assertNull(optionGroup74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNotNull(commandLine78);
        org.junit.Assert.assertNotNull(options79);
        org.junit.Assert.assertNotNull(list82);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(strArray93);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = posixParser0.getOptions();
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.cmd;
        java.util.List list36 = commandLine35.getArgList();
        java.lang.String str38 = commandLine35.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: [ option:   :: arg ]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.Options options36 = options20.addOption("arg", true, "arg");
        java.util.List list37 = options20.helpOptions();
        org.apache.commons.cli.MissingOptionException missingOptionException38 = new org.apache.commons.cli.MissingOptionException(list37);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertNotNull(list37);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options23 = options18.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options28 = options18.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "[ option:   :: arg ]", "[ Options: [ short {} ] [ long {} ]", "hi!", "arg", "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options28, strArray35);
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str44 = option43.getKey();
        java.lang.String str45 = option43.getArgName();
        java.util.List list46 = option43.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup47 = options38.getOptionGroup(option43);
        boolean boolean49 = options38.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray52 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray54 = posixParser37.flatten(options38, strArray52, true);
        java.util.Properties properties55 = null;
        posixParser37.processProperties(properties55);
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option62 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str63 = option62.getKey();
        java.lang.String str64 = option62.getArgName();
        java.util.List list65 = option62.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup66 = options57.getOptionGroup(option62);
        java.lang.String[] strArray67 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine69 = posixParser37.parse(options57, strArray67, true);
        posixParser0.cmd = commandLine69;
        org.apache.commons.cli.Option[] optionArray71 = commandLine69.getOptions();
        boolean boolean73 = commandLine69.hasOption('#');
        java.lang.String[] strArray75 = commandLine69.getOptionValues('a');
        java.lang.String str77 = commandLine69.getOptionValue('a');
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "arg" + "'", str45, "arg");
        org.junit.Assert.assertNotNull(list46);
        org.junit.Assert.assertNull(optionGroup47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "arg" + "'", str64, "arg");
        org.junit.Assert.assertNotNull(list65);
        org.junit.Assert.assertNull(optionGroup66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(optionArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(strArray75);
        org.junit.Assert.assertNull(str77);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        java.util.Properties properties34 = commandLine32.getOptionProperties("hi!");
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str40 = option39.getKey();
        boolean boolean41 = option39.isRequired();
        java.lang.String[] strArray42 = option39.getValues();
        commandLine32.addOption(option39);
        java.lang.Object obj45 = commandLine32.getOptionObject('\000');
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str53 = option52.getKey();
        java.lang.String str54 = option52.getArgName();
        java.util.List list55 = option52.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup56 = options47.getOptionGroup(option52);
        boolean boolean58 = options47.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray61 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray63 = posixParser46.flatten(options47, strArray61, true);
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean69 = option68.hasLongOpt();
        boolean boolean70 = option68.hasArgName();
        boolean boolean71 = option68.hasArgName();
        org.apache.commons.cli.OptionGroup optionGroup72 = options47.getOptionGroup(option68);
        org.apache.commons.cli.Options options77 = options47.addOption("", "org.apache.commons.cli.UnrecognizedOptionException: [ option:   :: arg ]", true, "[ option:   :: arg ]");
        boolean boolean79 = options77.hasOption("");
        org.apache.commons.cli.Option option81 = options77.getOption("");
        commandLine32.addOption(option81);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(strArray42);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "arg" + "'", str54, "arg");
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNull(optionGroup56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(optionGroup72);
        org.junit.Assert.assertNotNull(options77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(option81);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options23 = options18.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options28 = options18.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "[ option:   :: arg ]", "[ Options: [ short {} ] [ long {} ]", "hi!", "arg", "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options28, strArray35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options42 = options37.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str50 = option49.getKey();
        java.lang.String str51 = option49.getArgName();
        java.util.List list52 = option49.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup53 = options44.getOptionGroup(option49);
        boolean boolean55 = options44.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray58 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray60 = posixParser43.flatten(options44, strArray58, true);
        java.util.Properties properties61 = null;
        posixParser43.processProperties(properties61);
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str69 = option68.getKey();
        java.lang.String str70 = option68.getArgName();
        java.util.List list71 = option68.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup72 = options63.getOptionGroup(option68);
        java.lang.String[] strArray73 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine75 = posixParser43.parse(options63, strArray73, true);
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options37, strArray73);
        posixParser0.checkRequiredOptions();
        posixParser0.checkRequiredOptions();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg");
        org.junit.Assert.assertNotNull(list52);
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNotNull(list71);
        org.junit.Assert.assertNull(optionGroup72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(commandLine76);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.cmd;
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        boolean boolean31 = options20.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray34 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray36 = posixParser19.flatten(options20, strArray34, true);
        java.util.Properties properties37 = null;
        posixParser19.processProperties(properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str45 = option44.getKey();
        java.lang.String str46 = option44.getArgName();
        java.util.List list47 = option44.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup48 = options39.getOptionGroup(option44);
        java.lang.String[] strArray49 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine51 = posixParser19.parse(options39, strArray49, true);
        org.apache.commons.cli.CommandLine commandLine52 = posixParser19.cmd;
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options58 = options53.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options63 = options53.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "arg", "arg" };
        org.apache.commons.cli.CommandLine commandLine69 = posixParser19.parse(options63, strArray67, false);
        posixParser0.setOptions(options63);
        posixParser0.burstToken("[ Options: [ short {} ] [ long {} ]", false);
        posixParser0.checkRequiredOptions();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(commandLine18);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "arg" + "'", str46, "arg");
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(commandLine69);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = posixParser0.getOptions();
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.cmd;
        org.apache.commons.cli.PosixParser posixParser36 = new org.apache.commons.cli.PosixParser();
        posixParser36.burstToken("", false);
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        java.lang.String str41 = options40.toString();
        org.apache.commons.cli.Option option46 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str47 = option46.getKey();
        java.lang.String str48 = option46.getArgName();
        java.util.List list49 = option46.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup50 = options40.getOptionGroup(option46);
        org.apache.commons.cli.PosixParser posixParser51 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options52 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str58 = option57.getKey();
        java.lang.String str59 = option57.getArgName();
        java.util.List list60 = option57.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup61 = options52.getOptionGroup(option57);
        boolean boolean63 = options52.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray66 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray68 = posixParser51.flatten(options52, strArray66, true);
        java.util.Properties properties69 = null;
        posixParser51.processProperties(properties69);
        org.apache.commons.cli.Options options71 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option76 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str77 = option76.getKey();
        java.lang.String str78 = option76.getArgName();
        java.util.List list79 = option76.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup80 = options71.getOptionGroup(option76);
        java.lang.String[] strArray81 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine83 = posixParser51.parse(options71, strArray81, true);
        org.apache.commons.cli.CommandLine commandLine84 = posixParser36.parse(options40, strArray81);
        org.apache.commons.cli.Options options85 = posixParser36.getOptions();
        java.lang.String[] strArray86 = null;
        org.apache.commons.cli.CommandLine commandLine87 = posixParser0.parse(options85, strArray86);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str41, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "arg" + "'", str48, "arg");
        org.junit.Assert.assertNotNull(list49);
        org.junit.Assert.assertNull(optionGroup50);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "arg" + "'", str59, "arg");
        org.junit.Assert.assertNotNull(list60);
        org.junit.Assert.assertNull(optionGroup61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "arg" + "'", str78, "arg");
        org.junit.Assert.assertNotNull(list79);
        org.junit.Assert.assertNull(optionGroup80);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(commandLine84);
        org.junit.Assert.assertNotNull(options85);
        org.junit.Assert.assertNotNull(commandLine87);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        java.lang.String str36 = commandLine33.getOptionValue('\000', "org.apache.commons.cli.UnrecognizedOptionException: ");
        java.lang.Object obj38 = commandLine33.getOptionObject("");
        boolean boolean40 = commandLine33.hasOption("");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: " + "'", str36, "org.apache.commons.cli.UnrecognizedOptionException: ");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options23 = options18.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options28 = options18.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "[ option:   :: arg ]", "[ Options: [ short {} ] [ long {} ]", "hi!", "arg", "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options28, strArray35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str43 = option42.getKey();
        java.lang.String str44 = option42.getArgName();
        java.util.List list45 = option42.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup46 = options37.getOptionGroup(option42);
        boolean boolean48 = options37.hasOption("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options50 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option55 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str56 = option55.getKey();
        java.lang.String str57 = option55.getArgName();
        java.util.List list58 = option55.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup59 = options50.getOptionGroup(option55);
        boolean boolean61 = options50.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray64 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray66 = posixParser49.flatten(options50, strArray64, true);
        org.apache.commons.cli.Options options67 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options72 = options67.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options77 = options67.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray84 = new java.lang.String[] { "[ option:   :: arg ]", "[ Options: [ short {} ] [ long {} ]", "hi!", "arg", "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine85 = posixParser49.parse(options77, strArray84);
        java.lang.String[] strArray87 = posixParser0.flatten(options37, strArray84, true);
        org.apache.commons.cli.CommandLine commandLine88 = posixParser0.cmd;
        java.util.List list89 = posixParser0.getRequiredOptions();
        posixParser0.burstToken("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: [ option:   :: arg ]", false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "arg" + "'", str44, "arg");
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNull(optionGroup46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "arg" + "'", str57, "arg");
        org.junit.Assert.assertNotNull(list58);
        org.junit.Assert.assertNull(optionGroup59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(options72);
        org.junit.Assert.assertNotNull(options77);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(commandLine85);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(commandLine88);
        org.junit.Assert.assertNotNull(list89);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("", false, "arg");
        char char4 = option3.getValueSeparator();
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str10 = option9.getKey();
        java.lang.String str11 = option9.getArgName();
        java.lang.String str13 = option9.getValue((int) '#');
        option3.setType((java.lang.Object) str13);
        boolean boolean15 = option3.hasOptionalArg();
        java.lang.String str17 = option3.getValue((int) (short) 0);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str25 = option24.getKey();
        java.lang.String str26 = option24.getArgName();
        java.util.List list27 = option24.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup28 = options19.getOptionGroup(option24);
        boolean boolean30 = options19.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray33 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray35 = posixParser18.flatten(options19, strArray33, true);
        java.util.Properties properties36 = null;
        posixParser18.processProperties(properties36);
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str44 = option43.getKey();
        java.lang.String str45 = option43.getArgName();
        java.util.List list46 = option43.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup47 = options38.getOptionGroup(option43);
        java.lang.String[] strArray48 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine50 = posixParser18.parse(options38, strArray48, true);
        org.apache.commons.cli.CommandLine commandLine51 = posixParser18.cmd;
        org.apache.commons.cli.Options options52 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options57 = options52.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options62 = options52.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "arg", "arg" };
        org.apache.commons.cli.CommandLine commandLine68 = posixParser18.parse(options62, strArray66, false);
        boolean boolean69 = option3.equals((java.lang.Object) options62);
        org.apache.commons.cli.Options options73 = options62.addOption("", true, "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.UnrecognizedOptionException: ");
        org.apache.commons.cli.Option option74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options75 = options73.addOption(option74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + '\000' + "'", char4 == '\000');
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNull(optionGroup28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "arg" + "'", str45, "arg");
        org.junit.Assert.assertNotNull(list46);
        org.junit.Assert.assertNull(optionGroup47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(options73);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("", false, "arg");
        java.lang.Object obj4 = option3.clone();
        boolean boolean5 = option3.isRequired();
        java.lang.String str6 = option3.toString();
        option3.clearValues();
        boolean boolean8 = option3.hasLongOpt();
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str16 = option15.getKey();
        java.lang.String str17 = option15.getArgName();
        java.util.List list18 = option15.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup19 = options10.getOptionGroup(option15);
        boolean boolean21 = options10.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray24 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray26 = posixParser9.flatten(options10, strArray24, true);
        java.util.Properties properties27 = null;
        posixParser9.processProperties(properties27);
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option34 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str35 = option34.getKey();
        java.lang.String str36 = option34.getArgName();
        java.util.List list37 = option34.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup38 = options29.getOptionGroup(option34);
        java.lang.String[] strArray39 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine41 = posixParser9.parse(options29, strArray39, true);
        org.apache.commons.cli.CommandLine commandLine42 = posixParser9.cmd;
        org.apache.commons.cli.Options options43 = posixParser9.getOptions();
        option3.setType((java.lang.Object) posixParser9);
        java.util.List list45 = posixParser9.getRequiredOptions();
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "[ option:   :: arg ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "[ option:   :: arg ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "[ option:   :: arg ]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[ option:   :: arg ]" + "'", str6, "[ option:   :: arg ]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertNotNull(list18);
        org.junit.Assert.assertNull(optionGroup19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "arg" + "'", str36, "arg");
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNull(optionGroup38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(list45);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str25 = option24.getKey();
        java.lang.String str26 = option24.getArgName();
        java.util.List list27 = option24.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup28 = options19.getOptionGroup(option24);
        boolean boolean30 = options19.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray33 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray35 = posixParser18.flatten(options19, strArray33, true);
        java.util.Properties properties36 = null;
        posixParser18.processProperties(properties36);
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str44 = option43.getKey();
        java.lang.String str45 = option43.getArgName();
        java.util.List list46 = option43.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup47 = options38.getOptionGroup(option43);
        java.lang.String[] strArray48 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine50 = posixParser18.parse(options38, strArray48, true);
        java.util.Properties properties52 = commandLine50.getOptionProperties("hi!");
        posixParser0.processProperties(properties52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNull(optionGroup28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "arg" + "'", str45, "arg");
        org.junit.Assert.assertNotNull(list46);
        org.junit.Assert.assertNull(optionGroup47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(properties52);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        java.lang.String str36 = commandLine33.getOptionValue('\000', "org.apache.commons.cli.UnrecognizedOptionException: ");
        java.lang.String[] strArray37 = commandLine33.getArgs();
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean43 = option42.hasLongOpt();
        java.lang.String str44 = option42.getDescription();
        char char45 = option42.getValueSeparator();
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str51 = option50.getKey();
        java.lang.String str52 = option50.getArgName();
        java.lang.String str54 = option50.getValue((int) '#');
        boolean boolean55 = option50.hasLongOpt();
        option42.setType((java.lang.Object) boolean55);
        commandLine33.addOption(option42);
        org.apache.commons.cli.Option[] optionArray58 = commandLine33.getOptions();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: " + "'", str36, "org.apache.commons.cli.UnrecognizedOptionException: ");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + '\000' + "'", char45 == '\000');
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(optionArray58);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("", false, "arg");
        java.lang.Object obj4 = option3.clone();
        boolean boolean5 = option3.isRequired();
        java.lang.String str6 = option3.toString();
        option3.clearValues();
        boolean boolean8 = option3.hasLongOpt();
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str16 = option15.getKey();
        java.lang.String str17 = option15.getArgName();
        java.util.List list18 = option15.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup19 = options10.getOptionGroup(option15);
        boolean boolean21 = options10.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray24 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray26 = posixParser9.flatten(options10, strArray24, true);
        java.util.Properties properties27 = null;
        posixParser9.processProperties(properties27);
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option34 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str35 = option34.getKey();
        java.lang.String str36 = option34.getArgName();
        java.util.List list37 = option34.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup38 = options29.getOptionGroup(option34);
        java.lang.String[] strArray39 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine41 = posixParser9.parse(options29, strArray39, true);
        org.apache.commons.cli.CommandLine commandLine42 = posixParser9.cmd;
        org.apache.commons.cli.Options options43 = posixParser9.getOptions();
        option3.setType((java.lang.Object) posixParser9);
        java.lang.Object obj45 = option3.getType();
        java.lang.String str47 = option3.getValue(10);
        char char48 = option3.getValueSeparator();
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "[ option:   :: arg ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "[ option:   :: arg ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "[ option:   :: arg ]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[ option:   :: arg ]" + "'", str6, "[ option:   :: arg ]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertNotNull(list18);
        org.junit.Assert.assertNull(optionGroup19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "arg" + "'", str36, "arg");
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNull(optionGroup38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + char48 + "' != '" + '\000' + "'", char48 == '\000');
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("", false, "arg");
        java.lang.Object obj4 = option3.clone();
        boolean boolean5 = option3.isRequired();
        java.lang.String str6 = option3.toString();
        option3.clearValues();
        boolean boolean8 = option3.hasLongOpt();
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str16 = option15.getKey();
        java.lang.String str17 = option15.getArgName();
        java.util.List list18 = option15.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup19 = options10.getOptionGroup(option15);
        boolean boolean21 = options10.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray24 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray26 = posixParser9.flatten(options10, strArray24, true);
        java.util.Properties properties27 = null;
        posixParser9.processProperties(properties27);
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option34 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str35 = option34.getKey();
        java.lang.String str36 = option34.getArgName();
        java.util.List list37 = option34.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup38 = options29.getOptionGroup(option34);
        java.lang.String[] strArray39 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine41 = posixParser9.parse(options29, strArray39, true);
        org.apache.commons.cli.CommandLine commandLine42 = posixParser9.cmd;
        org.apache.commons.cli.Options options43 = posixParser9.getOptions();
        option3.setType((java.lang.Object) posixParser9);
        java.lang.Object obj45 = option3.getType();
        java.lang.String str47 = option3.getValue(10);
        java.lang.Object obj48 = option3.clone();
        java.lang.String str50 = option3.getValue("org.apache.commons.cli.UnrecognizedOptionException: ");
        boolean boolean51 = option3.hasValueSeparator();
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "[ option:   :: arg ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "[ option:   :: arg ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "[ option:   :: arg ]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[ option:   :: arg ]" + "'", str6, "[ option:   :: arg ]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertNotNull(list18);
        org.junit.Assert.assertNull(optionGroup19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "arg" + "'", str36, "arg");
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNull(optionGroup38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: " + "'", str50, "org.apache.commons.cli.UnrecognizedOptionException: ");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options39 = options34.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options44 = options34.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "arg", "arg" };
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options44, strArray48, false);
        org.apache.commons.cli.PosixParser posixParser51 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options52 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str58 = option57.getKey();
        java.lang.String str59 = option57.getArgName();
        java.util.List list60 = option57.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup61 = options52.getOptionGroup(option57);
        boolean boolean63 = options52.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray66 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray68 = posixParser51.flatten(options52, strArray66, true);
        java.util.Properties properties69 = null;
        posixParser51.processProperties(properties69);
        org.apache.commons.cli.Options options71 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option76 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str77 = option76.getKey();
        java.lang.String str78 = option76.getArgName();
        java.util.List list79 = option76.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup80 = options71.getOptionGroup(option76);
        java.lang.String[] strArray81 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine83 = posixParser51.parse(options71, strArray81, true);
        java.util.Properties properties85 = commandLine83.getOptionProperties("hi!");
        posixParser0.cmd = commandLine83;
        org.apache.commons.cli.Option option91 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str92 = option91.getKey();
        java.lang.String str93 = option91.getArgName();
        java.lang.String str95 = option91.getValue((int) '#');
        boolean boolean96 = option91.isRequired();
        commandLine83.addOption(option91);
        java.lang.String str99 = option91.getValue("[ option:    ::  ]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "arg" + "'", str59, "arg");
        org.junit.Assert.assertNotNull(list60);
        org.junit.Assert.assertNull(optionGroup61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "arg" + "'", str78, "arg");
        org.junit.Assert.assertNotNull(list79);
        org.junit.Assert.assertNull(optionGroup80);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(properties85);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "arg" + "'", str93, "arg");
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "[ option:    ::  ]" + "'", str99, "[ option:    ::  ]");
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = posixParser0.getOptions();
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str42 = option41.getKey();
        java.lang.String str43 = option41.getArgName();
        java.util.List list44 = option41.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup45 = options36.getOptionGroup(option41);
        boolean boolean47 = options36.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray50 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray52 = posixParser35.flatten(options36, strArray50, true);
        java.util.Properties properties53 = null;
        posixParser35.processProperties(properties53);
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option60 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str61 = option60.getKey();
        java.lang.String str62 = option60.getArgName();
        java.util.List list63 = option60.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup64 = options55.getOptionGroup(option60);
        java.lang.String[] strArray65 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine67 = posixParser35.parse(options55, strArray65, true);
        java.util.Properties properties69 = commandLine67.getOptionProperties("hi!");
        posixParser0.processProperties(properties69);
        posixParser0.checkRequiredOptions();
        org.apache.commons.cli.CommandLine commandLine72 = new org.apache.commons.cli.CommandLine();
        java.lang.String str75 = commandLine72.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: ", "hi!");
        java.lang.Object obj77 = commandLine72.getOptionObject('4');
        java.lang.String str80 = commandLine72.getOptionValue('\000', "");
        posixParser0.cmd = commandLine72;
        org.apache.commons.cli.Options options82 = posixParser0.getOptions();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "arg" + "'", str43, "arg");
        org.junit.Assert.assertNotNull(list44);
        org.junit.Assert.assertNull(optionGroup45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "arg" + "'", str62, "arg");
        org.junit.Assert.assertNotNull(list63);
        org.junit.Assert.assertNull(optionGroup64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(options82);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        java.util.Properties properties34 = null;
        posixParser0.processProperties(properties34);
        java.util.List list36 = posixParser0.getRequiredOptions();
        org.apache.commons.cli.CommandLine commandLine37 = new org.apache.commons.cli.CommandLine();
        java.lang.String str40 = commandLine37.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: ", "hi!");
        java.lang.Object obj42 = commandLine37.getOptionObject('4');
        java.lang.String str45 = commandLine37.getOptionValue('\000', "");
        java.lang.Object obj47 = commandLine37.getOptionObject("arg");
        java.lang.String str49 = commandLine37.getOptionValue("");
        java.lang.Object obj51 = commandLine37.getOptionObject("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.Option[] optionArray52 = commandLine37.getOptions();
        boolean boolean54 = commandLine37.hasOption("");
        java.util.Properties properties56 = commandLine37.getOptionProperties("[ option:    ::  ]");
        posixParser0.processProperties(properties56);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(optionArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(properties56);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String str2 = options1.toString();
        org.apache.commons.cli.Option option7 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str8 = option7.getKey();
        java.lang.String str9 = option7.getArgName();
        java.util.List list10 = option7.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup11 = options1.getOptionGroup(option7);
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str19 = option18.getKey();
        java.lang.String str20 = option18.getArgName();
        java.util.List list21 = option18.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup22 = options13.getOptionGroup(option18);
        boolean boolean24 = options13.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray27 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray29 = posixParser12.flatten(options13, strArray27, true);
        java.util.Properties properties30 = null;
        posixParser12.processProperties(properties30);
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str38 = option37.getKey();
        java.lang.String str39 = option37.getArgName();
        java.util.List list40 = option37.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup41 = options32.getOptionGroup(option37);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine44 = posixParser12.parse(options32, strArray42, true);
        org.apache.commons.cli.CommandLine commandLine45 = posixParser12.cmd;
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options51 = options46.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options56 = options46.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "arg", "arg" };
        org.apache.commons.cli.CommandLine commandLine62 = posixParser12.parse(options56, strArray60, false);
        org.apache.commons.cli.CommandLine commandLine64 = posixParser0.parse(options1, strArray60, true);
        java.util.List list65 = options1.helpOptions();
        java.util.List list66 = options1.getRequiredOptions();
        java.lang.String str67 = options1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str2, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg");
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNull(optionGroup11);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertNull(optionGroup22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "arg" + "'", str39, "arg");
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(list65);
        org.junit.Assert.assertNotNull(list66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str67, "[ Options: [ short {} ] [ long {} ]");
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("", false, "arg");
        java.lang.Object obj4 = option3.clone();
        boolean boolean5 = option3.isRequired();
        java.lang.String str6 = option3.toString();
        option3.clearValues();
        boolean boolean8 = option3.hasLongOpt();
        org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option15 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str16 = option15.getKey();
        java.lang.String str17 = option15.getArgName();
        java.util.List list18 = option15.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup19 = options10.getOptionGroup(option15);
        boolean boolean21 = options10.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray24 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray26 = posixParser9.flatten(options10, strArray24, true);
        java.util.Properties properties27 = null;
        posixParser9.processProperties(properties27);
        org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option34 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str35 = option34.getKey();
        java.lang.String str36 = option34.getArgName();
        java.util.List list37 = option34.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup38 = options29.getOptionGroup(option34);
        java.lang.String[] strArray39 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine41 = posixParser9.parse(options29, strArray39, true);
        org.apache.commons.cli.CommandLine commandLine42 = posixParser9.cmd;
        org.apache.commons.cli.Options options43 = posixParser9.getOptions();
        option3.setType((java.lang.Object) posixParser9);
        java.lang.Object obj45 = option3.getType();
        java.lang.String str47 = option3.getValue(10);
        java.lang.Object obj48 = option3.clone();
        java.lang.String str50 = option3.getValue("org.apache.commons.cli.UnrecognizedOptionException: ");
        java.lang.String[] strArray51 = option3.getValues();
        java.lang.String str52 = option3.getLongOpt();
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "[ option:   :: arg ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "[ option:   :: arg ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "[ option:   :: arg ]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[ option:   :: arg ]" + "'", str6, "[ option:   :: arg ]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg");
        org.junit.Assert.assertNotNull(list18);
        org.junit.Assert.assertNull(optionGroup19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "arg" + "'", str36, "arg");
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNull(optionGroup38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(commandLine41);
        org.junit.Assert.assertNotNull(commandLine42);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: " + "'", str50, "org.apache.commons.cli.UnrecognizedOptionException: ");
        org.junit.Assert.assertNull(strArray51);
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        java.lang.String str36 = commandLine33.getOptionValue('\000', "org.apache.commons.cli.UnrecognizedOptionException: ");
        java.lang.String[] strArray37 = commandLine33.getArgs();
        org.apache.commons.cli.Option option42 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean43 = option42.hasLongOpt();
        java.lang.String str44 = option42.getDescription();
        char char45 = option42.getValueSeparator();
        org.apache.commons.cli.Option option50 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str51 = option50.getKey();
        java.lang.String str52 = option50.getArgName();
        java.lang.String str54 = option50.getValue((int) '#');
        boolean boolean55 = option50.hasLongOpt();
        option42.setType((java.lang.Object) boolean55);
        commandLine33.addOption(option42);
        java.lang.String[] strArray59 = commandLine33.getOptionValues("[ Options: [ short {arg=[ option: arg  [ARG] :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org.apache.commons.cli.UnrecognizedOptionException: " + "'", str36, "org.apache.commons.cli.UnrecognizedOptionException: ");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + char45 + "' != '" + '\000' + "'", char45 == '\000');
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "arg" + "'", str52, "arg");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(strArray59);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.cmd;
        org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        boolean boolean31 = options20.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray34 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray36 = posixParser19.flatten(options20, strArray34, true);
        java.util.Properties properties37 = null;
        posixParser19.processProperties(properties37);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str45 = option44.getKey();
        java.lang.String str46 = option44.getArgName();
        java.util.List list47 = option44.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup48 = options39.getOptionGroup(option44);
        java.lang.String[] strArray49 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine51 = posixParser19.parse(options39, strArray49, true);
        org.apache.commons.cli.CommandLine commandLine52 = posixParser19.cmd;
        org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options58 = options53.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options63 = options53.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "arg", "arg" };
        org.apache.commons.cli.CommandLine commandLine69 = posixParser19.parse(options63, strArray67, false);
        posixParser0.setOptions(options63);
        org.apache.commons.cli.Option option72 = options63.getOption("");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(commandLine18);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "arg" + "'", str46, "arg");
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(commandLine52);
        org.junit.Assert.assertNotNull(options58);
        org.junit.Assert.assertNotNull(options63);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(option72);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options39 = options34.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options44 = options34.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "arg", "arg" };
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options44, strArray48, false);
        org.apache.commons.cli.PosixParser posixParser51 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options52 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str58 = option57.getKey();
        java.lang.String str59 = option57.getArgName();
        java.util.List list60 = option57.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup61 = options52.getOptionGroup(option57);
        boolean boolean63 = options52.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray66 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray68 = posixParser51.flatten(options52, strArray66, true);
        java.util.Properties properties69 = null;
        posixParser51.processProperties(properties69);
        org.apache.commons.cli.Options options71 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option76 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str77 = option76.getKey();
        java.lang.String str78 = option76.getArgName();
        java.util.List list79 = option76.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup80 = options71.getOptionGroup(option76);
        java.lang.String[] strArray81 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine83 = posixParser51.parse(options71, strArray81, true);
        java.util.Properties properties85 = commandLine83.getOptionProperties("hi!");
        posixParser0.cmd = commandLine83;
        java.lang.String[] strArray88 = commandLine83.getOptionValues('\000');
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "arg" + "'", str59, "arg");
        org.junit.Assert.assertNotNull(list60);
        org.junit.Assert.assertNull(optionGroup61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "arg" + "'", str78, "arg");
        org.junit.Assert.assertNotNull(list79);
        org.junit.Assert.assertNull(optionGroup80);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(properties85);
        org.junit.Assert.assertNull(strArray88);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean23 = option22.hasLongOpt();
        boolean boolean24 = option22.hasArgName();
        boolean boolean25 = option22.hasArgName();
        org.apache.commons.cli.OptionGroup optionGroup26 = options1.getOptionGroup(option22);
        org.apache.commons.cli.Options options31 = options1.addOption("", "org.apache.commons.cli.UnrecognizedOptionException: [ option:   :: arg ]", true, "[ option:   :: arg ]");
        boolean boolean33 = options31.hasOption("");
        org.apache.commons.cli.Option option35 = options31.getOption("");
        java.lang.Object obj36 = option35.getType();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(optionGroup26);
        org.junit.Assert.assertNotNull(options31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(option35);
        org.junit.Assert.assertNull(obj36);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = posixParser0.getOptions();
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.cmd;
        java.util.List list36 = commandLine35.getArgList();
        java.lang.Object obj38 = commandLine35.getOptionObject("");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNull(obj38);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = posixParser0.getOptions();
        posixParser0.burstToken("arg", true);
        org.apache.commons.cli.Options options38 = posixParser0.getOptions();
        java.util.List list39 = options38.helpOptions();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(list39);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options23 = options18.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options28 = options18.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "[ option:   :: arg ]", "[ Options: [ short {} ] [ long {} ]", "hi!", "arg", "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options28, strArray35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options42 = options37.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str50 = option49.getKey();
        java.lang.String str51 = option49.getArgName();
        java.util.List list52 = option49.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup53 = options44.getOptionGroup(option49);
        boolean boolean55 = options44.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray58 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray60 = posixParser43.flatten(options44, strArray58, true);
        java.util.Properties properties61 = null;
        posixParser43.processProperties(properties61);
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str69 = option68.getKey();
        java.lang.String str70 = option68.getArgName();
        java.util.List list71 = option68.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup72 = options63.getOptionGroup(option68);
        java.lang.String[] strArray73 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine75 = posixParser43.parse(options63, strArray73, true);
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options37, strArray73);
        java.util.Collection collection77 = options37.getOptionGroups();
        org.apache.commons.cli.Option option79 = options37.getOption("arg");
        org.apache.commons.cli.Options options84 = options37.addOption("", "org.apache.commons.cli.MissingArgumentException: [ option:   :: arg ]", true, "[ Options: [ short {=[ option:   :: arg ]} ] [ long {hi!=[ option:  hi!  [ARG] :: hi! ]} ]");
        java.util.Collection collection85 = options37.getOptionGroups();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg");
        org.junit.Assert.assertNotNull(list52);
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNotNull(list71);
        org.junit.Assert.assertNull(optionGroup72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(collection77);
        org.junit.Assert.assertNull(option79);
        org.junit.Assert.assertNotNull(options84);
        org.junit.Assert.assertNotNull(collection85);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        java.lang.String str2 = options1.toString();
        org.apache.commons.cli.Option option7 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str8 = option7.getKey();
        java.lang.String str9 = option7.getArgName();
        java.util.List list10 = option7.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup11 = options1.getOptionGroup(option7);
        org.apache.commons.cli.PosixParser posixParser12 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option18 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str19 = option18.getKey();
        java.lang.String str20 = option18.getArgName();
        java.util.List list21 = option18.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup22 = options13.getOptionGroup(option18);
        boolean boolean24 = options13.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray27 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray29 = posixParser12.flatten(options13, strArray27, true);
        java.util.Properties properties30 = null;
        posixParser12.processProperties(properties30);
        org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option37 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str38 = option37.getKey();
        java.lang.String str39 = option37.getArgName();
        java.util.List list40 = option37.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup41 = options32.getOptionGroup(option37);
        java.lang.String[] strArray42 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine44 = posixParser12.parse(options32, strArray42, true);
        org.apache.commons.cli.CommandLine commandLine45 = posixParser12.cmd;
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options51 = options46.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options56 = options46.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "arg", "arg" };
        org.apache.commons.cli.CommandLine commandLine62 = posixParser12.parse(options56, strArray60, false);
        org.apache.commons.cli.CommandLine commandLine64 = posixParser0.parse(options1, strArray60, true);
        java.util.List list65 = options1.helpOptions();
        java.util.List list66 = options1.getRequiredOptions();
        org.apache.commons.cli.Option option68 = options1.getOption("[ Options: [ short {=[ option:   :: arg ]} ] [ long {hi!=[ option:  hi!  [ARG] :: hi! ]} ]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str2, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg");
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertNull(optionGroup11);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg");
        org.junit.Assert.assertNotNull(list21);
        org.junit.Assert.assertNull(optionGroup22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "arg" + "'", str39, "arg");
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNull(optionGroup41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(commandLine44);
        org.junit.Assert.assertNotNull(commandLine45);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(options56);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(commandLine62);
        org.junit.Assert.assertNotNull(commandLine64);
        org.junit.Assert.assertNotNull(list65);
        org.junit.Assert.assertNotNull(list66);
        org.junit.Assert.assertNull(option68);
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = posixParser0.getOptions();
        posixParser0.checkRequiredOptions();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        java.lang.String str37 = options36.toString();
        java.util.List list38 = options36.getRequiredOptions();
        org.apache.commons.cli.Options options42 = options36.addOption("", true, "hi!");
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        posixParser43.burstToken("", false);
        org.apache.commons.cli.Options options47 = posixParser43.getOptions();
        org.apache.commons.cli.Options options48 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options53 = options48.addOption("", "hi!", true, "hi!");
        java.util.Collection collection54 = options53.getOptions();
        org.apache.commons.cli.Option option56 = options53.getOption("[ Options: [ short {} ] [ long {} ]");
        org.apache.commons.cli.PosixParser posixParser57 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options58 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option63 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str64 = option63.getKey();
        java.lang.String str65 = option63.getArgName();
        java.util.List list66 = option63.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup67 = options58.getOptionGroup(option63);
        boolean boolean69 = options58.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray72 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray74 = posixParser57.flatten(options58, strArray72, true);
        org.apache.commons.cli.CommandLine commandLine75 = posixParser43.parse(options53, strArray72);
        org.apache.commons.cli.CommandLine commandLine77 = posixParser0.parse(options36, strArray72, false);
        org.apache.commons.cli.Option option79 = options36.getOption("[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[ Options: [ short {} ] [ long {} ]" + "'", str37, "[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertNull(options47);
        org.junit.Assert.assertNotNull(options53);
        org.junit.Assert.assertNotNull(collection54);
        org.junit.Assert.assertNull(option56);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "arg" + "'", str65, "arg");
        org.junit.Assert.assertNotNull(list66);
        org.junit.Assert.assertNull(optionGroup67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(commandLine77);
        org.junit.Assert.assertNull(option79);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options23 = options18.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options28 = options18.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "[ option:   :: arg ]", "[ Options: [ short {} ] [ long {} ]", "hi!", "arg", "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options28, strArray35);
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str44 = option43.getKey();
        java.lang.String str45 = option43.getArgName();
        java.util.List list46 = option43.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup47 = options38.getOptionGroup(option43);
        boolean boolean49 = options38.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray52 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray54 = posixParser37.flatten(options38, strArray52, true);
        java.util.Properties properties55 = null;
        posixParser37.processProperties(properties55);
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option62 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str63 = option62.getKey();
        java.lang.String str64 = option62.getArgName();
        java.util.List list65 = option62.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup66 = options57.getOptionGroup(option62);
        java.lang.String[] strArray67 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine69 = posixParser37.parse(options57, strArray67, true);
        posixParser0.cmd = commandLine69;
        org.apache.commons.cli.Option[] optionArray71 = commandLine69.getOptions();
        org.apache.commons.cli.Option option72 = null;
        commandLine69.addOption(option72);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = commandLine69.getOptionValue("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: [ option:   :: arg ]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "arg" + "'", str45, "arg");
        org.junit.Assert.assertNotNull(list46);
        org.junit.Assert.assertNull(optionGroup47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "arg" + "'", str64, "arg");
        org.junit.Assert.assertNotNull(list65);
        org.junit.Assert.assertNull(optionGroup66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(optionArray71);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = posixParser0.getOptions();
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str42 = option41.getKey();
        java.lang.String str43 = option41.getArgName();
        java.util.List list44 = option41.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup45 = options36.getOptionGroup(option41);
        boolean boolean47 = options36.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray50 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray52 = posixParser35.flatten(options36, strArray50, true);
        java.util.Properties properties53 = null;
        posixParser35.processProperties(properties53);
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option60 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str61 = option60.getKey();
        java.lang.String str62 = option60.getArgName();
        java.util.List list63 = option60.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup64 = options55.getOptionGroup(option60);
        java.lang.String[] strArray65 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine67 = posixParser35.parse(options55, strArray65, true);
        java.util.Properties properties69 = commandLine67.getOptionProperties("hi!");
        posixParser0.processProperties(properties69);
        posixParser0.checkRequiredOptions();
        org.apache.commons.cli.CommandLine commandLine72 = new org.apache.commons.cli.CommandLine();
        java.lang.String str75 = commandLine72.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: ", "hi!");
        java.lang.Object obj77 = commandLine72.getOptionObject('4');
        java.lang.String str80 = commandLine72.getOptionValue('\000', "");
        posixParser0.cmd = commandLine72;
        org.apache.commons.cli.Option[] optionArray82 = commandLine72.getOptions();
        java.lang.String str85 = commandLine72.getOptionValue(' ', "");
        java.lang.String[] strArray87 = commandLine72.getOptionValues('#');
        boolean boolean89 = commandLine72.hasOption('#');
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "arg" + "'", str43, "arg");
        org.junit.Assert.assertNotNull(list44);
        org.junit.Assert.assertNull(optionGroup45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "arg" + "'", str62, "arg");
        org.junit.Assert.assertNotNull(list63);
        org.junit.Assert.assertNull(optionGroup64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(optionArray82);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNull(strArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options39 = options34.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options44 = options34.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "arg", "arg" };
        org.apache.commons.cli.CommandLine commandLine50 = posixParser0.parse(options44, strArray48, false);
        org.apache.commons.cli.PosixParser posixParser51 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options52 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option57 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str58 = option57.getKey();
        java.lang.String str59 = option57.getArgName();
        java.util.List list60 = option57.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup61 = options52.getOptionGroup(option57);
        boolean boolean63 = options52.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray66 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray68 = posixParser51.flatten(options52, strArray66, true);
        java.util.Properties properties69 = null;
        posixParser51.processProperties(properties69);
        org.apache.commons.cli.Options options71 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option76 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str77 = option76.getKey();
        java.lang.String str78 = option76.getArgName();
        java.util.List list79 = option76.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup80 = options71.getOptionGroup(option76);
        java.lang.String[] strArray81 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine83 = posixParser51.parse(options71, strArray81, true);
        java.util.Properties properties85 = commandLine83.getOptionProperties("hi!");
        posixParser0.cmd = commandLine83;
        posixParser0.checkRequiredOptions();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "arg" + "'", str59, "arg");
        org.junit.Assert.assertNotNull(list60);
        org.junit.Assert.assertNull(optionGroup61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "arg" + "'", str78, "arg");
        org.junit.Assert.assertNotNull(list79);
        org.junit.Assert.assertNull(optionGroup80);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(commandLine83);
        org.junit.Assert.assertNotNull(properties85);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("", false, "arg");
        char char4 = option3.getValueSeparator();
        org.apache.commons.cli.Option option9 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str10 = option9.getKey();
        java.lang.String str11 = option9.getArgName();
        java.lang.String str13 = option9.getValue((int) '#');
        option3.setType((java.lang.Object) str13);
        boolean boolean15 = option3.hasOptionalArg();
        java.lang.String str17 = option3.getValue((int) (short) 0);
        org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option24 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str25 = option24.getKey();
        java.lang.String str26 = option24.getArgName();
        java.util.List list27 = option24.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup28 = options19.getOptionGroup(option24);
        boolean boolean30 = options19.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray33 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray35 = posixParser18.flatten(options19, strArray33, true);
        java.util.Properties properties36 = null;
        posixParser18.processProperties(properties36);
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str44 = option43.getKey();
        java.lang.String str45 = option43.getArgName();
        java.util.List list46 = option43.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup47 = options38.getOptionGroup(option43);
        java.lang.String[] strArray48 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine50 = posixParser18.parse(options38, strArray48, true);
        org.apache.commons.cli.CommandLine commandLine51 = posixParser18.cmd;
        org.apache.commons.cli.Options options52 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options57 = options52.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options62 = options52.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "arg", "arg" };
        org.apache.commons.cli.CommandLine commandLine68 = posixParser18.parse(options62, strArray66, false);
        boolean boolean69 = option3.equals((java.lang.Object) options62);
        org.apache.commons.cli.Options options73 = options62.addOption("", true, "org.apache.commons.cli.MissingArgumentException: org.apache.commons.cli.UnrecognizedOptionException: ");
        org.apache.commons.cli.Options options77 = options62.addOption("", true, "[ Options: [ short {arg=[ option: arg  [ARG] :: arg ]} ] [ long {} ]");
        org.apache.commons.cli.Option option81 = new org.apache.commons.cli.Option("", false, "arg");
        char char82 = option81.getValueSeparator();
        org.apache.commons.cli.Options options83 = options62.addOption(option81);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.cli.Options options88 = options62.addOption("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: [ option:   :: arg ]", "org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: [ option:   :: arg ]", false, "[ option:    ::  ]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: opt contains illegal character value '.'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + '\000' + "'", char4 == '\000');
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg");
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNull(optionGroup28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "arg" + "'", str45, "arg");
        org.junit.Assert.assertNotNull(list46);
        org.junit.Assert.assertNull(optionGroup47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(commandLine50);
        org.junit.Assert.assertNotNull(commandLine51);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertNotNull(options62);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(commandLine68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(options73);
        org.junit.Assert.assertNotNull(options77);
        org.junit.Assert.assertTrue("'" + char82 + "' != '" + '\000' + "'", char82 == '\000');
        org.junit.Assert.assertNotNull(options83);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = posixParser0.getOptions();
        java.util.ListIterator listIterator3 = null;
        // The following exception was thrown during execution in test generation
        try {
            posixParser0.processOption("[ Options: [ short {} ] [ long {} ]", listIterator3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(options1);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        java.util.Properties properties34 = commandLine32.getOptionProperties("hi!");
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str40 = option39.getKey();
        boolean boolean41 = option39.isRequired();
        java.lang.String[] strArray42 = option39.getValues();
        commandLine32.addOption(option39);
        java.lang.Object obj45 = commandLine32.getOptionObject('\000');
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str53 = option52.getKey();
        java.lang.String str54 = option52.getArgName();
        java.util.List list55 = option52.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup56 = options47.getOptionGroup(option52);
        boolean boolean58 = options47.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray61 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray63 = posixParser46.flatten(options47, strArray61, true);
        java.util.Properties properties64 = null;
        posixParser46.processProperties(properties64);
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str72 = option71.getKey();
        java.lang.String str73 = option71.getArgName();
        java.util.List list74 = option71.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup75 = options66.getOptionGroup(option71);
        java.lang.String[] strArray76 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine78 = posixParser46.parse(options66, strArray76, true);
        java.util.Properties properties80 = commandLine78.getOptionProperties("hi!");
        org.apache.commons.cli.Option option85 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str86 = option85.getKey();
        boolean boolean87 = option85.isRequired();
        java.lang.String[] strArray88 = option85.getValues();
        commandLine78.addOption(option85);
        commandLine32.addOption(option85);
        java.util.List list91 = option85.getValuesList();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(strArray42);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "arg" + "'", str54, "arg");
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNull(optionGroup56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "arg" + "'", str73, "arg");
        org.junit.Assert.assertNotNull(list74);
        org.junit.Assert.assertNull(optionGroup75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine78);
        org.junit.Assert.assertNotNull(properties80);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(strArray88);
        org.junit.Assert.assertNotNull(list91);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options23 = options18.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options28 = options18.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "[ option:   :: arg ]", "[ Options: [ short {} ] [ long {} ]", "hi!", "arg", "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options28, strArray35);
        org.apache.commons.cli.Options options37 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options42 = options37.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.PosixParser posixParser43 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str50 = option49.getKey();
        java.lang.String str51 = option49.getArgName();
        java.util.List list52 = option49.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup53 = options44.getOptionGroup(option49);
        boolean boolean55 = options44.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray58 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray60 = posixParser43.flatten(options44, strArray58, true);
        java.util.Properties properties61 = null;
        posixParser43.processProperties(properties61);
        org.apache.commons.cli.Options options63 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option68 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str69 = option68.getKey();
        java.lang.String str70 = option68.getArgName();
        java.util.List list71 = option68.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup72 = options63.getOptionGroup(option68);
        java.lang.String[] strArray73 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine75 = posixParser43.parse(options63, strArray73, true);
        org.apache.commons.cli.CommandLine commandLine76 = posixParser0.parse(options37, strArray73);
        java.util.Collection collection77 = options37.getOptionGroups();
        java.util.Collection collection78 = options37.getOptionGroups();
        org.apache.commons.cli.Options options82 = options37.addOption("", false, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(options42);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "arg" + "'", str51, "arg");
        org.junit.Assert.assertNotNull(list52);
        org.junit.Assert.assertNull(optionGroup53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "arg" + "'", str70, "arg");
        org.junit.Assert.assertNotNull(list71);
        org.junit.Assert.assertNull(optionGroup72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(commandLine75);
        org.junit.Assert.assertNotNull(commandLine76);
        org.junit.Assert.assertNotNull(collection77);
        org.junit.Assert.assertNotNull(collection78);
        org.junit.Assert.assertNotNull(options82);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options23 = options18.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options28 = options18.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "[ option:   :: arg ]", "[ Options: [ short {} ] [ long {} ]", "hi!", "arg", "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options28, strArray35);
        org.apache.commons.cli.CommandLine commandLine37 = posixParser0.cmd;
        posixParser0.checkRequiredOptions();
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option44 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str45 = option44.getKey();
        java.lang.String str46 = option44.getArgName();
        java.util.List list47 = option44.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup48 = options39.getOptionGroup(option44);
        boolean boolean50 = options39.hasOption("[ Options: [ short {} ] [ long {} ]");
        boolean boolean52 = options39.hasOption("org.apache.commons.cli.UnrecognizedOptionException: [ option:   :: arg ]");
        java.util.Collection collection53 = options39.getOptionGroups();
        posixParser0.setOptions(options39);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertNotNull(commandLine37);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "arg" + "'", str46, "arg");
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertNull(optionGroup48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(collection53);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        java.util.Collection collection33 = options20.getOptions();
        org.apache.commons.cli.Option option37 = new org.apache.commons.cli.Option("", false, "arg");
        java.lang.Object obj38 = option37.clone();
        boolean boolean39 = option37.isRequired();
        org.apache.commons.cli.Options options40 = options20.addOption(option37);
        boolean boolean42 = options20.hasOption("[ Options: [ short {=[ option:   :: arg ]} ] [ long {hi!=[ option:  hi!  [ARG] :: hi! ]} ]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(collection33);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "[ option:   :: arg ]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "[ option:   :: arg ]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "[ option:   :: arg ]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.CommandLine commandLine18 = posixParser0.cmd;
        org.apache.commons.cli.CommandLine commandLine19 = null;
        posixParser0.cmd = commandLine19;
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNull(commandLine18);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.Options options36 = options20.addOption("arg", true, "arg");
        java.util.List list37 = options36.getRequiredOptions();
        java.lang.String str38 = options36.toString();
        org.apache.commons.cli.Option option40 = options36.getOption("[ Options: [ short {} ] [ long {} ]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[ Options: [ short {arg=[ option: arg  [ARG] :: arg ]} ] [ long {} ]" + "'", str38, "[ Options: [ short {arg=[ option: arg  [ARG] :: arg ]} ] [ long {} ]");
        org.junit.Assert.assertNull(option40);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.Options options36 = options20.addOption("arg", true, "arg");
        java.util.List list37 = options20.helpOptions();
        boolean boolean39 = options20.hasOption("org.apache.commons.cli.MissingOptionException: org.apache.commons.cli.MissingArgumentException: [ option:   :: arg ]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = posixParser0.getOptions();
        posixParser0.burstToken("arg", true);
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str46 = option45.getKey();
        java.lang.String str47 = option45.getArgName();
        java.util.List list48 = option45.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup49 = options40.getOptionGroup(option45);
        boolean boolean51 = options40.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray54 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray56 = posixParser39.flatten(options40, strArray54, true);
        java.util.Properties properties57 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser0.parse(options38, strArray54, properties57, false);
        java.util.Iterator iterator60 = commandLine59.iterator();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "arg" + "'", str47, "arg");
        org.junit.Assert.assertNotNull(list48);
        org.junit.Assert.assertNull(optionGroup49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(iterator60);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.List list18 = options1.helpOptions();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(list18);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options39 = options34.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options44 = options34.addOption("arg", "", false, "hi!");
        posixParser0.setOptions(options44);
        java.util.List list46 = options44.helpOptions();
        boolean boolean48 = options44.hasOption("[ Options: [ short {=[ option:    ::  ]} ] [ long {=[ option:    ::  ]} ]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(list46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        java.util.Properties properties34 = commandLine32.getOptionProperties("hi!");
        boolean boolean36 = commandLine32.hasOption('a');
        java.lang.Object obj38 = commandLine32.getOptionObject('4');
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj38);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = posixParser0.getOptions();
        posixParser0.burstToken("arg", true);
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser39 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options40 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option45 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str46 = option45.getKey();
        java.lang.String str47 = option45.getArgName();
        java.util.List list48 = option45.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup49 = options40.getOptionGroup(option45);
        boolean boolean51 = options40.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray54 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray56 = posixParser39.flatten(options40, strArray54, true);
        java.util.Properties properties57 = null;
        org.apache.commons.cli.CommandLine commandLine59 = posixParser0.parse(options38, strArray54, properties57, false);
        java.util.Collection collection60 = options38.getOptions();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "arg" + "'", str47, "arg");
        org.junit.Assert.assertNotNull(list48);
        org.junit.Assert.assertNull(optionGroup49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(commandLine59);
        org.junit.Assert.assertNotNull(collection60);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        org.apache.commons.cli.Options options18 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options23 = options18.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options28 = options18.addOption("arg", "", false, "hi!");
        java.lang.String[] strArray35 = new java.lang.String[] { "[ option:   :: arg ]", "[ Options: [ short {} ] [ long {} ]", "hi!", "arg", "[ Options: [ short {} ] [ long {} ]", "[ Options: [ short {} ] [ long {} ]" };
        org.apache.commons.cli.CommandLine commandLine36 = posixParser0.parse(options28, strArray35);
        org.apache.commons.cli.PosixParser posixParser37 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options38 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option43 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str44 = option43.getKey();
        java.lang.String str45 = option43.getArgName();
        java.util.List list46 = option43.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup47 = options38.getOptionGroup(option43);
        boolean boolean49 = options38.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray52 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray54 = posixParser37.flatten(options38, strArray52, true);
        java.util.Properties properties55 = null;
        posixParser37.processProperties(properties55);
        org.apache.commons.cli.Options options57 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option62 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str63 = option62.getKey();
        java.lang.String str64 = option62.getArgName();
        java.util.List list65 = option62.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup66 = options57.getOptionGroup(option62);
        java.lang.String[] strArray67 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine69 = posixParser37.parse(options57, strArray67, true);
        posixParser0.cmd = commandLine69;
        org.apache.commons.cli.CommandLine commandLine71 = posixParser0.cmd;
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(commandLine36);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "arg" + "'", str45, "arg");
        org.junit.Assert.assertNotNull(list46);
        org.junit.Assert.assertNull(optionGroup47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "arg" + "'", str64, "arg");
        org.junit.Assert.assertNotNull(list65);
        org.junit.Assert.assertNull(optionGroup66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(commandLine69);
        org.junit.Assert.assertNotNull(commandLine71);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str42 = option41.getKey();
        java.lang.String str43 = option41.getArgName();
        java.util.List list44 = option41.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup45 = options36.getOptionGroup(option41);
        boolean boolean47 = options36.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray50 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray52 = posixParser35.flatten(options36, strArray50, true);
        org.apache.commons.cli.CommandLine commandLine53 = posixParser0.parse(options34, strArray52);
        org.apache.commons.cli.Options options54 = posixParser0.getOptions();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "arg" + "'", str43, "arg");
        org.junit.Assert.assertNotNull(list44);
        org.junit.Assert.assertNull(optionGroup45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(commandLine53);
        org.junit.Assert.assertNotNull(options54);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        posixParser0.checkRequiredOptions();
        org.apache.commons.cli.CommandLine commandLine34 = posixParser0.cmd;
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine34);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options39 = options34.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options44 = options34.addOption("arg", "", false, "hi!");
        posixParser0.setOptions(options44);
        org.apache.commons.cli.Options options46 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option51 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str52 = option51.getKey();
        java.lang.String str53 = option51.getArgName();
        java.util.List list54 = option51.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup55 = options46.getOptionGroup(option51);
        posixParser0.setOptions(options46);
        java.util.List list57 = posixParser0.getRequiredOptions();
        org.apache.commons.cli.CommandLine commandLine58 = new org.apache.commons.cli.CommandLine();
        java.lang.String str61 = commandLine58.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: ", "hi!");
        java.lang.Object obj63 = commandLine58.getOptionObject('4');
        java.lang.String str65 = commandLine58.getOptionValue("arg");
        boolean boolean67 = commandLine58.hasOption('\000');
        java.util.Properties properties69 = commandLine58.getOptionProperties("arg");
        posixParser0.processProperties(properties69);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options39);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "arg" + "'", str53, "arg");
        org.junit.Assert.assertNotNull(list54);
        org.junit.Assert.assertNull(optionGroup55);
        org.junit.Assert.assertNotNull(list57);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(properties69);
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = posixParser0.getOptions();
        org.apache.commons.cli.CommandLine commandLine35 = posixParser0.cmd;
        posixParser0.burstToken("[ option:   :: arg ]", true);
        org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Options options44 = options39.addOption("", "hi!", true, "hi!");
        org.apache.commons.cli.Options options49 = options39.addOption("arg", "", false, "hi!");
        org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("", "", false, "");
        boolean boolean55 = option54.hasLongOpt();
        boolean boolean56 = option54.hasArgName();
        option54.setDescription("hi!");
        org.apache.commons.cli.Options options59 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option64 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str65 = option64.getKey();
        java.lang.String str66 = option64.getArgName();
        java.util.List list67 = option64.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup68 = options59.getOptionGroup(option64);
        char char69 = option64.getValueSeparator();
        option54.setType((java.lang.Object) option64);
        org.apache.commons.cli.MissingArgumentException missingArgumentException71 = new org.apache.commons.cli.MissingArgumentException(option64);
        org.apache.commons.cli.Options options72 = options39.addOption(option64);
        java.lang.String[] strArray73 = null;
        org.apache.commons.cli.CommandLine commandLine75 = posixParser0.parse(options72, strArray73, true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(commandLine35);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(options49);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "arg" + "'", str66, "arg");
        org.junit.Assert.assertNotNull(list67);
        org.junit.Assert.assertNull(optionGroup68);
        org.junit.Assert.assertTrue("'" + char69 + "' != '" + '\000' + "'", char69 == '\000');
        org.junit.Assert.assertNotNull(options72);
        org.junit.Assert.assertNotNull(commandLine75);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.CommandLine commandLine33 = posixParser0.cmd;
        org.apache.commons.cli.Options options34 = posixParser0.getOptions();
        org.apache.commons.cli.PosixParser posixParser35 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options36 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option41 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str42 = option41.getKey();
        java.lang.String str43 = option41.getArgName();
        java.util.List list44 = option41.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup45 = options36.getOptionGroup(option41);
        boolean boolean47 = options36.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray50 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray52 = posixParser35.flatten(options36, strArray50, true);
        java.util.Properties properties53 = null;
        posixParser35.processProperties(properties53);
        org.apache.commons.cli.Options options55 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option60 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str61 = option60.getKey();
        java.lang.String str62 = option60.getArgName();
        java.util.List list63 = option60.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup64 = options55.getOptionGroup(option60);
        java.lang.String[] strArray65 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine67 = posixParser35.parse(options55, strArray65, true);
        java.util.Properties properties69 = commandLine67.getOptionProperties("hi!");
        posixParser0.processProperties(properties69);
        posixParser0.checkRequiredOptions();
        org.apache.commons.cli.CommandLine commandLine72 = new org.apache.commons.cli.CommandLine();
        java.lang.String str75 = commandLine72.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: ", "hi!");
        java.lang.Object obj77 = commandLine72.getOptionObject('4');
        java.lang.String str80 = commandLine72.getOptionValue('\000', "");
        posixParser0.cmd = commandLine72;
        org.apache.commons.cli.Option[] optionArray82 = commandLine72.getOptions();
        java.util.List list83 = commandLine72.getArgList();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(commandLine33);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "arg" + "'", str43, "arg");
        org.junit.Assert.assertNotNull(list44);
        org.junit.Assert.assertNull(optionGroup45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "arg" + "'", str62, "arg");
        org.junit.Assert.assertNotNull(list63);
        org.junit.Assert.assertNull(optionGroup64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(commandLine67);
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(optionArray82);
        org.junit.Assert.assertNotNull(list83);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        org.apache.commons.cli.Option[] optionArray33 = commandLine32.getOptions();
        boolean boolean35 = commandLine32.hasOption("org.apache.commons.cli.UnrecognizedOptionException: [ option:   :: arg ]");
        java.lang.String str37 = commandLine32.getOptionValue("org.apache.commons.cli.UnrecognizedOptionException: ");
        boolean boolean39 = commandLine32.hasOption("");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(optionArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option6 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str7 = option6.getKey();
        java.lang.String str8 = option6.getArgName();
        java.util.List list9 = option6.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup10 = options1.getOptionGroup(option6);
        boolean boolean12 = options1.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray15 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray17 = posixParser0.flatten(options1, strArray15, true);
        java.util.Properties properties18 = null;
        posixParser0.processProperties(properties18);
        org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option25 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str26 = option25.getKey();
        java.lang.String str27 = option25.getArgName();
        java.util.List list28 = option25.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup29 = options20.getOptionGroup(option25);
        java.lang.String[] strArray30 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine32 = posixParser0.parse(options20, strArray30, true);
        java.util.Properties properties34 = commandLine32.getOptionProperties("hi!");
        org.apache.commons.cli.Option option39 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str40 = option39.getKey();
        boolean boolean41 = option39.isRequired();
        java.lang.String[] strArray42 = option39.getValues();
        commandLine32.addOption(option39);
        java.lang.Object obj45 = commandLine32.getOptionObject('\000');
        org.apache.commons.cli.PosixParser posixParser46 = new org.apache.commons.cli.PosixParser();
        org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option52 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str53 = option52.getKey();
        java.lang.String str54 = option52.getArgName();
        java.util.List list55 = option52.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup56 = options47.getOptionGroup(option52);
        boolean boolean58 = options47.hasOption("[ Options: [ short {} ] [ long {} ]");
        java.lang.String[] strArray61 = new java.lang.String[] { "arg", "hi!" };
        java.lang.String[] strArray63 = posixParser46.flatten(options47, strArray61, true);
        java.util.Properties properties64 = null;
        posixParser46.processProperties(properties64);
        org.apache.commons.cli.Options options66 = new org.apache.commons.cli.Options();
        org.apache.commons.cli.Option option71 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str72 = option71.getKey();
        java.lang.String str73 = option71.getArgName();
        java.util.List list74 = option71.getValuesList();
        org.apache.commons.cli.OptionGroup optionGroup75 = options66.getOptionGroup(option71);
        java.lang.String[] strArray76 = new java.lang.String[] {};
        org.apache.commons.cli.CommandLine commandLine78 = posixParser46.parse(options66, strArray76, true);
        java.util.Properties properties80 = commandLine78.getOptionProperties("hi!");
        org.apache.commons.cli.Option option85 = new org.apache.commons.cli.Option("", "", false, "");
        java.lang.String str86 = option85.getKey();
        boolean boolean87 = option85.isRequired();
        java.lang.String[] strArray88 = option85.getValues();
        commandLine78.addOption(option85);
        commandLine32.addOption(option85);
        java.lang.String str91 = option85.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg");
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNull(optionGroup10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "arg" + "'", str27, "arg");
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNull(optionGroup29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(commandLine32);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(strArray42);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "arg" + "'", str54, "arg");
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNull(optionGroup56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "arg" + "'", str73, "arg");
        org.junit.Assert.assertNotNull(list74);
        org.junit.Assert.assertNull(optionGroup75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(commandLine78);
        org.junit.Assert.assertNotNull(properties80);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(strArray88);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "[ option:    ::  ]" + "'", str91, "[ option:    ::  ]");
    }
}

