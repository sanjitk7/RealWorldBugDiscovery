/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 02 00:16:50 GMT 2024
 */

package org.apache.commons.collections4.trie;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.SortedMap;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
import org.apache.commons.collections4.trie.PatriciaTrie;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractPatriciaTrie_ESTest extends AbstractPatriciaTrie_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.subMap("[#wN&$", "[#wN&$");
      assertTrue(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie0.mapIterator();
      assertFalse(orderedMapIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Comparator<? super String> comparator0 = patriciaTrie0.comparator();
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      SortedMap<String, Integer> sortedMap0 = patriciaTrie0.prefixMap(" is not an external Entry!");
      Integer integer0 = new Integer((-1483));
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(sortedMap0, integer0, (-1483));
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key={} [-1483], value=-1483, parent=null, left={} [-1483], right=null, predecessor={} [-1483])", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      patriciaTrie0.clear();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = patriciaTrie0.put(" is not an external Entry!", (Integer) null);
      SortedMap<String, Integer> sortedMap0 = patriciaTrie0.prefixMap(" is not an external Entry!");
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(sortedMap0, integer0, (-1483));
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key={ is not an external Entry!=null} [-1483], value=null, parent=null, left={ is not an external Entry!=null} [-1483], right=null, predecessor={ is not an external Entry!=null} [-1483])", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(385);
      Collection<Integer> collection0 = patriciaTrie0.values();
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>((Object) null, integer0, 0);
      abstractPatriciaTrie_TrieEntry0.key = (Object) collection0;
      abstractPatriciaTrie_TrieEntry0.toString();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put(" -> ", (Integer) null);
      Integer integer0 = patriciaTrie0.selectValue("NxLArK@8{.R");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      // Undeclared exception!
      try { 
        patriciaTrie0.put((String) null, "The offsets and lengths must be at Character boundaries");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", " is not an external Entry!");
      String string0 = patriciaTrie0.put("", (String) null);
      assertEquals(" is not an external Entry!", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("org.apache.commons.collecions4.trie.AbstractPatriciaTrie$Reference", "=`,x*;XR");
      patriciaTrie0.put("jbK{Kwl\"", "jbK{Kwl\"");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("`s%2Gd9e(}Z|wv[*f");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("jbK{Kwl\"", "jbK{Kwl\"");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("&%=Jd(q^ak#u");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("ex{m:_p;IV0E!Icc&", "ex{m:_p;IV0E!Icc&");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      Object object0 = patriciaTrie1.replace("ex{m:_p;IV0E!Icc&", (Object) null);
      assertEquals("ex{m:_p;IV0E!Icc&", object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(385);
      boolean boolean0 = patriciaTrie0.replace((String) null, integer0, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer((-1093));
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("MbS9Xlv", integer0);
      String string0 = patriciaTrie0.nextKey("^dk57bd");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(1310);
      patriciaTrie0.put("Cannot delete root Entry!", integer0);
      String string0 = patriciaTrie0.selectKey("Cannot delete root Entry!");
      assertEquals("Cannot delete root Entry!", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      String string0 = patriciaTrie0.selectKey(".T$N`f5kR;-^");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = patriciaTrie0.selectValue("0.\"");
      assertNull(abstractMap_SimpleEntry0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(304);
      patriciaTrie0.put("o}o t", integer0);
      patriciaTrie0.put("MbS9Xlv", integer0);
      Map.Entry<String, Integer> map_Entry0 = patriciaTrie0.select("MbS9Xlv");
      assertNotNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      boolean boolean0 = patriciaTrie0.containsKey("ERX@9lhSh4M|v");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      boolean boolean0 = patriciaTrie0.containsKey((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("Cannot determine prefix outside of Character boundaries", "ERX@9lhSh4M|v");
      boolean boolean0 = patriciaTrie0.containsKey("ERX@9lhSh4M|v");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("  ", "");
      boolean boolean0 = patriciaTrie0.containsKey("  ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.entrySet();
      PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>(patriciaTrie0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Set<String> set0 = patriciaTrie0.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = patriciaTrie0.remove((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer(0);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put(".f%Qa:|\"^d}GQh0_WS'", integer0);
      Integer integer1 = patriciaTrie0.remove((Object) "KT{-F`h{%O*<E");
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(921);
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator", integer0);
      Integer integer1 = patriciaTrie0.remove((Object) "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator");
      assertEquals(921, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(921);
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet", integer0);
      Integer integer1 = patriciaTrie0.remove((Object) "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator");
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      // Undeclared exception!
      try { 
        patriciaTrie0.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, Object>) null, (AbstractPatriciaTrie.TrieEntry<String, Object>) null, (AbstractPatriciaTrie.TrieEntry<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>(" -> ", "", 0);
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 0);
      // Undeclared exception!
      patriciaTrie0.higherEntry("7A'P1$3`j6DZ_=8oi=d");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, (String) null, 2019);
      patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("[w7A", "2n`");
      patriciaTrie0.put("]={\n", "Trie[");
      PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>(patriciaTrie0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("LO8l)KyQg#>", "");
      patriciaTrie0.firstKey();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      // Undeclared exception!
      try { 
        patriciaTrie0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      // Undeclared exception!
      try { 
        patriciaTrie0.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      Integer integer0 = new Integer((-911));
      patriciaTrie0.put("invalid lookup: ", integer0);
      patriciaTrie0.lastKey();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      // Undeclared exception!
      try { 
        patriciaTrie0.nextKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-1093));
      patriciaTrie0.put("MbS9Xlv", integer0);
      patriciaTrie0.nextKey("MbS9Xlv");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(304);
      Integer integer1 = patriciaTrie0.put("o}o t", integer0);
      patriciaTrie0.put("MbS9Xlv", integer1);
      patriciaTrie0.nextKey("MbS9Xlv");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.previousKey("Cannot determine prefix outside of Character boundaries");
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>(patriciaTrie0);
      // Undeclared exception!
      try { 
        patriciaTrie1.previousKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Cannot determine prefix outside of Character boundaries", "Cannot determine prefix outside of Character boundaries");
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.previousKey("Cannot determine prefix outside of Character boundaries");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Cannot determine prefix outside of Character boundaries", "21z7H[3]AB6");
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.put("fs^4$*RY", "fs^4$*RY");
      patriciaTrie0.previousKey("fs^4$*RY");
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      patriciaTrie0.prefixMap("");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.higherEntry((String) null);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "");
      patriciaTrie0.higherEntry((String) null);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("jbK{Kwl\"", "jbK{Kwl\"");
      patriciaTrie0.put("", "");
      patriciaTrie0.higherEntry((String) null);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("jbK{Kwl\"", "jbK{Kwl\"");
      patriciaTrie0.higherEntry("jbK{Kwl\"");
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      patriciaTrie0.ceilingEntry((String) null);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      Integer integer0 = new Integer((-1));
      patriciaTrie0.put("", integer0);
      patriciaTrie0.ceilingEntry((String) null);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("[w7A", "2n`");
      SortedMap<String, String> sortedMap0 = patriciaTrie0.tailMap("[w7A");
      Integer integer0 = new Integer(1695);
      AbstractPatriciaTrie.TrieEntry<Comparable<Integer>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Comparable<Integer>, Object>(integer0, sortedMap0, 1);
      abstractPatriciaTrie_TrieEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.lowerEntry("");
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      patriciaTrie0.put("RU*", "RU*");
      patriciaTrie0.lowerEntry("RU*");
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.floorEntry("Cannot determine prefix outside of Character boundaries");
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.floorEntry("");
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "P}1!HDC$=6f2X");
      patriciaTrie0.floorEntry("");
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      Integer integer0 = new Integer((-3994));
      patriciaTrie0.put("&cG4FFv7<cPp", integer0);
      patriciaTrie0.floorEntry("&cG4FFv7<cPp");
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      Integer integer0 = new Integer(16);
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, integer0, 16);
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractPatriciaTrie_TrieEntry0);
      patriciaTrie0.put("]UX", abstractMap_SimpleImmutableEntry0);
      patriciaTrie0.subtree("]UX", 16, 0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Integer integer0 = new Integer((-3042));
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, integer0, (-3042));
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractPatriciaTrie_TrieEntry0);
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      patriciaTrie0.put("ex{7m:,p;dV0!Icc&", abstractMap_SimpleImmutableEntry0);
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree((String) null, 0, 79);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offsets and lengths must be at Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PatriciaTrie<Comparable<Object>> patriciaTrie0 = new PatriciaTrie<Comparable<Object>>();
      patriciaTrie0.subtree("", (-1049), (-3));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Integer integer0 = new Integer(160);
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, "Failed to put: ", 160);
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractPatriciaTrie_TrieEntry0);
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      patriciaTrie0.put("", abstractMap_SimpleImmutableEntry0);
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("org.apache.commons.collect#ons4.trie.%bstractPatriciaTrie$EntrySet", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, (Object) null, 16);
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractPatriciaTrie_TrieEntry0);
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      patriciaTrie0.put("", abstractMap_SimpleImmutableEntry0);
      patriciaTrie0.subtree("pZ3pEoS1T[qS.W", 16, 0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      Integer integer0 = new Integer(16);
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, integer0, 16);
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractPatriciaTrie_TrieEntry0);
      patriciaTrie0.put("o6NJ}XJ,y7`sF|3X8", abstractMap_SimpleImmutableEntry0);
      patriciaTrie0.subtree("o6NJ}XJ,y7`sF|3X8", 64, 64);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      Integer integer0 = new Integer(16);
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, integer0, 16);
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractPatriciaTrie_TrieEntry0);
      patriciaTrie0.put("RU*", abstractMap_SimpleImmutableEntry0);
      patriciaTrie0.subtree("RU*", 16, 0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>(patriciaTrie0);
      patriciaTrie1.put("4Sk", "4Sk");
      patriciaTrie1.put(", ", "4Sk");
      patriciaTrie1.lowerEntry("predecessor=");
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-1));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("V", integer0, (-1));
      patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      patriciaTrie0.put("=9", "=9");
      patriciaTrie0.put(", ", " is not an external Entry!");
      patriciaTrie0.lowerEntry(" is not an external Entry!");
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>(patriciaTrie0);
      patriciaTrie1.put("Cannot determine prefix outside of Character boundaries", "Cannot determine prefix outside of Character boundaries");
      patriciaTrie1.put("m/uAF5x9cNoW%;6dD", (Comparable<String>) null);
      patriciaTrie1.lowerEntry("gE23I[U!1nEp");
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>(patriciaTrie0);
      patriciaTrie1.put("", "");
      patriciaTrie1.put(", ", " is not an external Entry!");
      patriciaTrie1.lowerEntry(" is not an external Entry!");
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 1);
      patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(1216);
      AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Integer>(comparable0, integer0, 1216);
      AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Integer>(abstractPatriciaTrie_TrieEntry0.key, integer0, (-1));
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.isExternalNode();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("N7Ee_E2aZw7gRjqPd", "N7Ee_E2aZw7gRjqPd", (-1));
      abstractPatriciaTrie_TrieEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("LO8l)KyQg#>", "");
      patriciaTrie0.toString();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(770);
      patriciaTrie0.put("=", integer0);
      patriciaTrie0.put("T#OS@^i", (Integer) null);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("NxLArK@8{.R");
      abstractPatriciaTrie_TrieEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      // Undeclared exception!
      try { 
        patriciaTrie0.subMap((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      // Undeclared exception!
      try { 
        patriciaTrie0.subMap("]", "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      SortedMap<String, String> sortedMap0 = patriciaTrie0.headMap("ex{7m:,p;dV0!Icc&");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.getOrDefault(sortedMap0, "ex{7m:,p;dV0!Icc&");
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      SortedMap<String, String> sortedMap0 = patriciaTrie0.headMap("ex{7m:,p;dV0!Icc&");
      patriciaTrie0.put("ex{7m:,p;dV0!Icc&", "ex{7m:,p;dV0!Icc&");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.getOrDefault(sortedMap0, "ex{7m:,p;dV0!Icc&");
  }
}
