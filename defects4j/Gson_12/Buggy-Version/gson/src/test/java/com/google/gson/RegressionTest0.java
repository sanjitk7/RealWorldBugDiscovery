package com.google.gson.internal.bind;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.skipValue();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = jsonTreeReader2.nextName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NAME but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.skipValue();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.nextNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NULL but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.beginObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BEGIN_OBJECT but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.endObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected END_OBJECT but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        // The following exception was thrown during execution in test generation
        try {
            double double5 = jsonTreeReader2.nextDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.JsonArray jsonArray2 = new com.google.gson.JsonArray();
        int int3 = jsonArray2.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader4 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray2);
        jsonTreeReader4.beginArray();
        jsonTreeReader4.skipValue();
        java.lang.String str7 = jsonTreeReader4.getPath();
        jsonTreeReader4.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess9;
        // The following exception was thrown during execution in test generation
        try {
            com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess11 = autoCloseableMap0.put((java.lang.AutoCloseable) jsonTreeReader4, jsonReaderInternalAccess9);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.gson.internal.bind.JsonTreeReader is not Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "$" + "'", str7, "$");
        org.junit.Assert.assertNotNull(jsonReaderInternalAccess9);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        jsonTreeReader2.beginArray();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.beginArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BEGIN_ARRAY but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        boolean boolean7 = jsonTreeReader2.hasNext();
        jsonTreeReader2.beginArray();
        // The following exception was thrown during execution in test generation
        try {
            int int9 = jsonTreeReader2.nextInt();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        // The following exception was thrown during execution in test generation
        try {
            long long5 = jsonTreeReader2.nextLong();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            long long6 = jsonTreeReader2.nextLong();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        // The following exception was thrown during execution in test generation
        try {
            int int5 = jsonTreeReader2.nextInt();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.nextNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NULL but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = jsonTreeReader2.nextName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NAME but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = jsonTreeReader7.nextInt();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.endArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected END_ARRAY but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        // The following exception was thrown during execution in test generation
        try {
            int int6 = jsonTreeReader2.nextInt();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess0 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.JsonArray jsonArray1 = new com.google.gson.JsonArray();
        int int2 = jsonArray1.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader3 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray1);
        jsonTreeReader3.skipValue();
        boolean boolean5 = jsonTreeReader3.isLenient();
        // The following exception was thrown during execution in test generation
        try {
            jsonReaderInternalAccess0.promoteNameToValue((com.google.gson.stream.JsonReader) jsonTreeReader3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NAME but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReaderInternalAccess0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        com.google.gson.stream.JsonToken jsonToken4 = jsonTreeReader2.peek();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = jsonTreeReader2.nextString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected STRING but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken4 + "' != '" + com.google.gson.stream.JsonToken.END_ARRAY + "'", jsonToken4.equals(com.google.gson.stream.JsonToken.END_ARRAY));
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        com.google.gson.JsonObject jsonObject11 = new com.google.gson.JsonObject();
        com.google.gson.JsonPrimitive jsonPrimitive13 = jsonObject11.getAsJsonPrimitive("com.google.gson.stream.MalformedJsonException: ");
        boolean boolean15 = autoCloseableMap2.remove((java.lang.Object) jsonObject11, (java.lang.Object) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            byte byte16 = jsonObject11.getAsByte();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: JsonObject");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertNull(jsonPrimitive13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.skipValue();
        com.google.gson.stream.JsonToken jsonToken4 = jsonTreeReader2.peek();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.nextNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NULL but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken4 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken4.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        jsonTreeReader7.skipValue();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader7.nextNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NULL but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        java.lang.String str4 = jsonTreeReader2.getPath();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = jsonTreeReader2.nextBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BOOLEAN but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "$[0]" + "'", str4, "$[0]");
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        com.google.gson.JsonObject jsonObject11 = new com.google.gson.JsonObject();
        com.google.gson.JsonPrimitive jsonPrimitive13 = jsonObject11.getAsJsonPrimitive("com.google.gson.stream.MalformedJsonException: ");
        boolean boolean15 = autoCloseableMap2.remove((java.lang.Object) jsonObject11, (java.lang.Object) 1.0f);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap16 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int17 = autoCloseableMap16.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap18 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int19 = autoCloseableMap18.size();
        autoCloseableMap16.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap18);
        com.google.gson.JsonArray jsonArray21 = new com.google.gson.JsonArray();
        int int22 = jsonArray21.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader23 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray21);
        jsonTreeReader23.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess25 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess26 = autoCloseableMap18.replace((java.lang.AutoCloseable) jsonTreeReader23, jsonReaderInternalAccess25);
        boolean boolean27 = jsonTreeReader23.hasNext();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap28 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int29 = autoCloseableMap28.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap30 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int31 = autoCloseableMap30.size();
        autoCloseableMap28.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap30);
        com.google.gson.JsonArray jsonArray33 = new com.google.gson.JsonArray();
        int int34 = jsonArray33.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader35 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray33);
        jsonTreeReader35.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess37 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess38 = autoCloseableMap30.replace((java.lang.AutoCloseable) jsonTreeReader35, jsonReaderInternalAccess37);
        // The following exception was thrown during execution in test generation
        try {
            com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess39 = autoCloseableMap2.put((java.lang.AutoCloseable) jsonTreeReader23, jsonReaderInternalAccess37);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.gson.internal.bind.JsonTreeReader is not Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertNull(jsonPrimitive13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccess25);
        org.junit.Assert.assertNull(jsonReaderInternalAccess26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccess37);
        org.junit.Assert.assertNull(jsonReaderInternalAccess38);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.lang.Object obj5 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess6 = autoCloseableMap0.remove(obj5);
        java.util.Collection<com.google.gson.internal.JsonReaderInternalAccess> jsonReaderInternalAccessCollection7 = autoCloseableMap0.values();
        com.google.gson.JsonArray jsonArray8 = new com.google.gson.JsonArray();
        int int9 = jsonArray8.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader10 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray8);
        jsonTreeReader10.skipValue();
        com.google.gson.stream.JsonToken jsonToken12 = jsonTreeReader10.peek();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess13 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        // The following exception was thrown during execution in test generation
        try {
            com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess14 = autoCloseableMap0.putIfAbsent((java.lang.AutoCloseable) jsonTreeReader10, jsonReaderInternalAccess13);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.gson.internal.bind.JsonTreeReader is not Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess6);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccessCollection7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken12 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken12.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
        org.junit.Assert.assertNotNull(jsonReaderInternalAccess13);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = jsonTreeReader2.nextDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = jsonTreeReader2.nextName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NAME but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        boolean boolean11 = jsonTreeReader7.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = jsonTreeReader7.nextDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        boolean boolean7 = jsonTreeReader2.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            long long8 = jsonTreeReader2.nextLong();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        boolean boolean11 = jsonTreeReader7.hasNext();
        jsonTreeReader7.close();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader7.nextNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: JsonReader is closed");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        boolean boolean3 = jsonTreeReader2.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.endObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected END_OBJECT but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        // The following exception was thrown during execution in test generation
        try {
            long long4 = jsonTreeReader2.nextLong();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        boolean boolean3 = jsonTreeReader2.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            int int4 = jsonTreeReader2.nextInt();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        boolean boolean11 = jsonTreeReader7.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = jsonTreeReader7.nextString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected STRING but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        boolean boolean11 = jsonTreeReader7.hasNext();
        jsonTreeReader7.close();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader7.beginArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: JsonReader is closed");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        jsonTreeReader7.skipValue();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = jsonTreeReader7.nextBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BOOLEAN but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet5 = autoCloseableMap0.keySet();
        int int6 = autoCloseableMap0.size();
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        int int8 = jsonArray7.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader9 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray7);
        jsonTreeReader9.beginArray();
        java.lang.String str11 = jsonTreeReader9.getPath();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap12 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int13 = autoCloseableMap12.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap14 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int15 = autoCloseableMap14.size();
        autoCloseableMap12.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap14);
        java.lang.Object obj17 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess18 = autoCloseableMap12.remove(obj17);
        com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number21 = jsonPrimitive20.getAsNumber();
        boolean boolean22 = autoCloseableMap12.containsKey((java.lang.Object) number21);
        com.google.gson.JsonPrimitive jsonPrimitive24 = new com.google.gson.JsonPrimitive("");
        boolean boolean25 = jsonPrimitive24.isJsonNull();
        boolean boolean27 = jsonPrimitive24.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean28 = jsonPrimitive24.isString();
        java.lang.Number number29 = jsonPrimitive24.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess30 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess30;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess32 = autoCloseableMap12.getOrDefault((java.lang.Object) jsonPrimitive24, jsonReaderInternalAccess30);
        // The following exception was thrown during execution in test generation
        try {
            com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess33 = autoCloseableMap0.putIfAbsent((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess32);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.gson.internal.bind.JsonTreeReader is not Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(autoCloseableSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "$[0]" + "'", str11, "$[0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess18);
        org.junit.Assert.assertNotNull(number21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(number29);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccess30);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccess32);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        jsonTreeReader2.beginArray();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.endObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected END_OBJECT but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.stream.MalformedJsonException malformedJsonException6 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException7 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException6);
        com.google.gson.stream.MalformedJsonException malformedJsonException8 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException6);
        com.google.gson.stream.MalformedJsonException malformedJsonException9 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable) malformedJsonException8);
        boolean boolean10 = autoCloseableMap0.equals((java.lang.Object) malformedJsonException9);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap11 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int12 = autoCloseableMap11.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap13 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int14 = autoCloseableMap13.size();
        autoCloseableMap11.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap13);
        com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
        int int17 = jsonArray16.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader18 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray16);
        jsonTreeReader18.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess20 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess21 = autoCloseableMap13.replace((java.lang.AutoCloseable) jsonTreeReader18, jsonReaderInternalAccess20);
        boolean boolean22 = jsonTreeReader18.hasNext();
        jsonTreeReader18.close();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap24 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int25 = autoCloseableMap24.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap26 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int27 = autoCloseableMap26.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap28 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int29 = autoCloseableMap28.size();
        autoCloseableMap26.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap28);
        com.google.gson.JsonArray jsonArray31 = new com.google.gson.JsonArray();
        int int32 = jsonArray31.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader33 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray31);
        jsonTreeReader33.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess35 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess36 = autoCloseableMap28.replace((java.lang.AutoCloseable) jsonTreeReader33, jsonReaderInternalAccess35);
        boolean boolean37 = jsonTreeReader33.hasNext();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess38 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess39 = autoCloseableMap24.replace((java.lang.AutoCloseable) jsonTreeReader33, jsonReaderInternalAccess38);
        // The following exception was thrown during execution in test generation
        try {
            com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess40 = autoCloseableMap0.putIfAbsent((java.lang.AutoCloseable) jsonTreeReader18, jsonReaderInternalAccess39);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.gson.internal.bind.JsonTreeReader is not Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccess20);
        org.junit.Assert.assertNull(jsonReaderInternalAccess21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccess35);
        org.junit.Assert.assertNull(jsonReaderInternalAccess36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccess38);
        org.junit.Assert.assertNull(jsonReaderInternalAccess39);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        boolean boolean7 = jsonTreeReader2.hasNext();
        jsonTreeReader2.beginArray();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = jsonTreeReader2.nextString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected STRING but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        boolean boolean7 = jsonTreeReader2.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = jsonTreeReader2.nextName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NAME but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.skipValue();
        // The following exception was thrown during execution in test generation
        try {
            double double4 = jsonTreeReader2.nextDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive("");
        boolean boolean2 = jsonPrimitive1.isJsonNull();
        boolean boolean3 = jsonPrimitive1.isNumber();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap4 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int5 = autoCloseableMap4.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap6 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int7 = autoCloseableMap6.size();
        autoCloseableMap4.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap6);
        com.google.gson.JsonArray jsonArray9 = new com.google.gson.JsonArray();
        int int10 = jsonArray9.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader11 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray9);
        jsonTreeReader11.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess13 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess14 = autoCloseableMap6.replace((java.lang.AutoCloseable) jsonTreeReader11, jsonReaderInternalAccess13);
        jsonTreeReader11.skipValue();
        boolean boolean16 = jsonTreeReader11.hasNext();
        boolean boolean17 = jsonPrimitive1.equals((java.lang.Object) jsonTreeReader11);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = jsonTreeReader11.nextBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BOOLEAN but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccess13);
        org.junit.Assert.assertNull(jsonReaderInternalAccess14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        // The following exception was thrown during execution in test generation
        try {
            long long3 = jsonTreeReader2.nextLong();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        com.google.gson.stream.JsonToken jsonToken4 = jsonTreeReader2.peek();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.endObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected END_OBJECT but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken4 + "' != '" + com.google.gson.stream.JsonToken.END_ARRAY + "'", jsonToken4.equals(com.google.gson.stream.JsonToken.END_ARRAY));
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        jsonTreeReader2.beginArray();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.nextNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NULL but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        boolean boolean7 = jsonTreeReader2.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = jsonTreeReader2.nextDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        boolean boolean11 = jsonTreeReader7.hasNext();
        jsonTreeReader7.close();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader7.beginObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: JsonReader is closed");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap4 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int5 = autoCloseableMap4.size();
        autoCloseableMap2.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap4);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        int int8 = jsonArray7.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader9 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray7);
        jsonTreeReader9.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess11 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess12 = autoCloseableMap4.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess11);
        boolean boolean13 = jsonTreeReader9.hasNext();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess14 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess15 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess14);
        jsonTreeReader9.skipValue();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = jsonTreeReader9.nextString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected STRING but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccess11);
        org.junit.Assert.assertNull(jsonReaderInternalAccess12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccess14);
        org.junit.Assert.assertNull(jsonReaderInternalAccess15);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        com.google.gson.stream.JsonToken jsonToken4 = jsonTreeReader2.peek();
        // The following exception was thrown during execution in test generation
        try {
            long long5 = jsonTreeReader2.nextLong();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken4 + "' != '" + com.google.gson.stream.JsonToken.END_ARRAY + "'", jsonToken4.equals(com.google.gson.stream.JsonToken.END_ARRAY));
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        java.lang.String str4 = jsonTreeReader2.getPath();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = jsonTreeReader2.nextName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NAME but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "$[0]" + "'", str4, "$[0]");
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        boolean boolean7 = jsonTreeReader2.hasNext();
        jsonTreeReader2.beginArray();
        java.lang.String str9 = jsonTreeReader2.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JsonTreeReader" + "'", str9, "JsonTreeReader");
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet5 = autoCloseableMap0.entrySet();
        com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
        int int7 = jsonArray6.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader8 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray6);
        jsonTreeReader8.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess11 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader8, jsonReaderInternalAccess10);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = jsonTreeReader8.nextDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertNull(jsonReaderInternalAccess11);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive("");
        boolean boolean2 = jsonPrimitive1.isJsonNull();
        boolean boolean3 = jsonPrimitive1.isNumber();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap4 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int5 = autoCloseableMap4.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap6 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int7 = autoCloseableMap6.size();
        autoCloseableMap4.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap6);
        com.google.gson.JsonArray jsonArray9 = new com.google.gson.JsonArray();
        int int10 = jsonArray9.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader11 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray9);
        jsonTreeReader11.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess13 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess14 = autoCloseableMap6.replace((java.lang.AutoCloseable) jsonTreeReader11, jsonReaderInternalAccess13);
        jsonTreeReader11.skipValue();
        boolean boolean16 = jsonTreeReader11.hasNext();
        boolean boolean17 = jsonPrimitive1.equals((java.lang.Object) jsonTreeReader11);
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader11.nextNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NULL but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccess13);
        org.junit.Assert.assertNull(jsonReaderInternalAccess14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet5 = autoCloseableMap0.entrySet();
        com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
        int int7 = jsonArray6.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader8 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray6);
        jsonTreeReader8.skipValue();
        boolean boolean10 = jsonTreeReader8.isLenient();
        java.lang.String str11 = jsonTreeReader8.getPath();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap12 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int13 = autoCloseableMap12.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap14 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int15 = autoCloseableMap14.size();
        autoCloseableMap12.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap14);
        java.lang.Object obj17 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess18 = autoCloseableMap12.remove(obj17);
        com.google.gson.JsonPrimitive jsonPrimitive20 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number21 = jsonPrimitive20.getAsNumber();
        boolean boolean22 = autoCloseableMap12.containsKey((java.lang.Object) number21);
        com.google.gson.JsonPrimitive jsonPrimitive24 = new com.google.gson.JsonPrimitive("");
        boolean boolean25 = jsonPrimitive24.isJsonNull();
        boolean boolean27 = jsonPrimitive24.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean28 = jsonPrimitive24.isString();
        java.lang.Number number29 = jsonPrimitive24.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess30 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess30;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess32 = autoCloseableMap12.getOrDefault((java.lang.Object) jsonPrimitive24, jsonReaderInternalAccess30);
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess30;
        // The following exception was thrown during execution in test generation
        try {
            com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess34 = autoCloseableMap0.put((java.lang.AutoCloseable) jsonTreeReader8, jsonReaderInternalAccess30);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.gson.internal.bind.JsonTreeReader is not Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "$" + "'", str11, "$");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess18);
        org.junit.Assert.assertNotNull(number21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(number29);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccess30);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccess32);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        boolean boolean11 = jsonTreeReader7.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader7.nextNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NULL but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess0 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess0;
        com.google.gson.JsonArray jsonArray2 = new com.google.gson.JsonArray();
        int int3 = jsonArray2.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader4 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray2);
        jsonTreeReader4.beginArray();
        jsonTreeReader4.skipValue();
        java.lang.String str7 = jsonTreeReader4.getPath();
        jsonTreeReader4.beginArray();
        // The following exception was thrown during execution in test generation
        try {
            jsonReaderInternalAccess0.promoteNameToValue((com.google.gson.stream.JsonReader) jsonTreeReader4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NAME but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReaderInternalAccess0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "$" + "'", str7, "$");
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        boolean boolean11 = jsonTreeReader7.hasNext();
        jsonTreeReader7.close();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader7.endArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: JsonReader is closed");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        com.google.gson.stream.JsonToken jsonToken7 = jsonTreeReader2.peek();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.endArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected END_ARRAY but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + jsonToken7 + "' != '" + com.google.gson.stream.JsonToken.BEGIN_ARRAY + "'", jsonToken7.equals(com.google.gson.stream.JsonToken.BEGIN_ARRAY));
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.skipValue();
        boolean boolean4 = jsonTreeReader2.isLenient();
        java.lang.String str5 = jsonTreeReader2.getPath();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = jsonTreeReader2.nextString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected STRING but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.endObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected END_OBJECT but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap4 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int5 = autoCloseableMap4.size();
        autoCloseableMap2.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap4);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        int int8 = jsonArray7.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader9 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray7);
        jsonTreeReader9.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess11 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess12 = autoCloseableMap4.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess11);
        boolean boolean13 = jsonTreeReader9.hasNext();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess14 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess15 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess14);
        jsonTreeReader9.skipValue();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader9.nextNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NULL but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess11);
        org.junit.Assert.assertNull(jsonReaderInternalAccess12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess14);
        org.junit.Assert.assertNull(jsonReaderInternalAccess15);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap4 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int5 = autoCloseableMap4.size();
        autoCloseableMap2.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap4);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        int int8 = jsonArray7.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader9 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray7);
        jsonTreeReader9.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess11 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess12 = autoCloseableMap4.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess11);
        boolean boolean13 = jsonTreeReader9.hasNext();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess14 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess15 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess14);
        com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
        int int17 = jsonArray16.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader18 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray16);
        jsonTreeReader18.beginArray();
        java.lang.String str20 = jsonTreeReader18.getPath();
        java.lang.String str21 = jsonTreeReader18.getPath();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap22 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int23 = autoCloseableMap22.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap24 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int25 = autoCloseableMap24.size();
        autoCloseableMap22.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap24);
        java.lang.Object obj27 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess28 = autoCloseableMap22.remove(obj27);
        com.google.gson.JsonPrimitive jsonPrimitive30 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number31 = jsonPrimitive30.getAsNumber();
        boolean boolean32 = autoCloseableMap22.containsKey((java.lang.Object) number31);
        com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive("");
        boolean boolean35 = jsonPrimitive34.isJsonNull();
        boolean boolean37 = jsonPrimitive34.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean38 = jsonPrimitive34.isString();
        java.lang.Number number39 = jsonPrimitive34.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess40 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess40;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess42 = autoCloseableMap22.getOrDefault((java.lang.Object) jsonPrimitive34, jsonReaderInternalAccess40);
        // The following exception was thrown during execution in test generation
        try {
            com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess43 = autoCloseableMap0.put((java.lang.AutoCloseable) jsonTreeReader18, jsonReaderInternalAccess40);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.gson.internal.bind.JsonTreeReader is not Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess11);
        org.junit.Assert.assertNull(jsonReaderInternalAccess12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess14);
        org.junit.Assert.assertNull(jsonReaderInternalAccess15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "$[0]" + "'", str20, "$[0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "$[0]" + "'", str21, "$[0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess28);
        org.junit.Assert.assertNotNull(number31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(number39);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess40);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess42);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive("");
        boolean boolean2 = jsonPrimitive1.isJsonNull();
        boolean boolean3 = jsonPrimitive1.isNumber();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap4 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int5 = autoCloseableMap4.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap6 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int7 = autoCloseableMap6.size();
        autoCloseableMap4.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap6);
        com.google.gson.JsonArray jsonArray9 = new com.google.gson.JsonArray();
        int int10 = jsonArray9.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader11 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray9);
        jsonTreeReader11.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess13 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess14 = autoCloseableMap6.replace((java.lang.AutoCloseable) jsonTreeReader11, jsonReaderInternalAccess13);
        jsonTreeReader11.skipValue();
        boolean boolean16 = jsonTreeReader11.hasNext();
        boolean boolean17 = jsonPrimitive1.equals((java.lang.Object) jsonTreeReader11);
        java.lang.String str18 = jsonTreeReader11.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = jsonTreeReader11.nextName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NAME but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess13);
        org.junit.Assert.assertNull(jsonReaderInternalAccess14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JsonTreeReader" + "'", str18, "JsonTreeReader");
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        boolean boolean11 = jsonTreeReader7.hasNext();
        jsonTreeReader7.close();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader7.endObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: JsonReader is closed");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.setLenient(false);
        jsonTreeReader2.close();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        boolean boolean7 = jsonTreeReader2.hasNext();
        jsonTreeReader2.beginArray();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = jsonTreeReader2.nextBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BOOLEAN but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        boolean boolean11 = jsonTreeReader7.hasNext();
        jsonTreeReader7.close();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = jsonTreeReader7.nextDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: JsonReader is closed");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.skipValue();
        com.google.gson.stream.JsonToken jsonToken4 = jsonTreeReader2.peek();
        java.lang.String str5 = jsonTreeReader2.toString();
        jsonTreeReader2.setLenient(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = jsonTreeReader2.nextString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected STRING but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken4 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken4.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JsonTreeReader" + "'", str5, "JsonTreeReader");
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        com.google.gson.JsonObject jsonObject11 = new com.google.gson.JsonObject();
        com.google.gson.JsonPrimitive jsonPrimitive13 = jsonObject11.getAsJsonPrimitive("com.google.gson.stream.MalformedJsonException: ");
        boolean boolean15 = autoCloseableMap2.remove((java.lang.Object) jsonObject11, (java.lang.Object) 1.0f);
        com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
        int int17 = jsonArray16.size();
        com.google.gson.JsonPrimitive jsonPrimitive19 = new com.google.gson.JsonPrimitive("");
        boolean boolean20 = jsonPrimitive19.isJsonNull();
        boolean boolean21 = jsonPrimitive19.isNumber();
        boolean boolean22 = jsonArray16.remove((com.google.gson.JsonElement) jsonPrimitive19);
        com.google.gson.JsonArray jsonArray23 = new com.google.gson.JsonArray();
        jsonArray23.add((java.lang.Number) (-1.0f));
        boolean boolean26 = jsonArray16.equals((java.lang.Object) jsonArray23);
        jsonArray23.add((java.lang.Boolean) true);
        com.google.gson.JsonObject jsonObject29 = new com.google.gson.JsonObject();
        boolean boolean31 = jsonObject29.equals((java.lang.Object) 0.0f);
        java.util.Set<java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement>> strEntrySet32 = jsonObject29.entrySet();
        com.google.gson.JsonElement jsonElement34 = jsonObject29.remove("4");
        boolean boolean35 = jsonArray23.contains((com.google.gson.JsonElement) jsonObject29);
        boolean boolean37 = jsonObject29.equals((java.lang.Object) (-1.0f));
        com.google.gson.JsonElement jsonElement39 = jsonObject29.remove("$");
        boolean boolean40 = autoCloseableMap2.containsValue((java.lang.Object) "$");
        autoCloseableMap2.clear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertNull(jsonPrimitive13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strEntrySet32);
        org.junit.Assert.assertNull(jsonElement34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jsonElement39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.JsonPrimitive jsonPrimitive3 = new com.google.gson.JsonPrimitive("");
        boolean boolean4 = jsonPrimitive3.isJsonNull();
        boolean boolean5 = jsonPrimitive3.isNumber();
        boolean boolean6 = jsonArray0.remove((com.google.gson.JsonElement) jsonPrimitive3);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        jsonArray7.add((java.lang.Number) (-1.0f));
        boolean boolean10 = jsonArray0.equals((java.lang.Object) jsonArray7);
        jsonArray7.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement14 = jsonArray7.get((int) (byte) 0);
        jsonArray7.add((java.lang.Boolean) false);
        int int17 = jsonArray7.size();
        com.google.gson.JsonArray jsonArray18 = new com.google.gson.JsonArray();
        int int19 = jsonArray18.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader20 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray18);
        boolean boolean21 = jsonArray7.equals((java.lang.Object) jsonTreeReader20);
        com.google.gson.JsonElement jsonElement23 = jsonArray7.remove(0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jsonElement14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jsonElement23);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        java.lang.String str6 = jsonTreeReader2.toString();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.beginObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BEGIN_OBJECT but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JsonTreeReader" + "'", str6, "JsonTreeReader");
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess0 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.JsonArray jsonArray1 = new com.google.gson.JsonArray();
        int int2 = jsonArray1.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader3 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray1);
        jsonTreeReader3.skipValue();
        com.google.gson.stream.JsonToken jsonToken5 = jsonTreeReader3.peek();
        java.lang.String str6 = jsonTreeReader3.toString();
        jsonTreeReader3.setLenient(true);
        // The following exception was thrown during execution in test generation
        try {
// flaky:             jsonReaderInternalAccess0.promoteNameToValue((com.google.gson.stream.JsonReader) jsonTreeReader3);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken5 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken5.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JsonTreeReader" + "'", str6, "JsonTreeReader");
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.endObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected END_OBJECT but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        jsonTreeReader7.skipValue();
        boolean boolean12 = jsonTreeReader7.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = jsonTreeReader7.nextDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = jsonTreeReader2.nextString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected STRING but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        jsonTreeReader7.skipValue();
        boolean boolean12 = jsonTreeReader7.hasNext();
        jsonTreeReader7.beginArray();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = jsonTreeReader7.nextName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NAME but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        boolean boolean3 = jsonTreeReader2.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.endArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected END_ARRAY but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.skipValue();
        com.google.gson.stream.JsonToken jsonToken4 = jsonTreeReader2.peek();
        java.lang.String str5 = jsonTreeReader2.toString();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.beginArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BEGIN_ARRAY but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken4 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken4.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JsonTreeReader" + "'", str5, "JsonTreeReader");
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        boolean boolean3 = jsonTreeReader2.hasNext();
        jsonTreeReader2.close();
        // The following exception was thrown during execution in test generation
        try {
            int int5 = jsonTreeReader2.nextInt();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: JsonReader is closed");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.skipValue();
        boolean boolean4 = jsonTreeReader2.isLenient();
        java.lang.String str5 = jsonTreeReader2.getPath();
        com.google.gson.stream.JsonToken jsonToken6 = jsonTreeReader2.peek();
        // The following exception was thrown during execution in test generation
        try {
            long long7 = jsonTreeReader2.nextLong();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + jsonToken6 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken6.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.skipValue();
        com.google.gson.stream.JsonToken jsonToken4 = jsonTreeReader2.peek();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = jsonTreeReader2.nextString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected STRING but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken4 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken4.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        jsonTreeReader7.skipValue();
        boolean boolean12 = jsonTreeReader7.hasNext();
        boolean boolean13 = jsonTreeReader7.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = jsonTreeReader7.nextBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BOOLEAN but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        boolean boolean7 = jsonTreeReader2.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.endObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected END_OBJECT but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.skipValue();
        boolean boolean4 = jsonTreeReader2.isLenient();
        java.lang.String str5 = jsonTreeReader2.getPath();
        com.google.gson.stream.JsonToken jsonToken6 = jsonTreeReader2.peek();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = jsonTreeReader2.nextName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NAME but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + jsonToken6 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken6.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        com.google.gson.JsonObject jsonObject11 = new com.google.gson.JsonObject();
        com.google.gson.JsonPrimitive jsonPrimitive13 = jsonObject11.getAsJsonPrimitive("com.google.gson.stream.MalformedJsonException: ");
        boolean boolean15 = autoCloseableMap2.remove((java.lang.Object) jsonObject11, (java.lang.Object) 1.0f);
        com.google.gson.stream.MalformedJsonException malformedJsonException18 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException19 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException18);
        java.lang.Throwable[] throwableArray20 = malformedJsonException19.getSuppressed();
        boolean boolean21 = autoCloseableMap2.equals((java.lang.Object) throwableArray20);
        com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
        int int23 = jsonArray22.size();
        com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive("");
        boolean boolean26 = jsonPrimitive25.isJsonNull();
        boolean boolean27 = jsonPrimitive25.isNumber();
        boolean boolean28 = jsonArray22.remove((com.google.gson.JsonElement) jsonPrimitive25);
        com.google.gson.JsonArray jsonArray29 = new com.google.gson.JsonArray();
        jsonArray29.add((java.lang.Number) (-1.0f));
        boolean boolean32 = jsonArray22.equals((java.lang.Object) jsonArray29);
        com.google.gson.JsonElement jsonElement33 = null;
        boolean boolean34 = jsonArray22.remove(jsonElement33);
        com.google.gson.JsonArray jsonArray35 = new com.google.gson.JsonArray();
        int int36 = jsonArray35.size();
        com.google.gson.JsonPrimitive jsonPrimitive38 = new com.google.gson.JsonPrimitive("");
        boolean boolean39 = jsonPrimitive38.isJsonNull();
        boolean boolean40 = jsonPrimitive38.isNumber();
        boolean boolean41 = jsonArray35.remove((com.google.gson.JsonElement) jsonPrimitive38);
        com.google.gson.JsonArray jsonArray42 = new com.google.gson.JsonArray();
        jsonArray42.add((java.lang.Number) (-1.0f));
        boolean boolean45 = jsonArray35.equals((java.lang.Object) jsonArray42);
        com.google.gson.JsonElement jsonElement46 = null;
        boolean boolean47 = jsonArray35.remove(jsonElement46);
        boolean boolean48 = jsonArray22.remove((com.google.gson.JsonElement) jsonArray35);
        java.util.Spliterator<com.google.gson.JsonElement> jsonElementSpliterator49 = jsonArray35.spliterator();
        java.util.Spliterator<com.google.gson.JsonElement> jsonElementSpliterator50 = jsonArray35.spliterator();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess51 = autoCloseableMap2.get((java.lang.Object) jsonElementSpliterator50);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet52 = autoCloseableMap2.entrySet();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertNull(jsonPrimitive13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jsonElementSpliterator49);
        org.junit.Assert.assertNotNull(jsonElementSpliterator50);
        org.junit.Assert.assertNull(jsonReaderInternalAccess51);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet52);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        jsonTreeReader7.skipValue();
        boolean boolean12 = jsonTreeReader7.hasNext();
        jsonTreeReader7.skipValue();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader7.promoteNameToValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NAME but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet5 = autoCloseableMap0.keySet();
        com.google.gson.stream.MalformedJsonException malformedJsonException8 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException9 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException8);
        java.lang.Throwable[] throwableArray10 = malformedJsonException9.getSuppressed();
        com.google.gson.stream.MalformedJsonException malformedJsonException13 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException14 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException13);
        malformedJsonException9.addSuppressed((java.lang.Throwable) malformedJsonException14);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess16 = autoCloseableMap0.get((java.lang.Object) malformedJsonException14);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap17 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int18 = autoCloseableMap17.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap19 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int20 = autoCloseableMap19.size();
        autoCloseableMap17.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap19);
        com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
        int int23 = jsonArray22.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader24 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray22);
        jsonTreeReader24.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess26 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess27 = autoCloseableMap19.replace((java.lang.AutoCloseable) jsonTreeReader24, jsonReaderInternalAccess26);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess28 = autoCloseableMap0.get((java.lang.Object) autoCloseableMap19);
        java.lang.Object obj29 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess30 = autoCloseableMap0.get(obj29);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(autoCloseableSet5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNull(jsonReaderInternalAccess16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess26);
        org.junit.Assert.assertNull(jsonReaderInternalAccess27);
        org.junit.Assert.assertNull(jsonReaderInternalAccess28);
        org.junit.Assert.assertNull(jsonReaderInternalAccess30);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.JsonPrimitive jsonPrimitive3 = new com.google.gson.JsonPrimitive("");
        boolean boolean4 = jsonPrimitive3.isJsonNull();
        boolean boolean5 = jsonPrimitive3.isNumber();
        boolean boolean6 = jsonArray0.remove((com.google.gson.JsonElement) jsonPrimitive3);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        jsonArray7.add((java.lang.Number) (-1.0f));
        boolean boolean10 = jsonArray0.equals((java.lang.Object) jsonArray7);
        jsonArray7.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement14 = jsonArray7.get((int) (byte) 0);
        jsonArray7.add((java.lang.Boolean) false);
        int int17 = jsonArray7.size();
        com.google.gson.JsonArray jsonArray18 = new com.google.gson.JsonArray();
        int int19 = jsonArray18.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader20 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray18);
        boolean boolean21 = jsonArray7.equals((java.lang.Object) jsonTreeReader20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = jsonTreeReader20.nextName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NAME but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jsonElement14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        boolean boolean3 = jsonTreeReader2.hasNext();
        com.google.gson.stream.JsonToken jsonToken4 = jsonTreeReader2.peek();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = jsonTreeReader2.nextName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NAME but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + jsonToken4 + "' != '" + com.google.gson.stream.JsonToken.BEGIN_ARRAY + "'", jsonToken4.equals(com.google.gson.stream.JsonToken.BEGIN_ARRAY));
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        boolean boolean11 = jsonTreeReader7.hasNext();
        jsonTreeReader7.close();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = jsonTreeReader7.nextName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: JsonReader is closed");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        jsonTreeReader7.skipValue();
        boolean boolean12 = jsonTreeReader7.hasNext();
        com.google.gson.stream.JsonToken jsonToken13 = jsonTreeReader7.peek();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader7.endObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected END_OBJECT but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + jsonToken13 + "' != '" + com.google.gson.stream.JsonToken.BEGIN_ARRAY + "'", jsonToken13.equals(com.google.gson.stream.JsonToken.BEGIN_ARRAY));
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.stream.MalformedJsonException malformedJsonException6 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException7 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException6);
        com.google.gson.stream.MalformedJsonException malformedJsonException8 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException6);
        com.google.gson.stream.MalformedJsonException malformedJsonException9 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable) malformedJsonException8);
        boolean boolean10 = autoCloseableMap0.equals((java.lang.Object) malformedJsonException9);
        com.google.gson.stream.MalformedJsonException malformedJsonException14 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException15 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException14);
        com.google.gson.stream.MalformedJsonException malformedJsonException16 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException15);
        boolean boolean17 = autoCloseableMap0.containsKey((java.lang.Object) malformedJsonException16);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap18 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        java.util.Collection<com.google.gson.internal.JsonReaderInternalAccess> jsonReaderInternalAccessCollection19 = autoCloseableMap18.values();
        boolean boolean21 = autoCloseableMap18.equals((java.lang.Object) 100.0f);
        com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
        int int23 = jsonArray22.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader24 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray22);
        jsonTreeReader24.skipValue();
        com.google.gson.stream.JsonToken jsonToken26 = jsonTreeReader24.peek();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap27 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int28 = autoCloseableMap27.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap29 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int30 = autoCloseableMap29.size();
        autoCloseableMap27.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap29);
        java.lang.Object obj32 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess33 = autoCloseableMap27.remove(obj32);
        com.google.gson.JsonPrimitive jsonPrimitive35 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number36 = jsonPrimitive35.getAsNumber();
        boolean boolean37 = autoCloseableMap27.containsKey((java.lang.Object) number36);
        com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive("");
        boolean boolean40 = jsonPrimitive39.isJsonNull();
        boolean boolean42 = jsonPrimitive39.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean43 = jsonPrimitive39.isString();
        java.lang.Number number44 = jsonPrimitive39.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess45 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess45;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess47 = autoCloseableMap27.getOrDefault((java.lang.Object) jsonPrimitive39, jsonReaderInternalAccess45);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess48 = autoCloseableMap18.replace((java.lang.AutoCloseable) jsonTreeReader24, jsonReaderInternalAccess47);
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap18);
        com.google.gson.JsonArray jsonArray50 = new com.google.gson.JsonArray();
        int int51 = jsonArray50.size();
        com.google.gson.JsonPrimitive jsonPrimitive53 = new com.google.gson.JsonPrimitive("");
        boolean boolean54 = jsonPrimitive53.isJsonNull();
        boolean boolean55 = jsonPrimitive53.isNumber();
        boolean boolean56 = jsonArray50.remove((com.google.gson.JsonElement) jsonPrimitive53);
        com.google.gson.JsonArray jsonArray57 = new com.google.gson.JsonArray();
        jsonArray57.add((java.lang.Number) (-1.0f));
        boolean boolean60 = jsonArray50.equals((java.lang.Object) jsonArray57);
        boolean boolean62 = jsonArray57.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        java.lang.String str63 = jsonArray57.getAsString();
        com.google.gson.JsonElement jsonElement65 = jsonArray57.get((int) (short) 0);
        float float66 = jsonArray57.getAsFloat();
        jsonArray57.add((java.lang.Character) 'a');
        com.google.gson.JsonArray jsonArray69 = new com.google.gson.JsonArray();
        int int70 = jsonArray69.size();
        com.google.gson.JsonPrimitive jsonPrimitive72 = new com.google.gson.JsonPrimitive("");
        boolean boolean73 = jsonPrimitive72.isJsonNull();
        boolean boolean74 = jsonPrimitive72.isNumber();
        boolean boolean75 = jsonArray69.remove((com.google.gson.JsonElement) jsonPrimitive72);
        com.google.gson.JsonArray jsonArray76 = new com.google.gson.JsonArray();
        jsonArray76.add((java.lang.Number) (-1.0f));
        boolean boolean79 = jsonArray69.equals((java.lang.Object) jsonArray76);
        com.google.gson.JsonElement jsonElement80 = null;
        boolean boolean81 = jsonArray69.remove(jsonElement80);
        com.google.gson.JsonArray jsonArray82 = new com.google.gson.JsonArray();
        int int83 = jsonArray82.size();
        com.google.gson.JsonPrimitive jsonPrimitive85 = new com.google.gson.JsonPrimitive("");
        boolean boolean86 = jsonPrimitive85.isJsonNull();
        boolean boolean87 = jsonPrimitive85.isNumber();
        boolean boolean88 = jsonArray82.remove((com.google.gson.JsonElement) jsonPrimitive85);
        com.google.gson.JsonArray jsonArray89 = new com.google.gson.JsonArray();
        jsonArray89.add((java.lang.Number) (-1.0f));
        boolean boolean92 = jsonArray82.equals((java.lang.Object) jsonArray89);
        com.google.gson.JsonElement jsonElement93 = null;
        boolean boolean94 = jsonArray82.remove(jsonElement93);
        boolean boolean95 = jsonArray69.remove((com.google.gson.JsonElement) jsonArray82);
        java.util.Spliterator<com.google.gson.JsonElement> jsonElementSpliterator96 = jsonArray82.spliterator();
        java.util.Spliterator<com.google.gson.JsonElement> jsonElementSpliterator97 = jsonArray82.spliterator();
        boolean boolean98 = autoCloseableMap18.remove((java.lang.Object) jsonArray57, (java.lang.Object) jsonArray82);
        java.util.Collection<com.google.gson.internal.JsonReaderInternalAccess> jsonReaderInternalAccessCollection99 = autoCloseableMap18.values();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccessCollection19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken26 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken26.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess33);
        org.junit.Assert.assertNotNull(number36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(number44);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess45);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess47);
        org.junit.Assert.assertNull(jsonReaderInternalAccess48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "-1.0" + "'", str63, "-1.0");
        org.junit.Assert.assertNotNull(jsonElement65);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-1.0f) + "'", float66 == (-1.0f));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(jsonElementSpliterator96);
        org.junit.Assert.assertNotNull(jsonElementSpliterator97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccessCollection99);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        boolean boolean3 = jsonTreeReader2.hasNext();
        jsonTreeReader2.close();
        java.lang.String str5 = jsonTreeReader2.toString();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.endObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: JsonReader is closed");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JsonTreeReader" + "'", str5, "JsonTreeReader");
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        boolean boolean3 = jsonTreeReader2.hasNext();
        jsonTreeReader2.close();
        // The following exception was thrown during execution in test generation
        try {
            com.google.gson.stream.JsonToken jsonToken5 = jsonTreeReader2.peek();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: JsonReader is closed");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        boolean boolean3 = jsonTreeReader2.hasNext();
        jsonTreeReader2.close();
        java.lang.String str5 = jsonTreeReader2.toString();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = jsonTreeReader2.hasNext();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: JsonReader is closed");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JsonTreeReader" + "'", str5, "JsonTreeReader");
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.skipValue();
        boolean boolean4 = jsonTreeReader2.isLenient();
        java.lang.String str5 = jsonTreeReader2.getPath();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.nextNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NULL but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        jsonTreeReader7.skipValue();
        boolean boolean12 = jsonTreeReader7.hasNext();
        boolean boolean13 = jsonTreeReader7.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = jsonTreeReader7.nextInt();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap4 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int5 = autoCloseableMap4.size();
        autoCloseableMap2.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap4);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        int int8 = jsonArray7.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader9 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray7);
        jsonTreeReader9.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess11 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess12 = autoCloseableMap4.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess11);
        boolean boolean13 = jsonTreeReader9.hasNext();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess14 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess15 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess14);
        jsonTreeReader9.skipValue();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = jsonTreeReader9.nextLong();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess11);
        org.junit.Assert.assertNull(jsonReaderInternalAccess12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess14);
        org.junit.Assert.assertNull(jsonReaderInternalAccess15);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        jsonTreeReader7.skipValue();
        boolean boolean12 = jsonTreeReader7.hasNext();
        com.google.gson.stream.JsonToken jsonToken13 = jsonTreeReader7.peek();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = jsonTreeReader7.nextLong();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + jsonToken13 + "' != '" + com.google.gson.stream.JsonToken.BEGIN_ARRAY + "'", jsonToken13.equals(com.google.gson.stream.JsonToken.BEGIN_ARRAY));
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        jsonTreeReader7.skipValue();
        boolean boolean12 = jsonTreeReader7.hasNext();
        boolean boolean13 = jsonTreeReader7.hasNext();
        jsonTreeReader7.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = jsonTreeReader7.nextBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BOOLEAN but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.JsonPrimitive jsonPrimitive3 = new com.google.gson.JsonPrimitive("");
        boolean boolean4 = jsonPrimitive3.isJsonNull();
        boolean boolean5 = jsonPrimitive3.isNumber();
        boolean boolean6 = jsonArray0.remove((com.google.gson.JsonElement) jsonPrimitive3);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        jsonArray7.add((java.lang.Number) (-1.0f));
        boolean boolean10 = jsonArray0.equals((java.lang.Object) jsonArray7);
        jsonArray7.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement14 = jsonArray7.get((int) (byte) 0);
        jsonArray7.add((java.lang.Boolean) false);
        int int17 = jsonArray7.size();
        com.google.gson.JsonArray jsonArray18 = new com.google.gson.JsonArray();
        int int19 = jsonArray18.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader20 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray18);
        boolean boolean21 = jsonArray7.equals((java.lang.Object) jsonTreeReader20);
        // The following exception was thrown during execution in test generation
        try {
            long long22 = jsonTreeReader20.nextLong();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jsonElement14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.skipValue();
        com.google.gson.stream.JsonToken jsonToken4 = jsonTreeReader2.peek();
        java.lang.String str5 = jsonTreeReader2.toString();
        com.google.gson.stream.JsonToken jsonToken6 = jsonTreeReader2.peek();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.endArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected END_ARRAY but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken4 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken4.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JsonTreeReader" + "'", str5, "JsonTreeReader");
        org.junit.Assert.assertTrue("'" + jsonToken6 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken6.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        boolean boolean3 = jsonTreeReader2.hasNext();
        com.google.gson.stream.JsonToken jsonToken4 = jsonTreeReader2.peek();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = jsonTreeReader2.nextString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected STRING but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + jsonToken4 + "' != '" + com.google.gson.stream.JsonToken.BEGIN_ARRAY + "'", jsonToken4.equals(com.google.gson.stream.JsonToken.BEGIN_ARRAY));
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.JsonPrimitive jsonPrimitive3 = new com.google.gson.JsonPrimitive("");
        boolean boolean4 = jsonPrimitive3.isJsonNull();
        boolean boolean5 = jsonPrimitive3.isNumber();
        boolean boolean6 = jsonArray0.remove((com.google.gson.JsonElement) jsonPrimitive3);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        jsonArray7.add((java.lang.Number) (-1.0f));
        boolean boolean10 = jsonArray0.equals((java.lang.Object) jsonArray7);
        jsonArray7.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement14 = jsonArray7.get((int) (byte) 0);
        com.google.gson.JsonArray jsonArray15 = new com.google.gson.JsonArray();
        int int16 = jsonArray15.size();
        com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive("");
        boolean boolean19 = jsonPrimitive18.isJsonNull();
        boolean boolean20 = jsonPrimitive18.isNumber();
        boolean boolean21 = jsonArray15.remove((com.google.gson.JsonElement) jsonPrimitive18);
        com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
        jsonArray22.add((java.lang.Number) (-1.0f));
        boolean boolean25 = jsonArray15.equals((java.lang.Object) jsonArray22);
        boolean boolean27 = jsonArray22.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        int int28 = jsonArray22.size();
        jsonArray7.addAll(jsonArray22);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor30 = jsonArray22.iterator();
        com.google.gson.JsonArray jsonArray31 = new com.google.gson.JsonArray();
        int int32 = jsonArray31.size();
        com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive("");
        boolean boolean35 = jsonPrimitive34.isJsonNull();
        boolean boolean36 = jsonPrimitive34.isNumber();
        boolean boolean37 = jsonArray31.remove((com.google.gson.JsonElement) jsonPrimitive34);
        com.google.gson.JsonArray jsonArray38 = new com.google.gson.JsonArray();
        jsonArray38.add((java.lang.Number) (-1.0f));
        boolean boolean41 = jsonArray31.equals((java.lang.Object) jsonArray38);
        com.google.gson.JsonElement jsonElement42 = null;
        boolean boolean43 = jsonArray31.remove(jsonElement42);
        com.google.gson.JsonArray jsonArray44 = new com.google.gson.JsonArray();
        int int45 = jsonArray44.size();
        com.google.gson.JsonPrimitive jsonPrimitive47 = new com.google.gson.JsonPrimitive("");
        boolean boolean48 = jsonPrimitive47.isJsonNull();
        boolean boolean49 = jsonPrimitive47.isNumber();
        boolean boolean50 = jsonArray44.remove((com.google.gson.JsonElement) jsonPrimitive47);
        com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
        jsonArray51.add((java.lang.Number) (-1.0f));
        boolean boolean54 = jsonArray44.equals((java.lang.Object) jsonArray51);
        com.google.gson.JsonElement jsonElement55 = null;
        boolean boolean56 = jsonArray44.remove(jsonElement55);
        boolean boolean57 = jsonArray31.remove((com.google.gson.JsonElement) jsonArray44);
        jsonArray44.add((java.lang.Character) ' ');
        boolean boolean60 = jsonArray22.remove((com.google.gson.JsonElement) jsonArray44);
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader61 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray22);
        com.google.gson.JsonArray jsonArray62 = new com.google.gson.JsonArray();
        int int63 = jsonArray62.size();
        com.google.gson.JsonPrimitive jsonPrimitive65 = new com.google.gson.JsonPrimitive("");
        boolean boolean66 = jsonPrimitive65.isJsonNull();
        boolean boolean67 = jsonPrimitive65.isNumber();
        boolean boolean68 = jsonArray62.remove((com.google.gson.JsonElement) jsonPrimitive65);
        com.google.gson.JsonArray jsonArray69 = new com.google.gson.JsonArray();
        jsonArray69.add((java.lang.Number) (-1.0f));
        boolean boolean72 = jsonArray62.equals((java.lang.Object) jsonArray69);
        boolean boolean74 = jsonArray69.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        java.lang.String str75 = jsonArray69.getAsString();
        com.google.gson.JsonElement jsonElement77 = jsonArray69.get((int) (short) 0);
        boolean boolean78 = jsonArray69.isJsonArray();
        boolean boolean79 = jsonArray69.isJsonNull();
        jsonArray22.add((com.google.gson.JsonElement) jsonArray69);
        com.google.gson.JsonPrimitive jsonPrimitive83 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number84 = jsonPrimitive83.getAsNumber();
        boolean boolean85 = jsonPrimitive83.getAsBoolean();
        short short86 = jsonPrimitive83.getAsShort();
        char char87 = jsonPrimitive83.getAsCharacter();
        java.math.BigInteger bigInteger88 = jsonPrimitive83.getAsBigInteger();
        com.google.gson.JsonPrimitive jsonPrimitive89 = new com.google.gson.JsonPrimitive((java.lang.Number) bigInteger88);
        // The following exception was thrown during execution in test generation
        try {
            com.google.gson.JsonElement jsonElement90 = jsonArray69.set((-1), (com.google.gson.JsonElement) jsonPrimitive89);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jsonElement14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(jsonElementItor30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "-1.0" + "'", str75, "-1.0");
        org.junit.Assert.assertNotNull(jsonElement77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(number84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + short86 + "' != '" + (short) 4 + "'", short86 == (short) 4);
        org.junit.Assert.assertTrue("'" + char87 + "' != '" + '4' + "'", char87 == '4');
        org.junit.Assert.assertNotNull(bigInteger88);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet5 = autoCloseableMap0.keySet();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap6 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int7 = autoCloseableMap6.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap8 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int9 = autoCloseableMap8.size();
        autoCloseableMap6.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap8);
        com.google.gson.JsonArray jsonArray11 = new com.google.gson.JsonArray();
        int int12 = jsonArray11.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader13 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray11);
        jsonTreeReader13.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess15 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess16 = autoCloseableMap8.replace((java.lang.AutoCloseable) jsonTreeReader13, jsonReaderInternalAccess15);
        com.google.gson.JsonObject jsonObject17 = new com.google.gson.JsonObject();
        com.google.gson.JsonPrimitive jsonPrimitive19 = jsonObject17.getAsJsonPrimitive("com.google.gson.stream.MalformedJsonException: ");
        boolean boolean21 = autoCloseableMap8.remove((java.lang.Object) jsonObject17, (java.lang.Object) 1.0f);
        com.google.gson.stream.MalformedJsonException malformedJsonException24 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException25 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException24);
        java.lang.Throwable[] throwableArray26 = malformedJsonException25.getSuppressed();
        boolean boolean27 = autoCloseableMap8.equals((java.lang.Object) throwableArray26);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap28 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int29 = autoCloseableMap28.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap30 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int31 = autoCloseableMap30.size();
        autoCloseableMap28.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap30);
        autoCloseableMap8.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap28);
        com.google.gson.JsonArray jsonArray34 = new com.google.gson.JsonArray();
        int int35 = jsonArray34.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap36 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int37 = autoCloseableMap36.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap38 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int39 = autoCloseableMap38.size();
        autoCloseableMap36.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap38);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet41 = autoCloseableMap36.entrySet();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap42 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int43 = autoCloseableMap42.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap44 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int45 = autoCloseableMap44.size();
        autoCloseableMap42.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap44);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet47 = autoCloseableMap42.keySet();
        int int48 = autoCloseableMap42.size();
        autoCloseableMap36.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap42);
        com.google.gson.JsonArray jsonArray50 = new com.google.gson.JsonArray();
        int int51 = jsonArray50.size();
        com.google.gson.JsonPrimitive jsonPrimitive53 = new com.google.gson.JsonPrimitive("");
        boolean boolean54 = jsonPrimitive53.isJsonNull();
        boolean boolean55 = jsonPrimitive53.isNumber();
        boolean boolean56 = jsonArray50.remove((com.google.gson.JsonElement) jsonPrimitive53);
        com.google.gson.JsonArray jsonArray57 = new com.google.gson.JsonArray();
        jsonArray57.add((java.lang.Number) (-1.0f));
        boolean boolean60 = jsonArray50.equals((java.lang.Object) jsonArray57);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor61 = jsonArray50.iterator();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess62 = autoCloseableMap42.remove((java.lang.Object) jsonArray50);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet63 = autoCloseableMap42.keySet();
        boolean boolean64 = autoCloseableMap8.remove((java.lang.Object) jsonArray34, (java.lang.Object) autoCloseableMap42);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess65 = autoCloseableMap0.remove((java.lang.Object) jsonArray34);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(autoCloseableSet5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess15);
        org.junit.Assert.assertNull(jsonReaderInternalAccess16);
        org.junit.Assert.assertNull(jsonPrimitive19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(autoCloseableSet47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(jsonElementItor61);
        org.junit.Assert.assertNull(jsonReaderInternalAccess62);
        org.junit.Assert.assertNotNull(autoCloseableSet63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jsonReaderInternalAccess65);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        boolean boolean3 = jsonArray0.isJsonPrimitive();
        // The following exception was thrown during execution in test generation
        try {
            com.google.gson.JsonElement jsonElement5 = jsonArray0.get(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 3, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        boolean boolean3 = jsonTreeReader2.hasNext();
        jsonTreeReader2.close();
        // The following exception was thrown during execution in test generation
        try {
            long long5 = jsonTreeReader2.nextLong();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: JsonReader is closed");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap4 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int5 = autoCloseableMap4.size();
        autoCloseableMap2.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap4);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        int int8 = jsonArray7.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader9 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray7);
        jsonTreeReader9.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess11 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess12 = autoCloseableMap4.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess11);
        boolean boolean13 = jsonTreeReader9.hasNext();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess14 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess15 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess14);
        java.lang.String str16 = jsonTreeReader9.toString();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader9.beginArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BEGIN_ARRAY but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess11);
        org.junit.Assert.assertNull(jsonReaderInternalAccess12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess14);
        org.junit.Assert.assertNull(jsonReaderInternalAccess15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JsonTreeReader" + "'", str16, "JsonTreeReader");
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.skipValue();
        boolean boolean4 = jsonTreeReader2.isLenient();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            int int7 = jsonTreeReader2.nextInt();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.JsonPrimitive jsonPrimitive3 = new com.google.gson.JsonPrimitive("");
        boolean boolean4 = jsonPrimitive3.isJsonNull();
        boolean boolean5 = jsonPrimitive3.isNumber();
        boolean boolean6 = jsonArray0.remove((com.google.gson.JsonElement) jsonPrimitive3);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        jsonArray7.add((java.lang.Number) (-1.0f));
        boolean boolean10 = jsonArray0.equals((java.lang.Object) jsonArray7);
        jsonArray7.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement14 = jsonArray7.get((int) (byte) 0);
        com.google.gson.JsonArray jsonArray15 = new com.google.gson.JsonArray();
        int int16 = jsonArray15.size();
        com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive("");
        boolean boolean19 = jsonPrimitive18.isJsonNull();
        boolean boolean20 = jsonPrimitive18.isNumber();
        boolean boolean21 = jsonArray15.remove((com.google.gson.JsonElement) jsonPrimitive18);
        com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
        jsonArray22.add((java.lang.Number) (-1.0f));
        boolean boolean25 = jsonArray15.equals((java.lang.Object) jsonArray22);
        boolean boolean27 = jsonArray22.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        int int28 = jsonArray22.size();
        jsonArray7.addAll(jsonArray22);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor30 = jsonArray22.iterator();
        com.google.gson.JsonArray jsonArray31 = new com.google.gson.JsonArray();
        int int32 = jsonArray31.size();
        com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive("");
        boolean boolean35 = jsonPrimitive34.isJsonNull();
        boolean boolean36 = jsonPrimitive34.isNumber();
        boolean boolean37 = jsonArray31.remove((com.google.gson.JsonElement) jsonPrimitive34);
        com.google.gson.JsonArray jsonArray38 = new com.google.gson.JsonArray();
        jsonArray38.add((java.lang.Number) (-1.0f));
        boolean boolean41 = jsonArray31.equals((java.lang.Object) jsonArray38);
        com.google.gson.JsonElement jsonElement42 = null;
        boolean boolean43 = jsonArray31.remove(jsonElement42);
        com.google.gson.JsonArray jsonArray44 = new com.google.gson.JsonArray();
        int int45 = jsonArray44.size();
        com.google.gson.JsonPrimitive jsonPrimitive47 = new com.google.gson.JsonPrimitive("");
        boolean boolean48 = jsonPrimitive47.isJsonNull();
        boolean boolean49 = jsonPrimitive47.isNumber();
        boolean boolean50 = jsonArray44.remove((com.google.gson.JsonElement) jsonPrimitive47);
        com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
        jsonArray51.add((java.lang.Number) (-1.0f));
        boolean boolean54 = jsonArray44.equals((java.lang.Object) jsonArray51);
        com.google.gson.JsonElement jsonElement55 = null;
        boolean boolean56 = jsonArray44.remove(jsonElement55);
        boolean boolean57 = jsonArray31.remove((com.google.gson.JsonElement) jsonArray44);
        jsonArray44.add((java.lang.Character) ' ');
        boolean boolean60 = jsonArray22.remove((com.google.gson.JsonElement) jsonArray44);
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader61 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray22);
        jsonTreeReader61.beginArray();
        boolean boolean63 = jsonTreeReader61.isLenient();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jsonElement14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(jsonElementItor30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        boolean boolean7 = jsonTreeReader2.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.beginObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BEGIN_OBJECT but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        boolean boolean3 = jsonTreeReader2.hasNext();
        jsonTreeReader2.close();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.skipValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: JsonReader is closed");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number2 = jsonPrimitive1.getAsNumber();
        boolean boolean3 = jsonPrimitive1.getAsBoolean();
        short short4 = jsonPrimitive1.getAsShort();
        boolean boolean5 = jsonPrimitive1.isJsonPrimitive();
        boolean boolean6 = jsonPrimitive1.getAsBoolean();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap7 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int8 = autoCloseableMap7.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap9 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int10 = autoCloseableMap9.size();
        autoCloseableMap7.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap9);
        com.google.gson.JsonArray jsonArray12 = new com.google.gson.JsonArray();
        int int13 = jsonArray12.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader14 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray12);
        jsonTreeReader14.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess16 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess17 = autoCloseableMap9.replace((java.lang.AutoCloseable) jsonTreeReader14, jsonReaderInternalAccess16);
        jsonTreeReader14.skipValue();
        boolean boolean19 = jsonTreeReader14.hasNext();
        boolean boolean20 = jsonTreeReader14.hasNext();
        jsonTreeReader14.setLenient(false);
        java.lang.String str23 = jsonTreeReader14.getPath();
        boolean boolean24 = jsonPrimitive1.equals((java.lang.Object) str23);
        org.junit.Assert.assertNotNull(number2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 4 + "'", short4 == (short) 4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess16);
        org.junit.Assert.assertNull(jsonReaderInternalAccess17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "$" + "'", str23, "$");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        jsonTreeReader7.skipValue();
        boolean boolean12 = jsonTreeReader7.hasNext();
        jsonTreeReader7.beginArray();
        boolean boolean14 = jsonTreeReader7.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader7.nextNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NULL but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap4 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int5 = autoCloseableMap4.size();
        autoCloseableMap2.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap4);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        int int8 = jsonArray7.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader9 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray7);
        jsonTreeReader9.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess11 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess12 = autoCloseableMap4.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess11);
        boolean boolean13 = jsonTreeReader9.hasNext();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess14 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess15 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess14);
        jsonTreeReader9.skipValue();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader9.beginObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BEGIN_OBJECT but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess11);
        org.junit.Assert.assertNull(jsonReaderInternalAccess12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess14);
        org.junit.Assert.assertNull(jsonReaderInternalAccess15);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        com.google.gson.JsonObject jsonObject11 = new com.google.gson.JsonObject();
        com.google.gson.JsonPrimitive jsonPrimitive13 = jsonObject11.getAsJsonPrimitive("com.google.gson.stream.MalformedJsonException: ");
        boolean boolean15 = autoCloseableMap2.remove((java.lang.Object) jsonObject11, (java.lang.Object) 1.0f);
        java.lang.Class<?> wildcardClass16 = jsonObject11.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertNull(jsonPrimitive13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.skipValue();
        boolean boolean4 = jsonTreeReader2.isLenient();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        jsonTreeReader2.close();
        // The following exception was thrown during execution in test generation
        try {
            com.google.gson.stream.JsonToken jsonToken8 = jsonTreeReader2.peek();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: JsonReader is closed");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        boolean boolean3 = jsonTreeReader2.hasNext();
        jsonTreeReader2.close();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.endObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: JsonReader is closed");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap4 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int5 = autoCloseableMap4.size();
        autoCloseableMap2.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap4);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        int int8 = jsonArray7.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader9 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray7);
        jsonTreeReader9.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess11 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess12 = autoCloseableMap4.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess11);
        boolean boolean13 = jsonTreeReader9.hasNext();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess14 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess15 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess14);
        com.google.gson.internal.LazilyParsedNumber lazilyParsedNumber17 = new com.google.gson.internal.LazilyParsedNumber("com.google.gson.stream.MalformedJsonException: ");
        java.lang.Object obj18 = null;
        boolean boolean19 = lazilyParsedNumber17.equals(obj18);
        java.lang.Object obj20 = null;
        boolean boolean21 = lazilyParsedNumber17.equals(obj20);
        java.lang.String str22 = lazilyParsedNumber17.toString();
        com.google.gson.JsonArray jsonArray23 = new com.google.gson.JsonArray();
        int int24 = jsonArray23.size();
        com.google.gson.JsonPrimitive jsonPrimitive26 = new com.google.gson.JsonPrimitive("");
        boolean boolean27 = jsonPrimitive26.isJsonNull();
        boolean boolean28 = jsonPrimitive26.isNumber();
        boolean boolean29 = jsonArray23.remove((com.google.gson.JsonElement) jsonPrimitive26);
        com.google.gson.JsonArray jsonArray30 = new com.google.gson.JsonArray();
        jsonArray30.add((java.lang.Number) (-1.0f));
        boolean boolean33 = jsonArray23.equals((java.lang.Object) jsonArray30);
        jsonArray30.add((java.lang.Boolean) true);
        com.google.gson.JsonArray jsonArray36 = new com.google.gson.JsonArray();
        int int37 = jsonArray36.size();
        com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive("");
        boolean boolean40 = jsonPrimitive39.isJsonNull();
        boolean boolean41 = jsonPrimitive39.isNumber();
        boolean boolean42 = jsonArray36.remove((com.google.gson.JsonElement) jsonPrimitive39);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor43 = jsonArray36.iterator();
        boolean boolean44 = jsonArray30.contains((com.google.gson.JsonElement) jsonArray36);
        com.google.gson.JsonPrimitive jsonPrimitive46 = new com.google.gson.JsonPrimitive((java.lang.Number) 0);
        boolean boolean47 = jsonArray36.contains((com.google.gson.JsonElement) jsonPrimitive46);
        boolean boolean48 = autoCloseableMap0.remove((java.lang.Object) lazilyParsedNumber17, (java.lang.Object) jsonPrimitive46);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess11);
        org.junit.Assert.assertNull(jsonReaderInternalAccess12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess14);
        org.junit.Assert.assertNull(jsonReaderInternalAccess15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "com.google.gson.stream.MalformedJsonException: " + "'", str22, "com.google.gson.stream.MalformedJsonException: ");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jsonElementItor43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader7.beginArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BEGIN_ARRAY but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        jsonTreeReader2.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.beginObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BEGIN_OBJECT but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        com.google.gson.stream.JsonToken jsonToken7 = jsonTreeReader2.peek();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + jsonToken7 + "' != '" + com.google.gson.stream.JsonToken.BEGIN_ARRAY + "'", jsonToken7.equals(com.google.gson.stream.JsonToken.BEGIN_ARRAY));
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        boolean boolean7 = jsonTreeReader2.hasNext();
        jsonTreeReader2.beginArray();
        com.google.gson.stream.JsonToken jsonToken9 = jsonTreeReader2.peek();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = jsonTreeReader2.nextDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + jsonToken9 + "' != '" + com.google.gson.stream.JsonToken.END_ARRAY + "'", jsonToken9.equals(com.google.gson.stream.JsonToken.END_ARRAY));
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        com.google.gson.stream.JsonToken jsonToken7 = jsonTreeReader2.peek();
        boolean boolean8 = jsonTreeReader2.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.endArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected END_ARRAY but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + jsonToken7 + "' != '" + com.google.gson.stream.JsonToken.BEGIN_ARRAY + "'", jsonToken7.equals(com.google.gson.stream.JsonToken.BEGIN_ARRAY));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        java.lang.String str4 = jsonTreeReader2.getPath();
        java.lang.String str5 = jsonTreeReader2.getPath();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.beginObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BEGIN_OBJECT but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "$[0]" + "'", str4, "$[0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$[0]" + "'", str5, "$[0]");
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.close();
        java.lang.String str5 = jsonTreeReader2.toString();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.nextNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: JsonReader is closed");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JsonTreeReader" + "'", str5, "JsonTreeReader");
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive("");
        boolean boolean2 = jsonPrimitive1.isJsonNull();
        boolean boolean3 = jsonPrimitive1.isNumber();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap4 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int5 = autoCloseableMap4.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap6 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int7 = autoCloseableMap6.size();
        autoCloseableMap4.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap6);
        com.google.gson.JsonArray jsonArray9 = new com.google.gson.JsonArray();
        int int10 = jsonArray9.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader11 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray9);
        jsonTreeReader11.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess13 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess14 = autoCloseableMap6.replace((java.lang.AutoCloseable) jsonTreeReader11, jsonReaderInternalAccess13);
        jsonTreeReader11.skipValue();
        boolean boolean16 = jsonTreeReader11.hasNext();
        boolean boolean17 = jsonPrimitive1.equals((java.lang.Object) jsonTreeReader11);
        java.lang.String str18 = jsonTreeReader11.toString();
        boolean boolean19 = jsonTreeReader11.isLenient();
        jsonTreeReader11.setLenient(false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess13);
        org.junit.Assert.assertNull(jsonReaderInternalAccess14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JsonTreeReader" + "'", str18, "JsonTreeReader");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        jsonTreeReader2.beginArray();
        // The following exception was thrown during execution in test generation
        try {
            long long7 = jsonTreeReader2.nextLong();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.stream.MalformedJsonException malformedJsonException6 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException7 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException6);
        com.google.gson.stream.MalformedJsonException malformedJsonException8 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException6);
        com.google.gson.stream.MalformedJsonException malformedJsonException9 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable) malformedJsonException8);
        boolean boolean10 = autoCloseableMap0.equals((java.lang.Object) malformedJsonException9);
        com.google.gson.stream.MalformedJsonException malformedJsonException14 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException15 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException14);
        com.google.gson.stream.MalformedJsonException malformedJsonException16 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException15);
        boolean boolean17 = autoCloseableMap0.containsKey((java.lang.Object) malformedJsonException16);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap18 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        java.util.Collection<com.google.gson.internal.JsonReaderInternalAccess> jsonReaderInternalAccessCollection19 = autoCloseableMap18.values();
        boolean boolean21 = autoCloseableMap18.equals((java.lang.Object) 100.0f);
        com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
        int int23 = jsonArray22.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader24 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray22);
        jsonTreeReader24.skipValue();
        com.google.gson.stream.JsonToken jsonToken26 = jsonTreeReader24.peek();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap27 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int28 = autoCloseableMap27.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap29 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int30 = autoCloseableMap29.size();
        autoCloseableMap27.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap29);
        java.lang.Object obj32 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess33 = autoCloseableMap27.remove(obj32);
        com.google.gson.JsonPrimitive jsonPrimitive35 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number36 = jsonPrimitive35.getAsNumber();
        boolean boolean37 = autoCloseableMap27.containsKey((java.lang.Object) number36);
        com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive("");
        boolean boolean40 = jsonPrimitive39.isJsonNull();
        boolean boolean42 = jsonPrimitive39.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean43 = jsonPrimitive39.isString();
        java.lang.Number number44 = jsonPrimitive39.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess45 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess45;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess47 = autoCloseableMap27.getOrDefault((java.lang.Object) jsonPrimitive39, jsonReaderInternalAccess45);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess48 = autoCloseableMap18.replace((java.lang.AutoCloseable) jsonTreeReader24, jsonReaderInternalAccess47);
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap18);
        com.google.gson.JsonArray jsonArray50 = new com.google.gson.JsonArray();
        int int51 = jsonArray50.size();
        com.google.gson.JsonPrimitive jsonPrimitive53 = new com.google.gson.JsonPrimitive("");
        boolean boolean54 = jsonPrimitive53.isJsonNull();
        boolean boolean55 = jsonPrimitive53.isNumber();
        boolean boolean56 = jsonArray50.remove((com.google.gson.JsonElement) jsonPrimitive53);
        com.google.gson.JsonArray jsonArray57 = new com.google.gson.JsonArray();
        jsonArray57.add((java.lang.Number) (-1.0f));
        boolean boolean60 = jsonArray50.equals((java.lang.Object) jsonArray57);
        boolean boolean62 = jsonArray57.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        java.lang.String str63 = jsonArray57.getAsString();
        com.google.gson.JsonElement jsonElement65 = jsonArray57.get((int) (short) 0);
        float float66 = jsonArray57.getAsFloat();
        jsonArray57.add((java.lang.Character) 'a');
        com.google.gson.JsonArray jsonArray69 = new com.google.gson.JsonArray();
        int int70 = jsonArray69.size();
        com.google.gson.JsonPrimitive jsonPrimitive72 = new com.google.gson.JsonPrimitive("");
        boolean boolean73 = jsonPrimitive72.isJsonNull();
        boolean boolean74 = jsonPrimitive72.isNumber();
        boolean boolean75 = jsonArray69.remove((com.google.gson.JsonElement) jsonPrimitive72);
        com.google.gson.JsonArray jsonArray76 = new com.google.gson.JsonArray();
        jsonArray76.add((java.lang.Number) (-1.0f));
        boolean boolean79 = jsonArray69.equals((java.lang.Object) jsonArray76);
        com.google.gson.JsonElement jsonElement80 = null;
        boolean boolean81 = jsonArray69.remove(jsonElement80);
        com.google.gson.JsonArray jsonArray82 = new com.google.gson.JsonArray();
        int int83 = jsonArray82.size();
        com.google.gson.JsonPrimitive jsonPrimitive85 = new com.google.gson.JsonPrimitive("");
        boolean boolean86 = jsonPrimitive85.isJsonNull();
        boolean boolean87 = jsonPrimitive85.isNumber();
        boolean boolean88 = jsonArray82.remove((com.google.gson.JsonElement) jsonPrimitive85);
        com.google.gson.JsonArray jsonArray89 = new com.google.gson.JsonArray();
        jsonArray89.add((java.lang.Number) (-1.0f));
        boolean boolean92 = jsonArray82.equals((java.lang.Object) jsonArray89);
        com.google.gson.JsonElement jsonElement93 = null;
        boolean boolean94 = jsonArray82.remove(jsonElement93);
        boolean boolean95 = jsonArray69.remove((com.google.gson.JsonElement) jsonArray82);
        java.util.Spliterator<com.google.gson.JsonElement> jsonElementSpliterator96 = jsonArray82.spliterator();
        java.util.Spliterator<com.google.gson.JsonElement> jsonElementSpliterator97 = jsonArray82.spliterator();
        boolean boolean98 = autoCloseableMap18.remove((java.lang.Object) jsonArray57, (java.lang.Object) jsonArray82);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number99 = jsonArray82.getAsNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccessCollection19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken26 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken26.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess33);
        org.junit.Assert.assertNotNull(number36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(number44);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess45);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess47);
        org.junit.Assert.assertNull(jsonReaderInternalAccess48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "-1.0" + "'", str63, "-1.0");
        org.junit.Assert.assertNotNull(jsonElement65);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-1.0f) + "'", float66 == (-1.0f));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(jsonElementSpliterator96);
        org.junit.Assert.assertNotNull(jsonElementSpliterator97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.skipValue();
        boolean boolean4 = jsonTreeReader2.isLenient();
        java.lang.String str5 = jsonTreeReader2.getPath();
        com.google.gson.stream.JsonToken jsonToken6 = jsonTreeReader2.peek();
        // The following exception was thrown during execution in test generation
        try {
            int int7 = jsonTreeReader2.nextInt();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + jsonToken6 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken6.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        com.google.gson.JsonNull jsonNull0 = com.google.gson.JsonNull.INSTANCE;
        com.google.gson.JsonPrimitive jsonPrimitive2 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        boolean boolean3 = jsonNull0.equals((java.lang.Object) '4');
        com.google.gson.JsonArray jsonArray4 = new com.google.gson.JsonArray();
        int int5 = jsonArray4.size();
        com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive("");
        boolean boolean8 = jsonPrimitive7.isJsonNull();
        boolean boolean9 = jsonPrimitive7.isNumber();
        boolean boolean10 = jsonArray4.remove((com.google.gson.JsonElement) jsonPrimitive7);
        com.google.gson.JsonArray jsonArray11 = new com.google.gson.JsonArray();
        jsonArray11.add((java.lang.Number) (-1.0f));
        boolean boolean14 = jsonArray4.equals((java.lang.Object) jsonArray11);
        jsonArray11.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement18 = jsonArray11.get((int) (byte) 0);
        com.google.gson.JsonArray jsonArray19 = new com.google.gson.JsonArray();
        int int20 = jsonArray19.size();
        com.google.gson.JsonPrimitive jsonPrimitive22 = new com.google.gson.JsonPrimitive("");
        boolean boolean23 = jsonPrimitive22.isJsonNull();
        boolean boolean24 = jsonPrimitive22.isNumber();
        boolean boolean25 = jsonArray19.remove((com.google.gson.JsonElement) jsonPrimitive22);
        com.google.gson.JsonArray jsonArray26 = new com.google.gson.JsonArray();
        jsonArray26.add((java.lang.Number) (-1.0f));
        boolean boolean29 = jsonArray19.equals((java.lang.Object) jsonArray26);
        boolean boolean31 = jsonArray26.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        int int32 = jsonArray26.size();
        jsonArray11.addAll(jsonArray26);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor34 = jsonArray26.iterator();
        com.google.gson.JsonArray jsonArray35 = new com.google.gson.JsonArray();
        int int36 = jsonArray35.size();
        com.google.gson.JsonPrimitive jsonPrimitive38 = new com.google.gson.JsonPrimitive("");
        boolean boolean39 = jsonPrimitive38.isJsonNull();
        boolean boolean40 = jsonPrimitive38.isNumber();
        boolean boolean41 = jsonArray35.remove((com.google.gson.JsonElement) jsonPrimitive38);
        com.google.gson.JsonArray jsonArray42 = new com.google.gson.JsonArray();
        jsonArray42.add((java.lang.Number) (-1.0f));
        boolean boolean45 = jsonArray35.equals((java.lang.Object) jsonArray42);
        com.google.gson.JsonElement jsonElement46 = null;
        boolean boolean47 = jsonArray35.remove(jsonElement46);
        com.google.gson.JsonArray jsonArray48 = new com.google.gson.JsonArray();
        int int49 = jsonArray48.size();
        com.google.gson.JsonPrimitive jsonPrimitive51 = new com.google.gson.JsonPrimitive("");
        boolean boolean52 = jsonPrimitive51.isJsonNull();
        boolean boolean53 = jsonPrimitive51.isNumber();
        boolean boolean54 = jsonArray48.remove((com.google.gson.JsonElement) jsonPrimitive51);
        com.google.gson.JsonArray jsonArray55 = new com.google.gson.JsonArray();
        jsonArray55.add((java.lang.Number) (-1.0f));
        boolean boolean58 = jsonArray48.equals((java.lang.Object) jsonArray55);
        com.google.gson.JsonElement jsonElement59 = null;
        boolean boolean60 = jsonArray48.remove(jsonElement59);
        boolean boolean61 = jsonArray35.remove((com.google.gson.JsonElement) jsonArray48);
        jsonArray48.add((java.lang.Character) ' ');
        boolean boolean64 = jsonArray26.remove((com.google.gson.JsonElement) jsonArray48);
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader65 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray26);
        com.google.gson.JsonArray jsonArray66 = new com.google.gson.JsonArray();
        int int67 = jsonArray66.size();
        com.google.gson.JsonPrimitive jsonPrimitive69 = new com.google.gson.JsonPrimitive("");
        boolean boolean70 = jsonPrimitive69.isJsonNull();
        boolean boolean71 = jsonPrimitive69.isNumber();
        boolean boolean72 = jsonArray66.remove((com.google.gson.JsonElement) jsonPrimitive69);
        com.google.gson.JsonArray jsonArray73 = new com.google.gson.JsonArray();
        jsonArray73.add((java.lang.Number) (-1.0f));
        boolean boolean76 = jsonArray66.equals((java.lang.Object) jsonArray73);
        boolean boolean78 = jsonArray73.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        java.lang.String str79 = jsonArray73.getAsString();
        com.google.gson.JsonElement jsonElement81 = jsonArray73.get((int) (short) 0);
        boolean boolean82 = jsonArray73.isJsonArray();
        boolean boolean83 = jsonArray73.isJsonNull();
        jsonArray26.add((com.google.gson.JsonElement) jsonArray73);
        short short85 = jsonArray73.getAsShort();
        boolean boolean86 = jsonNull0.equals((java.lang.Object) jsonArray73);
        org.junit.Assert.assertNotNull(jsonNull0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jsonElement18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(jsonElementItor34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "-1.0" + "'", str79, "-1.0");
        org.junit.Assert.assertNotNull(jsonElement81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + short85 + "' != '" + (short) -1 + "'", short85 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        java.util.Collection<com.google.gson.internal.JsonReaderInternalAccess> jsonReaderInternalAccessCollection1 = autoCloseableMap0.values();
        boolean boolean3 = autoCloseableMap0.equals((java.lang.Object) 100.0f);
        com.google.gson.JsonArray jsonArray4 = new com.google.gson.JsonArray();
        int int5 = jsonArray4.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader6 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray4);
        jsonTreeReader6.skipValue();
        com.google.gson.stream.JsonToken jsonToken8 = jsonTreeReader6.peek();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap9 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int10 = autoCloseableMap9.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap11 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int12 = autoCloseableMap11.size();
        autoCloseableMap9.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap11);
        java.lang.Object obj14 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess15 = autoCloseableMap9.remove(obj14);
        com.google.gson.JsonPrimitive jsonPrimitive17 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number18 = jsonPrimitive17.getAsNumber();
        boolean boolean19 = autoCloseableMap9.containsKey((java.lang.Object) number18);
        com.google.gson.JsonPrimitive jsonPrimitive21 = new com.google.gson.JsonPrimitive("");
        boolean boolean22 = jsonPrimitive21.isJsonNull();
        boolean boolean24 = jsonPrimitive21.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean25 = jsonPrimitive21.isString();
        java.lang.Number number26 = jsonPrimitive21.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess27 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess27;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess29 = autoCloseableMap9.getOrDefault((java.lang.Object) jsonPrimitive21, jsonReaderInternalAccess27);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess30 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader6, jsonReaderInternalAccess29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = jsonTreeReader6.nextName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NAME but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReaderInternalAccessCollection1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken8 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken8.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess15);
        org.junit.Assert.assertNotNull(number18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(number26);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess27);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess29);
        org.junit.Assert.assertNull(jsonReaderInternalAccess30);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive("");
        boolean boolean2 = jsonPrimitive1.isJsonNull();
        boolean boolean3 = jsonPrimitive1.isNumber();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap4 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int5 = autoCloseableMap4.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap6 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int7 = autoCloseableMap6.size();
        autoCloseableMap4.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap6);
        com.google.gson.JsonArray jsonArray9 = new com.google.gson.JsonArray();
        int int10 = jsonArray9.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader11 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray9);
        jsonTreeReader11.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess13 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess14 = autoCloseableMap6.replace((java.lang.AutoCloseable) jsonTreeReader11, jsonReaderInternalAccess13);
        jsonTreeReader11.skipValue();
        boolean boolean16 = jsonTreeReader11.hasNext();
        boolean boolean17 = jsonPrimitive1.equals((java.lang.Object) jsonTreeReader11);
        java.lang.String str18 = jsonTreeReader11.toString();
        boolean boolean19 = jsonTreeReader11.isLenient();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = jsonTreeReader11.nextString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected STRING but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess13);
        org.junit.Assert.assertNull(jsonReaderInternalAccess14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "JsonTreeReader" + "'", str18, "JsonTreeReader");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet5 = autoCloseableMap0.entrySet();
        com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
        int int7 = jsonArray6.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader8 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray6);
        jsonTreeReader8.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess11 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader8, jsonReaderInternalAccess10);
        boolean boolean12 = jsonTreeReader8.isLenient();
        boolean boolean13 = jsonTreeReader8.hasNext();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertNull(jsonReaderInternalAccess11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap4 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int5 = autoCloseableMap4.size();
        autoCloseableMap2.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap4);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        int int8 = jsonArray7.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader9 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray7);
        jsonTreeReader9.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess11 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess12 = autoCloseableMap4.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess11);
        boolean boolean13 = jsonTreeReader9.hasNext();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess14 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess15 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess14);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = jsonTreeReader9.nextLong();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess11);
        org.junit.Assert.assertNull(jsonReaderInternalAccess12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess14);
        org.junit.Assert.assertNull(jsonReaderInternalAccess15);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.JsonPrimitive jsonPrimitive3 = new com.google.gson.JsonPrimitive("");
        boolean boolean4 = jsonPrimitive3.isJsonNull();
        boolean boolean5 = jsonPrimitive3.isNumber();
        boolean boolean6 = jsonArray0.remove((com.google.gson.JsonElement) jsonPrimitive3);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        jsonArray7.add((java.lang.Number) (-1.0f));
        boolean boolean10 = jsonArray0.equals((java.lang.Object) jsonArray7);
        jsonArray7.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement14 = jsonArray7.get((int) (byte) 0);
        com.google.gson.JsonArray jsonArray15 = new com.google.gson.JsonArray();
        int int16 = jsonArray15.size();
        com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive("");
        boolean boolean19 = jsonPrimitive18.isJsonNull();
        boolean boolean20 = jsonPrimitive18.isNumber();
        boolean boolean21 = jsonArray15.remove((com.google.gson.JsonElement) jsonPrimitive18);
        com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
        jsonArray22.add((java.lang.Number) (-1.0f));
        boolean boolean25 = jsonArray15.equals((java.lang.Object) jsonArray22);
        boolean boolean27 = jsonArray22.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        int int28 = jsonArray22.size();
        jsonArray7.addAll(jsonArray22);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor30 = jsonArray22.iterator();
        com.google.gson.JsonArray jsonArray31 = new com.google.gson.JsonArray();
        int int32 = jsonArray31.size();
        com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive("");
        boolean boolean35 = jsonPrimitive34.isJsonNull();
        boolean boolean36 = jsonPrimitive34.isNumber();
        boolean boolean37 = jsonArray31.remove((com.google.gson.JsonElement) jsonPrimitive34);
        com.google.gson.JsonArray jsonArray38 = new com.google.gson.JsonArray();
        jsonArray38.add((java.lang.Number) (-1.0f));
        boolean boolean41 = jsonArray31.equals((java.lang.Object) jsonArray38);
        com.google.gson.JsonElement jsonElement42 = null;
        boolean boolean43 = jsonArray31.remove(jsonElement42);
        com.google.gson.JsonArray jsonArray44 = new com.google.gson.JsonArray();
        int int45 = jsonArray44.size();
        com.google.gson.JsonPrimitive jsonPrimitive47 = new com.google.gson.JsonPrimitive("");
        boolean boolean48 = jsonPrimitive47.isJsonNull();
        boolean boolean49 = jsonPrimitive47.isNumber();
        boolean boolean50 = jsonArray44.remove((com.google.gson.JsonElement) jsonPrimitive47);
        com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
        jsonArray51.add((java.lang.Number) (-1.0f));
        boolean boolean54 = jsonArray44.equals((java.lang.Object) jsonArray51);
        com.google.gson.JsonElement jsonElement55 = null;
        boolean boolean56 = jsonArray44.remove(jsonElement55);
        boolean boolean57 = jsonArray31.remove((com.google.gson.JsonElement) jsonArray44);
        jsonArray44.add((java.lang.Character) ' ');
        boolean boolean60 = jsonArray22.remove((com.google.gson.JsonElement) jsonArray44);
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader61 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray22);
        boolean boolean62 = jsonTreeReader61.hasNext();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jsonElement14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(jsonElementItor30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        com.google.gson.JsonObject jsonObject11 = new com.google.gson.JsonObject();
        com.google.gson.JsonPrimitive jsonPrimitive13 = jsonObject11.getAsJsonPrimitive("com.google.gson.stream.MalformedJsonException: ");
        boolean boolean15 = autoCloseableMap2.remove((java.lang.Object) jsonObject11, (java.lang.Object) 1.0f);
        jsonObject11.addProperty("t", (java.lang.Character) '#');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertNull(jsonPrimitive13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        com.google.gson.JsonObject jsonObject11 = new com.google.gson.JsonObject();
        com.google.gson.JsonPrimitive jsonPrimitive13 = jsonObject11.getAsJsonPrimitive("com.google.gson.stream.MalformedJsonException: ");
        boolean boolean15 = autoCloseableMap2.remove((java.lang.Object) jsonObject11, (java.lang.Object) 1.0f);
        com.google.gson.stream.MalformedJsonException malformedJsonException18 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException19 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException18);
        java.lang.Throwable[] throwableArray20 = malformedJsonException19.getSuppressed();
        boolean boolean21 = autoCloseableMap2.equals((java.lang.Object) throwableArray20);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap22 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int23 = autoCloseableMap22.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap24 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int25 = autoCloseableMap24.size();
        autoCloseableMap22.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap24);
        autoCloseableMap2.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap22);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet28 = autoCloseableMap22.entrySet();
        com.google.gson.JsonArray jsonArray29 = new com.google.gson.JsonArray();
        int int30 = jsonArray29.size();
        com.google.gson.JsonPrimitive jsonPrimitive32 = new com.google.gson.JsonPrimitive("");
        boolean boolean33 = jsonPrimitive32.isJsonNull();
        boolean boolean34 = jsonPrimitive32.isNumber();
        boolean boolean35 = jsonArray29.remove((com.google.gson.JsonElement) jsonPrimitive32);
        com.google.gson.JsonArray jsonArray36 = new com.google.gson.JsonArray();
        jsonArray36.add((java.lang.Number) (-1.0f));
        boolean boolean39 = jsonArray29.equals((java.lang.Object) jsonArray36);
        jsonArray36.add((java.lang.Boolean) true);
        com.google.gson.JsonArray jsonArray42 = new com.google.gson.JsonArray();
        int int43 = jsonArray42.size();
        com.google.gson.JsonPrimitive jsonPrimitive45 = new com.google.gson.JsonPrimitive("");
        boolean boolean46 = jsonPrimitive45.isJsonNull();
        boolean boolean47 = jsonPrimitive45.isNumber();
        boolean boolean48 = jsonArray42.remove((com.google.gson.JsonElement) jsonPrimitive45);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor49 = jsonArray42.iterator();
        boolean boolean50 = jsonArray36.contains((com.google.gson.JsonElement) jsonArray42);
        jsonArray42.add((java.lang.Number) (byte) 100);
        java.util.Spliterator<com.google.gson.JsonElement> jsonElementSpliterator53 = jsonArray42.spliterator();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess54 = autoCloseableMap22.get((java.lang.Object) jsonArray42);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet55 = autoCloseableMap22.entrySet();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertNull(jsonPrimitive13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jsonElementItor49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jsonElementSpliterator53);
        org.junit.Assert.assertNull(jsonReaderInternalAccess54);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet55);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.skipValue();
        com.google.gson.stream.JsonToken jsonToken4 = jsonTreeReader2.peek();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.beginObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BEGIN_OBJECT but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken4 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken4.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.lang.Object obj5 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess6 = autoCloseableMap0.remove(obj5);
        com.google.gson.JsonPrimitive jsonPrimitive8 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number9 = jsonPrimitive8.getAsNumber();
        boolean boolean10 = autoCloseableMap0.containsKey((java.lang.Object) number9);
        com.google.gson.JsonPrimitive jsonPrimitive12 = new com.google.gson.JsonPrimitive("");
        boolean boolean13 = jsonPrimitive12.isJsonNull();
        boolean boolean15 = jsonPrimitive12.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean16 = jsonPrimitive12.isString();
        java.lang.Number number17 = jsonPrimitive12.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess18 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess18;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess20 = autoCloseableMap0.getOrDefault((java.lang.Object) jsonPrimitive12, jsonReaderInternalAccess18);
        java.util.Collection<com.google.gson.internal.JsonReaderInternalAccess> jsonReaderInternalAccessCollection21 = autoCloseableMap0.values();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap22 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        java.util.Collection<com.google.gson.internal.JsonReaderInternalAccess> jsonReaderInternalAccessCollection23 = autoCloseableMap22.values();
        boolean boolean25 = autoCloseableMap22.equals((java.lang.Object) 100.0f);
        com.google.gson.JsonArray jsonArray26 = new com.google.gson.JsonArray();
        int int27 = jsonArray26.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader28 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray26);
        jsonTreeReader28.skipValue();
        com.google.gson.stream.JsonToken jsonToken30 = jsonTreeReader28.peek();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap31 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int32 = autoCloseableMap31.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap33 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int34 = autoCloseableMap33.size();
        autoCloseableMap31.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap33);
        java.lang.Object obj36 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess37 = autoCloseableMap31.remove(obj36);
        com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number40 = jsonPrimitive39.getAsNumber();
        boolean boolean41 = autoCloseableMap31.containsKey((java.lang.Object) number40);
        com.google.gson.JsonPrimitive jsonPrimitive43 = new com.google.gson.JsonPrimitive("");
        boolean boolean44 = jsonPrimitive43.isJsonNull();
        boolean boolean46 = jsonPrimitive43.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean47 = jsonPrimitive43.isString();
        java.lang.Number number48 = jsonPrimitive43.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess49 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess49;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess51 = autoCloseableMap31.getOrDefault((java.lang.Object) jsonPrimitive43, jsonReaderInternalAccess49);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess52 = autoCloseableMap22.replace((java.lang.AutoCloseable) jsonTreeReader28, jsonReaderInternalAccess51);
        java.lang.String str53 = jsonTreeReader28.toString();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess54 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess54;
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap56 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int57 = autoCloseableMap56.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap58 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int59 = autoCloseableMap58.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap60 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int61 = autoCloseableMap60.size();
        autoCloseableMap58.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap60);
        com.google.gson.JsonArray jsonArray63 = new com.google.gson.JsonArray();
        int int64 = jsonArray63.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader65 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray63);
        jsonTreeReader65.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess67 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess68 = autoCloseableMap60.replace((java.lang.AutoCloseable) jsonTreeReader65, jsonReaderInternalAccess67);
        boolean boolean69 = jsonTreeReader65.hasNext();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess70 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess71 = autoCloseableMap56.replace((java.lang.AutoCloseable) jsonTreeReader65, jsonReaderInternalAccess70);
        boolean boolean72 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader28, jsonReaderInternalAccess54, jsonReaderInternalAccess71);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean73 = jsonTreeReader28.nextBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BOOLEAN but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess6);
        org.junit.Assert.assertNotNull(number9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(number17);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess18);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess20);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccessCollection21);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccessCollection23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken30 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken30.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess37);
        org.junit.Assert.assertNotNull(number40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(number48);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess49);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess51);
        org.junit.Assert.assertNull(jsonReaderInternalAccess52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "JsonTreeReader" + "'", str53, "JsonTreeReader");
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess67);
        org.junit.Assert.assertNull(jsonReaderInternalAccess68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess70);
        org.junit.Assert.assertNull(jsonReaderInternalAccess71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.skipValue();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.beginObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BEGIN_OBJECT but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.lang.Object obj5 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess6 = autoCloseableMap0.remove(obj5);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap7 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int8 = autoCloseableMap7.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap9 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int10 = autoCloseableMap9.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap11 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int12 = autoCloseableMap11.size();
        autoCloseableMap9.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap11);
        com.google.gson.JsonArray jsonArray14 = new com.google.gson.JsonArray();
        int int15 = jsonArray14.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader16 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray14);
        jsonTreeReader16.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess18 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess19 = autoCloseableMap11.replace((java.lang.AutoCloseable) jsonTreeReader16, jsonReaderInternalAccess18);
        boolean boolean20 = jsonTreeReader16.hasNext();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess21 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess22 = autoCloseableMap7.replace((java.lang.AutoCloseable) jsonTreeReader16, jsonReaderInternalAccess21);
        jsonTreeReader16.skipValue();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap24 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int25 = autoCloseableMap24.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap26 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int27 = autoCloseableMap26.size();
        autoCloseableMap24.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap26);
        java.lang.Object obj29 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess30 = autoCloseableMap24.remove(obj29);
        com.google.gson.JsonPrimitive jsonPrimitive32 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number33 = jsonPrimitive32.getAsNumber();
        boolean boolean34 = autoCloseableMap24.containsKey((java.lang.Object) number33);
        com.google.gson.JsonPrimitive jsonPrimitive36 = new com.google.gson.JsonPrimitive("");
        boolean boolean37 = jsonPrimitive36.isJsonNull();
        boolean boolean39 = jsonPrimitive36.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean40 = jsonPrimitive36.isString();
        java.lang.Number number41 = jsonPrimitive36.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess42 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess42;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess44 = autoCloseableMap24.getOrDefault((java.lang.Object) jsonPrimitive36, jsonReaderInternalAccess42);
        // The following exception was thrown during execution in test generation
        try {
            com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess45 = autoCloseableMap0.put((java.lang.AutoCloseable) jsonTreeReader16, jsonReaderInternalAccess42);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.gson.internal.bind.JsonTreeReader is not Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess18);
        org.junit.Assert.assertNull(jsonReaderInternalAccess19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess21);
        org.junit.Assert.assertNull(jsonReaderInternalAccess22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess30);
        org.junit.Assert.assertNotNull(number33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(number41);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess42);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess44);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive("");
        boolean boolean2 = jsonPrimitive1.isJsonNull();
        boolean boolean3 = jsonPrimitive1.isNumber();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap4 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int5 = autoCloseableMap4.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap6 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int7 = autoCloseableMap6.size();
        autoCloseableMap4.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap6);
        com.google.gson.JsonArray jsonArray9 = new com.google.gson.JsonArray();
        int int10 = jsonArray9.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader11 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray9);
        jsonTreeReader11.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess13 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess14 = autoCloseableMap6.replace((java.lang.AutoCloseable) jsonTreeReader11, jsonReaderInternalAccess13);
        jsonTreeReader11.skipValue();
        boolean boolean16 = jsonTreeReader11.hasNext();
        boolean boolean17 = jsonPrimitive1.equals((java.lang.Object) jsonTreeReader11);
        com.google.gson.stream.JsonToken jsonToken18 = jsonTreeReader11.peek();
        java.lang.String str19 = jsonTreeReader11.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int20 = jsonTreeReader11.nextInt();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess13);
        org.junit.Assert.assertNull(jsonReaderInternalAccess14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + jsonToken18 + "' != '" + com.google.gson.stream.JsonToken.BEGIN_ARRAY + "'", jsonToken18.equals(com.google.gson.stream.JsonToken.BEGIN_ARRAY));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JsonTreeReader" + "'", str19, "JsonTreeReader");
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        java.lang.String str7 = jsonTreeReader2.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JsonTreeReader" + "'", str7, "JsonTreeReader");
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        java.lang.String str4 = jsonTreeReader2.getPath();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.nextNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NULL but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "$[0]" + "'", str4, "$[0]");
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        boolean boolean7 = jsonTreeReader2.hasNext();
        jsonTreeReader2.beginArray();
        com.google.gson.stream.JsonToken jsonToken9 = jsonTreeReader2.peek();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + jsonToken9 + "' != '" + com.google.gson.stream.JsonToken.END_ARRAY + "'", jsonToken9.equals(com.google.gson.stream.JsonToken.END_ARRAY));
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.skipValue();
        com.google.gson.stream.JsonToken jsonToken4 = jsonTreeReader2.peek();
        java.lang.String str5 = jsonTreeReader2.toString();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.endArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected END_ARRAY but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken4 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken4.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JsonTreeReader" + "'", str5, "JsonTreeReader");
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.JsonPrimitive jsonPrimitive3 = new com.google.gson.JsonPrimitive("");
        boolean boolean4 = jsonPrimitive3.isJsonNull();
        boolean boolean5 = jsonPrimitive3.isNumber();
        boolean boolean6 = jsonArray0.remove((com.google.gson.JsonElement) jsonPrimitive3);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        jsonArray7.add((java.lang.Number) (-1.0f));
        boolean boolean10 = jsonArray0.equals((java.lang.Object) jsonArray7);
        jsonArray7.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement14 = jsonArray7.get((int) (byte) 0);
        com.google.gson.JsonArray jsonArray15 = new com.google.gson.JsonArray();
        int int16 = jsonArray15.size();
        com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive("");
        boolean boolean19 = jsonPrimitive18.isJsonNull();
        boolean boolean20 = jsonPrimitive18.isNumber();
        boolean boolean21 = jsonArray15.remove((com.google.gson.JsonElement) jsonPrimitive18);
        com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
        jsonArray22.add((java.lang.Number) (-1.0f));
        boolean boolean25 = jsonArray15.equals((java.lang.Object) jsonArray22);
        boolean boolean27 = jsonArray22.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        int int28 = jsonArray22.size();
        jsonArray7.addAll(jsonArray22);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor30 = jsonArray22.iterator();
        com.google.gson.JsonArray jsonArray31 = new com.google.gson.JsonArray();
        int int32 = jsonArray31.size();
        com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive("");
        boolean boolean35 = jsonPrimitive34.isJsonNull();
        boolean boolean36 = jsonPrimitive34.isNumber();
        boolean boolean37 = jsonArray31.remove((com.google.gson.JsonElement) jsonPrimitive34);
        com.google.gson.JsonArray jsonArray38 = new com.google.gson.JsonArray();
        jsonArray38.add((java.lang.Number) (-1.0f));
        boolean boolean41 = jsonArray31.equals((java.lang.Object) jsonArray38);
        com.google.gson.JsonElement jsonElement42 = null;
        boolean boolean43 = jsonArray31.remove(jsonElement42);
        com.google.gson.JsonArray jsonArray44 = new com.google.gson.JsonArray();
        int int45 = jsonArray44.size();
        com.google.gson.JsonPrimitive jsonPrimitive47 = new com.google.gson.JsonPrimitive("");
        boolean boolean48 = jsonPrimitive47.isJsonNull();
        boolean boolean49 = jsonPrimitive47.isNumber();
        boolean boolean50 = jsonArray44.remove((com.google.gson.JsonElement) jsonPrimitive47);
        com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
        jsonArray51.add((java.lang.Number) (-1.0f));
        boolean boolean54 = jsonArray44.equals((java.lang.Object) jsonArray51);
        com.google.gson.JsonElement jsonElement55 = null;
        boolean boolean56 = jsonArray44.remove(jsonElement55);
        boolean boolean57 = jsonArray31.remove((com.google.gson.JsonElement) jsonArray44);
        jsonArray44.add((java.lang.Character) ' ');
        boolean boolean60 = jsonArray22.remove((com.google.gson.JsonElement) jsonArray44);
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader61 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray22);
        // The following exception was thrown during execution in test generation
        try {
            com.google.gson.JsonElement jsonElement63 = jsonArray22.remove((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jsonElement14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(jsonElementItor30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.stream.MalformedJsonException malformedJsonException6 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException7 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException6);
        com.google.gson.stream.MalformedJsonException malformedJsonException8 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException6);
        com.google.gson.stream.MalformedJsonException malformedJsonException9 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable) malformedJsonException8);
        boolean boolean10 = autoCloseableMap0.equals((java.lang.Object) malformedJsonException9);
        com.google.gson.stream.MalformedJsonException malformedJsonException14 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException15 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException14);
        com.google.gson.stream.MalformedJsonException malformedJsonException16 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException15);
        boolean boolean17 = autoCloseableMap0.containsKey((java.lang.Object) malformedJsonException16);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap18 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        java.util.Collection<com.google.gson.internal.JsonReaderInternalAccess> jsonReaderInternalAccessCollection19 = autoCloseableMap18.values();
        boolean boolean21 = autoCloseableMap18.equals((java.lang.Object) 100.0f);
        com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
        int int23 = jsonArray22.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader24 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray22);
        jsonTreeReader24.skipValue();
        com.google.gson.stream.JsonToken jsonToken26 = jsonTreeReader24.peek();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap27 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int28 = autoCloseableMap27.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap29 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int30 = autoCloseableMap29.size();
        autoCloseableMap27.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap29);
        java.lang.Object obj32 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess33 = autoCloseableMap27.remove(obj32);
        com.google.gson.JsonPrimitive jsonPrimitive35 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number36 = jsonPrimitive35.getAsNumber();
        boolean boolean37 = autoCloseableMap27.containsKey((java.lang.Object) number36);
        com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive("");
        boolean boolean40 = jsonPrimitive39.isJsonNull();
        boolean boolean42 = jsonPrimitive39.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean43 = jsonPrimitive39.isString();
        java.lang.Number number44 = jsonPrimitive39.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess45 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess45;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess47 = autoCloseableMap27.getOrDefault((java.lang.Object) jsonPrimitive39, jsonReaderInternalAccess45);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess48 = autoCloseableMap18.replace((java.lang.AutoCloseable) jsonTreeReader24, jsonReaderInternalAccess47);
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap18);
        com.google.gson.JsonArray jsonArray50 = new com.google.gson.JsonArray();
        int int51 = jsonArray50.size();
        com.google.gson.JsonPrimitive jsonPrimitive53 = new com.google.gson.JsonPrimitive("");
        boolean boolean54 = jsonPrimitive53.isJsonNull();
        boolean boolean55 = jsonPrimitive53.isNumber();
        boolean boolean56 = jsonArray50.remove((com.google.gson.JsonElement) jsonPrimitive53);
        com.google.gson.JsonArray jsonArray57 = new com.google.gson.JsonArray();
        jsonArray57.add((java.lang.Number) (-1.0f));
        boolean boolean60 = jsonArray50.equals((java.lang.Object) jsonArray57);
        boolean boolean62 = jsonArray57.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        java.lang.String str63 = jsonArray57.getAsString();
        com.google.gson.JsonElement jsonElement65 = jsonArray57.get((int) (short) 0);
        float float66 = jsonArray57.getAsFloat();
        jsonArray57.add((java.lang.Character) 'a');
        com.google.gson.JsonArray jsonArray69 = new com.google.gson.JsonArray();
        int int70 = jsonArray69.size();
        com.google.gson.JsonPrimitive jsonPrimitive72 = new com.google.gson.JsonPrimitive("");
        boolean boolean73 = jsonPrimitive72.isJsonNull();
        boolean boolean74 = jsonPrimitive72.isNumber();
        boolean boolean75 = jsonArray69.remove((com.google.gson.JsonElement) jsonPrimitive72);
        com.google.gson.JsonArray jsonArray76 = new com.google.gson.JsonArray();
        jsonArray76.add((java.lang.Number) (-1.0f));
        boolean boolean79 = jsonArray69.equals((java.lang.Object) jsonArray76);
        com.google.gson.JsonElement jsonElement80 = null;
        boolean boolean81 = jsonArray69.remove(jsonElement80);
        com.google.gson.JsonArray jsonArray82 = new com.google.gson.JsonArray();
        int int83 = jsonArray82.size();
        com.google.gson.JsonPrimitive jsonPrimitive85 = new com.google.gson.JsonPrimitive("");
        boolean boolean86 = jsonPrimitive85.isJsonNull();
        boolean boolean87 = jsonPrimitive85.isNumber();
        boolean boolean88 = jsonArray82.remove((com.google.gson.JsonElement) jsonPrimitive85);
        com.google.gson.JsonArray jsonArray89 = new com.google.gson.JsonArray();
        jsonArray89.add((java.lang.Number) (-1.0f));
        boolean boolean92 = jsonArray82.equals((java.lang.Object) jsonArray89);
        com.google.gson.JsonElement jsonElement93 = null;
        boolean boolean94 = jsonArray82.remove(jsonElement93);
        boolean boolean95 = jsonArray69.remove((com.google.gson.JsonElement) jsonArray82);
        java.util.Spliterator<com.google.gson.JsonElement> jsonElementSpliterator96 = jsonArray82.spliterator();
        java.util.Spliterator<com.google.gson.JsonElement> jsonElementSpliterator97 = jsonArray82.spliterator();
        boolean boolean98 = autoCloseableMap18.remove((java.lang.Object) jsonArray57, (java.lang.Object) jsonArray82);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger99 = jsonArray57.getAsBigInteger();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccessCollection19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken26 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken26.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess33);
        org.junit.Assert.assertNotNull(number36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(number44);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess45);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess47);
        org.junit.Assert.assertNull(jsonReaderInternalAccess48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "-1.0" + "'", str63, "-1.0");
        org.junit.Assert.assertNotNull(jsonElement65);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-1.0f) + "'", float66 == (-1.0f));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(jsonElementSpliterator96);
        org.junit.Assert.assertNotNull(jsonElementSpliterator97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet5 = autoCloseableMap0.entrySet();
        com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
        int int7 = jsonArray6.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader8 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray6);
        jsonTreeReader8.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess11 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader8, jsonReaderInternalAccess10);
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader8.nextNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NULL but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertNull(jsonReaderInternalAccess11);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.skipValue();
        boolean boolean4 = jsonTreeReader2.isLenient();
        // The following exception was thrown during execution in test generation
        try {
            long long5 = jsonTreeReader2.nextLong();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.skipValue();
        com.google.gson.stream.JsonToken jsonToken4 = jsonTreeReader2.peek();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken4 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken4.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        com.google.gson.JsonObject jsonObject11 = new com.google.gson.JsonObject();
        com.google.gson.JsonPrimitive jsonPrimitive13 = jsonObject11.getAsJsonPrimitive("com.google.gson.stream.MalformedJsonException: ");
        boolean boolean15 = autoCloseableMap2.remove((java.lang.Object) jsonObject11, (java.lang.Object) 1.0f);
        com.google.gson.stream.MalformedJsonException malformedJsonException18 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException19 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException18);
        java.lang.Throwable[] throwableArray20 = malformedJsonException19.getSuppressed();
        boolean boolean21 = autoCloseableMap2.equals((java.lang.Object) throwableArray20);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap22 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int23 = autoCloseableMap22.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap24 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int25 = autoCloseableMap24.size();
        autoCloseableMap22.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap24);
        autoCloseableMap2.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap22);
        com.google.gson.JsonArray jsonArray28 = new com.google.gson.JsonArray();
        int int29 = jsonArray28.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap30 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int31 = autoCloseableMap30.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap32 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int33 = autoCloseableMap32.size();
        autoCloseableMap30.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap32);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet35 = autoCloseableMap30.entrySet();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap36 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int37 = autoCloseableMap36.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap38 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int39 = autoCloseableMap38.size();
        autoCloseableMap36.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap38);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet41 = autoCloseableMap36.keySet();
        int int42 = autoCloseableMap36.size();
        autoCloseableMap30.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap36);
        com.google.gson.JsonArray jsonArray44 = new com.google.gson.JsonArray();
        int int45 = jsonArray44.size();
        com.google.gson.JsonPrimitive jsonPrimitive47 = new com.google.gson.JsonPrimitive("");
        boolean boolean48 = jsonPrimitive47.isJsonNull();
        boolean boolean49 = jsonPrimitive47.isNumber();
        boolean boolean50 = jsonArray44.remove((com.google.gson.JsonElement) jsonPrimitive47);
        com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
        jsonArray51.add((java.lang.Number) (-1.0f));
        boolean boolean54 = jsonArray44.equals((java.lang.Object) jsonArray51);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor55 = jsonArray44.iterator();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess56 = autoCloseableMap36.remove((java.lang.Object) jsonArray44);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet57 = autoCloseableMap36.keySet();
        boolean boolean58 = autoCloseableMap2.remove((java.lang.Object) jsonArray28, (java.lang.Object) autoCloseableMap36);
        com.google.gson.JsonArray jsonArray59 = new com.google.gson.JsonArray();
        int int60 = jsonArray59.size();
        com.google.gson.JsonPrimitive jsonPrimitive62 = new com.google.gson.JsonPrimitive("");
        boolean boolean63 = jsonPrimitive62.isJsonNull();
        boolean boolean64 = jsonPrimitive62.isNumber();
        boolean boolean65 = jsonArray59.remove((com.google.gson.JsonElement) jsonPrimitive62);
        boolean boolean66 = jsonPrimitive62.getAsBoolean();
        java.lang.String str67 = jsonPrimitive62.getAsString();
        boolean boolean68 = jsonPrimitive62.isJsonNull();
        boolean boolean69 = jsonPrimitive62.isBoolean();
        boolean boolean71 = autoCloseableMap36.remove((java.lang.Object) boolean69, (java.lang.Object) "-1.0");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertNull(jsonPrimitive13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(autoCloseableSet41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jsonElementItor55);
        org.junit.Assert.assertNull(jsonReaderInternalAccess56);
        org.junit.Assert.assertNotNull(autoCloseableSet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.lang.Object obj5 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess6 = autoCloseableMap0.remove(obj5);
        com.google.gson.JsonPrimitive jsonPrimitive8 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number9 = jsonPrimitive8.getAsNumber();
        boolean boolean10 = autoCloseableMap0.containsKey((java.lang.Object) number9);
        com.google.gson.JsonPrimitive jsonPrimitive12 = new com.google.gson.JsonPrimitive("");
        boolean boolean13 = jsonPrimitive12.isJsonNull();
        boolean boolean15 = jsonPrimitive12.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean16 = jsonPrimitive12.isString();
        java.lang.Number number17 = jsonPrimitive12.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess18 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess18;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess20 = autoCloseableMap0.getOrDefault((java.lang.Object) jsonPrimitive12, jsonReaderInternalAccess18);
        java.util.Collection<com.google.gson.internal.JsonReaderInternalAccess> jsonReaderInternalAccessCollection21 = autoCloseableMap0.values();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap22 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        java.util.Collection<com.google.gson.internal.JsonReaderInternalAccess> jsonReaderInternalAccessCollection23 = autoCloseableMap22.values();
        boolean boolean25 = autoCloseableMap22.equals((java.lang.Object) 100.0f);
        com.google.gson.JsonArray jsonArray26 = new com.google.gson.JsonArray();
        int int27 = jsonArray26.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader28 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray26);
        jsonTreeReader28.skipValue();
        com.google.gson.stream.JsonToken jsonToken30 = jsonTreeReader28.peek();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap31 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int32 = autoCloseableMap31.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap33 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int34 = autoCloseableMap33.size();
        autoCloseableMap31.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap33);
        java.lang.Object obj36 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess37 = autoCloseableMap31.remove(obj36);
        com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number40 = jsonPrimitive39.getAsNumber();
        boolean boolean41 = autoCloseableMap31.containsKey((java.lang.Object) number40);
        com.google.gson.JsonPrimitive jsonPrimitive43 = new com.google.gson.JsonPrimitive("");
        boolean boolean44 = jsonPrimitive43.isJsonNull();
        boolean boolean46 = jsonPrimitive43.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean47 = jsonPrimitive43.isString();
        java.lang.Number number48 = jsonPrimitive43.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess49 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess49;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess51 = autoCloseableMap31.getOrDefault((java.lang.Object) jsonPrimitive43, jsonReaderInternalAccess49);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess52 = autoCloseableMap22.replace((java.lang.AutoCloseable) jsonTreeReader28, jsonReaderInternalAccess51);
        java.lang.String str53 = jsonTreeReader28.toString();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess54 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess54;
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap56 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int57 = autoCloseableMap56.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap58 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int59 = autoCloseableMap58.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap60 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int61 = autoCloseableMap60.size();
        autoCloseableMap58.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap60);
        com.google.gson.JsonArray jsonArray63 = new com.google.gson.JsonArray();
        int int64 = jsonArray63.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader65 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray63);
        jsonTreeReader65.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess67 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess68 = autoCloseableMap60.replace((java.lang.AutoCloseable) jsonTreeReader65, jsonReaderInternalAccess67);
        boolean boolean69 = jsonTreeReader65.hasNext();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess70 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess71 = autoCloseableMap56.replace((java.lang.AutoCloseable) jsonTreeReader65, jsonReaderInternalAccess70);
        boolean boolean72 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader28, jsonReaderInternalAccess54, jsonReaderInternalAccess71);
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader28.beginArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BEGIN_ARRAY but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess6);
        org.junit.Assert.assertNotNull(number9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(number17);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess18);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess20);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccessCollection21);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccessCollection23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken30 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken30.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess37);
        org.junit.Assert.assertNotNull(number40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(number48);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess49);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess51);
        org.junit.Assert.assertNull(jsonReaderInternalAccess52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "JsonTreeReader" + "'", str53, "JsonTreeReader");
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess67);
        org.junit.Assert.assertNull(jsonReaderInternalAccess68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess70);
        org.junit.Assert.assertNull(jsonReaderInternalAccess71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        jsonTreeReader7.skipValue();
        boolean boolean12 = jsonTreeReader7.hasNext();
        jsonTreeReader7.beginArray();
        jsonTreeReader7.endArray();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.skipValue();
        boolean boolean4 = jsonTreeReader2.isLenient();
        java.lang.String str5 = jsonTreeReader2.getPath();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.nextNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NULL but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.lang.Object obj5 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess6 = autoCloseableMap0.remove(obj5);
        com.google.gson.JsonPrimitive jsonPrimitive8 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number9 = jsonPrimitive8.getAsNumber();
        boolean boolean10 = autoCloseableMap0.containsKey((java.lang.Object) number9);
        com.google.gson.JsonPrimitive jsonPrimitive12 = new com.google.gson.JsonPrimitive("");
        boolean boolean13 = jsonPrimitive12.isJsonNull();
        boolean boolean15 = jsonPrimitive12.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean16 = jsonPrimitive12.isString();
        java.lang.Number number17 = jsonPrimitive12.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess18 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess18;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess20 = autoCloseableMap0.getOrDefault((java.lang.Object) jsonPrimitive12, jsonReaderInternalAccess18);
        com.google.gson.JsonArray jsonArray21 = new com.google.gson.JsonArray();
        int int22 = jsonArray21.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader23 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray21);
        jsonTreeReader23.beginArray();
        jsonTreeReader23.skipValue();
        java.lang.String str26 = jsonTreeReader23.getPath();
        boolean boolean27 = jsonTreeReader23.hasNext();
        boolean boolean28 = jsonTreeReader23.hasNext();
        jsonTreeReader23.skipValue();
        com.google.gson.stream.JsonToken jsonToken30 = jsonTreeReader23.peek();
        // The following exception was thrown during execution in test generation
        try {
// flaky:             jsonReaderInternalAccess20.promoteNameToValue((com.google.gson.stream.JsonReader) jsonTreeReader23);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess6);
        org.junit.Assert.assertNotNull(number9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(number17);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess18);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "$" + "'", str26, "$");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + jsonToken30 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken30.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        boolean boolean3 = jsonArray0.isJsonPrimitive();
        com.google.gson.JsonArray jsonArray4 = new com.google.gson.JsonArray();
        int int5 = jsonArray4.size();
        com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive("");
        boolean boolean8 = jsonPrimitive7.isJsonNull();
        boolean boolean9 = jsonPrimitive7.isNumber();
        boolean boolean10 = jsonArray4.remove((com.google.gson.JsonElement) jsonPrimitive7);
        com.google.gson.JsonArray jsonArray11 = new com.google.gson.JsonArray();
        jsonArray11.add((java.lang.Number) (-1.0f));
        boolean boolean14 = jsonArray4.equals((java.lang.Object) jsonArray11);
        jsonArray11.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement18 = jsonArray11.get((int) (byte) 0);
        com.google.gson.JsonArray jsonArray19 = new com.google.gson.JsonArray();
        int int20 = jsonArray19.size();
        com.google.gson.JsonPrimitive jsonPrimitive22 = new com.google.gson.JsonPrimitive("");
        boolean boolean23 = jsonPrimitive22.isJsonNull();
        boolean boolean24 = jsonPrimitive22.isNumber();
        boolean boolean25 = jsonArray19.remove((com.google.gson.JsonElement) jsonPrimitive22);
        com.google.gson.JsonArray jsonArray26 = new com.google.gson.JsonArray();
        jsonArray26.add((java.lang.Number) (-1.0f));
        boolean boolean29 = jsonArray19.equals((java.lang.Object) jsonArray26);
        boolean boolean31 = jsonArray26.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        int int32 = jsonArray26.size();
        jsonArray11.addAll(jsonArray26);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor34 = jsonArray26.iterator();
        com.google.gson.JsonArray jsonArray35 = new com.google.gson.JsonArray();
        int int36 = jsonArray35.size();
        com.google.gson.JsonPrimitive jsonPrimitive38 = new com.google.gson.JsonPrimitive("");
        boolean boolean39 = jsonPrimitive38.isJsonNull();
        boolean boolean40 = jsonPrimitive38.isNumber();
        boolean boolean41 = jsonArray35.remove((com.google.gson.JsonElement) jsonPrimitive38);
        com.google.gson.JsonArray jsonArray42 = new com.google.gson.JsonArray();
        jsonArray42.add((java.lang.Number) (-1.0f));
        boolean boolean45 = jsonArray35.equals((java.lang.Object) jsonArray42);
        com.google.gson.JsonElement jsonElement46 = null;
        boolean boolean47 = jsonArray35.remove(jsonElement46);
        com.google.gson.JsonArray jsonArray48 = new com.google.gson.JsonArray();
        int int49 = jsonArray48.size();
        com.google.gson.JsonPrimitive jsonPrimitive51 = new com.google.gson.JsonPrimitive("");
        boolean boolean52 = jsonPrimitive51.isJsonNull();
        boolean boolean53 = jsonPrimitive51.isNumber();
        boolean boolean54 = jsonArray48.remove((com.google.gson.JsonElement) jsonPrimitive51);
        com.google.gson.JsonArray jsonArray55 = new com.google.gson.JsonArray();
        jsonArray55.add((java.lang.Number) (-1.0f));
        boolean boolean58 = jsonArray48.equals((java.lang.Object) jsonArray55);
        com.google.gson.JsonElement jsonElement59 = null;
        boolean boolean60 = jsonArray48.remove(jsonElement59);
        boolean boolean61 = jsonArray35.remove((com.google.gson.JsonElement) jsonArray48);
        jsonArray48.add((java.lang.Character) ' ');
        boolean boolean64 = jsonArray26.remove((com.google.gson.JsonElement) jsonArray48);
        com.google.gson.JsonObject jsonObject66 = new com.google.gson.JsonObject();
        com.google.gson.JsonObject jsonObject68 = new com.google.gson.JsonObject();
        jsonObject66.add("com.google.gson.stream.MalformedJsonException: ", (com.google.gson.JsonElement) jsonObject68);
        java.util.Set<java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement>> strEntrySet70 = jsonObject68.entrySet();
        com.google.gson.JsonElement jsonElement71 = jsonArray26.set(0, (com.google.gson.JsonElement) jsonObject68);
        jsonArray0.add((com.google.gson.JsonElement) jsonObject68);
        // The following exception was thrown during execution in test generation
        try {
            long long73 = jsonArray0.getAsLong();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: JsonObject");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jsonElement18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(jsonElementItor34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strEntrySet70);
        org.junit.Assert.assertNotNull(jsonElement71);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.JsonArray jsonArray2 = new com.google.gson.JsonArray();
        int int3 = jsonArray2.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader4 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray2);
        jsonTreeReader4.beginArray();
        jsonTreeReader4.skipValue();
        java.lang.String str7 = jsonTreeReader4.getPath();
        boolean boolean8 = jsonTreeReader4.hasNext();
        boolean boolean9 = jsonTreeReader4.hasNext();
        jsonTreeReader4.beginArray();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap11 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int12 = autoCloseableMap11.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap13 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int14 = autoCloseableMap13.size();
        autoCloseableMap11.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap13);
        java.lang.Object obj16 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess17 = autoCloseableMap11.remove(obj16);
        com.google.gson.JsonPrimitive jsonPrimitive19 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number20 = jsonPrimitive19.getAsNumber();
        boolean boolean21 = autoCloseableMap11.containsKey((java.lang.Object) number20);
        com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive("");
        boolean boolean24 = jsonPrimitive23.isJsonNull();
        boolean boolean26 = jsonPrimitive23.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean27 = jsonPrimitive23.isString();
        java.lang.Number number28 = jsonPrimitive23.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess29 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess29;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess31 = autoCloseableMap11.getOrDefault((java.lang.Object) jsonPrimitive23, jsonReaderInternalAccess29);
        com.google.gson.JsonArray jsonArray32 = new com.google.gson.JsonArray();
        int int33 = jsonArray32.size();
        com.google.gson.JsonPrimitive jsonPrimitive35 = new com.google.gson.JsonPrimitive("");
        boolean boolean36 = jsonPrimitive35.isJsonNull();
        boolean boolean37 = jsonPrimitive35.isNumber();
        boolean boolean38 = jsonArray32.remove((com.google.gson.JsonElement) jsonPrimitive35);
        com.google.gson.JsonArray jsonArray39 = new com.google.gson.JsonArray();
        jsonArray39.add((java.lang.Number) (-1.0f));
        boolean boolean42 = jsonArray32.equals((java.lang.Object) jsonArray39);
        boolean boolean44 = jsonArray39.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        int int45 = jsonArray39.size();
        com.google.gson.JsonArray jsonArray46 = new com.google.gson.JsonArray();
        int int47 = jsonArray46.size();
        jsonArray39.addAll(jsonArray46);
        jsonArray39.add("-1.0");
        com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
        int int52 = jsonArray51.size();
        com.google.gson.JsonPrimitive jsonPrimitive54 = new com.google.gson.JsonPrimitive("");
        boolean boolean55 = jsonPrimitive54.isJsonNull();
        boolean boolean56 = jsonPrimitive54.isNumber();
        boolean boolean57 = jsonArray51.remove((com.google.gson.JsonElement) jsonPrimitive54);
        com.google.gson.JsonArray jsonArray58 = new com.google.gson.JsonArray();
        jsonArray58.add((java.lang.Number) (-1.0f));
        boolean boolean61 = jsonArray51.equals((java.lang.Object) jsonArray58);
        boolean boolean63 = jsonArray58.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        java.lang.String str64 = jsonArray58.getAsString();
        com.google.gson.JsonElement jsonElement66 = jsonArray58.get((int) (short) 0);
        boolean boolean67 = jsonArray39.remove(jsonElement66);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap68 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int69 = autoCloseableMap68.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap70 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int71 = autoCloseableMap70.size();
        autoCloseableMap68.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap70);
        java.lang.Object obj73 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess74 = autoCloseableMap68.remove(obj73);
        com.google.gson.JsonPrimitive jsonPrimitive76 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number77 = jsonPrimitive76.getAsNumber();
        boolean boolean78 = autoCloseableMap68.containsKey((java.lang.Object) number77);
        com.google.gson.JsonPrimitive jsonPrimitive80 = new com.google.gson.JsonPrimitive("");
        boolean boolean81 = jsonPrimitive80.isJsonNull();
        boolean boolean83 = jsonPrimitive80.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean84 = jsonPrimitive80.isString();
        java.lang.Number number85 = jsonPrimitive80.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess86 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess86;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess88 = autoCloseableMap68.getOrDefault((java.lang.Object) jsonPrimitive80, jsonReaderInternalAccess86);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess89 = autoCloseableMap11.getOrDefault((java.lang.Object) jsonElement66, jsonReaderInternalAccess86);
        // The following exception was thrown during execution in test generation
        try {
            com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess90 = autoCloseableMap0.put((java.lang.AutoCloseable) jsonTreeReader4, jsonReaderInternalAccess86);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.gson.internal.bind.JsonTreeReader is not Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "$" + "'", str7, "$");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess17);
        org.junit.Assert.assertNotNull(number20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(number28);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess29);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "-1.0" + "'", str64, "-1.0");
        org.junit.Assert.assertNotNull(jsonElement66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess74);
        org.junit.Assert.assertNotNull(number77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(number85);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess86);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess88);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess89);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.JsonPrimitive jsonPrimitive3 = new com.google.gson.JsonPrimitive("");
        boolean boolean4 = jsonPrimitive3.isJsonNull();
        boolean boolean5 = jsonPrimitive3.isNumber();
        boolean boolean6 = jsonArray0.remove((com.google.gson.JsonElement) jsonPrimitive3);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        jsonArray7.add((java.lang.Number) (-1.0f));
        boolean boolean10 = jsonArray0.equals((java.lang.Object) jsonArray7);
        jsonArray7.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement14 = jsonArray7.get((int) (byte) 0);
        com.google.gson.JsonArray jsonArray15 = new com.google.gson.JsonArray();
        int int16 = jsonArray15.size();
        com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive("");
        boolean boolean19 = jsonPrimitive18.isJsonNull();
        boolean boolean20 = jsonPrimitive18.isNumber();
        boolean boolean21 = jsonArray15.remove((com.google.gson.JsonElement) jsonPrimitive18);
        com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
        jsonArray22.add((java.lang.Number) (-1.0f));
        boolean boolean25 = jsonArray15.equals((java.lang.Object) jsonArray22);
        boolean boolean27 = jsonArray22.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        int int28 = jsonArray22.size();
        jsonArray7.addAll(jsonArray22);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor30 = jsonArray22.iterator();
        com.google.gson.JsonArray jsonArray31 = new com.google.gson.JsonArray();
        int int32 = jsonArray31.size();
        com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive("");
        boolean boolean35 = jsonPrimitive34.isJsonNull();
        boolean boolean36 = jsonPrimitive34.isNumber();
        boolean boolean37 = jsonArray31.remove((com.google.gson.JsonElement) jsonPrimitive34);
        com.google.gson.JsonArray jsonArray38 = new com.google.gson.JsonArray();
        jsonArray38.add((java.lang.Number) (-1.0f));
        boolean boolean41 = jsonArray31.equals((java.lang.Object) jsonArray38);
        com.google.gson.JsonElement jsonElement42 = null;
        boolean boolean43 = jsonArray31.remove(jsonElement42);
        com.google.gson.JsonArray jsonArray44 = new com.google.gson.JsonArray();
        int int45 = jsonArray44.size();
        com.google.gson.JsonPrimitive jsonPrimitive47 = new com.google.gson.JsonPrimitive("");
        boolean boolean48 = jsonPrimitive47.isJsonNull();
        boolean boolean49 = jsonPrimitive47.isNumber();
        boolean boolean50 = jsonArray44.remove((com.google.gson.JsonElement) jsonPrimitive47);
        com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
        jsonArray51.add((java.lang.Number) (-1.0f));
        boolean boolean54 = jsonArray44.equals((java.lang.Object) jsonArray51);
        com.google.gson.JsonElement jsonElement55 = null;
        boolean boolean56 = jsonArray44.remove(jsonElement55);
        boolean boolean57 = jsonArray31.remove((com.google.gson.JsonElement) jsonArray44);
        jsonArray44.add((java.lang.Character) ' ');
        boolean boolean60 = jsonArray22.remove((com.google.gson.JsonElement) jsonArray44);
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader61 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray22);
        java.lang.String str62 = jsonTreeReader61.getPath();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jsonElement14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(jsonElementItor30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "$" + "'", str62, "$");
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        boolean boolean11 = jsonTreeReader7.hasNext();
        com.google.gson.stream.JsonToken jsonToken12 = jsonTreeReader7.peek();
        boolean boolean13 = jsonTreeReader7.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader7.beginObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BEGIN_OBJECT but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + jsonToken12 + "' != '" + com.google.gson.stream.JsonToken.END_ARRAY + "'", jsonToken12.equals(com.google.gson.stream.JsonToken.END_ARRAY));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        java.lang.String str4 = jsonTreeReader2.getPath();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "$[0]" + "'", str4, "$[0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$[0]" + "'", str5, "$[0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        boolean boolean11 = jsonTreeReader7.hasNext();
        com.google.gson.stream.JsonToken jsonToken12 = jsonTreeReader7.peek();
        jsonTreeReader7.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = jsonTreeReader7.nextString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected STRING but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + jsonToken12 + "' != '" + com.google.gson.stream.JsonToken.END_ARRAY + "'", jsonToken12.equals(com.google.gson.stream.JsonToken.END_ARRAY));
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap11 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int12 = autoCloseableMap11.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap13 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int14 = autoCloseableMap13.size();
        autoCloseableMap11.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap13);
        com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
        int int17 = jsonArray16.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader18 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray16);
        jsonTreeReader18.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess20 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess21 = autoCloseableMap13.replace((java.lang.AutoCloseable) jsonTreeReader18, jsonReaderInternalAccess20);
        jsonTreeReader18.skipValue();
        boolean boolean23 = jsonTreeReader18.hasNext();
        boolean boolean24 = jsonTreeReader18.hasNext();
        jsonTreeReader18.setLenient(false);
        java.lang.String str27 = jsonTreeReader18.getPath();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap28 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int29 = autoCloseableMap28.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap30 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int31 = autoCloseableMap30.size();
        autoCloseableMap28.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap30);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet33 = autoCloseableMap28.entrySet();
        com.google.gson.JsonArray jsonArray34 = new com.google.gson.JsonArray();
        int int35 = jsonArray34.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader36 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray34);
        jsonTreeReader36.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess38 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess39 = autoCloseableMap28.replace((java.lang.AutoCloseable) jsonTreeReader36, jsonReaderInternalAccess38);
        // The following exception was thrown during execution in test generation
        try {
            com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess40 = autoCloseableMap2.put((java.lang.AutoCloseable) jsonTreeReader18, jsonReaderInternalAccess39);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.gson.internal.bind.JsonTreeReader is not Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess20);
        org.junit.Assert.assertNull(jsonReaderInternalAccess21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "$" + "'", str27, "$");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess38);
        org.junit.Assert.assertNull(jsonReaderInternalAccess39);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive("");
        boolean boolean2 = jsonPrimitive1.isJsonNull();
        boolean boolean3 = jsonPrimitive1.isNumber();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap4 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int5 = autoCloseableMap4.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap6 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int7 = autoCloseableMap6.size();
        autoCloseableMap4.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap6);
        com.google.gson.JsonArray jsonArray9 = new com.google.gson.JsonArray();
        int int10 = jsonArray9.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader11 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray9);
        jsonTreeReader11.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess13 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess14 = autoCloseableMap6.replace((java.lang.AutoCloseable) jsonTreeReader11, jsonReaderInternalAccess13);
        jsonTreeReader11.skipValue();
        boolean boolean16 = jsonTreeReader11.hasNext();
        boolean boolean17 = jsonPrimitive1.equals((java.lang.Object) jsonTreeReader11);
        com.google.gson.stream.JsonToken jsonToken18 = jsonTreeReader11.peek();
        java.lang.String str19 = jsonTreeReader11.toString();
        boolean boolean20 = jsonTreeReader11.hasNext();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess13);
        org.junit.Assert.assertNull(jsonReaderInternalAccess14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + jsonToken18 + "' != '" + com.google.gson.stream.JsonToken.BEGIN_ARRAY + "'", jsonToken18.equals(com.google.gson.stream.JsonToken.BEGIN_ARRAY));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JsonTreeReader" + "'", str19, "JsonTreeReader");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        com.google.gson.JsonObject jsonObject11 = new com.google.gson.JsonObject();
        com.google.gson.JsonPrimitive jsonPrimitive13 = jsonObject11.getAsJsonPrimitive("com.google.gson.stream.MalformedJsonException: ");
        boolean boolean15 = autoCloseableMap2.remove((java.lang.Object) jsonObject11, (java.lang.Object) 1.0f);
        com.google.gson.JsonElement jsonElement17 = jsonObject11.get("com.google.gson.stream.MalformedJsonException");
        java.util.Set<java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement>> strEntrySet18 = jsonObject11.entrySet();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertNull(jsonPrimitive13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jsonElement17);
        org.junit.Assert.assertNotNull(strEntrySet18);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        com.google.gson.JsonObject jsonObject11 = new com.google.gson.JsonObject();
        com.google.gson.JsonPrimitive jsonPrimitive13 = jsonObject11.getAsJsonPrimitive("com.google.gson.stream.MalformedJsonException: ");
        boolean boolean15 = autoCloseableMap2.remove((java.lang.Object) jsonObject11, (java.lang.Object) 1.0f);
        com.google.gson.stream.MalformedJsonException malformedJsonException18 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException19 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException18);
        java.lang.Throwable[] throwableArray20 = malformedJsonException19.getSuppressed();
        boolean boolean21 = autoCloseableMap2.equals((java.lang.Object) throwableArray20);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap22 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int23 = autoCloseableMap22.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap24 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int25 = autoCloseableMap24.size();
        autoCloseableMap22.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap24);
        autoCloseableMap2.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap22);
        com.google.gson.JsonArray jsonArray28 = new com.google.gson.JsonArray();
        int int29 = jsonArray28.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap30 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int31 = autoCloseableMap30.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap32 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int33 = autoCloseableMap32.size();
        autoCloseableMap30.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap32);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet35 = autoCloseableMap30.entrySet();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap36 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int37 = autoCloseableMap36.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap38 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int39 = autoCloseableMap38.size();
        autoCloseableMap36.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap38);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet41 = autoCloseableMap36.keySet();
        int int42 = autoCloseableMap36.size();
        autoCloseableMap30.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap36);
        com.google.gson.JsonArray jsonArray44 = new com.google.gson.JsonArray();
        int int45 = jsonArray44.size();
        com.google.gson.JsonPrimitive jsonPrimitive47 = new com.google.gson.JsonPrimitive("");
        boolean boolean48 = jsonPrimitive47.isJsonNull();
        boolean boolean49 = jsonPrimitive47.isNumber();
        boolean boolean50 = jsonArray44.remove((com.google.gson.JsonElement) jsonPrimitive47);
        com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
        jsonArray51.add((java.lang.Number) (-1.0f));
        boolean boolean54 = jsonArray44.equals((java.lang.Object) jsonArray51);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor55 = jsonArray44.iterator();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess56 = autoCloseableMap36.remove((java.lang.Object) jsonArray44);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet57 = autoCloseableMap36.keySet();
        boolean boolean58 = autoCloseableMap2.remove((java.lang.Object) jsonArray28, (java.lang.Object) autoCloseableMap36);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap59 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int60 = autoCloseableMap59.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap61 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int62 = autoCloseableMap61.size();
        autoCloseableMap59.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap61);
        com.google.gson.JsonArray jsonArray64 = new com.google.gson.JsonArray();
        int int65 = jsonArray64.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader66 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray64);
        jsonTreeReader66.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess68 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess69 = autoCloseableMap61.replace((java.lang.AutoCloseable) jsonTreeReader66, jsonReaderInternalAccess68);
        com.google.gson.JsonObject jsonObject70 = new com.google.gson.JsonObject();
        com.google.gson.JsonPrimitive jsonPrimitive72 = jsonObject70.getAsJsonPrimitive("com.google.gson.stream.MalformedJsonException: ");
        boolean boolean74 = autoCloseableMap61.remove((java.lang.Object) jsonObject70, (java.lang.Object) 1.0f);
        com.google.gson.stream.MalformedJsonException malformedJsonException77 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException78 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException77);
        java.lang.Throwable[] throwableArray79 = malformedJsonException78.getSuppressed();
        boolean boolean80 = autoCloseableMap61.equals((java.lang.Object) throwableArray79);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap81 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int82 = autoCloseableMap81.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap83 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int84 = autoCloseableMap83.size();
        autoCloseableMap81.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap83);
        autoCloseableMap61.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap81);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet87 = autoCloseableMap81.entrySet();
        boolean boolean88 = autoCloseableMap2.containsKey((java.lang.Object) autoCloseableMap81);
        boolean boolean89 = autoCloseableMap2.isEmpty();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertNull(jsonPrimitive13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(autoCloseableSet41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jsonElementItor55);
        org.junit.Assert.assertNull(jsonReaderInternalAccess56);
        org.junit.Assert.assertNotNull(autoCloseableSet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess68);
        org.junit.Assert.assertNull(jsonReaderInternalAccess69);
        org.junit.Assert.assertNull(jsonPrimitive72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap4 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int5 = autoCloseableMap4.size();
        autoCloseableMap2.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap4);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        int int8 = jsonArray7.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader9 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray7);
        jsonTreeReader9.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess11 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess12 = autoCloseableMap4.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess11);
        boolean boolean13 = jsonTreeReader9.hasNext();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess14 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess15 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess14);
        jsonTreeReader9.skipValue();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader9.promoteNameToValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NAME but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess11);
        org.junit.Assert.assertNull(jsonReaderInternalAccess12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess14);
        org.junit.Assert.assertNull(jsonReaderInternalAccess15);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        jsonTreeReader2.setLenient(false);
        boolean boolean9 = jsonTreeReader2.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = jsonTreeReader2.nextDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.lang.Object obj5 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess6 = autoCloseableMap0.remove(obj5);
        com.google.gson.JsonPrimitive jsonPrimitive8 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number9 = jsonPrimitive8.getAsNumber();
        boolean boolean10 = autoCloseableMap0.containsKey((java.lang.Object) number9);
        com.google.gson.JsonPrimitive jsonPrimitive12 = new com.google.gson.JsonPrimitive("");
        boolean boolean13 = jsonPrimitive12.isJsonNull();
        boolean boolean15 = jsonPrimitive12.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean16 = jsonPrimitive12.isString();
        java.lang.Number number17 = jsonPrimitive12.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess18 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess18;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess20 = autoCloseableMap0.getOrDefault((java.lang.Object) jsonPrimitive12, jsonReaderInternalAccess18);
        java.util.Collection<com.google.gson.internal.JsonReaderInternalAccess> jsonReaderInternalAccessCollection21 = autoCloseableMap0.values();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap22 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        java.util.Collection<com.google.gson.internal.JsonReaderInternalAccess> jsonReaderInternalAccessCollection23 = autoCloseableMap22.values();
        boolean boolean25 = autoCloseableMap22.equals((java.lang.Object) 100.0f);
        com.google.gson.JsonArray jsonArray26 = new com.google.gson.JsonArray();
        int int27 = jsonArray26.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader28 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray26);
        jsonTreeReader28.skipValue();
        com.google.gson.stream.JsonToken jsonToken30 = jsonTreeReader28.peek();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap31 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int32 = autoCloseableMap31.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap33 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int34 = autoCloseableMap33.size();
        autoCloseableMap31.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap33);
        java.lang.Object obj36 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess37 = autoCloseableMap31.remove(obj36);
        com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number40 = jsonPrimitive39.getAsNumber();
        boolean boolean41 = autoCloseableMap31.containsKey((java.lang.Object) number40);
        com.google.gson.JsonPrimitive jsonPrimitive43 = new com.google.gson.JsonPrimitive("");
        boolean boolean44 = jsonPrimitive43.isJsonNull();
        boolean boolean46 = jsonPrimitive43.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean47 = jsonPrimitive43.isString();
        java.lang.Number number48 = jsonPrimitive43.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess49 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess49;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess51 = autoCloseableMap31.getOrDefault((java.lang.Object) jsonPrimitive43, jsonReaderInternalAccess49);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess52 = autoCloseableMap22.replace((java.lang.AutoCloseable) jsonTreeReader28, jsonReaderInternalAccess51);
        java.lang.String str53 = jsonTreeReader28.toString();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess54 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess54;
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap56 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int57 = autoCloseableMap56.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap58 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int59 = autoCloseableMap58.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap60 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int61 = autoCloseableMap60.size();
        autoCloseableMap58.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap60);
        com.google.gson.JsonArray jsonArray63 = new com.google.gson.JsonArray();
        int int64 = jsonArray63.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader65 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray63);
        jsonTreeReader65.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess67 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess68 = autoCloseableMap60.replace((java.lang.AutoCloseable) jsonTreeReader65, jsonReaderInternalAccess67);
        boolean boolean69 = jsonTreeReader65.hasNext();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess70 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess71 = autoCloseableMap56.replace((java.lang.AutoCloseable) jsonTreeReader65, jsonReaderInternalAccess70);
        boolean boolean72 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader28, jsonReaderInternalAccess54, jsonReaderInternalAccess71);
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader28.skipValue();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess6);
        org.junit.Assert.assertNotNull(number9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(number17);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess18);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess20);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccessCollection21);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccessCollection23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken30 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken30.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess37);
        org.junit.Assert.assertNotNull(number40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(number48);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess49);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess51);
        org.junit.Assert.assertNull(jsonReaderInternalAccess52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "JsonTreeReader" + "'", str53, "JsonTreeReader");
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess67);
        org.junit.Assert.assertNull(jsonReaderInternalAccess68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess70);
        org.junit.Assert.assertNull(jsonReaderInternalAccess71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.skipValue();
        boolean boolean4 = jsonTreeReader2.isLenient();
        java.lang.String str5 = jsonTreeReader2.getPath();
        // The following exception was thrown during execution in test generation
        try {
            int int6 = jsonTreeReader2.nextInt();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        jsonTreeReader7.skipValue();
        boolean boolean12 = jsonTreeReader7.hasNext();
        jsonTreeReader7.skipValue();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = jsonTreeReader7.nextBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BOOLEAN but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        boolean boolean7 = jsonTreeReader2.hasNext();
        jsonTreeReader2.beginArray();
        jsonTreeReader2.close();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = jsonTreeReader2.nextName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: JsonReader is closed");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        boolean boolean7 = jsonTreeReader2.hasNext();
        jsonTreeReader2.skipValue();
        com.google.gson.stream.JsonToken jsonToken9 = jsonTreeReader2.peek();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = jsonTreeReader2.nextDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + jsonToken9 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken9.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        boolean boolean3 = jsonArray0.isJsonPrimitive();
        com.google.gson.JsonArray jsonArray4 = new com.google.gson.JsonArray();
        int int5 = jsonArray4.size();
        com.google.gson.JsonPrimitive jsonPrimitive7 = new com.google.gson.JsonPrimitive("");
        boolean boolean8 = jsonPrimitive7.isJsonNull();
        boolean boolean9 = jsonPrimitive7.isNumber();
        boolean boolean10 = jsonArray4.remove((com.google.gson.JsonElement) jsonPrimitive7);
        com.google.gson.JsonArray jsonArray11 = new com.google.gson.JsonArray();
        jsonArray11.add((java.lang.Number) (-1.0f));
        boolean boolean14 = jsonArray4.equals((java.lang.Object) jsonArray11);
        jsonArray11.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement18 = jsonArray11.get((int) (byte) 0);
        com.google.gson.JsonArray jsonArray19 = new com.google.gson.JsonArray();
        int int20 = jsonArray19.size();
        com.google.gson.JsonPrimitive jsonPrimitive22 = new com.google.gson.JsonPrimitive("");
        boolean boolean23 = jsonPrimitive22.isJsonNull();
        boolean boolean24 = jsonPrimitive22.isNumber();
        boolean boolean25 = jsonArray19.remove((com.google.gson.JsonElement) jsonPrimitive22);
        com.google.gson.JsonArray jsonArray26 = new com.google.gson.JsonArray();
        jsonArray26.add((java.lang.Number) (-1.0f));
        boolean boolean29 = jsonArray19.equals((java.lang.Object) jsonArray26);
        boolean boolean31 = jsonArray26.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        int int32 = jsonArray26.size();
        jsonArray11.addAll(jsonArray26);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor34 = jsonArray26.iterator();
        com.google.gson.JsonArray jsonArray35 = new com.google.gson.JsonArray();
        int int36 = jsonArray35.size();
        com.google.gson.JsonPrimitive jsonPrimitive38 = new com.google.gson.JsonPrimitive("");
        boolean boolean39 = jsonPrimitive38.isJsonNull();
        boolean boolean40 = jsonPrimitive38.isNumber();
        boolean boolean41 = jsonArray35.remove((com.google.gson.JsonElement) jsonPrimitive38);
        com.google.gson.JsonArray jsonArray42 = new com.google.gson.JsonArray();
        jsonArray42.add((java.lang.Number) (-1.0f));
        boolean boolean45 = jsonArray35.equals((java.lang.Object) jsonArray42);
        com.google.gson.JsonElement jsonElement46 = null;
        boolean boolean47 = jsonArray35.remove(jsonElement46);
        com.google.gson.JsonArray jsonArray48 = new com.google.gson.JsonArray();
        int int49 = jsonArray48.size();
        com.google.gson.JsonPrimitive jsonPrimitive51 = new com.google.gson.JsonPrimitive("");
        boolean boolean52 = jsonPrimitive51.isJsonNull();
        boolean boolean53 = jsonPrimitive51.isNumber();
        boolean boolean54 = jsonArray48.remove((com.google.gson.JsonElement) jsonPrimitive51);
        com.google.gson.JsonArray jsonArray55 = new com.google.gson.JsonArray();
        jsonArray55.add((java.lang.Number) (-1.0f));
        boolean boolean58 = jsonArray48.equals((java.lang.Object) jsonArray55);
        com.google.gson.JsonElement jsonElement59 = null;
        boolean boolean60 = jsonArray48.remove(jsonElement59);
        boolean boolean61 = jsonArray35.remove((com.google.gson.JsonElement) jsonArray48);
        jsonArray48.add((java.lang.Character) ' ');
        boolean boolean64 = jsonArray26.remove((com.google.gson.JsonElement) jsonArray48);
        com.google.gson.JsonObject jsonObject66 = new com.google.gson.JsonObject();
        com.google.gson.JsonObject jsonObject68 = new com.google.gson.JsonObject();
        jsonObject66.add("com.google.gson.stream.MalformedJsonException: ", (com.google.gson.JsonElement) jsonObject68);
        java.util.Set<java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement>> strEntrySet70 = jsonObject68.entrySet();
        com.google.gson.JsonElement jsonElement71 = jsonArray26.set(0, (com.google.gson.JsonElement) jsonObject68);
        jsonArray0.add((com.google.gson.JsonElement) jsonObject68);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number73 = jsonArray0.getAsNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: JsonObject");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jsonElement18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(jsonElementItor34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strEntrySet70);
        org.junit.Assert.assertNotNull(jsonElement71);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        boolean boolean7 = jsonTreeReader2.hasNext();
        jsonTreeReader2.skipValue();
        boolean boolean9 = jsonTreeReader2.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = jsonTreeReader2.nextName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NAME but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = jsonTreeReader2.nextBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BOOLEAN but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        java.util.Collection<com.google.gson.internal.JsonReaderInternalAccess> jsonReaderInternalAccessCollection1 = autoCloseableMap0.values();
        boolean boolean3 = autoCloseableMap0.equals((java.lang.Object) 100.0f);
        com.google.gson.JsonArray jsonArray4 = new com.google.gson.JsonArray();
        int int5 = jsonArray4.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader6 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray4);
        jsonTreeReader6.skipValue();
        com.google.gson.stream.JsonToken jsonToken8 = jsonTreeReader6.peek();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap9 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int10 = autoCloseableMap9.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap11 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int12 = autoCloseableMap11.size();
        autoCloseableMap9.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap11);
        java.lang.Object obj14 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess15 = autoCloseableMap9.remove(obj14);
        com.google.gson.JsonPrimitive jsonPrimitive17 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number18 = jsonPrimitive17.getAsNumber();
        boolean boolean19 = autoCloseableMap9.containsKey((java.lang.Object) number18);
        com.google.gson.JsonPrimitive jsonPrimitive21 = new com.google.gson.JsonPrimitive("");
        boolean boolean22 = jsonPrimitive21.isJsonNull();
        boolean boolean24 = jsonPrimitive21.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean25 = jsonPrimitive21.isString();
        java.lang.Number number26 = jsonPrimitive21.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess27 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess27;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess29 = autoCloseableMap9.getOrDefault((java.lang.Object) jsonPrimitive21, jsonReaderInternalAccess27);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess30 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader6, jsonReaderInternalAccess29);
        java.lang.String str31 = jsonTreeReader6.toString();
        boolean boolean32 = jsonTreeReader6.isLenient();
        boolean boolean33 = jsonTreeReader6.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = jsonTreeReader6.nextString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected STRING but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReaderInternalAccessCollection1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken8 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken8.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess15);
        org.junit.Assert.assertNotNull(number18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(number26);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess27);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess29);
        org.junit.Assert.assertNull(jsonReaderInternalAccess30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "JsonTreeReader" + "'", str31, "JsonTreeReader");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        com.google.gson.JsonObject jsonObject11 = new com.google.gson.JsonObject();
        com.google.gson.JsonPrimitive jsonPrimitive13 = jsonObject11.getAsJsonPrimitive("com.google.gson.stream.MalformedJsonException: ");
        boolean boolean15 = autoCloseableMap2.remove((java.lang.Object) jsonObject11, (java.lang.Object) 1.0f);
        com.google.gson.stream.MalformedJsonException malformedJsonException18 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException19 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException18);
        java.lang.Throwable[] throwableArray20 = malformedJsonException19.getSuppressed();
        boolean boolean21 = autoCloseableMap2.equals((java.lang.Object) throwableArray20);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap22 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int23 = autoCloseableMap22.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap24 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int25 = autoCloseableMap24.size();
        autoCloseableMap22.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap24);
        autoCloseableMap2.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap22);
        com.google.gson.JsonArray jsonArray28 = new com.google.gson.JsonArray();
        int int29 = jsonArray28.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap30 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int31 = autoCloseableMap30.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap32 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int33 = autoCloseableMap32.size();
        autoCloseableMap30.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap32);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet35 = autoCloseableMap30.entrySet();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap36 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int37 = autoCloseableMap36.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap38 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int39 = autoCloseableMap38.size();
        autoCloseableMap36.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap38);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet41 = autoCloseableMap36.keySet();
        int int42 = autoCloseableMap36.size();
        autoCloseableMap30.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap36);
        com.google.gson.JsonArray jsonArray44 = new com.google.gson.JsonArray();
        int int45 = jsonArray44.size();
        com.google.gson.JsonPrimitive jsonPrimitive47 = new com.google.gson.JsonPrimitive("");
        boolean boolean48 = jsonPrimitive47.isJsonNull();
        boolean boolean49 = jsonPrimitive47.isNumber();
        boolean boolean50 = jsonArray44.remove((com.google.gson.JsonElement) jsonPrimitive47);
        com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
        jsonArray51.add((java.lang.Number) (-1.0f));
        boolean boolean54 = jsonArray44.equals((java.lang.Object) jsonArray51);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor55 = jsonArray44.iterator();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess56 = autoCloseableMap36.remove((java.lang.Object) jsonArray44);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet57 = autoCloseableMap36.keySet();
        boolean boolean58 = autoCloseableMap2.remove((java.lang.Object) jsonArray28, (java.lang.Object) autoCloseableMap36);
        java.lang.Object obj59 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess60 = autoCloseableMap36.remove(obj59);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertNull(jsonPrimitive13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(autoCloseableSet41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jsonElementItor55);
        org.junit.Assert.assertNull(jsonReaderInternalAccess56);
        org.junit.Assert.assertNotNull(autoCloseableSet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(jsonReaderInternalAccess60);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet5 = autoCloseableMap0.entrySet();
        com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
        int int7 = jsonArray6.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader8 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray6);
        jsonTreeReader8.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess11 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader8, jsonReaderInternalAccess10);
        jsonTreeReader8.endArray();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = jsonTreeReader8.nextInt();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertNull(jsonReaderInternalAccess11);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        boolean boolean7 = jsonTreeReader2.hasNext();
        jsonTreeReader2.skipValue();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.nextNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NULL but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        jsonTreeReader7.skipValue();
        boolean boolean12 = jsonTreeReader7.hasNext();
        boolean boolean13 = jsonTreeReader7.hasNext();
        jsonTreeReader7.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = jsonTreeReader7.nextBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BOOLEAN but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        boolean boolean7 = jsonTreeReader2.hasNext();
        java.lang.String str8 = jsonTreeReader2.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JsonTreeReader" + "'", str8, "JsonTreeReader");
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap4 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int5 = autoCloseableMap4.size();
        autoCloseableMap2.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap4);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        int int8 = jsonArray7.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader9 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray7);
        jsonTreeReader9.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess11 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess12 = autoCloseableMap4.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess11);
        boolean boolean13 = jsonTreeReader9.hasNext();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess14 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess15 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess14);
        jsonTreeReader9.skipValue();
        jsonTreeReader9.beginArray();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess11);
        org.junit.Assert.assertNull(jsonReaderInternalAccess12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess14);
        org.junit.Assert.assertNull(jsonReaderInternalAccess15);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        boolean boolean7 = jsonTreeReader2.hasNext();
        jsonTreeReader2.beginArray();
        com.google.gson.stream.JsonToken jsonToken9 = jsonTreeReader2.peek();
        java.lang.String str10 = jsonTreeReader2.getPath();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + jsonToken9 + "' != '" + com.google.gson.stream.JsonToken.END_ARRAY + "'", jsonToken9.equals(com.google.gson.stream.JsonToken.END_ARRAY));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$[0]" + "'", str10, "$[0]");
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        com.google.gson.JsonObject jsonObject11 = new com.google.gson.JsonObject();
        com.google.gson.JsonPrimitive jsonPrimitive13 = jsonObject11.getAsJsonPrimitive("com.google.gson.stream.MalformedJsonException: ");
        boolean boolean15 = autoCloseableMap2.remove((java.lang.Object) jsonObject11, (java.lang.Object) 1.0f);
        com.google.gson.stream.MalformedJsonException malformedJsonException18 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException19 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException18);
        java.lang.Throwable[] throwableArray20 = malformedJsonException19.getSuppressed();
        boolean boolean21 = autoCloseableMap2.equals((java.lang.Object) throwableArray20);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap22 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int23 = autoCloseableMap22.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap24 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int25 = autoCloseableMap24.size();
        autoCloseableMap22.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap24);
        autoCloseableMap2.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap22);
        com.google.gson.JsonObject jsonObject28 = new com.google.gson.JsonObject();
        com.google.gson.JsonObject jsonObject29 = new com.google.gson.JsonObject();
        com.google.gson.JsonObject jsonObject31 = new com.google.gson.JsonObject();
        jsonObject29.add("com.google.gson.stream.MalformedJsonException: ", (com.google.gson.JsonElement) jsonObject31);
        boolean boolean33 = jsonObject28.equals((java.lang.Object) jsonObject29);
        com.google.gson.JsonObject jsonObject35 = new com.google.gson.JsonObject();
        com.google.gson.JsonObject jsonObject36 = new com.google.gson.JsonObject();
        com.google.gson.JsonObject jsonObject38 = new com.google.gson.JsonObject();
        jsonObject36.add("com.google.gson.stream.MalformedJsonException: ", (com.google.gson.JsonElement) jsonObject38);
        boolean boolean40 = jsonObject35.equals((java.lang.Object) jsonObject36);
        com.google.gson.JsonArray jsonArray42 = jsonObject35.getAsJsonArray("");
        jsonObject28.add("com.google.gson.stream.MalformedJsonException: hi!", (com.google.gson.JsonElement) jsonArray42);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap44 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int45 = autoCloseableMap44.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap46 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int47 = autoCloseableMap46.size();
        autoCloseableMap44.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap46);
        com.google.gson.JsonArray jsonArray49 = new com.google.gson.JsonArray();
        int int50 = jsonArray49.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader51 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray49);
        jsonTreeReader51.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess53 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess54 = autoCloseableMap46.replace((java.lang.AutoCloseable) jsonTreeReader51, jsonReaderInternalAccess53);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess55 = autoCloseableMap2.getOrDefault((java.lang.Object) jsonObject28, jsonReaderInternalAccess53);
        boolean boolean57 = jsonObject28.has("-1.0");
        jsonObject28.addProperty("", (java.lang.Boolean) true);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertNull(jsonPrimitive13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jsonArray42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess53);
        org.junit.Assert.assertNull(jsonReaderInternalAccess54);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap4 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int5 = autoCloseableMap4.size();
        autoCloseableMap2.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap4);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        int int8 = jsonArray7.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader9 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray7);
        jsonTreeReader9.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess11 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess12 = autoCloseableMap4.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess11);
        boolean boolean13 = jsonTreeReader9.hasNext();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess14 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess15 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess14);
        java.lang.String str16 = jsonTreeReader9.toString();
        boolean boolean17 = jsonTreeReader9.hasNext();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess11);
        org.junit.Assert.assertNull(jsonReaderInternalAccess12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess14);
        org.junit.Assert.assertNull(jsonReaderInternalAccess15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JsonTreeReader" + "'", str16, "JsonTreeReader");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        jsonTreeReader7.skipValue();
        boolean boolean12 = jsonTreeReader7.hasNext();
        jsonTreeReader7.skipValue();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = jsonTreeReader7.nextString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected STRING but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        boolean boolean7 = jsonTreeReader2.hasNext();
        jsonTreeReader2.beginArray();
        com.google.gson.stream.JsonToken jsonToken9 = jsonTreeReader2.peek();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.beginObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BEGIN_OBJECT but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + jsonToken9 + "' != '" + com.google.gson.stream.JsonToken.END_ARRAY + "'", jsonToken9.equals(com.google.gson.stream.JsonToken.END_ARRAY));
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive("");
        boolean boolean2 = jsonPrimitive1.isJsonNull();
        boolean boolean3 = jsonPrimitive1.isNumber();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap4 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int5 = autoCloseableMap4.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap6 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int7 = autoCloseableMap6.size();
        autoCloseableMap4.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap6);
        com.google.gson.JsonArray jsonArray9 = new com.google.gson.JsonArray();
        int int10 = jsonArray9.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader11 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray9);
        jsonTreeReader11.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess13 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess14 = autoCloseableMap6.replace((java.lang.AutoCloseable) jsonTreeReader11, jsonReaderInternalAccess13);
        jsonTreeReader11.skipValue();
        boolean boolean16 = jsonTreeReader11.hasNext();
        boolean boolean17 = jsonPrimitive1.equals((java.lang.Object) jsonTreeReader11);
        com.google.gson.stream.JsonToken jsonToken18 = jsonTreeReader11.peek();
        java.lang.String str19 = jsonTreeReader11.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = jsonTreeReader11.nextLong();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess13);
        org.junit.Assert.assertNull(jsonReaderInternalAccess14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + jsonToken18 + "' != '" + com.google.gson.stream.JsonToken.BEGIN_ARRAY + "'", jsonToken18.equals(com.google.gson.stream.JsonToken.BEGIN_ARRAY));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JsonTreeReader" + "'", str19, "JsonTreeReader");
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.JsonPrimitive jsonPrimitive3 = new com.google.gson.JsonPrimitive("");
        boolean boolean4 = jsonPrimitive3.isJsonNull();
        boolean boolean5 = jsonPrimitive3.isNumber();
        boolean boolean6 = jsonArray0.remove((com.google.gson.JsonElement) jsonPrimitive3);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        jsonArray7.add((java.lang.Number) (-1.0f));
        boolean boolean10 = jsonArray0.equals((java.lang.Object) jsonArray7);
        jsonArray7.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement14 = jsonArray7.get((int) (byte) 0);
        com.google.gson.JsonArray jsonArray15 = new com.google.gson.JsonArray();
        int int16 = jsonArray15.size();
        com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive("");
        boolean boolean19 = jsonPrimitive18.isJsonNull();
        boolean boolean20 = jsonPrimitive18.isNumber();
        boolean boolean21 = jsonArray15.remove((com.google.gson.JsonElement) jsonPrimitive18);
        com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
        jsonArray22.add((java.lang.Number) (-1.0f));
        boolean boolean25 = jsonArray15.equals((java.lang.Object) jsonArray22);
        boolean boolean27 = jsonArray22.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        int int28 = jsonArray22.size();
        jsonArray7.addAll(jsonArray22);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor30 = jsonArray22.iterator();
        com.google.gson.JsonArray jsonArray31 = new com.google.gson.JsonArray();
        int int32 = jsonArray31.size();
        com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive("");
        boolean boolean35 = jsonPrimitive34.isJsonNull();
        boolean boolean36 = jsonPrimitive34.isNumber();
        boolean boolean37 = jsonArray31.remove((com.google.gson.JsonElement) jsonPrimitive34);
        com.google.gson.JsonArray jsonArray38 = new com.google.gson.JsonArray();
        jsonArray38.add((java.lang.Number) (-1.0f));
        boolean boolean41 = jsonArray31.equals((java.lang.Object) jsonArray38);
        com.google.gson.JsonElement jsonElement42 = null;
        boolean boolean43 = jsonArray31.remove(jsonElement42);
        com.google.gson.JsonArray jsonArray44 = new com.google.gson.JsonArray();
        int int45 = jsonArray44.size();
        com.google.gson.JsonPrimitive jsonPrimitive47 = new com.google.gson.JsonPrimitive("");
        boolean boolean48 = jsonPrimitive47.isJsonNull();
        boolean boolean49 = jsonPrimitive47.isNumber();
        boolean boolean50 = jsonArray44.remove((com.google.gson.JsonElement) jsonPrimitive47);
        com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
        jsonArray51.add((java.lang.Number) (-1.0f));
        boolean boolean54 = jsonArray44.equals((java.lang.Object) jsonArray51);
        com.google.gson.JsonElement jsonElement55 = null;
        boolean boolean56 = jsonArray44.remove(jsonElement55);
        boolean boolean57 = jsonArray31.remove((com.google.gson.JsonElement) jsonArray44);
        jsonArray44.add((java.lang.Character) ' ');
        boolean boolean60 = jsonArray22.remove((com.google.gson.JsonElement) jsonArray44);
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader61 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray22);
        boolean boolean62 = jsonArray22.isJsonArray();
        java.math.BigDecimal bigDecimal63 = jsonArray22.getAsBigDecimal();
        short short64 = jsonArray22.getAsShort();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jsonElement14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(jsonElementItor30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(bigDecimal63);
        org.junit.Assert.assertTrue("'" + short64 + "' != '" + (short) -1 + "'", short64 == (short) -1);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet5 = autoCloseableMap0.keySet();
        int int6 = autoCloseableMap0.size();
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        int int8 = jsonArray7.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader9 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray7);
        jsonTreeReader9.beginArray();
        jsonTreeReader9.skipValue();
        java.lang.String str12 = jsonTreeReader9.getPath();
        boolean boolean13 = jsonTreeReader9.hasNext();
        jsonTreeReader9.setLenient(false);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap16 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int17 = autoCloseableMap16.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap18 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int19 = autoCloseableMap18.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap20 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int21 = autoCloseableMap20.size();
        autoCloseableMap18.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap20);
        com.google.gson.JsonArray jsonArray23 = new com.google.gson.JsonArray();
        int int24 = jsonArray23.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader25 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray23);
        jsonTreeReader25.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess27 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess28 = autoCloseableMap20.replace((java.lang.AutoCloseable) jsonTreeReader25, jsonReaderInternalAccess27);
        boolean boolean29 = jsonTreeReader25.hasNext();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess30 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess31 = autoCloseableMap16.replace((java.lang.AutoCloseable) jsonTreeReader25, jsonReaderInternalAccess30);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap32 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int33 = autoCloseableMap32.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap34 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int35 = autoCloseableMap34.size();
        autoCloseableMap32.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap34);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet37 = autoCloseableMap32.entrySet();
        com.google.gson.JsonArray jsonArray38 = new com.google.gson.JsonArray();
        int int39 = jsonArray38.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader40 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray38);
        jsonTreeReader40.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess42 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess43 = autoCloseableMap32.replace((java.lang.AutoCloseable) jsonTreeReader40, jsonReaderInternalAccess42);
        boolean boolean44 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess30, jsonReaderInternalAccess42);
        int int45 = autoCloseableMap0.size();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(autoCloseableSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "$" + "'", str12, "$");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess27);
        org.junit.Assert.assertNull(jsonReaderInternalAccess28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess30);
        org.junit.Assert.assertNull(jsonReaderInternalAccess31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess42);
        org.junit.Assert.assertNull(jsonReaderInternalAccess43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.JsonPrimitive jsonPrimitive3 = new com.google.gson.JsonPrimitive("");
        boolean boolean4 = jsonPrimitive3.isJsonNull();
        boolean boolean5 = jsonPrimitive3.isNumber();
        boolean boolean6 = jsonArray0.remove((com.google.gson.JsonElement) jsonPrimitive3);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        jsonArray7.add((java.lang.Number) (-1.0f));
        boolean boolean10 = jsonArray0.equals((java.lang.Object) jsonArray7);
        com.google.gson.JsonElement jsonElement11 = null;
        boolean boolean12 = jsonArray0.remove(jsonElement11);
        com.google.gson.JsonArray jsonArray13 = new com.google.gson.JsonArray();
        int int14 = jsonArray13.size();
        com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive("");
        boolean boolean17 = jsonPrimitive16.isJsonNull();
        boolean boolean18 = jsonPrimitive16.isNumber();
        boolean boolean19 = jsonArray13.remove((com.google.gson.JsonElement) jsonPrimitive16);
        com.google.gson.JsonArray jsonArray20 = new com.google.gson.JsonArray();
        jsonArray20.add((java.lang.Number) (-1.0f));
        boolean boolean23 = jsonArray13.equals((java.lang.Object) jsonArray20);
        com.google.gson.JsonElement jsonElement24 = null;
        boolean boolean25 = jsonArray13.remove(jsonElement24);
        boolean boolean26 = jsonArray0.remove((com.google.gson.JsonElement) jsonArray13);
        com.google.gson.JsonObject jsonObject27 = new com.google.gson.JsonObject();
        com.google.gson.JsonObject jsonObject29 = new com.google.gson.JsonObject();
        jsonObject27.add("com.google.gson.stream.MalformedJsonException: ", (com.google.gson.JsonElement) jsonObject29);
        boolean boolean31 = jsonArray0.equals((java.lang.Object) jsonObject29);
        com.google.gson.JsonElement jsonElement33 = jsonObject29.remove("[-1.0]");
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader34 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonObject29);
        java.lang.String str35 = jsonTreeReader34.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jsonElement33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "JsonTreeReader" + "'", str35, "JsonTreeReader");
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        boolean boolean7 = jsonTreeReader2.hasNext();
        jsonTreeReader2.beginArray();
        jsonTreeReader2.close();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap4 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int5 = autoCloseableMap4.size();
        autoCloseableMap2.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap4);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        int int8 = jsonArray7.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader9 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray7);
        jsonTreeReader9.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess11 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess12 = autoCloseableMap4.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess11);
        boolean boolean13 = jsonTreeReader9.hasNext();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess14 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess15 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess14);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap16 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int17 = autoCloseableMap16.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap18 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int19 = autoCloseableMap18.size();
        autoCloseableMap16.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap18);
        com.google.gson.JsonArray jsonArray21 = new com.google.gson.JsonArray();
        int int22 = jsonArray21.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader23 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray21);
        jsonTreeReader23.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess25 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess26 = autoCloseableMap18.replace((java.lang.AutoCloseable) jsonTreeReader23, jsonReaderInternalAccess25);
        com.google.gson.JsonObject jsonObject27 = new com.google.gson.JsonObject();
        com.google.gson.JsonPrimitive jsonPrimitive29 = jsonObject27.getAsJsonPrimitive("com.google.gson.stream.MalformedJsonException: ");
        boolean boolean31 = autoCloseableMap18.remove((java.lang.Object) jsonObject27, (java.lang.Object) 1.0f);
        com.google.gson.stream.MalformedJsonException malformedJsonException34 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException35 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException34);
        java.lang.Throwable[] throwableArray36 = malformedJsonException35.getSuppressed();
        boolean boolean37 = autoCloseableMap18.equals((java.lang.Object) throwableArray36);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap38 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int39 = autoCloseableMap38.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap40 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int41 = autoCloseableMap40.size();
        autoCloseableMap38.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap40);
        autoCloseableMap18.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap38);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet44 = autoCloseableMap38.entrySet();
        com.google.gson.JsonArray jsonArray45 = new com.google.gson.JsonArray();
        int int46 = jsonArray45.size();
        com.google.gson.JsonPrimitive jsonPrimitive48 = new com.google.gson.JsonPrimitive("");
        boolean boolean49 = jsonPrimitive48.isJsonNull();
        boolean boolean50 = jsonPrimitive48.isNumber();
        boolean boolean51 = jsonArray45.remove((com.google.gson.JsonElement) jsonPrimitive48);
        com.google.gson.JsonArray jsonArray52 = new com.google.gson.JsonArray();
        jsonArray52.add((java.lang.Number) (-1.0f));
        boolean boolean55 = jsonArray45.equals((java.lang.Object) jsonArray52);
        jsonArray52.add((java.lang.Boolean) true);
        com.google.gson.JsonArray jsonArray58 = new com.google.gson.JsonArray();
        int int59 = jsonArray58.size();
        com.google.gson.JsonPrimitive jsonPrimitive61 = new com.google.gson.JsonPrimitive("");
        boolean boolean62 = jsonPrimitive61.isJsonNull();
        boolean boolean63 = jsonPrimitive61.isNumber();
        boolean boolean64 = jsonArray58.remove((com.google.gson.JsonElement) jsonPrimitive61);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor65 = jsonArray58.iterator();
        boolean boolean66 = jsonArray52.contains((com.google.gson.JsonElement) jsonArray58);
        jsonArray58.add((java.lang.Number) (byte) 100);
        java.util.Spliterator<com.google.gson.JsonElement> jsonElementSpliterator69 = jsonArray58.spliterator();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess70 = autoCloseableMap38.get((java.lang.Object) jsonArray58);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess71 = autoCloseableMap0.get((java.lang.Object) jsonReaderInternalAccess70);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess11);
        org.junit.Assert.assertNull(jsonReaderInternalAccess12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess14);
        org.junit.Assert.assertNull(jsonReaderInternalAccess15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess25);
        org.junit.Assert.assertNull(jsonReaderInternalAccess26);
        org.junit.Assert.assertNull(jsonPrimitive29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jsonElementItor65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jsonElementSpliterator69);
        org.junit.Assert.assertNull(jsonReaderInternalAccess70);
        org.junit.Assert.assertNull(jsonReaderInternalAccess71);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.lang.Object obj5 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess6 = autoCloseableMap0.remove(obj5);
        com.google.gson.JsonPrimitive jsonPrimitive8 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number9 = jsonPrimitive8.getAsNumber();
        boolean boolean10 = autoCloseableMap0.containsKey((java.lang.Object) number9);
        com.google.gson.JsonPrimitive jsonPrimitive12 = new com.google.gson.JsonPrimitive("");
        boolean boolean13 = jsonPrimitive12.isJsonNull();
        boolean boolean15 = jsonPrimitive12.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean16 = jsonPrimitive12.isString();
        java.lang.Number number17 = jsonPrimitive12.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess18 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess18;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess20 = autoCloseableMap0.getOrDefault((java.lang.Object) jsonPrimitive12, jsonReaderInternalAccess18);
        com.google.gson.JsonArray jsonArray21 = new com.google.gson.JsonArray();
        int int22 = jsonArray21.size();
        com.google.gson.JsonPrimitive jsonPrimitive24 = new com.google.gson.JsonPrimitive("");
        boolean boolean25 = jsonPrimitive24.isJsonNull();
        boolean boolean26 = jsonPrimitive24.isNumber();
        boolean boolean27 = jsonArray21.remove((com.google.gson.JsonElement) jsonPrimitive24);
        com.google.gson.JsonArray jsonArray28 = new com.google.gson.JsonArray();
        jsonArray28.add((java.lang.Number) (-1.0f));
        boolean boolean31 = jsonArray21.equals((java.lang.Object) jsonArray28);
        boolean boolean33 = jsonArray28.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        int int34 = jsonArray28.size();
        com.google.gson.JsonArray jsonArray35 = new com.google.gson.JsonArray();
        int int36 = jsonArray35.size();
        jsonArray28.addAll(jsonArray35);
        jsonArray28.add("-1.0");
        com.google.gson.JsonArray jsonArray40 = new com.google.gson.JsonArray();
        int int41 = jsonArray40.size();
        com.google.gson.JsonPrimitive jsonPrimitive43 = new com.google.gson.JsonPrimitive("");
        boolean boolean44 = jsonPrimitive43.isJsonNull();
        boolean boolean45 = jsonPrimitive43.isNumber();
        boolean boolean46 = jsonArray40.remove((com.google.gson.JsonElement) jsonPrimitive43);
        com.google.gson.JsonArray jsonArray47 = new com.google.gson.JsonArray();
        jsonArray47.add((java.lang.Number) (-1.0f));
        boolean boolean50 = jsonArray40.equals((java.lang.Object) jsonArray47);
        boolean boolean52 = jsonArray47.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        java.lang.String str53 = jsonArray47.getAsString();
        com.google.gson.JsonElement jsonElement55 = jsonArray47.get((int) (short) 0);
        boolean boolean56 = jsonArray28.remove(jsonElement55);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap57 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int58 = autoCloseableMap57.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap59 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int60 = autoCloseableMap59.size();
        autoCloseableMap57.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap59);
        java.lang.Object obj62 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess63 = autoCloseableMap57.remove(obj62);
        com.google.gson.JsonPrimitive jsonPrimitive65 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number66 = jsonPrimitive65.getAsNumber();
        boolean boolean67 = autoCloseableMap57.containsKey((java.lang.Object) number66);
        com.google.gson.JsonPrimitive jsonPrimitive69 = new com.google.gson.JsonPrimitive("");
        boolean boolean70 = jsonPrimitive69.isJsonNull();
        boolean boolean72 = jsonPrimitive69.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean73 = jsonPrimitive69.isString();
        java.lang.Number number74 = jsonPrimitive69.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess75 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess75;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess77 = autoCloseableMap57.getOrDefault((java.lang.Object) jsonPrimitive69, jsonReaderInternalAccess75);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess78 = autoCloseableMap0.getOrDefault((java.lang.Object) jsonElement55, jsonReaderInternalAccess75);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap79 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int80 = autoCloseableMap79.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap81 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int82 = autoCloseableMap81.size();
        autoCloseableMap79.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap81);
        com.google.gson.JsonArray jsonArray84 = new com.google.gson.JsonArray();
        int int85 = jsonArray84.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader86 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray84);
        jsonTreeReader86.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess88 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess89 = autoCloseableMap81.replace((java.lang.AutoCloseable) jsonTreeReader86, jsonReaderInternalAccess88);
        jsonTreeReader86.skipValue();
        boolean boolean91 = jsonTreeReader86.hasNext();
        jsonTreeReader86.skipValue();
        // The following exception was thrown during execution in test generation
        try {
// flaky:             jsonReaderInternalAccess75.promoteNameToValue((com.google.gson.stream.JsonReader) jsonTreeReader86);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess6);
        org.junit.Assert.assertNotNull(number9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(number17);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess18);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1.0" + "'", str53, "-1.0");
        org.junit.Assert.assertNotNull(jsonElement55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess63);
        org.junit.Assert.assertNotNull(number66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(number74);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess75);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess77);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess88);
        org.junit.Assert.assertNull(jsonReaderInternalAccess89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet5 = autoCloseableMap0.entrySet();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap6 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int7 = autoCloseableMap6.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap8 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int9 = autoCloseableMap8.size();
        autoCloseableMap6.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap8);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet11 = autoCloseableMap6.keySet();
        int int12 = autoCloseableMap6.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap6);
        com.google.gson.JsonArray jsonArray14 = new com.google.gson.JsonArray();
        int int15 = jsonArray14.size();
        com.google.gson.JsonPrimitive jsonPrimitive17 = new com.google.gson.JsonPrimitive("");
        boolean boolean18 = jsonPrimitive17.isJsonNull();
        boolean boolean19 = jsonPrimitive17.isNumber();
        boolean boolean20 = jsonArray14.remove((com.google.gson.JsonElement) jsonPrimitive17);
        com.google.gson.JsonArray jsonArray21 = new com.google.gson.JsonArray();
        jsonArray21.add((java.lang.Number) (-1.0f));
        boolean boolean24 = jsonArray14.equals((java.lang.Object) jsonArray21);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor25 = jsonArray14.iterator();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess26 = autoCloseableMap6.remove((java.lang.Object) jsonArray14);
        com.google.gson.JsonObject jsonObject27 = new com.google.gson.JsonObject();
        boolean boolean29 = jsonObject27.equals((java.lang.Object) 0.0f);
        java.util.Set<java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement>> strEntrySet30 = jsonObject27.entrySet();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess31 = autoCloseableMap6.remove((java.lang.Object) strEntrySet30);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet32 = autoCloseableMap6.keySet();
        com.google.gson.JsonArray jsonArray33 = new com.google.gson.JsonArray();
        int int34 = jsonArray33.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader35 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray33);
        jsonTreeReader35.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess37 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess37;
        // The following exception was thrown during execution in test generation
        try {
            com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess39 = autoCloseableMap6.put((java.lang.AutoCloseable) jsonTreeReader35, jsonReaderInternalAccess37);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.gson.internal.bind.JsonTreeReader is not Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(autoCloseableSet11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jsonElementItor25);
        org.junit.Assert.assertNull(jsonReaderInternalAccess26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strEntrySet30);
        org.junit.Assert.assertNull(jsonReaderInternalAccess31);
        org.junit.Assert.assertNotNull(autoCloseableSet32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess37);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        java.util.Collection<com.google.gson.internal.JsonReaderInternalAccess> jsonReaderInternalAccessCollection1 = autoCloseableMap0.values();
        boolean boolean3 = autoCloseableMap0.equals((java.lang.Object) 100.0f);
        com.google.gson.JsonArray jsonArray4 = new com.google.gson.JsonArray();
        int int5 = jsonArray4.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader6 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray4);
        jsonTreeReader6.skipValue();
        com.google.gson.stream.JsonToken jsonToken8 = jsonTreeReader6.peek();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap9 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int10 = autoCloseableMap9.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap11 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int12 = autoCloseableMap11.size();
        autoCloseableMap9.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap11);
        java.lang.Object obj14 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess15 = autoCloseableMap9.remove(obj14);
        com.google.gson.JsonPrimitive jsonPrimitive17 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number18 = jsonPrimitive17.getAsNumber();
        boolean boolean19 = autoCloseableMap9.containsKey((java.lang.Object) number18);
        com.google.gson.JsonPrimitive jsonPrimitive21 = new com.google.gson.JsonPrimitive("");
        boolean boolean22 = jsonPrimitive21.isJsonNull();
        boolean boolean24 = jsonPrimitive21.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean25 = jsonPrimitive21.isString();
        java.lang.Number number26 = jsonPrimitive21.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess27 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess27;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess29 = autoCloseableMap9.getOrDefault((java.lang.Object) jsonPrimitive21, jsonReaderInternalAccess27);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess30 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader6, jsonReaderInternalAccess29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = jsonTreeReader6.nextString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected STRING but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReaderInternalAccessCollection1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken8 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken8.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess15);
        org.junit.Assert.assertNotNull(number18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(number26);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess27);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess29);
        org.junit.Assert.assertNull(jsonReaderInternalAccess30);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        boolean boolean3 = jsonTreeReader2.hasNext();
        com.google.gson.stream.JsonToken jsonToken4 = jsonTreeReader2.peek();
        // The following exception was thrown during execution in test generation
        try {
            int int5 = jsonTreeReader2.nextInt();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + jsonToken4 + "' != '" + com.google.gson.stream.JsonToken.BEGIN_ARRAY + "'", jsonToken4.equals(com.google.gson.stream.JsonToken.BEGIN_ARRAY));
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap4 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int5 = autoCloseableMap4.size();
        autoCloseableMap2.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap4);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        int int8 = jsonArray7.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader9 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray7);
        jsonTreeReader9.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess11 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess12 = autoCloseableMap4.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess11);
        boolean boolean13 = jsonTreeReader9.hasNext();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess14 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess15 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess14);
        jsonTreeReader9.skipValue();
        jsonTreeReader9.close();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess11);
        org.junit.Assert.assertNull(jsonReaderInternalAccess12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess14);
        org.junit.Assert.assertNull(jsonReaderInternalAccess15);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        jsonTreeReader7.skipValue();
        boolean boolean12 = jsonTreeReader7.hasNext();
        jsonTreeReader7.skipValue();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader7.endObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected END_OBJECT but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.JsonPrimitive jsonPrimitive3 = new com.google.gson.JsonPrimitive("");
        boolean boolean4 = jsonPrimitive3.isJsonNull();
        boolean boolean5 = jsonPrimitive3.isNumber();
        boolean boolean6 = jsonArray0.remove((com.google.gson.JsonElement) jsonPrimitive3);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        jsonArray7.add((java.lang.Number) (-1.0f));
        boolean boolean10 = jsonArray0.equals((java.lang.Object) jsonArray7);
        jsonArray7.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement14 = jsonArray7.get((int) (byte) 0);
        com.google.gson.JsonArray jsonArray15 = new com.google.gson.JsonArray();
        int int16 = jsonArray15.size();
        com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive("");
        boolean boolean19 = jsonPrimitive18.isJsonNull();
        boolean boolean20 = jsonPrimitive18.isNumber();
        boolean boolean21 = jsonArray15.remove((com.google.gson.JsonElement) jsonPrimitive18);
        com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
        jsonArray22.add((java.lang.Number) (-1.0f));
        boolean boolean25 = jsonArray15.equals((java.lang.Object) jsonArray22);
        boolean boolean27 = jsonArray22.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        int int28 = jsonArray22.size();
        jsonArray7.addAll(jsonArray22);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor30 = jsonArray22.iterator();
        com.google.gson.JsonArray jsonArray31 = new com.google.gson.JsonArray();
        int int32 = jsonArray31.size();
        com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive("");
        boolean boolean35 = jsonPrimitive34.isJsonNull();
        boolean boolean36 = jsonPrimitive34.isNumber();
        boolean boolean37 = jsonArray31.remove((com.google.gson.JsonElement) jsonPrimitive34);
        com.google.gson.JsonArray jsonArray38 = new com.google.gson.JsonArray();
        jsonArray38.add((java.lang.Number) (-1.0f));
        boolean boolean41 = jsonArray31.equals((java.lang.Object) jsonArray38);
        com.google.gson.JsonElement jsonElement42 = null;
        boolean boolean43 = jsonArray31.remove(jsonElement42);
        com.google.gson.JsonArray jsonArray44 = new com.google.gson.JsonArray();
        int int45 = jsonArray44.size();
        com.google.gson.JsonPrimitive jsonPrimitive47 = new com.google.gson.JsonPrimitive("");
        boolean boolean48 = jsonPrimitive47.isJsonNull();
        boolean boolean49 = jsonPrimitive47.isNumber();
        boolean boolean50 = jsonArray44.remove((com.google.gson.JsonElement) jsonPrimitive47);
        com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
        jsonArray51.add((java.lang.Number) (-1.0f));
        boolean boolean54 = jsonArray44.equals((java.lang.Object) jsonArray51);
        com.google.gson.JsonElement jsonElement55 = null;
        boolean boolean56 = jsonArray44.remove(jsonElement55);
        boolean boolean57 = jsonArray31.remove((com.google.gson.JsonElement) jsonArray44);
        jsonArray44.add((java.lang.Character) ' ');
        boolean boolean60 = jsonArray22.remove((com.google.gson.JsonElement) jsonArray44);
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader61 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray44);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal62 = jsonArray44.getAsBigDecimal();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jsonElement14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(jsonElementItor30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet5 = autoCloseableMap0.entrySet();
        com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
        int int7 = jsonArray6.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader8 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray6);
        jsonTreeReader8.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess11 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader8, jsonReaderInternalAccess10);
        com.google.gson.JsonArray jsonArray12 = new com.google.gson.JsonArray();
        int int13 = jsonArray12.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader14 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray12);
        jsonTreeReader14.skipValue();
        boolean boolean16 = jsonTreeReader14.isLenient();
        java.lang.String str17 = jsonTreeReader14.getPath();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess18 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap19 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int20 = autoCloseableMap19.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap21 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int22 = autoCloseableMap21.size();
        autoCloseableMap19.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap21);
        java.lang.Object obj24 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess25 = autoCloseableMap19.remove(obj24);
        com.google.gson.JsonPrimitive jsonPrimitive27 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number28 = jsonPrimitive27.getAsNumber();
        boolean boolean29 = autoCloseableMap19.containsKey((java.lang.Object) number28);
        com.google.gson.JsonPrimitive jsonPrimitive31 = new com.google.gson.JsonPrimitive("");
        boolean boolean32 = jsonPrimitive31.isJsonNull();
        boolean boolean34 = jsonPrimitive31.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean35 = jsonPrimitive31.isString();
        java.lang.Number number36 = jsonPrimitive31.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess37 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess37;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess39 = autoCloseableMap19.getOrDefault((java.lang.Object) jsonPrimitive31, jsonReaderInternalAccess37);
        boolean boolean40 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader14, jsonReaderInternalAccess18, jsonReaderInternalAccess37);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertNull(jsonReaderInternalAccess11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "$" + "'", str17, "$");
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess25);
        org.junit.Assert.assertNotNull(number28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(number36);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess37);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        com.google.gson.JsonObject jsonObject11 = new com.google.gson.JsonObject();
        com.google.gson.JsonPrimitive jsonPrimitive13 = jsonObject11.getAsJsonPrimitive("com.google.gson.stream.MalformedJsonException: ");
        boolean boolean15 = autoCloseableMap2.remove((java.lang.Object) jsonObject11, (java.lang.Object) 1.0f);
        com.google.gson.JsonArray jsonArray16 = new com.google.gson.JsonArray();
        int int17 = jsonArray16.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader18 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray16);
        jsonTreeReader18.beginArray();
        jsonTreeReader18.skipValue();
        java.lang.String str21 = jsonTreeReader18.getPath();
        java.lang.String str22 = jsonTreeReader18.toString();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap23 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int24 = autoCloseableMap23.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap25 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int26 = autoCloseableMap25.size();
        autoCloseableMap23.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap25);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet28 = autoCloseableMap23.entrySet();
        com.google.gson.JsonArray jsonArray29 = new com.google.gson.JsonArray();
        int int30 = jsonArray29.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader31 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray29);
        jsonTreeReader31.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess33 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess34 = autoCloseableMap23.replace((java.lang.AutoCloseable) jsonTreeReader31, jsonReaderInternalAccess33);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap35 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int36 = autoCloseableMap35.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap37 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int38 = autoCloseableMap37.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap39 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int40 = autoCloseableMap39.size();
        autoCloseableMap37.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap39);
        com.google.gson.JsonArray jsonArray42 = new com.google.gson.JsonArray();
        int int43 = jsonArray42.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader44 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray42);
        jsonTreeReader44.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess46 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess47 = autoCloseableMap39.replace((java.lang.AutoCloseable) jsonTreeReader44, jsonReaderInternalAccess46);
        boolean boolean48 = jsonTreeReader44.hasNext();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess49 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess50 = autoCloseableMap35.replace((java.lang.AutoCloseable) jsonTreeReader44, jsonReaderInternalAccess49);
        boolean boolean51 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader18, jsonReaderInternalAccess34, jsonReaderInternalAccess50);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertNull(jsonPrimitive13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "$" + "'", str21, "$");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "JsonTreeReader" + "'", str22, "JsonTreeReader");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess33);
        org.junit.Assert.assertNull(jsonReaderInternalAccess34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess46);
        org.junit.Assert.assertNull(jsonReaderInternalAccess47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess49);
        org.junit.Assert.assertNull(jsonReaderInternalAccess50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.lang.Object obj5 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess6 = autoCloseableMap0.remove(obj5);
        com.google.gson.JsonPrimitive jsonPrimitive8 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number9 = jsonPrimitive8.getAsNumber();
        boolean boolean10 = autoCloseableMap0.containsKey((java.lang.Object) number9);
        com.google.gson.JsonPrimitive jsonPrimitive12 = new com.google.gson.JsonPrimitive("");
        boolean boolean13 = jsonPrimitive12.isJsonNull();
        boolean boolean15 = jsonPrimitive12.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean16 = jsonPrimitive12.isString();
        java.lang.Number number17 = jsonPrimitive12.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess18 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess18;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess20 = autoCloseableMap0.getOrDefault((java.lang.Object) jsonPrimitive12, jsonReaderInternalAccess18);
        java.util.Collection<com.google.gson.internal.JsonReaderInternalAccess> jsonReaderInternalAccessCollection21 = autoCloseableMap0.values();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap22 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int23 = autoCloseableMap22.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap24 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int25 = autoCloseableMap24.size();
        autoCloseableMap22.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap24);
        com.google.gson.JsonArray jsonArray27 = new com.google.gson.JsonArray();
        int int28 = jsonArray27.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader29 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray27);
        jsonTreeReader29.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess31 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess32 = autoCloseableMap24.replace((java.lang.AutoCloseable) jsonTreeReader29, jsonReaderInternalAccess31);
        com.google.gson.JsonObject jsonObject33 = new com.google.gson.JsonObject();
        com.google.gson.JsonPrimitive jsonPrimitive35 = jsonObject33.getAsJsonPrimitive("com.google.gson.stream.MalformedJsonException: ");
        boolean boolean37 = autoCloseableMap24.remove((java.lang.Object) jsonObject33, (java.lang.Object) 1.0f);
        com.google.gson.stream.MalformedJsonException malformedJsonException40 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException41 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException40);
        java.lang.Throwable[] throwableArray42 = malformedJsonException41.getSuppressed();
        boolean boolean43 = autoCloseableMap24.equals((java.lang.Object) throwableArray42);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap44 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int45 = autoCloseableMap44.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap46 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int47 = autoCloseableMap46.size();
        autoCloseableMap44.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap46);
        autoCloseableMap24.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap44);
        com.google.gson.JsonArray jsonArray50 = new com.google.gson.JsonArray();
        int int51 = jsonArray50.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap52 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int53 = autoCloseableMap52.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap54 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int55 = autoCloseableMap54.size();
        autoCloseableMap52.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap54);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet57 = autoCloseableMap52.entrySet();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap58 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int59 = autoCloseableMap58.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap60 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int61 = autoCloseableMap60.size();
        autoCloseableMap58.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap60);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet63 = autoCloseableMap58.keySet();
        int int64 = autoCloseableMap58.size();
        autoCloseableMap52.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap58);
        com.google.gson.JsonArray jsonArray66 = new com.google.gson.JsonArray();
        int int67 = jsonArray66.size();
        com.google.gson.JsonPrimitive jsonPrimitive69 = new com.google.gson.JsonPrimitive("");
        boolean boolean70 = jsonPrimitive69.isJsonNull();
        boolean boolean71 = jsonPrimitive69.isNumber();
        boolean boolean72 = jsonArray66.remove((com.google.gson.JsonElement) jsonPrimitive69);
        com.google.gson.JsonArray jsonArray73 = new com.google.gson.JsonArray();
        jsonArray73.add((java.lang.Number) (-1.0f));
        boolean boolean76 = jsonArray66.equals((java.lang.Object) jsonArray73);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor77 = jsonArray66.iterator();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess78 = autoCloseableMap58.remove((java.lang.Object) jsonArray66);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet79 = autoCloseableMap58.keySet();
        boolean boolean80 = autoCloseableMap24.remove((java.lang.Object) jsonArray50, (java.lang.Object) autoCloseableMap58);
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap58);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess6);
        org.junit.Assert.assertNotNull(number9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(number17);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess18);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess20);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccessCollection21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess31);
        org.junit.Assert.assertNull(jsonReaderInternalAccess32);
        org.junit.Assert.assertNull(jsonPrimitive35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(autoCloseableSet63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jsonElementItor77);
        org.junit.Assert.assertNull(jsonReaderInternalAccess78);
        org.junit.Assert.assertNotNull(autoCloseableSet79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        com.google.gson.stream.JsonToken jsonToken4 = jsonTreeReader2.peek();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.beginObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BEGIN_OBJECT but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken4 + "' != '" + com.google.gson.stream.JsonToken.END_ARRAY + "'", jsonToken4.equals(com.google.gson.stream.JsonToken.END_ARRAY));
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        com.google.gson.JsonNull jsonNull0 = new com.google.gson.JsonNull();
        com.google.gson.JsonObject jsonObject1 = new com.google.gson.JsonObject();
        com.google.gson.JsonObject jsonObject3 = new com.google.gson.JsonObject();
        jsonObject1.add("com.google.gson.stream.MalformedJsonException: ", (com.google.gson.JsonElement) jsonObject3);
        boolean boolean5 = jsonNull0.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        java.lang.Object obj6 = null;
        boolean boolean7 = jsonNull0.equals(obj6);
        com.google.gson.JsonArray jsonArray8 = new com.google.gson.JsonArray();
        int int9 = jsonArray8.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader10 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray8);
        jsonTreeReader10.beginArray();
        jsonTreeReader10.skipValue();
        java.lang.String str13 = jsonTreeReader10.getPath();
        boolean boolean14 = jsonTreeReader10.hasNext();
        boolean boolean15 = jsonTreeReader10.hasNext();
        jsonTreeReader10.beginArray();
        jsonTreeReader10.skipValue();
        jsonTreeReader10.close();
        boolean boolean19 = jsonNull0.equals((java.lang.Object) jsonTreeReader10);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "$" + "'", str13, "$");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.close();
        java.lang.String str5 = jsonTreeReader2.toString();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.skipValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: JsonReader is closed");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JsonTreeReader" + "'", str5, "JsonTreeReader");
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive("");
        boolean boolean2 = jsonPrimitive1.isJsonNull();
        boolean boolean3 = jsonPrimitive1.isNumber();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap4 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int5 = autoCloseableMap4.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap6 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int7 = autoCloseableMap6.size();
        autoCloseableMap4.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap6);
        com.google.gson.JsonArray jsonArray9 = new com.google.gson.JsonArray();
        int int10 = jsonArray9.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader11 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray9);
        jsonTreeReader11.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess13 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess14 = autoCloseableMap6.replace((java.lang.AutoCloseable) jsonTreeReader11, jsonReaderInternalAccess13);
        jsonTreeReader11.skipValue();
        boolean boolean16 = jsonTreeReader11.hasNext();
        boolean boolean17 = jsonPrimitive1.equals((java.lang.Object) jsonTreeReader11);
        com.google.gson.stream.JsonToken jsonToken18 = jsonTreeReader11.peek();
        java.lang.String str19 = jsonTreeReader11.getPath();
        com.google.gson.stream.JsonToken jsonToken20 = jsonTreeReader11.peek();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess13);
        org.junit.Assert.assertNull(jsonReaderInternalAccess14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + jsonToken18 + "' != '" + com.google.gson.stream.JsonToken.BEGIN_ARRAY + "'", jsonToken18.equals(com.google.gson.stream.JsonToken.BEGIN_ARRAY));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "$" + "'", str19, "$");
        org.junit.Assert.assertTrue("'" + jsonToken20 + "' != '" + com.google.gson.stream.JsonToken.BEGIN_ARRAY + "'", jsonToken20.equals(com.google.gson.stream.JsonToken.BEGIN_ARRAY));
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
        com.google.gson.JsonObject jsonObject1 = new com.google.gson.JsonObject();
        com.google.gson.JsonObject jsonObject3 = new com.google.gson.JsonObject();
        jsonObject1.add("com.google.gson.stream.MalformedJsonException: ", (com.google.gson.JsonElement) jsonObject3);
        boolean boolean5 = jsonObject0.equals((java.lang.Object) jsonObject1);
        com.google.gson.JsonArray jsonArray7 = jsonObject0.getAsJsonArray("");
        com.google.gson.JsonArray jsonArray8 = new com.google.gson.JsonArray();
        int int9 = jsonArray8.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader10 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray8);
        boolean boolean11 = jsonTreeReader10.hasNext();
        com.google.gson.stream.JsonToken jsonToken12 = jsonTreeReader10.peek();
        boolean boolean13 = jsonObject0.equals((java.lang.Object) jsonToken12);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jsonArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + jsonToken12 + "' != '" + com.google.gson.stream.JsonToken.BEGIN_ARRAY + "'", jsonToken12.equals(com.google.gson.stream.JsonToken.BEGIN_ARRAY));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.JsonPrimitive jsonPrimitive3 = new com.google.gson.JsonPrimitive("");
        boolean boolean4 = jsonPrimitive3.isJsonNull();
        boolean boolean5 = jsonPrimitive3.isNumber();
        boolean boolean6 = jsonArray0.remove((com.google.gson.JsonElement) jsonPrimitive3);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        jsonArray7.add((java.lang.Number) (-1.0f));
        boolean boolean10 = jsonArray0.equals((java.lang.Object) jsonArray7);
        jsonArray7.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement14 = jsonArray7.get((int) (byte) 0);
        com.google.gson.JsonArray jsonArray15 = new com.google.gson.JsonArray();
        int int16 = jsonArray15.size();
        com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive("");
        boolean boolean19 = jsonPrimitive18.isJsonNull();
        boolean boolean20 = jsonPrimitive18.isNumber();
        boolean boolean21 = jsonArray15.remove((com.google.gson.JsonElement) jsonPrimitive18);
        com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
        jsonArray22.add((java.lang.Number) (-1.0f));
        boolean boolean25 = jsonArray15.equals((java.lang.Object) jsonArray22);
        boolean boolean27 = jsonArray22.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        int int28 = jsonArray22.size();
        jsonArray7.addAll(jsonArray22);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor30 = jsonArray22.iterator();
        com.google.gson.JsonArray jsonArray31 = new com.google.gson.JsonArray();
        int int32 = jsonArray31.size();
        com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive("");
        boolean boolean35 = jsonPrimitive34.isJsonNull();
        boolean boolean36 = jsonPrimitive34.isNumber();
        boolean boolean37 = jsonArray31.remove((com.google.gson.JsonElement) jsonPrimitive34);
        com.google.gson.JsonArray jsonArray38 = new com.google.gson.JsonArray();
        jsonArray38.add((java.lang.Number) (-1.0f));
        boolean boolean41 = jsonArray31.equals((java.lang.Object) jsonArray38);
        com.google.gson.JsonElement jsonElement42 = null;
        boolean boolean43 = jsonArray31.remove(jsonElement42);
        com.google.gson.JsonArray jsonArray44 = new com.google.gson.JsonArray();
        int int45 = jsonArray44.size();
        com.google.gson.JsonPrimitive jsonPrimitive47 = new com.google.gson.JsonPrimitive("");
        boolean boolean48 = jsonPrimitive47.isJsonNull();
        boolean boolean49 = jsonPrimitive47.isNumber();
        boolean boolean50 = jsonArray44.remove((com.google.gson.JsonElement) jsonPrimitive47);
        com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
        jsonArray51.add((java.lang.Number) (-1.0f));
        boolean boolean54 = jsonArray44.equals((java.lang.Object) jsonArray51);
        com.google.gson.JsonElement jsonElement55 = null;
        boolean boolean56 = jsonArray44.remove(jsonElement55);
        boolean boolean57 = jsonArray31.remove((com.google.gson.JsonElement) jsonArray44);
        jsonArray44.add((java.lang.Character) ' ');
        boolean boolean60 = jsonArray22.remove((com.google.gson.JsonElement) jsonArray44);
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader61 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray22);
        boolean boolean62 = jsonArray22.isJsonArray();
        java.lang.String str63 = jsonArray22.toString();
        // The following exception was thrown during execution in test generation
        try {
            com.google.gson.JsonPrimitive jsonPrimitive64 = jsonArray22.getAsJsonPrimitive();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Not a JSON Primitive: [-1.0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jsonElement14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(jsonElementItor30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[-1.0]" + "'", str63, "[-1.0]");
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet5 = autoCloseableMap0.keySet();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap6 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int7 = autoCloseableMap6.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap8 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int9 = autoCloseableMap8.size();
        autoCloseableMap6.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap8);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet11 = autoCloseableMap6.entrySet();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap12 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int13 = autoCloseableMap12.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap14 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int15 = autoCloseableMap14.size();
        autoCloseableMap12.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap14);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet17 = autoCloseableMap12.keySet();
        int int18 = autoCloseableMap12.size();
        autoCloseableMap6.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap12);
        com.google.gson.JsonArray jsonArray20 = new com.google.gson.JsonArray();
        int int21 = jsonArray20.size();
        com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive("");
        boolean boolean24 = jsonPrimitive23.isJsonNull();
        boolean boolean25 = jsonPrimitive23.isNumber();
        boolean boolean26 = jsonArray20.remove((com.google.gson.JsonElement) jsonPrimitive23);
        com.google.gson.JsonArray jsonArray27 = new com.google.gson.JsonArray();
        jsonArray27.add((java.lang.Number) (-1.0f));
        boolean boolean30 = jsonArray20.equals((java.lang.Object) jsonArray27);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor31 = jsonArray20.iterator();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess32 = autoCloseableMap12.remove((java.lang.Object) jsonArray20);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet33 = autoCloseableMap12.keySet();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap12);
        int int35 = autoCloseableMap0.size();
        com.google.gson.JsonArray jsonArray36 = new com.google.gson.JsonArray();
        int int37 = jsonArray36.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader38 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray36);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap39 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int40 = autoCloseableMap39.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap41 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int42 = autoCloseableMap41.size();
        autoCloseableMap39.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap41);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet44 = autoCloseableMap39.entrySet();
        com.google.gson.JsonArray jsonArray45 = new com.google.gson.JsonArray();
        int int46 = jsonArray45.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader47 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray45);
        jsonTreeReader47.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess49 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess50 = autoCloseableMap39.replace((java.lang.AutoCloseable) jsonTreeReader47, jsonReaderInternalAccess49);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess51 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader38, jsonReaderInternalAccess50);
        com.google.gson.JsonArray jsonArray52 = new com.google.gson.JsonArray();
        int int53 = jsonArray52.size();
        com.google.gson.JsonPrimitive jsonPrimitive55 = new com.google.gson.JsonPrimitive("");
        boolean boolean56 = jsonPrimitive55.isJsonNull();
        boolean boolean57 = jsonPrimitive55.isNumber();
        boolean boolean58 = jsonArray52.remove((com.google.gson.JsonElement) jsonPrimitive55);
        com.google.gson.JsonArray jsonArray59 = new com.google.gson.JsonArray();
        jsonArray59.add((java.lang.Number) (-1.0f));
        boolean boolean62 = jsonArray52.equals((java.lang.Object) jsonArray59);
        jsonArray59.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement66 = jsonArray59.get((int) (byte) 0);
        com.google.gson.JsonArray jsonArray67 = new com.google.gson.JsonArray();
        int int68 = jsonArray67.size();
        com.google.gson.JsonPrimitive jsonPrimitive70 = new com.google.gson.JsonPrimitive("");
        boolean boolean71 = jsonPrimitive70.isJsonNull();
        boolean boolean72 = jsonPrimitive70.isNumber();
        boolean boolean73 = jsonArray67.remove((com.google.gson.JsonElement) jsonPrimitive70);
        com.google.gson.JsonArray jsonArray74 = new com.google.gson.JsonArray();
        jsonArray74.add((java.lang.Number) (-1.0f));
        boolean boolean77 = jsonArray67.equals((java.lang.Object) jsonArray74);
        boolean boolean79 = jsonArray74.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        int int80 = jsonArray74.size();
        jsonArray59.addAll(jsonArray74);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor82 = jsonArray74.iterator();
        boolean boolean83 = autoCloseableMap0.equals((java.lang.Object) jsonElementItor82);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(autoCloseableSet5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(autoCloseableSet17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jsonElementItor31);
        org.junit.Assert.assertNull(jsonReaderInternalAccess32);
        org.junit.Assert.assertNotNull(autoCloseableSet33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess49);
        org.junit.Assert.assertNull(jsonReaderInternalAccess50);
        org.junit.Assert.assertNull(jsonReaderInternalAccess51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(jsonElement66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(jsonElementItor82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.skipValue();
        com.google.gson.stream.JsonToken jsonToken4 = jsonTreeReader2.peek();
        java.lang.String str5 = jsonTreeReader2.toString();
        com.google.gson.stream.JsonToken jsonToken6 = jsonTreeReader2.peek();
        boolean boolean7 = jsonTreeReader2.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.beginObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BEGIN_OBJECT but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken4 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken4.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JsonTreeReader" + "'", str5, "JsonTreeReader");
        org.junit.Assert.assertTrue("'" + jsonToken6 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken6.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.JsonPrimitive jsonPrimitive3 = new com.google.gson.JsonPrimitive("");
        boolean boolean4 = jsonPrimitive3.isJsonNull();
        boolean boolean5 = jsonPrimitive3.isNumber();
        boolean boolean6 = jsonArray0.remove((com.google.gson.JsonElement) jsonPrimitive3);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        jsonArray7.add((java.lang.Number) (-1.0f));
        boolean boolean10 = jsonArray0.equals((java.lang.Object) jsonArray7);
        jsonArray7.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement14 = jsonArray7.get((int) (byte) 0);
        jsonArray7.add((java.lang.Boolean) false);
        int int17 = jsonArray7.size();
        com.google.gson.JsonArray jsonArray18 = new com.google.gson.JsonArray();
        int int19 = jsonArray18.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader20 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray18);
        boolean boolean21 = jsonArray7.equals((java.lang.Object) jsonTreeReader20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = jsonArray7.getAsString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jsonElement14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        boolean boolean7 = jsonTreeReader2.hasNext();
        boolean boolean8 = jsonTreeReader2.isLenient();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap4 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int5 = autoCloseableMap4.size();
        autoCloseableMap2.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap4);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        int int8 = jsonArray7.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader9 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray7);
        jsonTreeReader9.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess11 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess12 = autoCloseableMap4.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess11);
        boolean boolean13 = jsonTreeReader9.hasNext();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess14 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess15 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess14);
        jsonTreeReader9.skipValue();
        com.google.gson.stream.JsonToken jsonToken17 = jsonTreeReader9.peek();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = jsonTreeReader9.nextLong();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess11);
        org.junit.Assert.assertNull(jsonReaderInternalAccess12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess14);
        org.junit.Assert.assertNull(jsonReaderInternalAccess15);
        org.junit.Assert.assertTrue("'" + jsonToken17 + "' != '" + com.google.gson.stream.JsonToken.BEGIN_ARRAY + "'", jsonToken17.equals(com.google.gson.stream.JsonToken.BEGIN_ARRAY));
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        boolean boolean7 = jsonTreeReader2.hasNext();
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        jsonTreeReader2.close();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.promoteNameToValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: JsonReader is closed");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive("");
        boolean boolean2 = jsonPrimitive1.isJsonNull();
        boolean boolean3 = jsonPrimitive1.isNumber();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap4 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int5 = autoCloseableMap4.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap6 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int7 = autoCloseableMap6.size();
        autoCloseableMap4.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap6);
        com.google.gson.JsonArray jsonArray9 = new com.google.gson.JsonArray();
        int int10 = jsonArray9.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader11 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray9);
        jsonTreeReader11.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess13 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess14 = autoCloseableMap6.replace((java.lang.AutoCloseable) jsonTreeReader11, jsonReaderInternalAccess13);
        jsonTreeReader11.skipValue();
        boolean boolean16 = jsonTreeReader11.hasNext();
        boolean boolean17 = jsonPrimitive1.equals((java.lang.Object) jsonTreeReader11);
        com.google.gson.stream.JsonToken jsonToken18 = jsonTreeReader11.peek();
        java.lang.String str19 = jsonTreeReader11.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = jsonTreeReader11.nextString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected STRING but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess13);
        org.junit.Assert.assertNull(jsonReaderInternalAccess14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + jsonToken18 + "' != '" + com.google.gson.stream.JsonToken.BEGIN_ARRAY + "'", jsonToken18.equals(com.google.gson.stream.JsonToken.BEGIN_ARRAY));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JsonTreeReader" + "'", str19, "JsonTreeReader");
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
        boolean boolean2 = jsonObject0.equals((java.lang.Object) 0.0f);
        com.google.gson.JsonElement jsonElement4 = jsonObject0.remove("com.google.gson.stream.MalformedJsonException: ");
        java.lang.String str5 = jsonObject0.toString();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader6 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonObject0);
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader6.nextNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NULL but was BEGIN_OBJECT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jsonElement4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet5 = autoCloseableMap0.keySet();
        com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
        int int7 = jsonArray6.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader8 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray6);
        boolean boolean9 = jsonTreeReader8.hasNext();
        jsonTreeReader8.close();
        java.lang.String str11 = jsonTreeReader8.toString();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess12 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess13 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader8, jsonReaderInternalAccess12);
        java.lang.String str14 = jsonTreeReader8.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(autoCloseableSet5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JsonTreeReader" + "'", str11, "JsonTreeReader");
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess12);
        org.junit.Assert.assertNull(jsonReaderInternalAccess13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JsonTreeReader" + "'", str14, "JsonTreeReader");
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        com.google.gson.JsonObject jsonObject11 = new com.google.gson.JsonObject();
        com.google.gson.JsonPrimitive jsonPrimitive13 = jsonObject11.getAsJsonPrimitive("com.google.gson.stream.MalformedJsonException: ");
        boolean boolean15 = autoCloseableMap2.remove((java.lang.Object) jsonObject11, (java.lang.Object) 1.0f);
        jsonObject11.addProperty("$[0]", (java.lang.Boolean) false);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertNull(jsonPrimitive13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        jsonTreeReader7.skipValue();
        boolean boolean12 = jsonTreeReader7.hasNext();
        jsonTreeReader7.skipValue();
        java.lang.String str14 = jsonTreeReader7.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JsonTreeReader" + "'", str14, "JsonTreeReader");
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap4 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int5 = autoCloseableMap4.size();
        autoCloseableMap2.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap4);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        int int8 = jsonArray7.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader9 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray7);
        jsonTreeReader9.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess11 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess12 = autoCloseableMap4.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess11);
        boolean boolean13 = jsonTreeReader9.hasNext();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess14 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess15 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess14);
        jsonTreeReader9.skipValue();
        jsonTreeReader9.skipValue();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess11);
        org.junit.Assert.assertNull(jsonReaderInternalAccess12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess14);
        org.junit.Assert.assertNull(jsonReaderInternalAccess15);
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.JsonPrimitive jsonPrimitive3 = new com.google.gson.JsonPrimitive("");
        boolean boolean4 = jsonPrimitive3.isJsonNull();
        boolean boolean5 = jsonPrimitive3.isNumber();
        boolean boolean6 = jsonArray0.remove((com.google.gson.JsonElement) jsonPrimitive3);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        jsonArray7.add((java.lang.Number) (-1.0f));
        boolean boolean10 = jsonArray0.equals((java.lang.Object) jsonArray7);
        jsonArray7.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement14 = jsonArray7.get((int) (byte) 0);
        com.google.gson.JsonArray jsonArray15 = new com.google.gson.JsonArray();
        int int16 = jsonArray15.size();
        com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive("");
        boolean boolean19 = jsonPrimitive18.isJsonNull();
        boolean boolean20 = jsonPrimitive18.isNumber();
        boolean boolean21 = jsonArray15.remove((com.google.gson.JsonElement) jsonPrimitive18);
        com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
        jsonArray22.add((java.lang.Number) (-1.0f));
        boolean boolean25 = jsonArray15.equals((java.lang.Object) jsonArray22);
        boolean boolean27 = jsonArray22.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        int int28 = jsonArray22.size();
        jsonArray7.addAll(jsonArray22);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor30 = jsonArray22.iterator();
        com.google.gson.JsonArray jsonArray31 = new com.google.gson.JsonArray();
        int int32 = jsonArray31.size();
        com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive("");
        boolean boolean35 = jsonPrimitive34.isJsonNull();
        boolean boolean36 = jsonPrimitive34.isNumber();
        boolean boolean37 = jsonArray31.remove((com.google.gson.JsonElement) jsonPrimitive34);
        com.google.gson.JsonArray jsonArray38 = new com.google.gson.JsonArray();
        jsonArray38.add((java.lang.Number) (-1.0f));
        boolean boolean41 = jsonArray31.equals((java.lang.Object) jsonArray38);
        com.google.gson.JsonElement jsonElement42 = null;
        boolean boolean43 = jsonArray31.remove(jsonElement42);
        com.google.gson.JsonArray jsonArray44 = new com.google.gson.JsonArray();
        int int45 = jsonArray44.size();
        com.google.gson.JsonPrimitive jsonPrimitive47 = new com.google.gson.JsonPrimitive("");
        boolean boolean48 = jsonPrimitive47.isJsonNull();
        boolean boolean49 = jsonPrimitive47.isNumber();
        boolean boolean50 = jsonArray44.remove((com.google.gson.JsonElement) jsonPrimitive47);
        com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
        jsonArray51.add((java.lang.Number) (-1.0f));
        boolean boolean54 = jsonArray44.equals((java.lang.Object) jsonArray51);
        com.google.gson.JsonElement jsonElement55 = null;
        boolean boolean56 = jsonArray44.remove(jsonElement55);
        boolean boolean57 = jsonArray31.remove((com.google.gson.JsonElement) jsonArray44);
        jsonArray44.add((java.lang.Character) ' ');
        boolean boolean60 = jsonArray22.remove((com.google.gson.JsonElement) jsonArray44);
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader61 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray44);
        // The following exception was thrown during execution in test generation
        try {
            double double62 = jsonTreeReader61.nextDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jsonElement14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(jsonElementItor30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.JsonPrimitive jsonPrimitive3 = new com.google.gson.JsonPrimitive("");
        boolean boolean4 = jsonPrimitive3.isJsonNull();
        boolean boolean5 = jsonPrimitive3.isNumber();
        boolean boolean6 = jsonArray0.remove((com.google.gson.JsonElement) jsonPrimitive3);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        jsonArray7.add((java.lang.Number) (-1.0f));
        boolean boolean10 = jsonArray0.equals((java.lang.Object) jsonArray7);
        jsonArray7.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement14 = jsonArray7.get((int) (byte) 0);
        short short15 = jsonElement14.getAsShort();
        boolean boolean16 = jsonElement14.isJsonPrimitive();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader17 = new com.google.gson.internal.bind.JsonTreeReader(jsonElement14);
        java.lang.String str18 = jsonTreeReader17.getPath();
        java.lang.String str19 = jsonTreeReader17.getPath();
        com.google.gson.stream.JsonToken jsonToken20 = jsonTreeReader17.peek();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jsonElement14);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) -1 + "'", short15 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "$" + "'", str18, "$");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "$" + "'", str19, "$");
        org.junit.Assert.assertTrue("'" + jsonToken20 + "' != '" + com.google.gson.stream.JsonToken.NUMBER + "'", jsonToken20.equals(com.google.gson.stream.JsonToken.NUMBER));
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet5 = autoCloseableMap0.keySet();
        int int6 = autoCloseableMap0.size();
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        int int8 = jsonArray7.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader9 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray7);
        jsonTreeReader9.beginArray();
        jsonTreeReader9.skipValue();
        java.lang.String str12 = jsonTreeReader9.getPath();
        boolean boolean13 = jsonTreeReader9.hasNext();
        jsonTreeReader9.setLenient(false);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap16 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int17 = autoCloseableMap16.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap18 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int19 = autoCloseableMap18.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap20 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int21 = autoCloseableMap20.size();
        autoCloseableMap18.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap20);
        com.google.gson.JsonArray jsonArray23 = new com.google.gson.JsonArray();
        int int24 = jsonArray23.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader25 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray23);
        jsonTreeReader25.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess27 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess28 = autoCloseableMap20.replace((java.lang.AutoCloseable) jsonTreeReader25, jsonReaderInternalAccess27);
        boolean boolean29 = jsonTreeReader25.hasNext();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess30 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess31 = autoCloseableMap16.replace((java.lang.AutoCloseable) jsonTreeReader25, jsonReaderInternalAccess30);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap32 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int33 = autoCloseableMap32.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap34 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int35 = autoCloseableMap34.size();
        autoCloseableMap32.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap34);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet37 = autoCloseableMap32.entrySet();
        com.google.gson.JsonArray jsonArray38 = new com.google.gson.JsonArray();
        int int39 = jsonArray38.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader40 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray38);
        jsonTreeReader40.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess42 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess43 = autoCloseableMap32.replace((java.lang.AutoCloseable) jsonTreeReader40, jsonReaderInternalAccess42);
        boolean boolean44 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess30, jsonReaderInternalAccess42);
        java.lang.String str45 = autoCloseableMap0.toString();
        java.lang.String str46 = autoCloseableMap0.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(autoCloseableSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "$" + "'", str12, "$");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess27);
        org.junit.Assert.assertNull(jsonReaderInternalAccess28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess30);
        org.junit.Assert.assertNull(jsonReaderInternalAccess31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess42);
        org.junit.Assert.assertNull(jsonReaderInternalAccess43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "{}" + "'", str45, "{}");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{}" + "'", str46, "{}");
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        boolean boolean7 = jsonTreeReader2.hasNext();
        jsonTreeReader2.beginArray();
        jsonTreeReader2.close();
        jsonTreeReader2.close();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.lang.Object obj5 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess6 = autoCloseableMap0.remove(obj5);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        int int8 = jsonArray7.size();
        com.google.gson.JsonPrimitive jsonPrimitive10 = new com.google.gson.JsonPrimitive("");
        boolean boolean11 = jsonPrimitive10.isJsonNull();
        boolean boolean12 = jsonPrimitive10.isNumber();
        boolean boolean13 = jsonArray7.remove((com.google.gson.JsonElement) jsonPrimitive10);
        com.google.gson.JsonArray jsonArray14 = new com.google.gson.JsonArray();
        jsonArray14.add((java.lang.Number) (-1.0f));
        boolean boolean17 = jsonArray7.equals((java.lang.Object) jsonArray14);
        jsonArray14.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement21 = jsonArray14.get((int) (byte) 0);
        com.google.gson.JsonObject jsonObject22 = new com.google.gson.JsonObject();
        boolean boolean24 = jsonObject22.equals((java.lang.Object) 0.0f);
        java.util.Set<java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement>> strEntrySet25 = jsonObject22.entrySet();
        jsonObject22.addProperty("", "4");
        com.google.gson.JsonObject jsonObject30 = jsonObject22.getAsJsonObject("com.google.gson.stream.MalformedJsonException: hi!");
        jsonArray14.add((com.google.gson.JsonElement) jsonObject30);
        boolean boolean32 = autoCloseableMap0.containsValue((java.lang.Object) jsonArray14);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap33 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int34 = autoCloseableMap33.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap35 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int36 = autoCloseableMap35.size();
        autoCloseableMap33.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap35);
        com.google.gson.JsonArray jsonArray38 = new com.google.gson.JsonArray();
        int int39 = jsonArray38.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader40 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray38);
        jsonTreeReader40.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess42 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess43 = autoCloseableMap35.replace((java.lang.AutoCloseable) jsonTreeReader40, jsonReaderInternalAccess42);
        boolean boolean44 = jsonTreeReader40.hasNext();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap45 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int46 = autoCloseableMap45.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap47 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int48 = autoCloseableMap47.size();
        autoCloseableMap45.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap47);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet50 = autoCloseableMap45.entrySet();
        com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
        int int52 = jsonArray51.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader53 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray51);
        jsonTreeReader53.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess55 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess56 = autoCloseableMap45.replace((java.lang.AutoCloseable) jsonTreeReader53, jsonReaderInternalAccess55);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap57 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int58 = autoCloseableMap57.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap59 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int60 = autoCloseableMap59.size();
        autoCloseableMap57.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap59);
        java.lang.Object obj62 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess63 = autoCloseableMap57.remove(obj62);
        com.google.gson.JsonPrimitive jsonPrimitive65 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number66 = jsonPrimitive65.getAsNumber();
        boolean boolean67 = autoCloseableMap57.containsKey((java.lang.Object) number66);
        com.google.gson.JsonPrimitive jsonPrimitive69 = new com.google.gson.JsonPrimitive("");
        boolean boolean70 = jsonPrimitive69.isJsonNull();
        boolean boolean72 = jsonPrimitive69.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean73 = jsonPrimitive69.isString();
        java.lang.Number number74 = jsonPrimitive69.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess75 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess75;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess77 = autoCloseableMap57.getOrDefault((java.lang.Object) jsonPrimitive69, jsonReaderInternalAccess75);
        boolean boolean78 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader40, jsonReaderInternalAccess56, jsonReaderInternalAccess77);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jsonElement21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strEntrySet25);
        org.junit.Assert.assertNull(jsonObject30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess42);
        org.junit.Assert.assertNull(jsonReaderInternalAccess43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess55);
        org.junit.Assert.assertNull(jsonReaderInternalAccess56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess63);
        org.junit.Assert.assertNotNull(number66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(number74);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess75);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.JsonPrimitive jsonPrimitive3 = new com.google.gson.JsonPrimitive("");
        boolean boolean4 = jsonPrimitive3.isJsonNull();
        boolean boolean5 = jsonPrimitive3.isNumber();
        boolean boolean6 = jsonArray0.remove((com.google.gson.JsonElement) jsonPrimitive3);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        jsonArray7.add((java.lang.Number) (-1.0f));
        boolean boolean10 = jsonArray0.equals((java.lang.Object) jsonArray7);
        jsonArray7.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement14 = jsonArray7.get((int) (byte) 0);
        short short15 = jsonElement14.getAsShort();
        boolean boolean16 = jsonElement14.isJsonPrimitive();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader17 = new com.google.gson.internal.bind.JsonTreeReader(jsonElement14);
        java.lang.String str18 = jsonTreeReader17.getPath();
        jsonTreeReader17.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader17.nextNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NULL but was NUMBER at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jsonElement14);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) -1 + "'", short15 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "$" + "'", str18, "$");
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        // The following exception was thrown during execution in test generation
        try {
            long long6 = jsonTreeReader2.nextLong();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.JsonPrimitive jsonPrimitive3 = new com.google.gson.JsonPrimitive("");
        boolean boolean4 = jsonPrimitive3.isJsonNull();
        boolean boolean5 = jsonPrimitive3.isNumber();
        boolean boolean6 = jsonArray0.remove((com.google.gson.JsonElement) jsonPrimitive3);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        jsonArray7.add((java.lang.Number) (-1.0f));
        boolean boolean10 = jsonArray0.equals((java.lang.Object) jsonArray7);
        jsonArray7.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement14 = jsonArray7.get((int) (byte) 0);
        com.google.gson.JsonArray jsonArray15 = new com.google.gson.JsonArray();
        int int16 = jsonArray15.size();
        com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive("");
        boolean boolean19 = jsonPrimitive18.isJsonNull();
        boolean boolean20 = jsonPrimitive18.isNumber();
        boolean boolean21 = jsonArray15.remove((com.google.gson.JsonElement) jsonPrimitive18);
        com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
        jsonArray22.add((java.lang.Number) (-1.0f));
        boolean boolean25 = jsonArray15.equals((java.lang.Object) jsonArray22);
        boolean boolean27 = jsonArray22.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        int int28 = jsonArray22.size();
        jsonArray7.addAll(jsonArray22);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor30 = jsonArray22.iterator();
        com.google.gson.JsonArray jsonArray31 = new com.google.gson.JsonArray();
        int int32 = jsonArray31.size();
        com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive("");
        boolean boolean35 = jsonPrimitive34.isJsonNull();
        boolean boolean36 = jsonPrimitive34.isNumber();
        boolean boolean37 = jsonArray31.remove((com.google.gson.JsonElement) jsonPrimitive34);
        com.google.gson.JsonArray jsonArray38 = new com.google.gson.JsonArray();
        jsonArray38.add((java.lang.Number) (-1.0f));
        boolean boolean41 = jsonArray31.equals((java.lang.Object) jsonArray38);
        com.google.gson.JsonElement jsonElement42 = null;
        boolean boolean43 = jsonArray31.remove(jsonElement42);
        com.google.gson.JsonArray jsonArray44 = new com.google.gson.JsonArray();
        int int45 = jsonArray44.size();
        com.google.gson.JsonPrimitive jsonPrimitive47 = new com.google.gson.JsonPrimitive("");
        boolean boolean48 = jsonPrimitive47.isJsonNull();
        boolean boolean49 = jsonPrimitive47.isNumber();
        boolean boolean50 = jsonArray44.remove((com.google.gson.JsonElement) jsonPrimitive47);
        com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
        jsonArray51.add((java.lang.Number) (-1.0f));
        boolean boolean54 = jsonArray44.equals((java.lang.Object) jsonArray51);
        com.google.gson.JsonElement jsonElement55 = null;
        boolean boolean56 = jsonArray44.remove(jsonElement55);
        boolean boolean57 = jsonArray31.remove((com.google.gson.JsonElement) jsonArray44);
        jsonArray44.add((java.lang.Character) ' ');
        boolean boolean60 = jsonArray22.remove((com.google.gson.JsonElement) jsonArray44);
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader61 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray44);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal62 = jsonArray44.getAsBigDecimal();
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jsonElement14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(jsonElementItor30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
        com.google.gson.JsonObject jsonObject1 = new com.google.gson.JsonObject();
        com.google.gson.JsonObject jsonObject3 = new com.google.gson.JsonObject();
        jsonObject1.add("com.google.gson.stream.MalformedJsonException: ", (com.google.gson.JsonElement) jsonObject3);
        boolean boolean5 = jsonObject0.equals((java.lang.Object) jsonObject1);
        jsonObject0.addProperty("", (java.lang.Character) '4');
        boolean boolean10 = jsonObject0.has("4");
        com.google.gson.JsonObject jsonObject12 = jsonObject0.getAsJsonObject("$[0]");
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader13 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonObject12);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jsonObject12);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet5 = autoCloseableMap0.keySet();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap6 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int7 = autoCloseableMap6.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap8 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int9 = autoCloseableMap8.size();
        autoCloseableMap6.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap8);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet11 = autoCloseableMap6.entrySet();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap12 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int13 = autoCloseableMap12.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap14 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int15 = autoCloseableMap14.size();
        autoCloseableMap12.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap14);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet17 = autoCloseableMap12.keySet();
        int int18 = autoCloseableMap12.size();
        autoCloseableMap6.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap12);
        com.google.gson.JsonArray jsonArray20 = new com.google.gson.JsonArray();
        int int21 = jsonArray20.size();
        com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive("");
        boolean boolean24 = jsonPrimitive23.isJsonNull();
        boolean boolean25 = jsonPrimitive23.isNumber();
        boolean boolean26 = jsonArray20.remove((com.google.gson.JsonElement) jsonPrimitive23);
        com.google.gson.JsonArray jsonArray27 = new com.google.gson.JsonArray();
        jsonArray27.add((java.lang.Number) (-1.0f));
        boolean boolean30 = jsonArray20.equals((java.lang.Object) jsonArray27);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor31 = jsonArray20.iterator();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess32 = autoCloseableMap12.remove((java.lang.Object) jsonArray20);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet33 = autoCloseableMap12.keySet();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap12);
        int int35 = autoCloseableMap0.size();
        com.google.gson.JsonArray jsonArray36 = new com.google.gson.JsonArray();
        int int37 = jsonArray36.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader38 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray36);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap39 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int40 = autoCloseableMap39.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap41 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int42 = autoCloseableMap41.size();
        autoCloseableMap39.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap41);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet44 = autoCloseableMap39.entrySet();
        com.google.gson.JsonArray jsonArray45 = new com.google.gson.JsonArray();
        int int46 = jsonArray45.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader47 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray45);
        jsonTreeReader47.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess49 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess50 = autoCloseableMap39.replace((java.lang.AutoCloseable) jsonTreeReader47, jsonReaderInternalAccess49);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess51 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader38, jsonReaderInternalAccess50);
        com.google.gson.JsonNull jsonNull52 = new com.google.gson.JsonNull();
        com.google.gson.JsonObject jsonObject53 = new com.google.gson.JsonObject();
        com.google.gson.JsonObject jsonObject55 = new com.google.gson.JsonObject();
        jsonObject53.add("com.google.gson.stream.MalformedJsonException: ", (com.google.gson.JsonElement) jsonObject55);
        boolean boolean57 = jsonNull52.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        java.lang.Object obj58 = null;
        boolean boolean59 = jsonNull52.equals(obj58);
        boolean boolean60 = autoCloseableMap0.containsKey(obj58);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(autoCloseableSet5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(autoCloseableSet17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jsonElementItor31);
        org.junit.Assert.assertNull(jsonReaderInternalAccess32);
        org.junit.Assert.assertNotNull(autoCloseableSet33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess49);
        org.junit.Assert.assertNull(jsonReaderInternalAccess50);
        org.junit.Assert.assertNull(jsonReaderInternalAccess51);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        boolean boolean11 = jsonTreeReader7.hasNext();
        jsonTreeReader7.close();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = jsonTreeReader7.nextBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: JsonReader is closed");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        boolean boolean3 = jsonTreeReader2.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.endArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected END_ARRAY but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.close();
        java.lang.String str5 = jsonTreeReader2.toString();
        java.lang.String str6 = jsonTreeReader2.getPath();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JsonTreeReader" + "'", str5, "JsonTreeReader");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "$" + "'", str6, "$");
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.stream.MalformedJsonException malformedJsonException6 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException7 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException6);
        com.google.gson.stream.MalformedJsonException malformedJsonException8 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException6);
        com.google.gson.stream.MalformedJsonException malformedJsonException9 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable) malformedJsonException8);
        boolean boolean10 = autoCloseableMap0.equals((java.lang.Object) malformedJsonException9);
        com.google.gson.stream.MalformedJsonException malformedJsonException14 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException15 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException14);
        com.google.gson.stream.MalformedJsonException malformedJsonException16 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException15);
        boolean boolean17 = autoCloseableMap0.containsKey((java.lang.Object) malformedJsonException16);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap18 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        java.util.Collection<com.google.gson.internal.JsonReaderInternalAccess> jsonReaderInternalAccessCollection19 = autoCloseableMap18.values();
        boolean boolean21 = autoCloseableMap18.equals((java.lang.Object) 100.0f);
        com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
        int int23 = jsonArray22.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader24 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray22);
        jsonTreeReader24.skipValue();
        com.google.gson.stream.JsonToken jsonToken26 = jsonTreeReader24.peek();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap27 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int28 = autoCloseableMap27.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap29 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int30 = autoCloseableMap29.size();
        autoCloseableMap27.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap29);
        java.lang.Object obj32 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess33 = autoCloseableMap27.remove(obj32);
        com.google.gson.JsonPrimitive jsonPrimitive35 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number36 = jsonPrimitive35.getAsNumber();
        boolean boolean37 = autoCloseableMap27.containsKey((java.lang.Object) number36);
        com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive("");
        boolean boolean40 = jsonPrimitive39.isJsonNull();
        boolean boolean42 = jsonPrimitive39.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean43 = jsonPrimitive39.isString();
        java.lang.Number number44 = jsonPrimitive39.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess45 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess45;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess47 = autoCloseableMap27.getOrDefault((java.lang.Object) jsonPrimitive39, jsonReaderInternalAccess45);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess48 = autoCloseableMap18.replace((java.lang.AutoCloseable) jsonTreeReader24, jsonReaderInternalAccess47);
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap18);
        java.lang.String str50 = autoCloseableMap18.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccessCollection19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken26 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken26.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess33);
        org.junit.Assert.assertNotNull(number36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(number44);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess45);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess47);
        org.junit.Assert.assertNull(jsonReaderInternalAccess48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "{}" + "'", str50, "{}");
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        java.util.Collection<com.google.gson.internal.JsonReaderInternalAccess> jsonReaderInternalAccessCollection1 = autoCloseableMap0.values();
        boolean boolean3 = autoCloseableMap0.equals((java.lang.Object) 100.0f);
        com.google.gson.JsonArray jsonArray4 = new com.google.gson.JsonArray();
        int int5 = jsonArray4.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader6 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray4);
        jsonTreeReader6.skipValue();
        com.google.gson.stream.JsonToken jsonToken8 = jsonTreeReader6.peek();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap9 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int10 = autoCloseableMap9.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap11 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int12 = autoCloseableMap11.size();
        autoCloseableMap9.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap11);
        java.lang.Object obj14 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess15 = autoCloseableMap9.remove(obj14);
        com.google.gson.JsonPrimitive jsonPrimitive17 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number18 = jsonPrimitive17.getAsNumber();
        boolean boolean19 = autoCloseableMap9.containsKey((java.lang.Object) number18);
        com.google.gson.JsonPrimitive jsonPrimitive21 = new com.google.gson.JsonPrimitive("");
        boolean boolean22 = jsonPrimitive21.isJsonNull();
        boolean boolean24 = jsonPrimitive21.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean25 = jsonPrimitive21.isString();
        java.lang.Number number26 = jsonPrimitive21.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess27 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess27;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess29 = autoCloseableMap9.getOrDefault((java.lang.Object) jsonPrimitive21, jsonReaderInternalAccess27);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess30 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader6, jsonReaderInternalAccess29);
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader6.endArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected END_ARRAY but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReaderInternalAccessCollection1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken8 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken8.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess15);
        org.junit.Assert.assertNotNull(number18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(number26);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess27);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess29);
        org.junit.Assert.assertNull(jsonReaderInternalAccess30);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        com.google.gson.JsonObject jsonObject11 = new com.google.gson.JsonObject();
        com.google.gson.JsonPrimitive jsonPrimitive13 = jsonObject11.getAsJsonPrimitive("com.google.gson.stream.MalformedJsonException: ");
        boolean boolean15 = autoCloseableMap2.remove((java.lang.Object) jsonObject11, (java.lang.Object) 1.0f);
        com.google.gson.stream.MalformedJsonException malformedJsonException18 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException19 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException18);
        java.lang.Throwable[] throwableArray20 = malformedJsonException19.getSuppressed();
        boolean boolean21 = autoCloseableMap2.equals((java.lang.Object) throwableArray20);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap22 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int23 = autoCloseableMap22.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap24 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int25 = autoCloseableMap24.size();
        autoCloseableMap22.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap24);
        autoCloseableMap2.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap22);
        com.google.gson.JsonObject jsonObject28 = new com.google.gson.JsonObject();
        com.google.gson.JsonObject jsonObject29 = new com.google.gson.JsonObject();
        com.google.gson.JsonObject jsonObject31 = new com.google.gson.JsonObject();
        jsonObject29.add("com.google.gson.stream.MalformedJsonException: ", (com.google.gson.JsonElement) jsonObject31);
        boolean boolean33 = jsonObject28.equals((java.lang.Object) jsonObject29);
        com.google.gson.JsonObject jsonObject35 = new com.google.gson.JsonObject();
        com.google.gson.JsonObject jsonObject36 = new com.google.gson.JsonObject();
        com.google.gson.JsonObject jsonObject38 = new com.google.gson.JsonObject();
        jsonObject36.add("com.google.gson.stream.MalformedJsonException: ", (com.google.gson.JsonElement) jsonObject38);
        boolean boolean40 = jsonObject35.equals((java.lang.Object) jsonObject36);
        com.google.gson.JsonArray jsonArray42 = jsonObject35.getAsJsonArray("");
        jsonObject28.add("com.google.gson.stream.MalformedJsonException: hi!", (com.google.gson.JsonElement) jsonArray42);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap44 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int45 = autoCloseableMap44.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap46 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int47 = autoCloseableMap46.size();
        autoCloseableMap44.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap46);
        com.google.gson.JsonArray jsonArray49 = new com.google.gson.JsonArray();
        int int50 = jsonArray49.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader51 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray49);
        jsonTreeReader51.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess53 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess54 = autoCloseableMap46.replace((java.lang.AutoCloseable) jsonTreeReader51, jsonReaderInternalAccess53);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess55 = autoCloseableMap2.getOrDefault((java.lang.Object) jsonObject28, jsonReaderInternalAccess53);
        com.google.gson.JsonArray jsonArray56 = new com.google.gson.JsonArray();
        int int57 = jsonArray56.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader58 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray56);
        jsonTreeReader58.beginArray();
        jsonTreeReader58.setLenient(false);
        java.lang.String str62 = jsonTreeReader58.getPath();
        com.google.gson.JsonArray jsonArray63 = new com.google.gson.JsonArray();
        int int64 = jsonArray63.size();
        com.google.gson.JsonPrimitive jsonPrimitive66 = new com.google.gson.JsonPrimitive("");
        boolean boolean67 = jsonPrimitive66.isJsonNull();
        boolean boolean68 = jsonPrimitive66.isNumber();
        boolean boolean69 = jsonArray63.remove((com.google.gson.JsonElement) jsonPrimitive66);
        com.google.gson.JsonArray jsonArray70 = new com.google.gson.JsonArray();
        jsonArray70.add((java.lang.Number) (-1.0f));
        boolean boolean73 = jsonArray63.equals((java.lang.Object) jsonArray70);
        com.google.gson.stream.MalformedJsonException malformedJsonException76 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException77 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException76);
        java.lang.Throwable[] throwableArray78 = malformedJsonException77.getSuppressed();
        com.google.gson.stream.MalformedJsonException malformedJsonException81 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException82 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException81);
        malformedJsonException77.addSuppressed((java.lang.Throwable) malformedJsonException82);
        boolean boolean84 = jsonArray63.equals((java.lang.Object) malformedJsonException77);
        boolean boolean85 = autoCloseableMap2.remove((java.lang.Object) jsonTreeReader58, (java.lang.Object) jsonArray63);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str86 = jsonTreeReader58.nextName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NAME but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertNull(jsonPrimitive13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(jsonArray42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess53);
        org.junit.Assert.assertNull(jsonReaderInternalAccess54);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "$[0]" + "'", str62, "$[0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        boolean boolean7 = jsonTreeReader2.hasNext();
        jsonTreeReader2.beginArray();
        jsonTreeReader2.close();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = jsonTreeReader2.nextString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: JsonReader is closed");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.stream.MalformedJsonException malformedJsonException6 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException7 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException6);
        com.google.gson.stream.MalformedJsonException malformedJsonException8 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException6);
        com.google.gson.stream.MalformedJsonException malformedJsonException9 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable) malformedJsonException8);
        boolean boolean10 = autoCloseableMap0.equals((java.lang.Object) malformedJsonException9);
        com.google.gson.stream.MalformedJsonException malformedJsonException14 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException15 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException14);
        com.google.gson.stream.MalformedJsonException malformedJsonException16 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException15);
        boolean boolean17 = autoCloseableMap0.containsKey((java.lang.Object) malformedJsonException16);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap18 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        java.util.Collection<com.google.gson.internal.JsonReaderInternalAccess> jsonReaderInternalAccessCollection19 = autoCloseableMap18.values();
        boolean boolean21 = autoCloseableMap18.equals((java.lang.Object) 100.0f);
        com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
        int int23 = jsonArray22.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader24 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray22);
        jsonTreeReader24.skipValue();
        com.google.gson.stream.JsonToken jsonToken26 = jsonTreeReader24.peek();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap27 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int28 = autoCloseableMap27.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap29 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int30 = autoCloseableMap29.size();
        autoCloseableMap27.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap29);
        java.lang.Object obj32 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess33 = autoCloseableMap27.remove(obj32);
        com.google.gson.JsonPrimitive jsonPrimitive35 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number36 = jsonPrimitive35.getAsNumber();
        boolean boolean37 = autoCloseableMap27.containsKey((java.lang.Object) number36);
        com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive("");
        boolean boolean40 = jsonPrimitive39.isJsonNull();
        boolean boolean42 = jsonPrimitive39.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean43 = jsonPrimitive39.isString();
        java.lang.Number number44 = jsonPrimitive39.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess45 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess45;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess47 = autoCloseableMap27.getOrDefault((java.lang.Object) jsonPrimitive39, jsonReaderInternalAccess45);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess48 = autoCloseableMap18.replace((java.lang.AutoCloseable) jsonTreeReader24, jsonReaderInternalAccess47);
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap18);
        com.google.gson.JsonArray jsonArray50 = new com.google.gson.JsonArray();
        int int51 = jsonArray50.size();
        com.google.gson.JsonPrimitive jsonPrimitive53 = new com.google.gson.JsonPrimitive("");
        boolean boolean54 = jsonPrimitive53.isJsonNull();
        boolean boolean55 = jsonPrimitive53.isNumber();
        boolean boolean56 = jsonArray50.remove((com.google.gson.JsonElement) jsonPrimitive53);
        com.google.gson.JsonArray jsonArray57 = new com.google.gson.JsonArray();
        jsonArray57.add((java.lang.Number) (-1.0f));
        boolean boolean60 = jsonArray50.equals((java.lang.Object) jsonArray57);
        boolean boolean62 = jsonArray57.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        java.lang.String str63 = jsonArray57.getAsString();
        com.google.gson.JsonElement jsonElement65 = jsonArray57.get((int) (short) 0);
        float float66 = jsonArray57.getAsFloat();
        jsonArray57.add((java.lang.Character) 'a');
        com.google.gson.JsonArray jsonArray69 = new com.google.gson.JsonArray();
        int int70 = jsonArray69.size();
        com.google.gson.JsonPrimitive jsonPrimitive72 = new com.google.gson.JsonPrimitive("");
        boolean boolean73 = jsonPrimitive72.isJsonNull();
        boolean boolean74 = jsonPrimitive72.isNumber();
        boolean boolean75 = jsonArray69.remove((com.google.gson.JsonElement) jsonPrimitive72);
        com.google.gson.JsonArray jsonArray76 = new com.google.gson.JsonArray();
        jsonArray76.add((java.lang.Number) (-1.0f));
        boolean boolean79 = jsonArray69.equals((java.lang.Object) jsonArray76);
        com.google.gson.JsonElement jsonElement80 = null;
        boolean boolean81 = jsonArray69.remove(jsonElement80);
        com.google.gson.JsonArray jsonArray82 = new com.google.gson.JsonArray();
        int int83 = jsonArray82.size();
        com.google.gson.JsonPrimitive jsonPrimitive85 = new com.google.gson.JsonPrimitive("");
        boolean boolean86 = jsonPrimitive85.isJsonNull();
        boolean boolean87 = jsonPrimitive85.isNumber();
        boolean boolean88 = jsonArray82.remove((com.google.gson.JsonElement) jsonPrimitive85);
        com.google.gson.JsonArray jsonArray89 = new com.google.gson.JsonArray();
        jsonArray89.add((java.lang.Number) (-1.0f));
        boolean boolean92 = jsonArray82.equals((java.lang.Object) jsonArray89);
        com.google.gson.JsonElement jsonElement93 = null;
        boolean boolean94 = jsonArray82.remove(jsonElement93);
        boolean boolean95 = jsonArray69.remove((com.google.gson.JsonElement) jsonArray82);
        java.util.Spliterator<com.google.gson.JsonElement> jsonElementSpliterator96 = jsonArray82.spliterator();
        java.util.Spliterator<com.google.gson.JsonElement> jsonElementSpliterator97 = jsonArray82.spliterator();
        boolean boolean98 = autoCloseableMap18.remove((java.lang.Object) jsonArray57, (java.lang.Object) jsonArray82);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor99 = jsonArray57.iterator();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccessCollection19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken26 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken26.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess33);
        org.junit.Assert.assertNotNull(number36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(number44);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess45);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess47);
        org.junit.Assert.assertNull(jsonReaderInternalAccess48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "-1.0" + "'", str63, "-1.0");
        org.junit.Assert.assertNotNull(jsonElement65);
        org.junit.Assert.assertTrue("'" + float66 + "' != '" + (-1.0f) + "'", float66 == (-1.0f));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(jsonElementSpliterator96);
        org.junit.Assert.assertNotNull(jsonElementSpliterator97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(jsonElementItor99);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet5 = autoCloseableMap0.entrySet();
        com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
        int int7 = jsonArray6.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader8 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray6);
        jsonTreeReader8.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess11 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader8, jsonReaderInternalAccess10);
        jsonTreeReader8.endArray();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = jsonTreeReader8.nextDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertNull(jsonReaderInternalAccess11);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        autoCloseableMap2.clear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        com.google.gson.JsonObject jsonObject11 = new com.google.gson.JsonObject();
        com.google.gson.JsonPrimitive jsonPrimitive13 = jsonObject11.getAsJsonPrimitive("com.google.gson.stream.MalformedJsonException: ");
        boolean boolean15 = autoCloseableMap2.remove((java.lang.Object) jsonObject11, (java.lang.Object) 1.0f);
        com.google.gson.JsonElement jsonElement17 = jsonObject11.remove("com.google.gson.stream.MalformedJsonException: ");
        java.lang.Number number19 = null;
        jsonObject11.addProperty("JsonTreeReader", number19);
        // The following exception was thrown during execution in test generation
        try {
            com.google.gson.JsonArray jsonArray21 = jsonObject11.getAsJsonArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Not a JSON Array: {\"JsonTreeReader\":null}");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertNull(jsonPrimitive13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jsonElement17);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet5 = autoCloseableMap0.entrySet();
        com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
        int int7 = jsonArray6.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader8 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray6);
        jsonTreeReader8.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess11 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader8, jsonReaderInternalAccess10);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap12 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int13 = autoCloseableMap12.size();
        com.google.gson.stream.MalformedJsonException malformedJsonException18 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException19 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException18);
        com.google.gson.stream.MalformedJsonException malformedJsonException20 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException18);
        com.google.gson.stream.MalformedJsonException malformedJsonException21 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable) malformedJsonException20);
        boolean boolean22 = autoCloseableMap12.equals((java.lang.Object) malformedJsonException21);
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap12);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertNull(jsonReaderInternalAccess11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap4 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int5 = autoCloseableMap4.size();
        autoCloseableMap2.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap4);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        int int8 = jsonArray7.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader9 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray7);
        jsonTreeReader9.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess11 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess12 = autoCloseableMap4.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess11);
        boolean boolean13 = jsonTreeReader9.hasNext();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess14 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess15 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess14);
        jsonTreeReader9.skipValue();
        jsonTreeReader9.setLenient(true);
        java.lang.String str19 = jsonTreeReader9.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = jsonTreeReader9.nextString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected STRING but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess11);
        org.junit.Assert.assertNull(jsonReaderInternalAccess12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess14);
        org.junit.Assert.assertNull(jsonReaderInternalAccess15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JsonTreeReader" + "'", str19, "JsonTreeReader");
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.skipValue();
        boolean boolean4 = jsonTreeReader2.isLenient();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        jsonTreeReader2.close();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = jsonTreeReader2.hasNext();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: JsonReader is closed");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        com.google.gson.stream.JsonToken jsonToken7 = jsonTreeReader2.peek();
        jsonTreeReader2.beginArray();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + jsonToken7 + "' != '" + com.google.gson.stream.JsonToken.BEGIN_ARRAY + "'", jsonToken7.equals(com.google.gson.stream.JsonToken.BEGIN_ARRAY));
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        com.google.gson.stream.JsonToken jsonToken7 = jsonTreeReader2.peek();
        boolean boolean8 = jsonTreeReader2.hasNext();
        java.lang.String str9 = jsonTreeReader2.getPath();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.beginObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BEGIN_OBJECT but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + jsonToken7 + "' != '" + com.google.gson.stream.JsonToken.BEGIN_ARRAY + "'", jsonToken7.equals(com.google.gson.stream.JsonToken.BEGIN_ARRAY));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "$" + "'", str9, "$");
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        com.google.gson.JsonObject jsonObject11 = new com.google.gson.JsonObject();
        com.google.gson.JsonPrimitive jsonPrimitive13 = jsonObject11.getAsJsonPrimitive("com.google.gson.stream.MalformedJsonException: ");
        boolean boolean15 = autoCloseableMap2.remove((java.lang.Object) jsonObject11, (java.lang.Object) 1.0f);
        int int16 = autoCloseableMap2.size();
        com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number19 = jsonPrimitive18.getAsNumber();
        boolean boolean20 = jsonPrimitive18.getAsBoolean();
        short short21 = jsonPrimitive18.getAsShort();
        boolean boolean22 = jsonPrimitive18.isJsonObject();
        boolean boolean23 = jsonPrimitive18.isString();
        boolean boolean24 = autoCloseableMap2.equals((java.lang.Object) jsonPrimitive18);
        autoCloseableMap2.clear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertNull(jsonPrimitive13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(number19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + short21 + "' != '" + (short) 4 + "'", short21 == (short) 4);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        jsonTreeReader7.skipValue();
        boolean boolean12 = jsonTreeReader7.hasNext();
        boolean boolean13 = jsonTreeReader7.hasNext();
        jsonTreeReader7.setLenient(false);
        java.lang.String str16 = jsonTreeReader7.getPath();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader7.endObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected END_OBJECT but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "$" + "'", str16, "$");
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
        com.google.gson.JsonObject jsonObject2 = new com.google.gson.JsonObject();
        jsonObject0.add("com.google.gson.stream.MalformedJsonException: ", (com.google.gson.JsonElement) jsonObject2);
        java.util.Set<java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement>> strEntrySet4 = jsonObject2.entrySet();
        jsonObject2.addProperty("[]", (java.lang.Character) '-');
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader8 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonObject2);
        org.junit.Assert.assertNotNull(strEntrySet4);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.JsonPrimitive jsonPrimitive3 = new com.google.gson.JsonPrimitive("");
        boolean boolean4 = jsonPrimitive3.isJsonNull();
        boolean boolean5 = jsonPrimitive3.isNumber();
        boolean boolean6 = jsonArray0.remove((com.google.gson.JsonElement) jsonPrimitive3);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        jsonArray7.add((java.lang.Number) (-1.0f));
        boolean boolean10 = jsonArray0.equals((java.lang.Object) jsonArray7);
        jsonArray7.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement14 = jsonArray7.get((int) (byte) 0);
        com.google.gson.JsonArray jsonArray15 = new com.google.gson.JsonArray();
        int int16 = jsonArray15.size();
        com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive("");
        boolean boolean19 = jsonPrimitive18.isJsonNull();
        boolean boolean20 = jsonPrimitive18.isNumber();
        boolean boolean21 = jsonArray15.remove((com.google.gson.JsonElement) jsonPrimitive18);
        com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
        jsonArray22.add((java.lang.Number) (-1.0f));
        boolean boolean25 = jsonArray15.equals((java.lang.Object) jsonArray22);
        boolean boolean27 = jsonArray22.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        int int28 = jsonArray22.size();
        jsonArray7.addAll(jsonArray22);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor30 = jsonArray22.iterator();
        com.google.gson.JsonArray jsonArray31 = new com.google.gson.JsonArray();
        int int32 = jsonArray31.size();
        com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive("");
        boolean boolean35 = jsonPrimitive34.isJsonNull();
        boolean boolean36 = jsonPrimitive34.isNumber();
        boolean boolean37 = jsonArray31.remove((com.google.gson.JsonElement) jsonPrimitive34);
        com.google.gson.JsonArray jsonArray38 = new com.google.gson.JsonArray();
        jsonArray38.add((java.lang.Number) (-1.0f));
        boolean boolean41 = jsonArray31.equals((java.lang.Object) jsonArray38);
        com.google.gson.JsonElement jsonElement42 = null;
        boolean boolean43 = jsonArray31.remove(jsonElement42);
        com.google.gson.JsonArray jsonArray44 = new com.google.gson.JsonArray();
        int int45 = jsonArray44.size();
        com.google.gson.JsonPrimitive jsonPrimitive47 = new com.google.gson.JsonPrimitive("");
        boolean boolean48 = jsonPrimitive47.isJsonNull();
        boolean boolean49 = jsonPrimitive47.isNumber();
        boolean boolean50 = jsonArray44.remove((com.google.gson.JsonElement) jsonPrimitive47);
        com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
        jsonArray51.add((java.lang.Number) (-1.0f));
        boolean boolean54 = jsonArray44.equals((java.lang.Object) jsonArray51);
        com.google.gson.JsonElement jsonElement55 = null;
        boolean boolean56 = jsonArray44.remove(jsonElement55);
        boolean boolean57 = jsonArray31.remove((com.google.gson.JsonElement) jsonArray44);
        jsonArray44.add((java.lang.Character) ' ');
        boolean boolean60 = jsonArray22.remove((com.google.gson.JsonElement) jsonArray44);
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader61 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray22);
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader61.endObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected END_OBJECT but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jsonElement14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(jsonElementItor30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        java.lang.String str4 = jsonTreeReader2.getPath();
        java.lang.String str5 = jsonTreeReader2.getPath();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = jsonTreeReader2.nextString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected STRING but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "$[0]" + "'", str4, "$[0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$[0]" + "'", str5, "$[0]");
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        com.google.gson.stream.JsonToken jsonToken7 = jsonTreeReader2.peek();
        boolean boolean8 = jsonTreeReader2.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = jsonTreeReader2.nextName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NAME but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + jsonToken7 + "' != '" + com.google.gson.stream.JsonToken.BEGIN_ARRAY + "'", jsonToken7.equals(com.google.gson.stream.JsonToken.BEGIN_ARRAY));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.JsonPrimitive jsonPrimitive3 = new com.google.gson.JsonPrimitive("");
        boolean boolean4 = jsonPrimitive3.isJsonNull();
        boolean boolean5 = jsonPrimitive3.isNumber();
        boolean boolean6 = jsonArray0.remove((com.google.gson.JsonElement) jsonPrimitive3);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        jsonArray7.add((java.lang.Number) (-1.0f));
        boolean boolean10 = jsonArray0.equals((java.lang.Object) jsonArray7);
        jsonArray7.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement14 = jsonArray7.get((int) (byte) 0);
        short short15 = jsonElement14.getAsShort();
        boolean boolean16 = jsonElement14.isJsonPrimitive();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader17 = new com.google.gson.internal.bind.JsonTreeReader(jsonElement14);
        java.lang.String str18 = jsonTreeReader17.getPath();
        jsonTreeReader17.setLenient(false);
        com.google.gson.stream.JsonToken jsonToken21 = jsonTreeReader17.peek();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jsonElement14);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) -1 + "'", short15 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "$" + "'", str18, "$");
        org.junit.Assert.assertTrue("'" + jsonToken21 + "' != '" + com.google.gson.stream.JsonToken.NUMBER + "'", jsonToken21.equals(com.google.gson.stream.JsonToken.NUMBER));
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.JsonPrimitive jsonPrimitive3 = new com.google.gson.JsonPrimitive("");
        boolean boolean4 = jsonPrimitive3.isJsonNull();
        boolean boolean5 = jsonPrimitive3.isNumber();
        boolean boolean6 = jsonArray0.remove((com.google.gson.JsonElement) jsonPrimitive3);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        jsonArray7.add((java.lang.Number) (-1.0f));
        boolean boolean10 = jsonArray0.equals((java.lang.Object) jsonArray7);
        jsonArray7.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement14 = jsonArray7.get((int) (byte) 0);
        com.google.gson.JsonArray jsonArray15 = new com.google.gson.JsonArray();
        int int16 = jsonArray15.size();
        com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive("");
        boolean boolean19 = jsonPrimitive18.isJsonNull();
        boolean boolean20 = jsonPrimitive18.isNumber();
        boolean boolean21 = jsonArray15.remove((com.google.gson.JsonElement) jsonPrimitive18);
        com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
        jsonArray22.add((java.lang.Number) (-1.0f));
        boolean boolean25 = jsonArray15.equals((java.lang.Object) jsonArray22);
        boolean boolean27 = jsonArray22.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        int int28 = jsonArray22.size();
        jsonArray7.addAll(jsonArray22);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor30 = jsonArray22.iterator();
        com.google.gson.JsonArray jsonArray31 = new com.google.gson.JsonArray();
        int int32 = jsonArray31.size();
        com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive("");
        boolean boolean35 = jsonPrimitive34.isJsonNull();
        boolean boolean36 = jsonPrimitive34.isNumber();
        boolean boolean37 = jsonArray31.remove((com.google.gson.JsonElement) jsonPrimitive34);
        com.google.gson.JsonArray jsonArray38 = new com.google.gson.JsonArray();
        jsonArray38.add((java.lang.Number) (-1.0f));
        boolean boolean41 = jsonArray31.equals((java.lang.Object) jsonArray38);
        com.google.gson.JsonElement jsonElement42 = null;
        boolean boolean43 = jsonArray31.remove(jsonElement42);
        com.google.gson.JsonArray jsonArray44 = new com.google.gson.JsonArray();
        int int45 = jsonArray44.size();
        com.google.gson.JsonPrimitive jsonPrimitive47 = new com.google.gson.JsonPrimitive("");
        boolean boolean48 = jsonPrimitive47.isJsonNull();
        boolean boolean49 = jsonPrimitive47.isNumber();
        boolean boolean50 = jsonArray44.remove((com.google.gson.JsonElement) jsonPrimitive47);
        com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
        jsonArray51.add((java.lang.Number) (-1.0f));
        boolean boolean54 = jsonArray44.equals((java.lang.Object) jsonArray51);
        com.google.gson.JsonElement jsonElement55 = null;
        boolean boolean56 = jsonArray44.remove(jsonElement55);
        boolean boolean57 = jsonArray31.remove((com.google.gson.JsonElement) jsonArray44);
        jsonArray44.add((java.lang.Character) ' ');
        boolean boolean60 = jsonArray22.remove((com.google.gson.JsonElement) jsonArray44);
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader61 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray22);
        com.google.gson.JsonArray jsonArray62 = new com.google.gson.JsonArray();
        int int63 = jsonArray62.size();
        com.google.gson.JsonPrimitive jsonPrimitive65 = new com.google.gson.JsonPrimitive("");
        boolean boolean66 = jsonPrimitive65.isJsonNull();
        boolean boolean67 = jsonPrimitive65.isNumber();
        boolean boolean68 = jsonArray62.remove((com.google.gson.JsonElement) jsonPrimitive65);
        com.google.gson.JsonArray jsonArray69 = new com.google.gson.JsonArray();
        jsonArray69.add((java.lang.Number) (-1.0f));
        boolean boolean72 = jsonArray62.equals((java.lang.Object) jsonArray69);
        boolean boolean74 = jsonArray69.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        java.lang.String str75 = jsonArray69.getAsString();
        com.google.gson.JsonElement jsonElement77 = jsonArray69.get((int) (short) 0);
        boolean boolean78 = jsonArray69.isJsonArray();
        boolean boolean79 = jsonArray69.isJsonNull();
        jsonArray22.add((com.google.gson.JsonElement) jsonArray69);
        boolean boolean81 = jsonArray22.isJsonNull();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jsonElement14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(jsonElementItor30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "-1.0" + "'", str75, "-1.0");
        org.junit.Assert.assertNotNull(jsonElement77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        boolean boolean7 = jsonTreeReader2.hasNext();
        jsonTreeReader2.beginArray();
        jsonTreeReader2.endArray();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        com.google.gson.JsonObject jsonObject11 = new com.google.gson.JsonObject();
        com.google.gson.JsonPrimitive jsonPrimitive13 = jsonObject11.getAsJsonPrimitive("com.google.gson.stream.MalformedJsonException: ");
        boolean boolean15 = autoCloseableMap2.remove((java.lang.Object) jsonObject11, (java.lang.Object) 1.0f);
        jsonObject11.addProperty("t", (java.lang.Number) (byte) 4);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertNull(jsonPrimitive13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        boolean boolean7 = jsonTreeReader2.hasNext();
        jsonTreeReader2.beginArray();
        jsonTreeReader2.setLenient(true);
        java.lang.String str11 = jsonTreeReader2.getPath();
        boolean boolean12 = jsonTreeReader2.hasNext();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "$[0]" + "'", str11, "$[0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test261");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet5 = autoCloseableMap0.keySet();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap6 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int7 = autoCloseableMap6.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap8 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int9 = autoCloseableMap8.size();
        autoCloseableMap6.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap8);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet11 = autoCloseableMap6.entrySet();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap12 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int13 = autoCloseableMap12.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap14 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int15 = autoCloseableMap14.size();
        autoCloseableMap12.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap14);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet17 = autoCloseableMap12.keySet();
        int int18 = autoCloseableMap12.size();
        autoCloseableMap6.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap12);
        com.google.gson.JsonArray jsonArray20 = new com.google.gson.JsonArray();
        int int21 = jsonArray20.size();
        com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive("");
        boolean boolean24 = jsonPrimitive23.isJsonNull();
        boolean boolean25 = jsonPrimitive23.isNumber();
        boolean boolean26 = jsonArray20.remove((com.google.gson.JsonElement) jsonPrimitive23);
        com.google.gson.JsonArray jsonArray27 = new com.google.gson.JsonArray();
        jsonArray27.add((java.lang.Number) (-1.0f));
        boolean boolean30 = jsonArray20.equals((java.lang.Object) jsonArray27);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor31 = jsonArray20.iterator();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess32 = autoCloseableMap12.remove((java.lang.Object) jsonArray20);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet33 = autoCloseableMap12.keySet();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap12);
        int int35 = autoCloseableMap0.size();
        com.google.gson.JsonArray jsonArray36 = new com.google.gson.JsonArray();
        int int37 = jsonArray36.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader38 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray36);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap39 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int40 = autoCloseableMap39.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap41 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int42 = autoCloseableMap41.size();
        autoCloseableMap39.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap41);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet44 = autoCloseableMap39.entrySet();
        com.google.gson.JsonArray jsonArray45 = new com.google.gson.JsonArray();
        int int46 = jsonArray45.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader47 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray45);
        jsonTreeReader47.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess49 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess50 = autoCloseableMap39.replace((java.lang.AutoCloseable) jsonTreeReader47, jsonReaderInternalAccess49);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess51 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader38, jsonReaderInternalAccess50);
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader38.nextNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NULL but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(autoCloseableSet5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(autoCloseableSet17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jsonElementItor31);
        org.junit.Assert.assertNull(jsonReaderInternalAccess32);
        org.junit.Assert.assertNotNull(autoCloseableSet33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess49);
        org.junit.Assert.assertNull(jsonReaderInternalAccess50);
        org.junit.Assert.assertNull(jsonReaderInternalAccess51);
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test262");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            int int7 = jsonTreeReader2.nextInt();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test263");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        jsonTreeReader7.skipValue();
        boolean boolean12 = jsonTreeReader7.hasNext();
        com.google.gson.stream.JsonToken jsonToken13 = jsonTreeReader7.peek();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader7.endArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected END_ARRAY but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + jsonToken13 + "' != '" + com.google.gson.stream.JsonToken.BEGIN_ARRAY + "'", jsonToken13.equals(com.google.gson.stream.JsonToken.BEGIN_ARRAY));
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test264");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.skipValue();
        boolean boolean4 = jsonTreeReader2.isLenient();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.beginObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BEGIN_OBJECT but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test265");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.JsonPrimitive jsonPrimitive3 = new com.google.gson.JsonPrimitive("");
        boolean boolean4 = jsonPrimitive3.isJsonNull();
        boolean boolean5 = jsonPrimitive3.isNumber();
        boolean boolean6 = jsonArray0.remove((com.google.gson.JsonElement) jsonPrimitive3);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        jsonArray7.add((java.lang.Number) (-1.0f));
        boolean boolean10 = jsonArray0.equals((java.lang.Object) jsonArray7);
        jsonArray7.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement14 = jsonArray7.get((int) (byte) 0);
        com.google.gson.JsonArray jsonArray15 = new com.google.gson.JsonArray();
        int int16 = jsonArray15.size();
        com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive("");
        boolean boolean19 = jsonPrimitive18.isJsonNull();
        boolean boolean20 = jsonPrimitive18.isNumber();
        boolean boolean21 = jsonArray15.remove((com.google.gson.JsonElement) jsonPrimitive18);
        com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
        jsonArray22.add((java.lang.Number) (-1.0f));
        boolean boolean25 = jsonArray15.equals((java.lang.Object) jsonArray22);
        boolean boolean27 = jsonArray22.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        int int28 = jsonArray22.size();
        jsonArray7.addAll(jsonArray22);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor30 = jsonArray22.iterator();
        com.google.gson.JsonArray jsonArray31 = new com.google.gson.JsonArray();
        int int32 = jsonArray31.size();
        com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive("");
        boolean boolean35 = jsonPrimitive34.isJsonNull();
        boolean boolean36 = jsonPrimitive34.isNumber();
        boolean boolean37 = jsonArray31.remove((com.google.gson.JsonElement) jsonPrimitive34);
        com.google.gson.JsonArray jsonArray38 = new com.google.gson.JsonArray();
        jsonArray38.add((java.lang.Number) (-1.0f));
        boolean boolean41 = jsonArray31.equals((java.lang.Object) jsonArray38);
        com.google.gson.JsonElement jsonElement42 = null;
        boolean boolean43 = jsonArray31.remove(jsonElement42);
        com.google.gson.JsonArray jsonArray44 = new com.google.gson.JsonArray();
        int int45 = jsonArray44.size();
        com.google.gson.JsonPrimitive jsonPrimitive47 = new com.google.gson.JsonPrimitive("");
        boolean boolean48 = jsonPrimitive47.isJsonNull();
        boolean boolean49 = jsonPrimitive47.isNumber();
        boolean boolean50 = jsonArray44.remove((com.google.gson.JsonElement) jsonPrimitive47);
        com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
        jsonArray51.add((java.lang.Number) (-1.0f));
        boolean boolean54 = jsonArray44.equals((java.lang.Object) jsonArray51);
        com.google.gson.JsonElement jsonElement55 = null;
        boolean boolean56 = jsonArray44.remove(jsonElement55);
        boolean boolean57 = jsonArray31.remove((com.google.gson.JsonElement) jsonArray44);
        jsonArray44.add((java.lang.Character) ' ');
        boolean boolean60 = jsonArray22.remove((com.google.gson.JsonElement) jsonArray44);
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader61 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray22);
        jsonTreeReader61.beginArray();
        jsonTreeReader61.skipValue();
        java.lang.String str64 = jsonTreeReader61.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jsonElement14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(jsonElementItor30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "JsonTreeReader" + "'", str64, "JsonTreeReader");
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test266");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        jsonTreeReader2.setLenient(false);
        jsonTreeReader2.close();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test267");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        com.google.gson.JsonObject jsonObject11 = new com.google.gson.JsonObject();
        com.google.gson.JsonPrimitive jsonPrimitive13 = jsonObject11.getAsJsonPrimitive("com.google.gson.stream.MalformedJsonException: ");
        boolean boolean15 = autoCloseableMap2.remove((java.lang.Object) jsonObject11, (java.lang.Object) 1.0f);
        com.google.gson.stream.MalformedJsonException malformedJsonException18 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException19 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException18);
        java.lang.Throwable[] throwableArray20 = malformedJsonException19.getSuppressed();
        boolean boolean21 = autoCloseableMap2.equals((java.lang.Object) throwableArray20);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap22 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int23 = autoCloseableMap22.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap24 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int25 = autoCloseableMap24.size();
        autoCloseableMap22.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap24);
        autoCloseableMap2.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap22);
        int int28 = autoCloseableMap2.size();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertNull(jsonPrimitive13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test268");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.toString();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.endObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected END_OBJECT but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JsonTreeReader" + "'", str5, "JsonTreeReader");
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test269");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        com.google.gson.stream.JsonToken jsonToken3 = jsonTreeReader2.peek();
        // The following exception was thrown during execution in test generation
        try {
            double double4 = jsonTreeReader2.nextDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken3 + "' != '" + com.google.gson.stream.JsonToken.BEGIN_ARRAY + "'", jsonToken3.equals(com.google.gson.stream.JsonToken.BEGIN_ARRAY));
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test270");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.JsonPrimitive jsonPrimitive3 = new com.google.gson.JsonPrimitive("");
        boolean boolean4 = jsonPrimitive3.isJsonNull();
        boolean boolean5 = jsonPrimitive3.isNumber();
        boolean boolean6 = jsonArray0.remove((com.google.gson.JsonElement) jsonPrimitive3);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        jsonArray7.add((java.lang.Number) (-1.0f));
        boolean boolean10 = jsonArray0.equals((java.lang.Object) jsonArray7);
        jsonArray7.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement14 = jsonArray7.get((int) (byte) 0);
        com.google.gson.JsonArray jsonArray15 = new com.google.gson.JsonArray();
        int int16 = jsonArray15.size();
        com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive("");
        boolean boolean19 = jsonPrimitive18.isJsonNull();
        boolean boolean20 = jsonPrimitive18.isNumber();
        boolean boolean21 = jsonArray15.remove((com.google.gson.JsonElement) jsonPrimitive18);
        com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
        jsonArray22.add((java.lang.Number) (-1.0f));
        boolean boolean25 = jsonArray15.equals((java.lang.Object) jsonArray22);
        boolean boolean27 = jsonArray22.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        int int28 = jsonArray22.size();
        jsonArray7.addAll(jsonArray22);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor30 = jsonArray22.iterator();
        com.google.gson.JsonArray jsonArray31 = new com.google.gson.JsonArray();
        int int32 = jsonArray31.size();
        com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive("");
        boolean boolean35 = jsonPrimitive34.isJsonNull();
        boolean boolean36 = jsonPrimitive34.isNumber();
        boolean boolean37 = jsonArray31.remove((com.google.gson.JsonElement) jsonPrimitive34);
        com.google.gson.JsonArray jsonArray38 = new com.google.gson.JsonArray();
        jsonArray38.add((java.lang.Number) (-1.0f));
        boolean boolean41 = jsonArray31.equals((java.lang.Object) jsonArray38);
        com.google.gson.JsonElement jsonElement42 = null;
        boolean boolean43 = jsonArray31.remove(jsonElement42);
        com.google.gson.JsonArray jsonArray44 = new com.google.gson.JsonArray();
        int int45 = jsonArray44.size();
        com.google.gson.JsonPrimitive jsonPrimitive47 = new com.google.gson.JsonPrimitive("");
        boolean boolean48 = jsonPrimitive47.isJsonNull();
        boolean boolean49 = jsonPrimitive47.isNumber();
        boolean boolean50 = jsonArray44.remove((com.google.gson.JsonElement) jsonPrimitive47);
        com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
        jsonArray51.add((java.lang.Number) (-1.0f));
        boolean boolean54 = jsonArray44.equals((java.lang.Object) jsonArray51);
        com.google.gson.JsonElement jsonElement55 = null;
        boolean boolean56 = jsonArray44.remove(jsonElement55);
        boolean boolean57 = jsonArray31.remove((com.google.gson.JsonElement) jsonArray44);
        jsonArray44.add((java.lang.Character) ' ');
        boolean boolean60 = jsonArray22.remove((com.google.gson.JsonElement) jsonArray44);
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader61 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray44);
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader61.endObject();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected END_OBJECT but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jsonElement14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(jsonElementItor30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test271");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.lang.Object obj5 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess6 = autoCloseableMap0.remove(obj5);
        com.google.gson.JsonPrimitive jsonPrimitive8 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number9 = jsonPrimitive8.getAsNumber();
        boolean boolean10 = autoCloseableMap0.containsKey((java.lang.Object) number9);
        com.google.gson.JsonPrimitive jsonPrimitive12 = new com.google.gson.JsonPrimitive("");
        boolean boolean13 = jsonPrimitive12.isJsonNull();
        boolean boolean15 = jsonPrimitive12.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean16 = jsonPrimitive12.isString();
        java.lang.Number number17 = jsonPrimitive12.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess18 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess18;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess20 = autoCloseableMap0.getOrDefault((java.lang.Object) jsonPrimitive12, jsonReaderInternalAccess18);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap21 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int22 = autoCloseableMap21.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap23 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int24 = autoCloseableMap23.size();
        autoCloseableMap21.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap23);
        com.google.gson.JsonArray jsonArray26 = new com.google.gson.JsonArray();
        int int27 = jsonArray26.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader28 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray26);
        jsonTreeReader28.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess30 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess31 = autoCloseableMap23.replace((java.lang.AutoCloseable) jsonTreeReader28, jsonReaderInternalAccess30);
        jsonTreeReader28.skipValue();
        boolean boolean33 = jsonTreeReader28.hasNext();
        boolean boolean34 = jsonTreeReader28.hasNext();
        // The following exception was thrown during execution in test generation
        try {
// flaky:             jsonReaderInternalAccess20.promoteNameToValue((com.google.gson.stream.JsonReader) jsonTreeReader28);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess6);
        org.junit.Assert.assertNotNull(number9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(number17);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess18);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess30);
        org.junit.Assert.assertNull(jsonReaderInternalAccess31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test272");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.JsonPrimitive jsonPrimitive3 = new com.google.gson.JsonPrimitive("");
        boolean boolean4 = jsonPrimitive3.isJsonNull();
        boolean boolean5 = jsonPrimitive3.isNumber();
        boolean boolean6 = jsonArray0.remove((com.google.gson.JsonElement) jsonPrimitive3);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        jsonArray7.add((java.lang.Number) (-1.0f));
        boolean boolean10 = jsonArray0.equals((java.lang.Object) jsonArray7);
        jsonArray7.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement14 = jsonArray7.get((int) (byte) 0);
        short short15 = jsonElement14.getAsShort();
        boolean boolean16 = jsonElement14.isJsonPrimitive();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader17 = new com.google.gson.internal.bind.JsonTreeReader(jsonElement14);
        java.lang.String str18 = jsonTreeReader17.getPath();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = jsonTreeReader17.nextBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BOOLEAN but was NUMBER at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jsonElement14);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) -1 + "'", short15 == (short) -1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "$" + "'", str18, "$");
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test273");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        com.google.gson.stream.JsonToken jsonToken3 = jsonTreeReader2.peek();
        // The following exception was thrown during execution in test generation
        try {
            int int4 = jsonTreeReader2.nextInt();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken3 + "' != '" + com.google.gson.stream.JsonToken.BEGIN_ARRAY + "'", jsonToken3.equals(com.google.gson.stream.JsonToken.BEGIN_ARRAY));
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test274");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap4 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int5 = autoCloseableMap4.size();
        autoCloseableMap2.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap4);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        int int8 = jsonArray7.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader9 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray7);
        jsonTreeReader9.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess11 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess12 = autoCloseableMap4.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess11);
        boolean boolean13 = jsonTreeReader9.hasNext();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess14 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess15 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess14);
        java.lang.String str16 = jsonTreeReader9.toString();
        jsonTreeReader9.close();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = jsonTreeReader9.nextInt();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: JsonReader is closed");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess11);
        org.junit.Assert.assertNull(jsonReaderInternalAccess12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess14);
        org.junit.Assert.assertNull(jsonReaderInternalAccess15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JsonTreeReader" + "'", str16, "JsonTreeReader");
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test275");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap4 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int5 = autoCloseableMap4.size();
        autoCloseableMap2.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap4);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        int int8 = jsonArray7.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader9 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray7);
        jsonTreeReader9.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess11 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess12 = autoCloseableMap4.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess11);
        boolean boolean13 = jsonTreeReader9.hasNext();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess14 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess15 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess14);
        java.lang.String str16 = jsonTreeReader9.toString();
        jsonTreeReader9.close();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader9.endArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: JsonReader is closed");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess11);
        org.junit.Assert.assertNull(jsonReaderInternalAccess12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess14);
        org.junit.Assert.assertNull(jsonReaderInternalAccess15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JsonTreeReader" + "'", str16, "JsonTreeReader");
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test276");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        boolean boolean7 = jsonTreeReader2.hasNext();
        jsonTreeReader2.beginArray();
        jsonTreeReader2.setLenient(true);
        java.lang.String str11 = jsonTreeReader2.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JsonTreeReader" + "'", str11, "JsonTreeReader");
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test277");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.skipValue();
        boolean boolean4 = jsonTreeReader2.isLenient();
        java.lang.String str5 = jsonTreeReader2.getPath();
        java.lang.String str6 = jsonTreeReader2.getPath();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.beginArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BEGIN_ARRAY but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "$" + "'", str6, "$");
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test278");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.JsonPrimitive jsonPrimitive3 = new com.google.gson.JsonPrimitive("");
        boolean boolean4 = jsonPrimitive3.isJsonNull();
        boolean boolean5 = jsonPrimitive3.isNumber();
        boolean boolean6 = jsonArray0.remove((com.google.gson.JsonElement) jsonPrimitive3);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        jsonArray7.add((java.lang.Number) (-1.0f));
        boolean boolean10 = jsonArray0.equals((java.lang.Object) jsonArray7);
        com.google.gson.JsonElement jsonElement11 = null;
        boolean boolean12 = jsonArray0.remove(jsonElement11);
        com.google.gson.JsonArray jsonArray13 = new com.google.gson.JsonArray();
        int int14 = jsonArray13.size();
        com.google.gson.JsonPrimitive jsonPrimitive16 = new com.google.gson.JsonPrimitive("");
        boolean boolean17 = jsonPrimitive16.isJsonNull();
        boolean boolean18 = jsonPrimitive16.isNumber();
        boolean boolean19 = jsonArray13.remove((com.google.gson.JsonElement) jsonPrimitive16);
        com.google.gson.JsonArray jsonArray20 = new com.google.gson.JsonArray();
        jsonArray20.add((java.lang.Number) (-1.0f));
        boolean boolean23 = jsonArray13.equals((java.lang.Object) jsonArray20);
        com.google.gson.JsonElement jsonElement24 = null;
        boolean boolean25 = jsonArray13.remove(jsonElement24);
        boolean boolean26 = jsonArray0.remove((com.google.gson.JsonElement) jsonArray13);
        com.google.gson.JsonObject jsonObject27 = new com.google.gson.JsonObject();
        com.google.gson.JsonObject jsonObject29 = new com.google.gson.JsonObject();
        jsonObject27.add("com.google.gson.stream.MalformedJsonException: ", (com.google.gson.JsonElement) jsonObject29);
        boolean boolean31 = jsonArray0.equals((java.lang.Object) jsonObject29);
        com.google.gson.JsonElement jsonElement33 = jsonObject29.remove("[-1.0]");
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader34 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonObject29);
        // The following exception was thrown during execution in test generation
        try {
            long long35 = jsonTreeReader34.nextLong();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was BEGIN_OBJECT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jsonElement33);
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test279");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        boolean boolean3 = jsonTreeReader2.hasNext();
        jsonTreeReader2.close();
        // The following exception was thrown during execution in test generation
        try {
            long long5 = jsonTreeReader2.nextLong();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: JsonReader is closed");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test280");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.lang.Object obj5 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess6 = autoCloseableMap0.remove(obj5);
        com.google.gson.JsonPrimitive jsonPrimitive8 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number9 = jsonPrimitive8.getAsNumber();
        boolean boolean10 = autoCloseableMap0.containsKey((java.lang.Object) number9);
        com.google.gson.JsonPrimitive jsonPrimitive12 = new com.google.gson.JsonPrimitive("");
        boolean boolean13 = jsonPrimitive12.isJsonNull();
        boolean boolean15 = jsonPrimitive12.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean16 = jsonPrimitive12.isString();
        java.lang.Number number17 = jsonPrimitive12.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess18 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess18;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess20 = autoCloseableMap0.getOrDefault((java.lang.Object) jsonPrimitive12, jsonReaderInternalAccess18);
        java.util.Collection<com.google.gson.internal.JsonReaderInternalAccess> jsonReaderInternalAccessCollection21 = autoCloseableMap0.values();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap22 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        java.util.Collection<com.google.gson.internal.JsonReaderInternalAccess> jsonReaderInternalAccessCollection23 = autoCloseableMap22.values();
        boolean boolean25 = autoCloseableMap22.equals((java.lang.Object) 100.0f);
        com.google.gson.JsonArray jsonArray26 = new com.google.gson.JsonArray();
        int int27 = jsonArray26.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader28 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray26);
        jsonTreeReader28.skipValue();
        com.google.gson.stream.JsonToken jsonToken30 = jsonTreeReader28.peek();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap31 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int32 = autoCloseableMap31.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap33 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int34 = autoCloseableMap33.size();
        autoCloseableMap31.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap33);
        java.lang.Object obj36 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess37 = autoCloseableMap31.remove(obj36);
        com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number40 = jsonPrimitive39.getAsNumber();
        boolean boolean41 = autoCloseableMap31.containsKey((java.lang.Object) number40);
        com.google.gson.JsonPrimitive jsonPrimitive43 = new com.google.gson.JsonPrimitive("");
        boolean boolean44 = jsonPrimitive43.isJsonNull();
        boolean boolean46 = jsonPrimitive43.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean47 = jsonPrimitive43.isString();
        java.lang.Number number48 = jsonPrimitive43.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess49 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess49;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess51 = autoCloseableMap31.getOrDefault((java.lang.Object) jsonPrimitive43, jsonReaderInternalAccess49);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess52 = autoCloseableMap22.replace((java.lang.AutoCloseable) jsonTreeReader28, jsonReaderInternalAccess51);
        java.lang.String str53 = jsonTreeReader28.toString();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess54 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess54;
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap56 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int57 = autoCloseableMap56.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap58 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int59 = autoCloseableMap58.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap60 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int61 = autoCloseableMap60.size();
        autoCloseableMap58.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap60);
        com.google.gson.JsonArray jsonArray63 = new com.google.gson.JsonArray();
        int int64 = jsonArray63.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader65 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray63);
        jsonTreeReader65.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess67 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess68 = autoCloseableMap60.replace((java.lang.AutoCloseable) jsonTreeReader65, jsonReaderInternalAccess67);
        boolean boolean69 = jsonTreeReader65.hasNext();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess70 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess71 = autoCloseableMap56.replace((java.lang.AutoCloseable) jsonTreeReader65, jsonReaderInternalAccess70);
        boolean boolean72 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader28, jsonReaderInternalAccess54, jsonReaderInternalAccess71);
        java.lang.String str73 = jsonTreeReader28.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long74 = jsonTreeReader28.nextLong();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess6);
        org.junit.Assert.assertNotNull(number9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(number17);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess18);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess20);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccessCollection21);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccessCollection23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken30 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken30.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess37);
        org.junit.Assert.assertNotNull(number40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(number48);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess49);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess51);
        org.junit.Assert.assertNull(jsonReaderInternalAccess52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "JsonTreeReader" + "'", str53, "JsonTreeReader");
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess67);
        org.junit.Assert.assertNull(jsonReaderInternalAccess68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess70);
        org.junit.Assert.assertNull(jsonReaderInternalAccess71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "JsonTreeReader" + "'", str73, "JsonTreeReader");
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test281");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.skipValue();
        com.google.gson.stream.JsonToken jsonToken4 = jsonTreeReader2.peek();
        java.lang.String str5 = jsonTreeReader2.toString();
        jsonTreeReader2.setLenient(true);
        jsonTreeReader2.close();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.endArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: JsonReader is closed");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken4 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken4.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JsonTreeReader" + "'", str5, "JsonTreeReader");
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test282");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.stream.MalformedJsonException malformedJsonException6 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException7 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException6);
        com.google.gson.stream.MalformedJsonException malformedJsonException8 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException6);
        com.google.gson.stream.MalformedJsonException malformedJsonException9 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable) malformedJsonException8);
        boolean boolean10 = autoCloseableMap0.equals((java.lang.Object) malformedJsonException9);
        com.google.gson.stream.MalformedJsonException malformedJsonException14 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException15 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException14);
        com.google.gson.stream.MalformedJsonException malformedJsonException16 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException15);
        boolean boolean17 = autoCloseableMap0.containsKey((java.lang.Object) malformedJsonException16);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap18 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        java.util.Collection<com.google.gson.internal.JsonReaderInternalAccess> jsonReaderInternalAccessCollection19 = autoCloseableMap18.values();
        boolean boolean21 = autoCloseableMap18.equals((java.lang.Object) 100.0f);
        com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
        int int23 = jsonArray22.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader24 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray22);
        jsonTreeReader24.skipValue();
        com.google.gson.stream.JsonToken jsonToken26 = jsonTreeReader24.peek();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap27 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int28 = autoCloseableMap27.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap29 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int30 = autoCloseableMap29.size();
        autoCloseableMap27.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap29);
        java.lang.Object obj32 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess33 = autoCloseableMap27.remove(obj32);
        com.google.gson.JsonPrimitive jsonPrimitive35 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number36 = jsonPrimitive35.getAsNumber();
        boolean boolean37 = autoCloseableMap27.containsKey((java.lang.Object) number36);
        com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive("");
        boolean boolean40 = jsonPrimitive39.isJsonNull();
        boolean boolean42 = jsonPrimitive39.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean43 = jsonPrimitive39.isString();
        java.lang.Number number44 = jsonPrimitive39.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess45 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess45;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess47 = autoCloseableMap27.getOrDefault((java.lang.Object) jsonPrimitive39, jsonReaderInternalAccess45);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess48 = autoCloseableMap18.replace((java.lang.AutoCloseable) jsonTreeReader24, jsonReaderInternalAccess47);
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap18);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet50 = autoCloseableMap18.keySet();
        com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
        int int52 = jsonArray51.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader53 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray51);
        jsonTreeReader53.beginArray();
        jsonTreeReader53.skipValue();
        java.lang.String str56 = jsonTreeReader53.getPath();
        boolean boolean57 = jsonTreeReader53.hasNext();
        com.google.gson.stream.JsonToken jsonToken58 = jsonTreeReader53.peek();
        jsonTreeReader53.close();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap60 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int61 = autoCloseableMap60.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap62 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int63 = autoCloseableMap62.size();
        autoCloseableMap60.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap62);
        java.lang.Object obj65 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess66 = autoCloseableMap60.remove(obj65);
        com.google.gson.JsonPrimitive jsonPrimitive68 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number69 = jsonPrimitive68.getAsNumber();
        boolean boolean70 = autoCloseableMap60.containsKey((java.lang.Object) number69);
        com.google.gson.JsonPrimitive jsonPrimitive72 = new com.google.gson.JsonPrimitive("");
        boolean boolean73 = jsonPrimitive72.isJsonNull();
        boolean boolean75 = jsonPrimitive72.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean76 = jsonPrimitive72.isString();
        java.lang.Number number77 = jsonPrimitive72.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess78 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess78;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess80 = autoCloseableMap60.getOrDefault((java.lang.Object) jsonPrimitive72, jsonReaderInternalAccess78);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess81 = autoCloseableMap18.replace((java.lang.AutoCloseable) jsonTreeReader53, jsonReaderInternalAccess78);
        java.util.Collection<com.google.gson.internal.JsonReaderInternalAccess> jsonReaderInternalAccessCollection82 = autoCloseableMap18.values();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccessCollection19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken26 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken26.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess33);
        org.junit.Assert.assertNotNull(number36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(number44);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess45);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess47);
        org.junit.Assert.assertNull(jsonReaderInternalAccess48);
        org.junit.Assert.assertNotNull(autoCloseableSet50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "$" + "'", str56, "$");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + jsonToken58 + "' != '" + com.google.gson.stream.JsonToken.BEGIN_ARRAY + "'", jsonToken58.equals(com.google.gson.stream.JsonToken.BEGIN_ARRAY));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess66);
        org.junit.Assert.assertNotNull(number69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(number77);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess78);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess80);
        org.junit.Assert.assertNull(jsonReaderInternalAccess81);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccessCollection82);
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test283");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.setLenient(false);
        boolean boolean6 = jsonTreeReader2.isLenient();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test284");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        boolean boolean7 = jsonTreeReader2.hasNext();
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        jsonTreeReader2.close();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = jsonTreeReader2.nextDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: JsonReader is closed");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test285");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet5 = autoCloseableMap0.keySet();
        com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
        int int7 = jsonArray6.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader8 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray6);
        boolean boolean9 = jsonTreeReader8.hasNext();
        jsonTreeReader8.close();
        java.lang.String str11 = jsonTreeReader8.toString();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess12 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess13 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader8, jsonReaderInternalAccess12);
        com.google.gson.JsonArray jsonArray14 = new com.google.gson.JsonArray();
        int int15 = jsonArray14.size();
        com.google.gson.JsonPrimitive jsonPrimitive17 = new com.google.gson.JsonPrimitive("");
        boolean boolean18 = jsonPrimitive17.isJsonNull();
        boolean boolean19 = jsonPrimitive17.isNumber();
        boolean boolean20 = jsonArray14.remove((com.google.gson.JsonElement) jsonPrimitive17);
        com.google.gson.JsonArray jsonArray21 = new com.google.gson.JsonArray();
        jsonArray21.add((java.lang.Number) (-1.0f));
        boolean boolean24 = jsonArray14.equals((java.lang.Object) jsonArray21);
        boolean boolean26 = jsonArray21.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        java.lang.String str27 = jsonArray21.getAsString();
        java.util.Spliterator<com.google.gson.JsonElement> jsonElementSpliterator28 = jsonArray21.spliterator();
        char char29 = jsonArray21.getAsCharacter();
        com.google.gson.JsonPrimitive jsonPrimitive31 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number32 = jsonPrimitive31.getAsNumber();
        boolean boolean33 = jsonPrimitive31.isString();
        java.lang.Number number34 = jsonPrimitive31.getAsNumber();
        short short35 = jsonPrimitive31.getAsShort();
        boolean boolean36 = jsonArray21.remove((com.google.gson.JsonElement) jsonPrimitive31);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor37 = jsonArray21.iterator();
        com.google.gson.stream.MalformedJsonException malformedJsonException40 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException41 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException40);
        java.lang.Throwable[] throwableArray42 = malformedJsonException41.getSuppressed();
        com.google.gson.stream.MalformedJsonException malformedJsonException45 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException46 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException45);
        malformedJsonException41.addSuppressed((java.lang.Throwable) malformedJsonException46);
        com.google.gson.stream.MalformedJsonException malformedJsonException48 = new com.google.gson.stream.MalformedJsonException((java.lang.Throwable) malformedJsonException46);
        boolean boolean49 = autoCloseableMap0.remove((java.lang.Object) jsonElementItor37, (java.lang.Object) malformedJsonException46);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(autoCloseableSet5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JsonTreeReader" + "'", str11, "JsonTreeReader");
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess12);
        org.junit.Assert.assertNull(jsonReaderInternalAccess13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-1.0" + "'", str27, "-1.0");
        org.junit.Assert.assertNotNull(jsonElementSpliterator28);
        org.junit.Assert.assertTrue("'" + char29 + "' != '" + '-' + "'", char29 == '-');
        org.junit.Assert.assertNotNull(number32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(number34);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) 4 + "'", short35 == (short) 4);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jsonElementItor37);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test286");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet5 = autoCloseableMap0.entrySet();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap6 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int7 = autoCloseableMap6.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap8 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int9 = autoCloseableMap8.size();
        autoCloseableMap6.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap8);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet11 = autoCloseableMap6.keySet();
        int int12 = autoCloseableMap6.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap6);
        com.google.gson.JsonArray jsonArray14 = new com.google.gson.JsonArray();
        int int15 = jsonArray14.size();
        com.google.gson.JsonPrimitive jsonPrimitive17 = new com.google.gson.JsonPrimitive("");
        boolean boolean18 = jsonPrimitive17.isJsonNull();
        boolean boolean19 = jsonPrimitive17.isNumber();
        boolean boolean20 = jsonArray14.remove((com.google.gson.JsonElement) jsonPrimitive17);
        com.google.gson.JsonArray jsonArray21 = new com.google.gson.JsonArray();
        jsonArray21.add((java.lang.Number) (-1.0f));
        boolean boolean24 = jsonArray14.equals((java.lang.Object) jsonArray21);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor25 = jsonArray14.iterator();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess26 = autoCloseableMap6.remove((java.lang.Object) jsonArray14);
        com.google.gson.JsonNull jsonNull27 = new com.google.gson.JsonNull();
        boolean boolean28 = autoCloseableMap6.containsKey((java.lang.Object) jsonNull27);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet29 = autoCloseableMap6.keySet();
        com.google.gson.JsonArray jsonArray30 = new com.google.gson.JsonArray();
        int int31 = jsonArray30.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader32 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray30);
        jsonTreeReader32.skipValue();
        com.google.gson.stream.JsonToken jsonToken34 = jsonTreeReader32.peek();
        java.lang.String str35 = jsonTreeReader32.toString();
        jsonTreeReader32.setLenient(true);
        jsonTreeReader32.close();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap39 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int40 = autoCloseableMap39.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap41 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int42 = autoCloseableMap41.size();
        autoCloseableMap39.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap41);
        java.lang.Object obj44 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess45 = autoCloseableMap39.remove(obj44);
        com.google.gson.JsonPrimitive jsonPrimitive47 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number48 = jsonPrimitive47.getAsNumber();
        boolean boolean49 = autoCloseableMap39.containsKey((java.lang.Object) number48);
        com.google.gson.JsonPrimitive jsonPrimitive51 = new com.google.gson.JsonPrimitive("");
        boolean boolean52 = jsonPrimitive51.isJsonNull();
        boolean boolean54 = jsonPrimitive51.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean55 = jsonPrimitive51.isString();
        java.lang.Number number56 = jsonPrimitive51.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess57 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess57;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess59 = autoCloseableMap39.getOrDefault((java.lang.Object) jsonPrimitive51, jsonReaderInternalAccess57);
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess57;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess61 = autoCloseableMap6.replace((java.lang.AutoCloseable) jsonTreeReader32, jsonReaderInternalAccess57);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(autoCloseableSet11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jsonElementItor25);
        org.junit.Assert.assertNull(jsonReaderInternalAccess26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(autoCloseableSet29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken34 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken34.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "JsonTreeReader" + "'", str35, "JsonTreeReader");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess45);
        org.junit.Assert.assertNotNull(number48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(number56);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess57);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess59);
        org.junit.Assert.assertNull(jsonReaderInternalAccess61);
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test287");
        com.google.gson.JsonObject jsonObject0 = new com.google.gson.JsonObject();
        boolean boolean2 = jsonObject0.equals((java.lang.Object) 0.0f);
        com.google.gson.JsonElement jsonElement4 = jsonObject0.remove("com.google.gson.stream.MalformedJsonException: ");
        java.lang.String str5 = jsonObject0.toString();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader6 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonObject0);
        com.google.gson.JsonObject jsonObject8 = jsonObject0.getAsJsonObject("[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jsonElement4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(jsonObject8);
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test288");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        jsonTreeReader7.skipValue();
        java.lang.String str12 = jsonTreeReader7.getPath();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "$" + "'", str12, "$");
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test289");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        int int5 = autoCloseableMap0.size();
        java.lang.Object obj6 = null;
        boolean boolean7 = autoCloseableMap0.containsValue(obj6);
        com.google.gson.JsonArray jsonArray8 = new com.google.gson.JsonArray();
        int int9 = jsonArray8.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader10 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray8);
        jsonTreeReader10.beginArray();
        jsonTreeReader10.close();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap13 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int14 = autoCloseableMap13.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap15 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int16 = autoCloseableMap15.size();
        autoCloseableMap13.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap15);
        java.lang.Object obj18 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess19 = autoCloseableMap13.remove(obj18);
        com.google.gson.JsonPrimitive jsonPrimitive21 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number22 = jsonPrimitive21.getAsNumber();
        boolean boolean23 = autoCloseableMap13.containsKey((java.lang.Object) number22);
        com.google.gson.JsonPrimitive jsonPrimitive25 = new com.google.gson.JsonPrimitive("");
        boolean boolean26 = jsonPrimitive25.isJsonNull();
        boolean boolean28 = jsonPrimitive25.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean29 = jsonPrimitive25.isString();
        java.lang.Number number30 = jsonPrimitive25.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess31 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess31;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess33 = autoCloseableMap13.getOrDefault((java.lang.Object) jsonPrimitive25, jsonReaderInternalAccess31);
        // The following exception was thrown during execution in test generation
        try {
            com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess34 = autoCloseableMap0.put((java.lang.AutoCloseable) jsonTreeReader10, jsonReaderInternalAccess33);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.gson.internal.bind.JsonTreeReader is not Comparable");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess19);
        org.junit.Assert.assertNotNull(number22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(number30);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess31);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess33);
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test290");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        java.util.Collection<com.google.gson.internal.JsonReaderInternalAccess> jsonReaderInternalAccessCollection1 = autoCloseableMap0.values();
        boolean boolean3 = autoCloseableMap0.equals((java.lang.Object) 100.0f);
        com.google.gson.JsonArray jsonArray4 = new com.google.gson.JsonArray();
        int int5 = jsonArray4.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader6 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray4);
        jsonTreeReader6.skipValue();
        com.google.gson.stream.JsonToken jsonToken8 = jsonTreeReader6.peek();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap9 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int10 = autoCloseableMap9.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap11 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int12 = autoCloseableMap11.size();
        autoCloseableMap9.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap11);
        java.lang.Object obj14 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess15 = autoCloseableMap9.remove(obj14);
        com.google.gson.JsonPrimitive jsonPrimitive17 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number18 = jsonPrimitive17.getAsNumber();
        boolean boolean19 = autoCloseableMap9.containsKey((java.lang.Object) number18);
        com.google.gson.JsonPrimitive jsonPrimitive21 = new com.google.gson.JsonPrimitive("");
        boolean boolean22 = jsonPrimitive21.isJsonNull();
        boolean boolean24 = jsonPrimitive21.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean25 = jsonPrimitive21.isString();
        java.lang.Number number26 = jsonPrimitive21.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess27 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess27;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess29 = autoCloseableMap9.getOrDefault((java.lang.Object) jsonPrimitive21, jsonReaderInternalAccess27);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess30 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader6, jsonReaderInternalAccess29);
        java.lang.String str31 = jsonTreeReader6.toString();
        boolean boolean32 = jsonTreeReader6.isLenient();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader6.skipValue();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonReaderInternalAccessCollection1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken8 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken8.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess15);
        org.junit.Assert.assertNotNull(number18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(number26);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess27);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess29);
        org.junit.Assert.assertNull(jsonReaderInternalAccess30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "JsonTreeReader" + "'", str31, "JsonTreeReader");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test291");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = jsonTreeReader2.nextString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected STRING but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test292");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        java.util.Collection<com.google.gson.internal.JsonReaderInternalAccess> jsonReaderInternalAccessCollection1 = autoCloseableMap0.values();
        boolean boolean3 = autoCloseableMap0.equals((java.lang.Object) 100.0f);
        com.google.gson.JsonArray jsonArray4 = new com.google.gson.JsonArray();
        int int5 = jsonArray4.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader6 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray4);
        jsonTreeReader6.skipValue();
        com.google.gson.stream.JsonToken jsonToken8 = jsonTreeReader6.peek();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap9 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int10 = autoCloseableMap9.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap11 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int12 = autoCloseableMap11.size();
        autoCloseableMap9.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap11);
        java.lang.Object obj14 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess15 = autoCloseableMap9.remove(obj14);
        com.google.gson.JsonPrimitive jsonPrimitive17 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number18 = jsonPrimitive17.getAsNumber();
        boolean boolean19 = autoCloseableMap9.containsKey((java.lang.Object) number18);
        com.google.gson.JsonPrimitive jsonPrimitive21 = new com.google.gson.JsonPrimitive("");
        boolean boolean22 = jsonPrimitive21.isJsonNull();
        boolean boolean24 = jsonPrimitive21.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean25 = jsonPrimitive21.isString();
        java.lang.Number number26 = jsonPrimitive21.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess27 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess27;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess29 = autoCloseableMap9.getOrDefault((java.lang.Object) jsonPrimitive21, jsonReaderInternalAccess27);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess30 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader6, jsonReaderInternalAccess29);
        int int31 = autoCloseableMap0.size();
        org.junit.Assert.assertNotNull(jsonReaderInternalAccessCollection1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken8 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken8.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess15);
        org.junit.Assert.assertNotNull(number18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(number26);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess27);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess29);
        org.junit.Assert.assertNull(jsonReaderInternalAccess30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test293");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet5 = autoCloseableMap0.entrySet();
        com.google.gson.JsonArray jsonArray6 = new com.google.gson.JsonArray();
        int int7 = jsonArray6.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader8 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray6);
        jsonTreeReader8.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess11 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader8, jsonReaderInternalAccess10);
        java.lang.String str12 = autoCloseableMap0.toString();
        boolean boolean13 = autoCloseableMap0.isEmpty();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertNull(jsonReaderInternalAccess11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test294");
        com.google.gson.JsonPrimitive jsonPrimitive1 = new com.google.gson.JsonPrimitive("");
        boolean boolean2 = jsonPrimitive1.isJsonNull();
        boolean boolean3 = jsonPrimitive1.isNumber();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap4 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int5 = autoCloseableMap4.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap6 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int7 = autoCloseableMap6.size();
        autoCloseableMap4.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap6);
        com.google.gson.JsonArray jsonArray9 = new com.google.gson.JsonArray();
        int int10 = jsonArray9.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader11 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray9);
        jsonTreeReader11.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess13 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess14 = autoCloseableMap6.replace((java.lang.AutoCloseable) jsonTreeReader11, jsonReaderInternalAccess13);
        jsonTreeReader11.skipValue();
        boolean boolean16 = jsonTreeReader11.hasNext();
        boolean boolean17 = jsonPrimitive1.equals((java.lang.Object) jsonTreeReader11);
        com.google.gson.stream.JsonToken jsonToken18 = jsonTreeReader11.peek();
        java.lang.String str19 = jsonTreeReader11.getPath();
        java.lang.String str20 = jsonTreeReader11.getPath();
        // The following exception was thrown during execution in test generation
        try {
            long long21 = jsonTreeReader11.nextLong();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess13);
        org.junit.Assert.assertNull(jsonReaderInternalAccess14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + jsonToken18 + "' != '" + com.google.gson.stream.JsonToken.BEGIN_ARRAY + "'", jsonToken18.equals(com.google.gson.stream.JsonToken.BEGIN_ARRAY));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "$" + "'", str19, "$");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "$" + "'", str20, "$");
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test295");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        com.google.gson.JsonObject jsonObject11 = new com.google.gson.JsonObject();
        com.google.gson.JsonPrimitive jsonPrimitive13 = jsonObject11.getAsJsonPrimitive("com.google.gson.stream.MalformedJsonException: ");
        boolean boolean15 = autoCloseableMap2.remove((java.lang.Object) jsonObject11, (java.lang.Object) 1.0f);
        com.google.gson.stream.MalformedJsonException malformedJsonException18 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException19 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException18);
        java.lang.Throwable[] throwableArray20 = malformedJsonException19.getSuppressed();
        boolean boolean21 = autoCloseableMap2.equals((java.lang.Object) throwableArray20);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap22 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int23 = autoCloseableMap22.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap24 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int25 = autoCloseableMap24.size();
        autoCloseableMap22.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap24);
        autoCloseableMap2.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap22);
        com.google.gson.JsonArray jsonArray28 = new com.google.gson.JsonArray();
        int int29 = jsonArray28.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap30 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int31 = autoCloseableMap30.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap32 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int33 = autoCloseableMap32.size();
        autoCloseableMap30.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap32);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet35 = autoCloseableMap30.entrySet();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap36 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int37 = autoCloseableMap36.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap38 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int39 = autoCloseableMap38.size();
        autoCloseableMap36.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap38);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet41 = autoCloseableMap36.keySet();
        int int42 = autoCloseableMap36.size();
        autoCloseableMap30.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap36);
        com.google.gson.JsonArray jsonArray44 = new com.google.gson.JsonArray();
        int int45 = jsonArray44.size();
        com.google.gson.JsonPrimitive jsonPrimitive47 = new com.google.gson.JsonPrimitive("");
        boolean boolean48 = jsonPrimitive47.isJsonNull();
        boolean boolean49 = jsonPrimitive47.isNumber();
        boolean boolean50 = jsonArray44.remove((com.google.gson.JsonElement) jsonPrimitive47);
        com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
        jsonArray51.add((java.lang.Number) (-1.0f));
        boolean boolean54 = jsonArray44.equals((java.lang.Object) jsonArray51);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor55 = jsonArray44.iterator();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess56 = autoCloseableMap36.remove((java.lang.Object) jsonArray44);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet57 = autoCloseableMap36.keySet();
        boolean boolean58 = autoCloseableMap2.remove((java.lang.Object) jsonArray28, (java.lang.Object) autoCloseableMap36);
        java.lang.String str59 = autoCloseableMap36.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertNull(jsonPrimitive13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(autoCloseableSet41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jsonElementItor55);
        org.junit.Assert.assertNull(jsonReaderInternalAccess56);
        org.junit.Assert.assertNotNull(autoCloseableSet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{}" + "'", str59, "{}");
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test296");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap4 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int5 = autoCloseableMap4.size();
        autoCloseableMap2.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap4);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        int int8 = jsonArray7.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader9 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray7);
        jsonTreeReader9.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess11 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess12 = autoCloseableMap4.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess11);
        boolean boolean13 = jsonTreeReader9.hasNext();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess14 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess15 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader9, jsonReaderInternalAccess14);
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess15;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess11);
        org.junit.Assert.assertNull(jsonReaderInternalAccess12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertNull(jsonReaderInternalAccess14);
        org.junit.Assert.assertNull(jsonReaderInternalAccess15);
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test297");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.JsonPrimitive jsonPrimitive3 = new com.google.gson.JsonPrimitive("");
        boolean boolean4 = jsonPrimitive3.isJsonNull();
        boolean boolean5 = jsonPrimitive3.isNumber();
        boolean boolean6 = jsonArray0.remove((com.google.gson.JsonElement) jsonPrimitive3);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        jsonArray7.add((java.lang.Number) (-1.0f));
        boolean boolean10 = jsonArray0.equals((java.lang.Object) jsonArray7);
        jsonArray7.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement14 = jsonArray7.get((int) (byte) 0);
        com.google.gson.JsonArray jsonArray15 = new com.google.gson.JsonArray();
        int int16 = jsonArray15.size();
        com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive("");
        boolean boolean19 = jsonPrimitive18.isJsonNull();
        boolean boolean20 = jsonPrimitive18.isNumber();
        boolean boolean21 = jsonArray15.remove((com.google.gson.JsonElement) jsonPrimitive18);
        com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
        jsonArray22.add((java.lang.Number) (-1.0f));
        boolean boolean25 = jsonArray15.equals((java.lang.Object) jsonArray22);
        boolean boolean27 = jsonArray22.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        int int28 = jsonArray22.size();
        jsonArray7.addAll(jsonArray22);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor30 = jsonArray22.iterator();
        com.google.gson.JsonArray jsonArray31 = new com.google.gson.JsonArray();
        int int32 = jsonArray31.size();
        com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive("");
        boolean boolean35 = jsonPrimitive34.isJsonNull();
        boolean boolean36 = jsonPrimitive34.isNumber();
        boolean boolean37 = jsonArray31.remove((com.google.gson.JsonElement) jsonPrimitive34);
        com.google.gson.JsonArray jsonArray38 = new com.google.gson.JsonArray();
        jsonArray38.add((java.lang.Number) (-1.0f));
        boolean boolean41 = jsonArray31.equals((java.lang.Object) jsonArray38);
        com.google.gson.JsonElement jsonElement42 = null;
        boolean boolean43 = jsonArray31.remove(jsonElement42);
        com.google.gson.JsonArray jsonArray44 = new com.google.gson.JsonArray();
        int int45 = jsonArray44.size();
        com.google.gson.JsonPrimitive jsonPrimitive47 = new com.google.gson.JsonPrimitive("");
        boolean boolean48 = jsonPrimitive47.isJsonNull();
        boolean boolean49 = jsonPrimitive47.isNumber();
        boolean boolean50 = jsonArray44.remove((com.google.gson.JsonElement) jsonPrimitive47);
        com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
        jsonArray51.add((java.lang.Number) (-1.0f));
        boolean boolean54 = jsonArray44.equals((java.lang.Object) jsonArray51);
        com.google.gson.JsonElement jsonElement55 = null;
        boolean boolean56 = jsonArray44.remove(jsonElement55);
        boolean boolean57 = jsonArray31.remove((com.google.gson.JsonElement) jsonArray44);
        jsonArray44.add((java.lang.Character) ' ');
        boolean boolean60 = jsonArray22.remove((com.google.gson.JsonElement) jsonArray44);
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader61 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray44);
        jsonTreeReader61.close();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean63 = jsonTreeReader61.nextBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: JsonReader is closed");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jsonElement14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(jsonElementItor30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test298");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.JsonPrimitive jsonPrimitive3 = new com.google.gson.JsonPrimitive("");
        boolean boolean4 = jsonPrimitive3.isJsonNull();
        boolean boolean5 = jsonPrimitive3.isNumber();
        boolean boolean6 = jsonArray0.remove((com.google.gson.JsonElement) jsonPrimitive3);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        jsonArray7.add((java.lang.Number) (-1.0f));
        boolean boolean10 = jsonArray0.equals((java.lang.Object) jsonArray7);
        jsonArray7.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement14 = jsonArray7.get((int) (byte) 0);
        com.google.gson.JsonArray jsonArray15 = new com.google.gson.JsonArray();
        int int16 = jsonArray15.size();
        com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive("");
        boolean boolean19 = jsonPrimitive18.isJsonNull();
        boolean boolean20 = jsonPrimitive18.isNumber();
        boolean boolean21 = jsonArray15.remove((com.google.gson.JsonElement) jsonPrimitive18);
        com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
        jsonArray22.add((java.lang.Number) (-1.0f));
        boolean boolean25 = jsonArray15.equals((java.lang.Object) jsonArray22);
        boolean boolean27 = jsonArray22.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        int int28 = jsonArray22.size();
        jsonArray7.addAll(jsonArray22);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor30 = jsonArray22.iterator();
        com.google.gson.JsonArray jsonArray31 = new com.google.gson.JsonArray();
        int int32 = jsonArray31.size();
        com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive("");
        boolean boolean35 = jsonPrimitive34.isJsonNull();
        boolean boolean36 = jsonPrimitive34.isNumber();
        boolean boolean37 = jsonArray31.remove((com.google.gson.JsonElement) jsonPrimitive34);
        com.google.gson.JsonArray jsonArray38 = new com.google.gson.JsonArray();
        jsonArray38.add((java.lang.Number) (-1.0f));
        boolean boolean41 = jsonArray31.equals((java.lang.Object) jsonArray38);
        com.google.gson.JsonElement jsonElement42 = null;
        boolean boolean43 = jsonArray31.remove(jsonElement42);
        com.google.gson.JsonArray jsonArray44 = new com.google.gson.JsonArray();
        int int45 = jsonArray44.size();
        com.google.gson.JsonPrimitive jsonPrimitive47 = new com.google.gson.JsonPrimitive("");
        boolean boolean48 = jsonPrimitive47.isJsonNull();
        boolean boolean49 = jsonPrimitive47.isNumber();
        boolean boolean50 = jsonArray44.remove((com.google.gson.JsonElement) jsonPrimitive47);
        com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
        jsonArray51.add((java.lang.Number) (-1.0f));
        boolean boolean54 = jsonArray44.equals((java.lang.Object) jsonArray51);
        com.google.gson.JsonElement jsonElement55 = null;
        boolean boolean56 = jsonArray44.remove(jsonElement55);
        boolean boolean57 = jsonArray31.remove((com.google.gson.JsonElement) jsonArray44);
        jsonArray44.add((java.lang.Character) ' ');
        boolean boolean60 = jsonArray22.remove((com.google.gson.JsonElement) jsonArray44);
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader61 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray44);
        jsonTreeReader61.close();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader61.beginArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: JsonReader is closed");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jsonElement14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(jsonElementItor30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test299");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.stream.MalformedJsonException malformedJsonException6 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException7 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException6);
        com.google.gson.stream.MalformedJsonException malformedJsonException8 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException6);
        com.google.gson.stream.MalformedJsonException malformedJsonException9 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable) malformedJsonException8);
        boolean boolean10 = autoCloseableMap0.equals((java.lang.Object) malformedJsonException9);
        com.google.gson.stream.MalformedJsonException malformedJsonException14 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException15 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException14);
        com.google.gson.stream.MalformedJsonException malformedJsonException16 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException15);
        boolean boolean17 = autoCloseableMap0.containsKey((java.lang.Object) malformedJsonException16);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap18 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        java.util.Collection<com.google.gson.internal.JsonReaderInternalAccess> jsonReaderInternalAccessCollection19 = autoCloseableMap18.values();
        boolean boolean21 = autoCloseableMap18.equals((java.lang.Object) 100.0f);
        com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
        int int23 = jsonArray22.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader24 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray22);
        jsonTreeReader24.skipValue();
        com.google.gson.stream.JsonToken jsonToken26 = jsonTreeReader24.peek();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap27 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int28 = autoCloseableMap27.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap29 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int30 = autoCloseableMap29.size();
        autoCloseableMap27.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap29);
        java.lang.Object obj32 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess33 = autoCloseableMap27.remove(obj32);
        com.google.gson.JsonPrimitive jsonPrimitive35 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number36 = jsonPrimitive35.getAsNumber();
        boolean boolean37 = autoCloseableMap27.containsKey((java.lang.Object) number36);
        com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive("");
        boolean boolean40 = jsonPrimitive39.isJsonNull();
        boolean boolean42 = jsonPrimitive39.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean43 = jsonPrimitive39.isString();
        java.lang.Number number44 = jsonPrimitive39.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess45 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess45;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess47 = autoCloseableMap27.getOrDefault((java.lang.Object) jsonPrimitive39, jsonReaderInternalAccess45);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess48 = autoCloseableMap18.replace((java.lang.AutoCloseable) jsonTreeReader24, jsonReaderInternalAccess47);
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap18);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet50 = autoCloseableMap18.keySet();
        com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
        int int52 = jsonArray51.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader53 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray51);
        jsonTreeReader53.beginArray();
        jsonTreeReader53.skipValue();
        java.lang.String str56 = jsonTreeReader53.getPath();
        boolean boolean57 = jsonTreeReader53.hasNext();
        com.google.gson.stream.JsonToken jsonToken58 = jsonTreeReader53.peek();
        jsonTreeReader53.close();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap60 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int61 = autoCloseableMap60.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap62 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int63 = autoCloseableMap62.size();
        autoCloseableMap60.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap62);
        java.lang.Object obj65 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess66 = autoCloseableMap60.remove(obj65);
        com.google.gson.JsonPrimitive jsonPrimitive68 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number69 = jsonPrimitive68.getAsNumber();
        boolean boolean70 = autoCloseableMap60.containsKey((java.lang.Object) number69);
        com.google.gson.JsonPrimitive jsonPrimitive72 = new com.google.gson.JsonPrimitive("");
        boolean boolean73 = jsonPrimitive72.isJsonNull();
        boolean boolean75 = jsonPrimitive72.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean76 = jsonPrimitive72.isString();
        java.lang.Number number77 = jsonPrimitive72.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess78 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess78;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess80 = autoCloseableMap60.getOrDefault((java.lang.Object) jsonPrimitive72, jsonReaderInternalAccess78);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess81 = autoCloseableMap18.replace((java.lang.AutoCloseable) jsonTreeReader53, jsonReaderInternalAccess78);
        // The following exception was thrown during execution in test generation
        try {
            com.google.gson.stream.JsonToken jsonToken82 = jsonTreeReader53.peek();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: JsonReader is closed");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccessCollection19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken26 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken26.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess33);
        org.junit.Assert.assertNotNull(number36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(number44);
        org.junit.Assert.assertNull(jsonReaderInternalAccess45);
        org.junit.Assert.assertNull(jsonReaderInternalAccess47);
        org.junit.Assert.assertNull(jsonReaderInternalAccess48);
        org.junit.Assert.assertNotNull(autoCloseableSet50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "$" + "'", str56, "$");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + jsonToken58 + "' != '" + com.google.gson.stream.JsonToken.BEGIN_ARRAY + "'", jsonToken58.equals(com.google.gson.stream.JsonToken.BEGIN_ARRAY));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess66);
        org.junit.Assert.assertNotNull(number69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(number77);
        org.junit.Assert.assertNull(jsonReaderInternalAccess78);
        org.junit.Assert.assertNull(jsonReaderInternalAccess80);
        org.junit.Assert.assertNull(jsonReaderInternalAccess81);
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test300");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = jsonTreeReader7.nextBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BOOLEAN but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test301");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        boolean boolean7 = jsonTreeReader2.hasNext();
        jsonTreeReader2.beginArray();
        com.google.gson.stream.JsonToken jsonToken9 = jsonTreeReader2.peek();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = jsonTreeReader2.nextBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BOOLEAN but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + jsonToken9 + "' != '" + com.google.gson.stream.JsonToken.END_ARRAY + "'", jsonToken9.equals(com.google.gson.stream.JsonToken.END_ARRAY));
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test302");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.JsonPrimitive jsonPrimitive3 = new com.google.gson.JsonPrimitive("");
        boolean boolean4 = jsonPrimitive3.isJsonNull();
        boolean boolean5 = jsonPrimitive3.isNumber();
        boolean boolean6 = jsonArray0.remove((com.google.gson.JsonElement) jsonPrimitive3);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        jsonArray7.add((java.lang.Number) (-1.0f));
        boolean boolean10 = jsonArray0.equals((java.lang.Object) jsonArray7);
        jsonArray7.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement14 = jsonArray7.get((int) (byte) 0);
        jsonArray7.add((java.lang.Boolean) false);
        int int17 = jsonArray7.size();
        com.google.gson.JsonArray jsonArray18 = new com.google.gson.JsonArray();
        int int19 = jsonArray18.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader20 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray18);
        boolean boolean21 = jsonArray7.equals((java.lang.Object) jsonTreeReader20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = jsonTreeReader20.nextString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected STRING but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jsonElement14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test303");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        com.google.gson.JsonObject jsonObject11 = new com.google.gson.JsonObject();
        com.google.gson.JsonPrimitive jsonPrimitive13 = jsonObject11.getAsJsonPrimitive("com.google.gson.stream.MalformedJsonException: ");
        boolean boolean15 = autoCloseableMap2.remove((java.lang.Object) jsonObject11, (java.lang.Object) 1.0f);
        com.google.gson.JsonElement jsonElement17 = jsonObject11.remove("com.google.gson.stream.MalformedJsonException: ");
        java.util.Set<java.lang.String> strSet18 = jsonObject11.keySet();
        com.google.gson.JsonPrimitive jsonPrimitive20 = jsonObject11.getAsJsonPrimitive("\"4\"");
        jsonObject11.addProperty("$", (java.lang.Character) '0');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertNull(jsonPrimitive13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jsonElement17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNull(jsonPrimitive20);
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test304");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.stream.MalformedJsonException malformedJsonException6 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException7 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException6);
        com.google.gson.stream.MalformedJsonException malformedJsonException8 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException6);
        com.google.gson.stream.MalformedJsonException malformedJsonException9 = new com.google.gson.stream.MalformedJsonException("hi!", (java.lang.Throwable) malformedJsonException8);
        boolean boolean10 = autoCloseableMap0.equals((java.lang.Object) malformedJsonException9);
        com.google.gson.stream.MalformedJsonException malformedJsonException14 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException15 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException14);
        com.google.gson.stream.MalformedJsonException malformedJsonException16 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException15);
        boolean boolean17 = autoCloseableMap0.containsKey((java.lang.Object) malformedJsonException16);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap18 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        java.util.Collection<com.google.gson.internal.JsonReaderInternalAccess> jsonReaderInternalAccessCollection19 = autoCloseableMap18.values();
        boolean boolean21 = autoCloseableMap18.equals((java.lang.Object) 100.0f);
        com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
        int int23 = jsonArray22.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader24 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray22);
        jsonTreeReader24.skipValue();
        com.google.gson.stream.JsonToken jsonToken26 = jsonTreeReader24.peek();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap27 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int28 = autoCloseableMap27.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap29 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int30 = autoCloseableMap29.size();
        autoCloseableMap27.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap29);
        java.lang.Object obj32 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess33 = autoCloseableMap27.remove(obj32);
        com.google.gson.JsonPrimitive jsonPrimitive35 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number36 = jsonPrimitive35.getAsNumber();
        boolean boolean37 = autoCloseableMap27.containsKey((java.lang.Object) number36);
        com.google.gson.JsonPrimitive jsonPrimitive39 = new com.google.gson.JsonPrimitive("");
        boolean boolean40 = jsonPrimitive39.isJsonNull();
        boolean boolean42 = jsonPrimitive39.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean43 = jsonPrimitive39.isString();
        java.lang.Number number44 = jsonPrimitive39.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess45 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess45;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess47 = autoCloseableMap27.getOrDefault((java.lang.Object) jsonPrimitive39, jsonReaderInternalAccess45);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess48 = autoCloseableMap18.replace((java.lang.AutoCloseable) jsonTreeReader24, jsonReaderInternalAccess47);
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap18);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet50 = autoCloseableMap18.keySet();
        java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap51 = null;
        // The following exception was thrown during execution in test generation
        try {
            autoCloseableMap18.putAll(autoCloseableMap51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jsonReaderInternalAccessCollection19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken26 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken26.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess33);
        org.junit.Assert.assertNotNull(number36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(number44);
        org.junit.Assert.assertNull(jsonReaderInternalAccess45);
        org.junit.Assert.assertNull(jsonReaderInternalAccess47);
        org.junit.Assert.assertNull(jsonReaderInternalAccess48);
        org.junit.Assert.assertNotNull(autoCloseableSet50);
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test305");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = jsonTreeReader2.nextBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected BOOLEAN but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test306");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        java.util.Collection<com.google.gson.internal.JsonReaderInternalAccess> jsonReaderInternalAccessCollection1 = autoCloseableMap0.values();
        boolean boolean3 = autoCloseableMap0.equals((java.lang.Object) 100.0f);
        com.google.gson.JsonArray jsonArray4 = new com.google.gson.JsonArray();
        int int5 = jsonArray4.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader6 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray4);
        jsonTreeReader6.skipValue();
        com.google.gson.stream.JsonToken jsonToken8 = jsonTreeReader6.peek();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap9 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int10 = autoCloseableMap9.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap11 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int12 = autoCloseableMap11.size();
        autoCloseableMap9.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap11);
        java.lang.Object obj14 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess15 = autoCloseableMap9.remove(obj14);
        com.google.gson.JsonPrimitive jsonPrimitive17 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number18 = jsonPrimitive17.getAsNumber();
        boolean boolean19 = autoCloseableMap9.containsKey((java.lang.Object) number18);
        com.google.gson.JsonPrimitive jsonPrimitive21 = new com.google.gson.JsonPrimitive("");
        boolean boolean22 = jsonPrimitive21.isJsonNull();
        boolean boolean24 = jsonPrimitive21.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean25 = jsonPrimitive21.isString();
        java.lang.Number number26 = jsonPrimitive21.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess27 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess27;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess29 = autoCloseableMap9.getOrDefault((java.lang.Object) jsonPrimitive21, jsonReaderInternalAccess27);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess30 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader6, jsonReaderInternalAccess29);
        java.lang.String str31 = jsonTreeReader6.toString();
        boolean boolean32 = jsonTreeReader6.isLenient();
        java.lang.String str33 = jsonTreeReader6.toString();
        boolean boolean34 = jsonTreeReader6.hasNext();
        org.junit.Assert.assertNotNull(jsonReaderInternalAccessCollection1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken8 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken8.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess15);
        org.junit.Assert.assertNotNull(number18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(number26);
        org.junit.Assert.assertNull(jsonReaderInternalAccess27);
        org.junit.Assert.assertNull(jsonReaderInternalAccess29);
        org.junit.Assert.assertNull(jsonReaderInternalAccess30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "JsonTreeReader" + "'", str31, "JsonTreeReader");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JsonTreeReader" + "'", str33, "JsonTreeReader");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test307");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        jsonTreeReader7.skipValue();
        boolean boolean12 = jsonTreeReader7.hasNext();
        jsonTreeReader7.skipValue();
        java.lang.String str14 = jsonTreeReader7.getPath();
        com.google.gson.stream.JsonToken jsonToken15 = jsonTreeReader7.peek();
        java.lang.String str16 = jsonTreeReader7.getPath();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "$" + "'", str14, "$");
        org.junit.Assert.assertTrue("'" + jsonToken15 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken15.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "$" + "'", str16, "$");
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test308");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.JsonPrimitive jsonPrimitive3 = new com.google.gson.JsonPrimitive("");
        boolean boolean4 = jsonPrimitive3.isJsonNull();
        boolean boolean5 = jsonPrimitive3.isNumber();
        boolean boolean6 = jsonArray0.remove((com.google.gson.JsonElement) jsonPrimitive3);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        jsonArray7.add((java.lang.Number) (-1.0f));
        boolean boolean10 = jsonArray0.equals((java.lang.Object) jsonArray7);
        jsonArray7.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement14 = jsonArray7.get((int) (byte) 0);
        jsonArray7.add((java.lang.Boolean) false);
        int int17 = jsonArray7.size();
        com.google.gson.JsonArray jsonArray18 = new com.google.gson.JsonArray();
        int int19 = jsonArray18.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader20 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray18);
        boolean boolean21 = jsonArray7.equals((java.lang.Object) jsonTreeReader20);
        jsonTreeReader20.beginArray();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jsonElement14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test309");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.JsonPrimitive jsonPrimitive3 = new com.google.gson.JsonPrimitive("");
        boolean boolean4 = jsonPrimitive3.isJsonNull();
        boolean boolean5 = jsonPrimitive3.isNumber();
        boolean boolean6 = jsonArray0.remove((com.google.gson.JsonElement) jsonPrimitive3);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        jsonArray7.add((java.lang.Number) (-1.0f));
        boolean boolean10 = jsonArray0.equals((java.lang.Object) jsonArray7);
        jsonArray7.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement14 = jsonArray7.get((int) (byte) 0);
        jsonArray7.add((java.lang.Boolean) false);
        int int17 = jsonArray7.size();
        com.google.gson.JsonArray jsonArray18 = new com.google.gson.JsonArray();
        int int19 = jsonArray18.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader20 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray18);
        boolean boolean21 = jsonArray7.equals((java.lang.Object) jsonTreeReader20);
        com.google.gson.stream.JsonToken jsonToken22 = jsonTreeReader20.peek();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jsonElement14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + jsonToken22 + "' != '" + com.google.gson.stream.JsonToken.BEGIN_ARRAY + "'", jsonToken22.equals(com.google.gson.stream.JsonToken.BEGIN_ARRAY));
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test310");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.skipValue();
        boolean boolean4 = jsonTreeReader2.isLenient();
        java.lang.String str5 = jsonTreeReader2.getPath();
        com.google.gson.stream.JsonToken jsonToken6 = jsonTreeReader2.peek();
        // The following exception was thrown during execution in test generation
        try {
            jsonTreeReader2.nextNull();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NULL but was END_DOCUMENT at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + jsonToken6 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken6.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test311");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.skipValue();
        com.google.gson.stream.JsonToken jsonToken4 = jsonTreeReader2.peek();
        java.lang.String str5 = jsonTreeReader2.toString();
        jsonTreeReader2.setLenient(true);
        jsonTreeReader2.close();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = jsonTreeReader2.nextDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: JsonReader is closed");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken4 + "' != '" + com.google.gson.stream.JsonToken.END_DOCUMENT + "'", jsonToken4.equals(com.google.gson.stream.JsonToken.END_DOCUMENT));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JsonTreeReader" + "'", str5, "JsonTreeReader");
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test312");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.close();
        java.lang.String str5 = jsonTreeReader2.toString();
        java.lang.String str6 = jsonTreeReader2.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JsonTreeReader" + "'", str5, "JsonTreeReader");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JsonTreeReader" + "'", str6, "JsonTreeReader");
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test313");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        com.google.gson.JsonObject jsonObject11 = new com.google.gson.JsonObject();
        com.google.gson.JsonPrimitive jsonPrimitive13 = jsonObject11.getAsJsonPrimitive("com.google.gson.stream.MalformedJsonException: ");
        boolean boolean15 = autoCloseableMap2.remove((java.lang.Object) jsonObject11, (java.lang.Object) 1.0f);
        com.google.gson.stream.MalformedJsonException malformedJsonException18 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException19 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException18);
        java.lang.Throwable[] throwableArray20 = malformedJsonException19.getSuppressed();
        boolean boolean21 = autoCloseableMap2.equals((java.lang.Object) throwableArray20);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap22 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int23 = autoCloseableMap22.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap24 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int25 = autoCloseableMap24.size();
        autoCloseableMap22.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap24);
        autoCloseableMap2.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap22);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess29 = autoCloseableMap22.remove((java.lang.Object) 10L);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertNull(jsonPrimitive13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess29);
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test314");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.JsonArray jsonArray2 = new com.google.gson.JsonArray();
        int int3 = jsonArray2.size();
        com.google.gson.JsonPrimitive jsonPrimitive5 = new com.google.gson.JsonPrimitive("");
        boolean boolean6 = jsonPrimitive5.isJsonNull();
        boolean boolean7 = jsonPrimitive5.isNumber();
        boolean boolean8 = jsonArray2.remove((com.google.gson.JsonElement) jsonPrimitive5);
        com.google.gson.JsonArray jsonArray9 = new com.google.gson.JsonArray();
        jsonArray9.add((java.lang.Number) (-1.0f));
        boolean boolean12 = jsonArray2.equals((java.lang.Object) jsonArray9);
        boolean boolean14 = jsonArray9.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        java.util.Spliterator<com.google.gson.JsonElement> jsonElementSpliterator15 = jsonArray9.spliterator();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess16 = autoCloseableMap0.get((java.lang.Object) jsonElementSpliterator15);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap17 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int18 = autoCloseableMap17.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap19 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int20 = autoCloseableMap19.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap21 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int22 = autoCloseableMap21.size();
        autoCloseableMap19.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap21);
        com.google.gson.JsonArray jsonArray24 = new com.google.gson.JsonArray();
        int int25 = jsonArray24.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader26 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray24);
        jsonTreeReader26.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess28 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess29 = autoCloseableMap21.replace((java.lang.AutoCloseable) jsonTreeReader26, jsonReaderInternalAccess28);
        boolean boolean30 = jsonTreeReader26.hasNext();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess31 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess32 = autoCloseableMap17.replace((java.lang.AutoCloseable) jsonTreeReader26, jsonReaderInternalAccess31);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap33 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int34 = autoCloseableMap33.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap35 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int36 = autoCloseableMap35.size();
        autoCloseableMap33.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap35);
        java.lang.Object obj38 = null;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess39 = autoCloseableMap33.remove(obj38);
        com.google.gson.JsonPrimitive jsonPrimitive41 = new com.google.gson.JsonPrimitive((java.lang.Character) '4');
        java.lang.Number number42 = jsonPrimitive41.getAsNumber();
        boolean boolean43 = autoCloseableMap33.containsKey((java.lang.Object) number42);
        com.google.gson.JsonPrimitive jsonPrimitive45 = new com.google.gson.JsonPrimitive("");
        boolean boolean46 = jsonPrimitive45.isJsonNull();
        boolean boolean48 = jsonPrimitive45.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        boolean boolean49 = jsonPrimitive45.isString();
        java.lang.Number number50 = jsonPrimitive45.getAsNumber();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess51 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess51;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess53 = autoCloseableMap33.getOrDefault((java.lang.Object) jsonPrimitive45, jsonReaderInternalAccess51);
        com.google.gson.internal.JsonReaderInternalAccess.INSTANCE = jsonReaderInternalAccess51;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess55 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader26, jsonReaderInternalAccess51);
        // The following exception was thrown during execution in test generation
        try {
            long long56 = jsonTreeReader26.nextLong();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was END_ARRAY at path $[0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jsonElementSpliterator15);
        org.junit.Assert.assertNull(jsonReaderInternalAccess16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess28);
        org.junit.Assert.assertNull(jsonReaderInternalAccess29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jsonReaderInternalAccess31);
        org.junit.Assert.assertNull(jsonReaderInternalAccess32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess39);
        org.junit.Assert.assertNotNull(number42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(number50);
        org.junit.Assert.assertNull(jsonReaderInternalAccess51);
        org.junit.Assert.assertNull(jsonReaderInternalAccess53);
        org.junit.Assert.assertNull(jsonReaderInternalAccess55);
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test315");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet5 = autoCloseableMap0.keySet();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap6 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int7 = autoCloseableMap6.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap8 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int9 = autoCloseableMap8.size();
        autoCloseableMap6.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap8);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet11 = autoCloseableMap6.entrySet();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap12 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int13 = autoCloseableMap12.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap14 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int15 = autoCloseableMap14.size();
        autoCloseableMap12.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap14);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet17 = autoCloseableMap12.keySet();
        int int18 = autoCloseableMap12.size();
        autoCloseableMap6.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap12);
        com.google.gson.JsonArray jsonArray20 = new com.google.gson.JsonArray();
        int int21 = jsonArray20.size();
        com.google.gson.JsonPrimitive jsonPrimitive23 = new com.google.gson.JsonPrimitive("");
        boolean boolean24 = jsonPrimitive23.isJsonNull();
        boolean boolean25 = jsonPrimitive23.isNumber();
        boolean boolean26 = jsonArray20.remove((com.google.gson.JsonElement) jsonPrimitive23);
        com.google.gson.JsonArray jsonArray27 = new com.google.gson.JsonArray();
        jsonArray27.add((java.lang.Number) (-1.0f));
        boolean boolean30 = jsonArray20.equals((java.lang.Object) jsonArray27);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor31 = jsonArray20.iterator();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess32 = autoCloseableMap12.remove((java.lang.Object) jsonArray20);
        java.util.Set<java.lang.AutoCloseable> autoCloseableSet33 = autoCloseableMap12.keySet();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap12);
        int int35 = autoCloseableMap0.size();
        com.google.gson.JsonArray jsonArray36 = new com.google.gson.JsonArray();
        int int37 = jsonArray36.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader38 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray36);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap39 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int40 = autoCloseableMap39.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap41 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int42 = autoCloseableMap41.size();
        autoCloseableMap39.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap41);
        java.util.Set<java.util.Map.Entry<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>> autoCloseableEntrySet44 = autoCloseableMap39.entrySet();
        com.google.gson.JsonArray jsonArray45 = new com.google.gson.JsonArray();
        int int46 = jsonArray45.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader47 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray45);
        jsonTreeReader47.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess49 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess50 = autoCloseableMap39.replace((java.lang.AutoCloseable) jsonTreeReader47, jsonReaderInternalAccess49);
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess51 = autoCloseableMap0.replace((java.lang.AutoCloseable) jsonTreeReader38, jsonReaderInternalAccess50);
        boolean boolean52 = autoCloseableMap0.isEmpty();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(autoCloseableSet5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(autoCloseableSet17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jsonElementItor31);
        org.junit.Assert.assertNull(jsonReaderInternalAccess32);
        org.junit.Assert.assertNotNull(autoCloseableSet33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(autoCloseableEntrySet44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess49);
        org.junit.Assert.assertNull(jsonReaderInternalAccess50);
        org.junit.Assert.assertNull(jsonReaderInternalAccess51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test316");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        jsonTreeReader7.skipValue();
        boolean boolean12 = jsonTreeReader7.hasNext();
        jsonTreeReader7.skipValue();
        boolean boolean14 = jsonTreeReader7.hasNext();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test317");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.JsonPrimitive jsonPrimitive3 = new com.google.gson.JsonPrimitive("");
        boolean boolean4 = jsonPrimitive3.isJsonNull();
        boolean boolean5 = jsonPrimitive3.isNumber();
        boolean boolean6 = jsonArray0.remove((com.google.gson.JsonElement) jsonPrimitive3);
        com.google.gson.JsonArray jsonArray7 = new com.google.gson.JsonArray();
        jsonArray7.add((java.lang.Number) (-1.0f));
        boolean boolean10 = jsonArray0.equals((java.lang.Object) jsonArray7);
        jsonArray7.add((java.lang.Boolean) true);
        com.google.gson.JsonElement jsonElement14 = jsonArray7.get((int) (byte) 0);
        com.google.gson.JsonArray jsonArray15 = new com.google.gson.JsonArray();
        int int16 = jsonArray15.size();
        com.google.gson.JsonPrimitive jsonPrimitive18 = new com.google.gson.JsonPrimitive("");
        boolean boolean19 = jsonPrimitive18.isJsonNull();
        boolean boolean20 = jsonPrimitive18.isNumber();
        boolean boolean21 = jsonArray15.remove((com.google.gson.JsonElement) jsonPrimitive18);
        com.google.gson.JsonArray jsonArray22 = new com.google.gson.JsonArray();
        jsonArray22.add((java.lang.Number) (-1.0f));
        boolean boolean25 = jsonArray15.equals((java.lang.Object) jsonArray22);
        boolean boolean27 = jsonArray22.equals((java.lang.Object) "com.google.gson.stream.MalformedJsonException: ");
        int int28 = jsonArray22.size();
        jsonArray7.addAll(jsonArray22);
        java.util.Iterator<com.google.gson.JsonElement> jsonElementItor30 = jsonArray22.iterator();
        com.google.gson.JsonArray jsonArray31 = new com.google.gson.JsonArray();
        int int32 = jsonArray31.size();
        com.google.gson.JsonPrimitive jsonPrimitive34 = new com.google.gson.JsonPrimitive("");
        boolean boolean35 = jsonPrimitive34.isJsonNull();
        boolean boolean36 = jsonPrimitive34.isNumber();
        boolean boolean37 = jsonArray31.remove((com.google.gson.JsonElement) jsonPrimitive34);
        com.google.gson.JsonArray jsonArray38 = new com.google.gson.JsonArray();
        jsonArray38.add((java.lang.Number) (-1.0f));
        boolean boolean41 = jsonArray31.equals((java.lang.Object) jsonArray38);
        com.google.gson.JsonElement jsonElement42 = null;
        boolean boolean43 = jsonArray31.remove(jsonElement42);
        com.google.gson.JsonArray jsonArray44 = new com.google.gson.JsonArray();
        int int45 = jsonArray44.size();
        com.google.gson.JsonPrimitive jsonPrimitive47 = new com.google.gson.JsonPrimitive("");
        boolean boolean48 = jsonPrimitive47.isJsonNull();
        boolean boolean49 = jsonPrimitive47.isNumber();
        boolean boolean50 = jsonArray44.remove((com.google.gson.JsonElement) jsonPrimitive47);
        com.google.gson.JsonArray jsonArray51 = new com.google.gson.JsonArray();
        jsonArray51.add((java.lang.Number) (-1.0f));
        boolean boolean54 = jsonArray44.equals((java.lang.Object) jsonArray51);
        com.google.gson.JsonElement jsonElement55 = null;
        boolean boolean56 = jsonArray44.remove(jsonElement55);
        boolean boolean57 = jsonArray31.remove((com.google.gson.JsonElement) jsonArray44);
        jsonArray44.add((java.lang.Character) ' ');
        boolean boolean60 = jsonArray22.remove((com.google.gson.JsonElement) jsonArray44);
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader61 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = jsonTreeReader61.nextName();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NAME but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jsonElement14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(jsonElementItor30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test318");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        boolean boolean7 = jsonTreeReader2.hasNext();
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        jsonTreeReader2.close();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = jsonTreeReader2.nextLong();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: JsonReader is closed");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test319");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        jsonTreeReader7.skipValue();
        boolean boolean12 = jsonTreeReader7.hasNext();
        jsonTreeReader7.beginArray();
        boolean boolean14 = jsonTreeReader7.hasNext();
        java.lang.String str15 = jsonTreeReader7.getPath();
        jsonTreeReader7.skipValue();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = jsonTreeReader7.nextLong();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Expected NUMBER but was BEGIN_ARRAY at path $");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "$[0]" + "'", str15, "$[0]");
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test320");
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap0 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int1 = autoCloseableMap0.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap2 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int3 = autoCloseableMap2.size();
        autoCloseableMap0.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap2);
        com.google.gson.JsonArray jsonArray5 = new com.google.gson.JsonArray();
        int int6 = jsonArray5.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader7 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray5);
        jsonTreeReader7.beginArray();
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess9 = com.google.gson.internal.JsonReaderInternalAccess.INSTANCE;
        com.google.gson.internal.JsonReaderInternalAccess jsonReaderInternalAccess10 = autoCloseableMap2.replace((java.lang.AutoCloseable) jsonTreeReader7, jsonReaderInternalAccess9);
        com.google.gson.JsonObject jsonObject11 = new com.google.gson.JsonObject();
        com.google.gson.JsonPrimitive jsonPrimitive13 = jsonObject11.getAsJsonPrimitive("com.google.gson.stream.MalformedJsonException: ");
        boolean boolean15 = autoCloseableMap2.remove((java.lang.Object) jsonObject11, (java.lang.Object) 1.0f);
        com.google.gson.stream.MalformedJsonException malformedJsonException18 = new com.google.gson.stream.MalformedJsonException("");
        com.google.gson.stream.MalformedJsonException malformedJsonException19 = new com.google.gson.stream.MalformedJsonException("", (java.lang.Throwable) malformedJsonException18);
        java.lang.Throwable[] throwableArray20 = malformedJsonException19.getSuppressed();
        boolean boolean21 = autoCloseableMap2.equals((java.lang.Object) throwableArray20);
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap22 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int23 = autoCloseableMap22.size();
        com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess> autoCloseableMap24 = new com.google.gson.internal.LinkedTreeMap<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>();
        int int25 = autoCloseableMap24.size();
        autoCloseableMap22.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap24);
        autoCloseableMap2.putAll((java.util.Map<java.lang.AutoCloseable, com.google.gson.internal.JsonReaderInternalAccess>) autoCloseableMap22);
        boolean boolean28 = autoCloseableMap2.isEmpty();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(jsonReaderInternalAccess9);
        org.junit.Assert.assertNull(jsonReaderInternalAccess10);
        org.junit.Assert.assertNull(jsonPrimitive13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test321");
        com.google.gson.JsonArray jsonArray0 = new com.google.gson.JsonArray();
        int int1 = jsonArray0.size();
        com.google.gson.internal.bind.JsonTreeReader jsonTreeReader2 = new com.google.gson.internal.bind.JsonTreeReader((com.google.gson.JsonElement) jsonArray0);
        jsonTreeReader2.beginArray();
        jsonTreeReader2.skipValue();
        java.lang.String str5 = jsonTreeReader2.getPath();
        boolean boolean6 = jsonTreeReader2.hasNext();
        jsonTreeReader2.setLenient(false);
        boolean boolean9 = jsonTreeReader2.hasNext();
        java.lang.String str10 = jsonTreeReader2.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$" + "'", str5, "$");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "JsonTreeReader" + "'", str10, "JsonTreeReader");
    }
}
