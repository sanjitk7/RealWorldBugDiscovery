package com.fasterxml.jackson.core.json;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        com.fasterxml.jackson.core.io.IOContext iOContext0 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        java.io.OutputStream outputStream3 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator4 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext0, 1, objectCodec2, outputStream3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        defaultPrettyPrinter1.writeEndObject(jsonGenerator10, 56320);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator10.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        defaultPrettyPrinter1.writeEndObject(jsonGenerator10, 56320);
        java.io.InputStream inputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int17 = jsonGenerator10.writeBinary(inputStream15, 56320);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        jsonGenerator8.writeRaw("JSON");
        boolean boolean11 = jsonGenerator8.isClosed();
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator8.writeEndObject();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: Current context not an object but ROOT");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        jsonGenerator8.writeRaw("JSON");
        boolean boolean11 = jsonGenerator8.isClosed();
        jsonGenerator8.writeRaw('4');
        long[] longArray20 = new long[] { (-1L), 512, 512, ' ', (-1), 64 };
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator8.writeArray(longArray20, (int) '#', 56320);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1, 512, 512, 32, -1, 64]");
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        boolean boolean6 = jsonFactory1.requiresPropertyOrdering();
        java.io.File file7 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec8 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory9 = new com.fasterxml.jackson.core.JsonFactory(objectCodec8);
        com.fasterxml.jackson.core.JsonParser.Feature feature10 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean11 = feature10.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory13 = jsonFactory9.configure(feature10, false);
        java.io.OutputStream outputStream14 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding15 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator16 = jsonFactory13.createGenerator(outputStream14, jsonEncoding15);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonGenerator jsonGenerator17 = jsonFactory1.createGenerator(file7, jsonEncoding15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature10.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(jsonFactory13);
        org.junit.Assert.assertTrue("'" + jsonEncoding15 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding15.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator16);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        jsonGenerator8.writeRaw("JSON");
        boolean boolean11 = jsonGenerator8.isClosed();
        jsonGenerator8.writeRaw('4');
        com.fasterxml.jackson.core.ObjectCodec objectCodec14 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory15 = new com.fasterxml.jackson.core.JsonFactory(objectCodec14);
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray20 = new char[] { '4', '#' };
        int int22 = serializedString17.appendQuoted(charArray20, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser23 = jsonFactory15.createParser(charArray20);
        java.lang.String str24 = jsonParser23.getValueAsString();
        com.fasterxml.jackson.core.ObjectCodec objectCodec25 = null;
        jsonParser23.setCodec(objectCodec25);
        double double28 = jsonParser23.getValueAsDouble(1.0d);
        java.lang.Object obj29 = jsonParser23.getEmbeddedObject();
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator8.copyCurrentStructure(jsonParser23);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: No current event to copy");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[4, #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(jsonParser23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNull(obj29);
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        java.io.InputStream inputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int19 = jsonGenerator10.writeBinary(inputStream17, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        jsonGenerator8.writeRaw("JSON");
        jsonGenerator8.writeNumber("hi!");
        int[] intArray13 = com.fasterxml.jackson.core.json.ReaderBasedJsonParser._icLatin1;
        jsonGenerator8.writeArray(intArray13, 64, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonGenerator jsonGenerator19 = jsonGenerator8.overrideFormatFeatures(64, 55296);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No FormatFeatures defined for generator of type com.fasterxml.jackson.core.json.UTF8JsonGenerator");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter1.createInstance();
        defaultPrettyPrinter2.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec5 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory6 = new com.fasterxml.jackson.core.JsonFactory(objectCodec5);
        com.fasterxml.jackson.core.JsonParser.Feature feature7 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean8 = feature7.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory10 = jsonFactory6.configure(feature7, false);
        java.io.OutputStream outputStream11 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding12 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator13 = jsonFactory10.createGenerator(outputStream11, jsonEncoding12);
        jsonGenerator13.writeRaw("JSON");
        defaultPrettyPrinter2.beforeObjectEntries(jsonGenerator13);
        com.fasterxml.jackson.core.SerializableString serializableString17 = null;
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator13.writeRaw(serializableString17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultPrettyPrinter2);
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature7.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(jsonFactory10);
        org.junit.Assert.assertTrue("'" + jsonEncoding12 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding12.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator13);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.JsonFactory.Feature feature9 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean10 = jsonFactory5.isEnabled(feature9);
        int int11 = feature9.getMask();
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature9.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature11 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean12 = serializedString10.equals((java.lang.Object) feature11);
        java.lang.String str13 = serializedString10.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonGenerator8.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString10);
        jsonGenerator8.writeString("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.Base64Variant base64Variant17 = null;
        java.io.InputStream inputStream18 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int20 = jsonGenerator8.writeBinary(base64Variant17, inputStream18, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature11.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator14);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        com.fasterxml.jackson.core.io.SerializedString serializedString18 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray21 = new char[] { '4', '#' };
        int int23 = serializedString18.appendQuoted(charArray21, (int) (byte) 10);
        com.fasterxml.jackson.core.io.SerializedString serializedString25 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray28 = new char[] { '4', '#' };
        int int30 = serializedString25.appendQuoted(charArray28, (int) (byte) 10);
        int int32 = serializedString18.appendQuoted(charArray28, 0);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator10.writeTypeId((java.lang.Object) charArray28);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: No native support for writing Type Ids");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, #]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[4, #]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        jsonGenerator8.writeRaw("JSON");
        jsonGenerator8.writeNumber("hi!");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonGenerator8.setHighestNonEscapedChar((-1));
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator8.writeEndArray();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: Current context not an ARRAY but ROOT");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNotNull(jsonGenerator14);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        defaultPrettyPrinter3.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter7 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec8 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory9 = new com.fasterxml.jackson.core.JsonFactory(objectCodec8);
        com.fasterxml.jackson.core.JsonParser.Feature feature10 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean11 = feature10.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory13 = jsonFactory9.configure(feature10, false);
        java.io.OutputStream outputStream14 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding15 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator16 = jsonFactory13.createGenerator(outputStream14, jsonEncoding15);
        jsonGenerator16.writeRaw("JSON");
        boolean boolean19 = jsonGenerator16.isClosed();
        jsonGenerator16.writeRaw('4');
        defaultPrettyPrinter7.writeObjectFieldValueSeparator(jsonGenerator16);
        com.fasterxml.jackson.core.ObjectCodec objectCodec23 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory24 = new com.fasterxml.jackson.core.JsonFactory(objectCodec23);
        com.fasterxml.jackson.core.JsonParser.Feature feature25 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean26 = feature25.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory28 = jsonFactory24.configure(feature25, false);
        java.io.OutputStream outputStream29 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding30 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator31 = jsonFactory28.createGenerator(outputStream29, jsonEncoding30);
        com.fasterxml.jackson.core.io.SerializedString serializedString33 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature34 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean35 = serializedString33.equals((java.lang.Object) feature34);
        java.lang.String str36 = serializedString33.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = jsonGenerator31.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString33);
        defaultPrettyPrinter7.beforeArrayValues(jsonGenerator31);
        defaultPrettyPrinter3.writeEndObject(jsonGenerator31, (int) (short) 10);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter42 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec43 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory44 = new com.fasterxml.jackson.core.JsonFactory(objectCodec43);
        com.fasterxml.jackson.core.JsonParser.Feature feature45 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean46 = feature45.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory48 = jsonFactory44.configure(feature45, false);
        java.io.OutputStream outputStream49 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding50 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator51 = jsonFactory48.createGenerator(outputStream49, jsonEncoding50);
        jsonGenerator51.writeRaw("JSON");
        boolean boolean54 = jsonGenerator51.isClosed();
        jsonGenerator51.writeRaw('4');
        defaultPrettyPrinter42.writeObjectFieldValueSeparator(jsonGenerator51);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter58 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter59 = defaultPrettyPrinter42.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter58);
        defaultPrettyPrinter3.indentObjectsWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter58);
        defaultPrettyPrinter1.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter58);
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature10.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(jsonFactory13);
        org.junit.Assert.assertTrue("'" + jsonEncoding15 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding15.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature25.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(jsonFactory28);
        org.junit.Assert.assertTrue("'" + jsonEncoding30 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding30.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator31);
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature34.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator37);
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature45.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(jsonFactory48);
        org.junit.Assert.assertTrue("'" + jsonEncoding50 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding50.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter59);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        jsonGenerator8.writeRaw("JSON");
        boolean boolean11 = jsonGenerator8.isClosed();
        jsonGenerator8.writeRaw('4');
        int[] intArray20 = new int[] { (byte) -1, (byte) 1, 1, ' ', 32, 31 };
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator8.writeArray(intArray20, (int) (byte) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 6");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 1, 32, 32, 31]");
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        com.fasterxml.jackson.core.json.DupDetector dupDetector0 = null;
        com.fasterxml.jackson.core.json.JsonWriteContext jsonWriteContext1 = com.fasterxml.jackson.core.json.JsonWriteContext.createRootContext(dupDetector0);
        com.fasterxml.jackson.core.json.JsonWriteContext jsonWriteContext2 = jsonWriteContext1._child;
        com.fasterxml.jackson.core.json.DupDetector dupDetector3 = null;
        com.fasterxml.jackson.core.json.JsonWriteContext jsonWriteContext4 = com.fasterxml.jackson.core.json.JsonWriteContext.createRootContext(dupDetector3);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter6 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec7 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory8 = new com.fasterxml.jackson.core.JsonFactory(objectCodec7);
        com.fasterxml.jackson.core.JsonParser.Feature feature9 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean10 = feature9.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory12 = jsonFactory8.configure(feature9, false);
        java.io.OutputStream outputStream13 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding14 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator15 = jsonFactory12.createGenerator(outputStream13, jsonEncoding14);
        jsonGenerator15.writeRaw("JSON");
        boolean boolean18 = jsonGenerator15.isClosed();
        jsonGenerator15.writeRaw('4');
        defaultPrettyPrinter6.writeObjectFieldValueSeparator(jsonGenerator15);
        com.fasterxml.jackson.core.ObjectCodec objectCodec22 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory23 = new com.fasterxml.jackson.core.JsonFactory(objectCodec22);
        com.fasterxml.jackson.core.JsonParser.Feature feature24 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean25 = feature24.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory27 = jsonFactory23.configure(feature24, false);
        java.io.OutputStream outputStream28 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding29 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator30 = jsonFactory27.createGenerator(outputStream28, jsonEncoding29);
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature33 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean34 = serializedString32.equals((java.lang.Object) feature33);
        java.lang.String str35 = serializedString32.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonGenerator30.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString32);
        defaultPrettyPrinter6.beforeArrayValues(jsonGenerator30);
        jsonWriteContext4.setCurrentValue((java.lang.Object) jsonGenerator30);
        // The following exception was thrown during execution in test generation
        try {
            jsonWriteContext2._child = jsonWriteContext4;
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonWriteContext1);
        org.junit.Assert.assertNull(jsonWriteContext2);
        org.junit.Assert.assertNotNull(jsonWriteContext4);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature9.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(jsonFactory12);
        org.junit.Assert.assertTrue("'" + jsonEncoding14 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding14.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature24.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(jsonFactory27);
        org.junit.Assert.assertTrue("'" + jsonEncoding29 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding29.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator30);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature33.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator36);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        com.fasterxml.jackson.core.JsonLocation jsonLocation1 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec3 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = new com.fasterxml.jackson.core.JsonFactory(objectCodec3);
        com.fasterxml.jackson.core.io.SerializedString serializedString6 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray9 = new char[] { '4', '#' };
        int int11 = serializedString6.appendQuoted(charArray9, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonFactory4.createParser(charArray9);
        java.lang.String str13 = jsonFactory4.getFormatName();
        com.fasterxml.jackson.core.JsonParser jsonParser15 = jsonFactory4.createJsonParser("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec17 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = new com.fasterxml.jackson.core.JsonFactory(objectCodec17);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray23 = new char[] { '4', '#' };
        int int25 = serializedString20.appendQuoted(charArray23, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser26 = jsonFactory18.createParser(charArray23);
        boolean boolean28 = jsonParser26.hasTokenId(0);
        com.fasterxml.jackson.core.JsonLocation jsonLocation30 = null;
        com.fasterxml.jackson.core.JsonLocation jsonLocation32 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException33 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation32);
        java.lang.Throwable throwable34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = null;
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException36 = new com.fasterxml.jackson.core.JsonGenerationException(throwable34, jsonGenerator35);
        jsonParseException33.addSuppressed((java.lang.Throwable) jsonGenerationException36);
        com.fasterxml.jackson.core.JsonParseException jsonParseException38 = new com.fasterxml.jackson.core.JsonParseException(jsonParser26, "com.fasterxml.jackson.core.JsonGenerationException: N/A", jsonLocation30, (java.lang.Throwable) jsonParseException33);
        com.fasterxml.jackson.core.JsonParseException jsonParseException39 = new com.fasterxml.jackson.core.JsonParseException(jsonParser15, "com.fasterxml.jackson.core.JsonGenerationException: N/A", (java.lang.Throwable) jsonParseException33);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter41 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec42 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory43 = new com.fasterxml.jackson.core.JsonFactory(objectCodec42);
        com.fasterxml.jackson.core.JsonParser.Feature feature44 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean45 = feature44.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory47 = jsonFactory43.configure(feature44, false);
        java.io.OutputStream outputStream48 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding49 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = jsonFactory47.createGenerator(outputStream48, jsonEncoding49);
        jsonGenerator50.writeRaw("JSON");
        defaultPrettyPrinter41.writeEndObject(jsonGenerator50, 56320);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException55 = new com.fasterxml.jackson.core.JsonGenerationException("hi!", (java.lang.Throwable) jsonParseException33, jsonGenerator50);
        com.fasterxml.jackson.core.JsonParseException jsonParseException56 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation1, (java.lang.Throwable) jsonParseException33);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4, #]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(jsonParser12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JSON" + "'", str13, "JSON");
        org.junit.Assert.assertNotNull(jsonParser15);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(jsonParser26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature44.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(jsonFactory47);
        org.junit.Assert.assertTrue("'" + jsonEncoding49 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding49.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator50);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        defaultPrettyPrinter1.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonParser.Feature feature8 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean9 = feature8.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory7.configure(feature8, false);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding13 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory11.createGenerator(outputStream12, jsonEncoding13);
        jsonGenerator14.writeRaw("JSON");
        boolean boolean17 = jsonGenerator14.isClosed();
        jsonGenerator14.writeRaw('4');
        defaultPrettyPrinter5.writeObjectFieldValueSeparator(jsonGenerator14);
        com.fasterxml.jackson.core.ObjectCodec objectCodec21 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = new com.fasterxml.jackson.core.JsonFactory(objectCodec21);
        com.fasterxml.jackson.core.JsonParser.Feature feature23 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean24 = feature23.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory26 = jsonFactory22.configure(feature23, false);
        java.io.OutputStream outputStream27 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding28 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator29 = jsonFactory26.createGenerator(outputStream27, jsonEncoding28);
        com.fasterxml.jackson.core.io.SerializedString serializedString31 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature32 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean33 = serializedString31.equals((java.lang.Object) feature32);
        java.lang.String str34 = serializedString31.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonGenerator29.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString31);
        defaultPrettyPrinter5.beforeArrayValues(jsonGenerator29);
        defaultPrettyPrinter1.writeEndObject(jsonGenerator29, (int) (short) 10);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter40 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec41 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory42 = new com.fasterxml.jackson.core.JsonFactory(objectCodec41);
        com.fasterxml.jackson.core.JsonParser.Feature feature43 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean44 = feature43.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory46 = jsonFactory42.configure(feature43, false);
        java.io.OutputStream outputStream47 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding48 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator49 = jsonFactory46.createGenerator(outputStream47, jsonEncoding48);
        jsonGenerator49.writeRaw("JSON");
        boolean boolean52 = jsonGenerator49.isClosed();
        jsonGenerator49.writeRaw('4');
        defaultPrettyPrinter40.writeObjectFieldValueSeparator(jsonGenerator49);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter56 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter57 = defaultPrettyPrinter40.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter56);
        defaultPrettyPrinter1.indentObjectsWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter56);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter60 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter61 = defaultPrettyPrinter60.createInstance();
        defaultPrettyPrinter61.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory65 = new com.fasterxml.jackson.core.JsonFactory(objectCodec64);
        com.fasterxml.jackson.core.JsonParser.Feature feature66 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean67 = feature66.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory69 = jsonFactory65.configure(feature66, false);
        java.io.OutputStream outputStream70 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding71 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = jsonFactory69.createGenerator(outputStream70, jsonEncoding71);
        jsonGenerator72.writeRaw("JSON");
        defaultPrettyPrinter61.beforeObjectEntries(jsonGenerator72);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter77 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = defaultPrettyPrinter77.createInstance();
        defaultPrettyPrinter78.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec81 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory82 = new com.fasterxml.jackson.core.JsonFactory(objectCodec81);
        com.fasterxml.jackson.core.JsonParser.Feature feature83 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean84 = feature83.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory86 = jsonFactory82.configure(feature83, false);
        java.io.OutputStream outputStream87 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding88 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator89 = jsonFactory86.createGenerator(outputStream87, jsonEncoding88);
        jsonGenerator89.writeRaw("JSON");
        defaultPrettyPrinter78.beforeObjectEntries(jsonGenerator89);
        defaultPrettyPrinter61.writeObjectEntrySeparator(jsonGenerator89);
        boolean boolean94 = jsonGenerator89.isClosed();
        defaultPrettyPrinter1.beforeObjectEntries(jsonGenerator89);
        java.lang.Object obj96 = jsonGenerator89.getCurrentValue();
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature8.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + jsonEncoding13 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding13.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature23.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(jsonFactory26);
        org.junit.Assert.assertTrue("'" + jsonEncoding28 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding28.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator29);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature32.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature43.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(jsonFactory46);
        org.junit.Assert.assertTrue("'" + jsonEncoding48 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding48.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter57);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter61);
        org.junit.Assert.assertTrue("'" + feature66 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature66.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(jsonFactory69);
        org.junit.Assert.assertTrue("'" + jsonEncoding71 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding71.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter78);
        org.junit.Assert.assertTrue("'" + feature83 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature83.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(jsonFactory86);
        org.junit.Assert.assertTrue("'" + jsonEncoding88 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding88.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator89);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(obj96);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        defaultPrettyPrinter1.writeEndObject(jsonGenerator10, 56320);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator16 = jsonGenerator10.setFeatureMask((int) (short) -1);
        com.fasterxml.jackson.core.io.SerializedString serializedString18 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray21 = new char[] { '4', '#' };
        int int23 = serializedString18.appendQuoted(charArray21, (int) (byte) 10);
        char[] charArray24 = serializedString18.asQuotedChars();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10 };
        int int29 = serializedString18.appendUnquotedUTF8(byteArray27, 1);
        jsonGenerator16.writeString((com.fasterxml.jackson.core.SerializableString) serializedString18);
        java.io.OutputStream outputStream31 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int32 = serializedString18.writeQuotedUTF8(outputStream31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertNotNull(jsonGenerator16);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, #]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[h, i, !]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter17 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter18 = defaultPrettyPrinter1.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter17);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter20 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        defaultPrettyPrinter20.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec25 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory26 = new com.fasterxml.jackson.core.JsonFactory(objectCodec25);
        com.fasterxml.jackson.core.JsonParser.Feature feature27 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean28 = feature27.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = jsonFactory26.configure(feature27, false);
        java.io.OutputStream outputStream31 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding32 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator33 = jsonFactory30.createGenerator(outputStream31, jsonEncoding32);
        jsonGenerator33.writeRaw("JSON");
        boolean boolean36 = jsonGenerator33.isClosed();
        jsonGenerator33.writeRaw('4');
        defaultPrettyPrinter24.writeObjectFieldValueSeparator(jsonGenerator33);
        com.fasterxml.jackson.core.ObjectCodec objectCodec40 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = new com.fasterxml.jackson.core.JsonFactory(objectCodec40);
        com.fasterxml.jackson.core.JsonParser.Feature feature42 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean43 = feature42.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory45 = jsonFactory41.configure(feature42, false);
        java.io.OutputStream outputStream46 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding47 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator48 = jsonFactory45.createGenerator(outputStream46, jsonEncoding47);
        com.fasterxml.jackson.core.io.SerializedString serializedString50 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature51 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean52 = serializedString50.equals((java.lang.Object) feature51);
        java.lang.String str53 = serializedString50.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator54 = jsonGenerator48.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString50);
        defaultPrettyPrinter24.beforeArrayValues(jsonGenerator48);
        defaultPrettyPrinter20.writeEndObject(jsonGenerator48, (int) (short) 10);
        defaultPrettyPrinter18.writeArrayValueSeparator(jsonGenerator48);
        jsonGenerator48.writeFieldName("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter18);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature27.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(jsonFactory30);
        org.junit.Assert.assertTrue("'" + jsonEncoding32 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding32.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature42.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(jsonFactory45);
        org.junit.Assert.assertTrue("'" + jsonEncoding47 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding47.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator48);
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature51.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator54);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature11 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean12 = serializedString10.equals((java.lang.Object) feature11);
        java.lang.String str13 = serializedString10.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonGenerator8.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString10);
        jsonGenerator8.writeString("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator17 = jsonGenerator8.useDefaultPrettyPrinter();
        boolean boolean18 = jsonGenerator8.canWriteFormattedNumbers();
        com.fasterxml.jackson.core.FormatSchema formatSchema19 = null;
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator8.setSchema(formatSchema19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature11.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertNotNull(jsonGenerator17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        jsonGenerator8.writeRaw("JSON");
        jsonGenerator8.writeNumber("hi!");
        int[] intArray13 = com.fasterxml.jackson.core.json.ReaderBasedJsonParser._icLatin1;
        jsonGenerator8.writeArray(intArray13, 64, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString18 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        java.lang.String str19 = serializedString18.toString();
        com.fasterxml.jackson.core.JsonToken jsonToken20 = com.fasterxml.jackson.core.JsonToken.START_OBJECT;
        boolean boolean21 = jsonToken20.isStructStart();
        char[] charArray22 = jsonToken20.asCharArray();
        int int24 = serializedString18.appendUnquoted(charArray22, (int) '#');
        jsonGenerator8.writeRaw(charArray22, 2, (int) (byte) 0);
        com.fasterxml.jackson.core.TreeNode treeNode28 = null;
        jsonGenerator8.writeTree(treeNode28);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + jsonToken20 + "' != '" + com.fasterxml.jackson.core.JsonToken.START_OBJECT + "'", jsonToken20.equals(com.fasterxml.jackson.core.JsonToken.START_OBJECT));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "{");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "{");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[{]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature11 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean12 = serializedString10.equals((java.lang.Object) feature11);
        java.lang.String str13 = serializedString10.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonGenerator8.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString10);
        jsonGenerator8.writeString("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator17 = jsonGenerator8.useDefaultPrettyPrinter();
        boolean boolean18 = jsonGenerator8.canWriteFormattedNumbers();
        jsonGenerator8.writeBoolean(true);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature11.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertNotNull(jsonGenerator17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("");
        jsonGenerator8.writeRawValue((com.fasterxml.jackson.core.SerializableString) serializedString10);
        jsonGenerator8.writeRaw('a');
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes14 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator15 = jsonGenerator8.setCharacterEscapes(characterEscapes14);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNotNull(jsonGenerator15);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature> wildcardClass9 = jsonFactory5.getFormatWriteFeatureType();
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = new com.fasterxml.jackson.core.JsonFactory(objectCodec10);
        com.fasterxml.jackson.core.JsonParser.Feature feature12 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean13 = feature12.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory15 = jsonFactory11.configure(feature12, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec16 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = new com.fasterxml.jackson.core.JsonFactory(objectCodec16);
        com.fasterxml.jackson.core.JsonParser.Feature feature18 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean19 = feature18.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory21 = jsonFactory17.configure(feature18, false);
        java.io.OutputStream outputStream22 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding23 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator24 = jsonFactory21.createGenerator(outputStream22, jsonEncoding23);
        com.fasterxml.jackson.core.JsonFactory.Feature feature25 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean26 = jsonFactory21.isEnabled(feature25);
        com.fasterxml.jackson.core.JsonFactory jsonFactory27 = jsonFactory11.disable(feature25);
        boolean boolean28 = jsonFactory5.isEnabled(feature25);
        com.fasterxml.jackson.core.JsonFactory jsonFactory29 = jsonFactory5.copy();
        com.fasterxml.jackson.core.ObjectCodec objectCodec30 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory31 = jsonFactory5.setCodec(objectCodec30);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature12.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(jsonFactory15);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature18.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(jsonFactory21);
        org.junit.Assert.assertTrue("'" + jsonEncoding23 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding23.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator24);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature25.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(jsonFactory27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(jsonFactory29);
        org.junit.Assert.assertNotNull(jsonFactory31);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        defaultPrettyPrinter1.writeEndObject(jsonGenerator10, 56320);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator16 = jsonGenerator10.setFeatureMask((int) (short) -1);
        boolean boolean17 = jsonGenerator10.canWriteBinaryNatively();
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertNotNull(jsonGenerator16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature11 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean12 = serializedString10.equals((java.lang.Object) feature11);
        java.lang.String str13 = serializedString10.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonGenerator8.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString10);
        jsonGenerator8.writeString("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator17 = jsonGenerator8.useDefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding18 = com.fasterxml.jackson.core.JsonEncoding.UTF32_BE;
        jsonGenerator8.setCurrentValue((java.lang.Object) jsonEncoding18);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator8.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature11.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertNotNull(jsonGenerator17);
        org.junit.Assert.assertTrue("'" + jsonEncoding18 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF32_BE + "'", jsonEncoding18.equals(com.fasterxml.jackson.core.JsonEncoding.UTF32_BE));
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        com.fasterxml.jackson.core.ObjectCodec objectCodec1 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory2 = new com.fasterxml.jackson.core.JsonFactory(objectCodec1);
        com.fasterxml.jackson.core.io.SerializedString serializedString4 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray7 = new char[] { '4', '#' };
        int int9 = serializedString4.appendQuoted(charArray7, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser10 = jsonFactory2.createParser(charArray7);
        boolean boolean12 = jsonParser10.hasTokenId(0);
        com.fasterxml.jackson.core.JsonParseException jsonParseException14 = new com.fasterxml.jackson.core.JsonParseException(jsonParser10, "com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter16 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec17 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = new com.fasterxml.jackson.core.JsonFactory(objectCodec17);
        com.fasterxml.jackson.core.JsonParser.Feature feature19 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean20 = feature19.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = jsonFactory18.configure(feature19, false);
        java.io.OutputStream outputStream23 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding24 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = jsonFactory22.createGenerator(outputStream23, jsonEncoding24);
        jsonGenerator25.writeRaw("JSON");
        defaultPrettyPrinter16.writeEndObject(jsonGenerator25, 56320);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator31 = jsonGenerator25.setFeatureMask((int) (short) -1);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException32 = new com.fasterxml.jackson.core.JsonGenerationException("com.fasterxml.jackson.core.JsonGenerationException: N/A", (java.lang.Throwable) jsonParseException14, jsonGenerator31);
        jsonGenerator31.writeObjectFieldStart("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4, #]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(jsonParser10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature19.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(jsonFactory22);
        org.junit.Assert.assertTrue("'" + jsonEncoding24 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding24.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator25);
        org.junit.Assert.assertNotNull(jsonGenerator31);
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        com.fasterxml.jackson.core.ObjectCodec objectCodec17 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = new com.fasterxml.jackson.core.JsonFactory(objectCodec17);
        com.fasterxml.jackson.core.JsonParser.Feature feature19 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean20 = feature19.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = jsonFactory18.configure(feature19, false);
        java.io.OutputStream outputStream23 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding24 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = jsonFactory22.createGenerator(outputStream23, jsonEncoding24);
        com.fasterxml.jackson.core.io.SerializedString serializedString27 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature28 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean29 = serializedString27.equals((java.lang.Object) feature28);
        java.lang.String str30 = serializedString27.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator31 = jsonGenerator25.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString27);
        defaultPrettyPrinter1.beforeArrayValues(jsonGenerator25);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter34 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec35 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory36 = new com.fasterxml.jackson.core.JsonFactory(objectCodec35);
        com.fasterxml.jackson.core.JsonParser.Feature feature37 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean38 = feature37.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory36.configure(feature37, false);
        java.io.OutputStream outputStream41 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding42 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator43 = jsonFactory40.createGenerator(outputStream41, jsonEncoding42);
        jsonGenerator43.writeRaw("JSON");
        boolean boolean46 = jsonGenerator43.isClosed();
        jsonGenerator43.writeRaw('4');
        defaultPrettyPrinter34.writeObjectFieldValueSeparator(jsonGenerator43);
        com.fasterxml.jackson.core.ObjectCodec objectCodec50 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = new com.fasterxml.jackson.core.JsonFactory(objectCodec50);
        com.fasterxml.jackson.core.JsonParser.Feature feature52 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean53 = feature52.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory55 = jsonFactory51.configure(feature52, false);
        java.io.OutputStream outputStream56 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding57 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator58 = jsonFactory55.createGenerator(outputStream56, jsonEncoding57);
        com.fasterxml.jackson.core.io.SerializedString serializedString60 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature61 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean62 = serializedString60.equals((java.lang.Object) feature61);
        java.lang.String str63 = serializedString60.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator64 = jsonGenerator58.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString60);
        defaultPrettyPrinter34.beforeArrayValues(jsonGenerator58);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter66 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        defaultPrettyPrinter34.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter66);
        defaultPrettyPrinter1.indentObjectsWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter66);
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature19.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(jsonFactory22);
        org.junit.Assert.assertTrue("'" + jsonEncoding24 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding24.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator25);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature28.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator31);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature37.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertTrue("'" + jsonEncoding42 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding42.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature52.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(jsonFactory55);
        org.junit.Assert.assertTrue("'" + jsonEncoding57 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding57.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator58);
        org.junit.Assert.assertTrue("'" + feature61 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature61.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator64);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter1.createInstance();
        com.fasterxml.jackson.core.ObjectCodec objectCodec3 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = new com.fasterxml.jackson.core.JsonFactory(objectCodec3);
        com.fasterxml.jackson.core.JsonParser.Feature feature5 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean6 = feature5.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory8 = jsonFactory4.configure(feature5, false);
        java.io.OutputStream outputStream9 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding10 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator11 = jsonFactory8.createGenerator(outputStream9, jsonEncoding10);
        jsonGenerator11.writeRaw("JSON");
        jsonGenerator11.writeNumber("hi!");
        int[] intArray16 = com.fasterxml.jackson.core.json.ReaderBasedJsonParser._icLatin1;
        jsonGenerator11.writeArray(intArray16, 64, 0);
        defaultPrettyPrinter2.writeRootValueSeparator(jsonGenerator11);
        com.fasterxml.jackson.core.ObjectCodec objectCodec21 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = new com.fasterxml.jackson.core.JsonFactory(objectCodec21);
        com.fasterxml.jackson.core.JsonParser.Feature feature23 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean24 = feature23.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory26 = jsonFactory22.configure(feature23, false);
        java.io.OutputStream outputStream27 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding28 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator29 = jsonFactory26.createGenerator(outputStream27, jsonEncoding28);
        jsonGenerator29.writeRaw("JSON");
        boolean boolean32 = jsonGenerator29.isClosed();
        jsonGenerator29.writeRaw('4');
        defaultPrettyPrinter2.writeArrayValueSeparator(jsonGenerator29);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter2);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature5.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(jsonFactory8);
        org.junit.Assert.assertTrue("'" + jsonEncoding10 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding10.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator11);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature23.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(jsonFactory26);
        org.junit.Assert.assertTrue("'" + jsonEncoding28 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding28.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        jsonGenerator8.writeRaw("JSON");
        jsonGenerator8.writeNumber("hi!");
        int[] intArray13 = com.fasterxml.jackson.core.json.ReaderBasedJsonParser._icLatin1;
        jsonGenerator8.writeArray(intArray13, 64, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString18 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        java.lang.String str19 = serializedString18.toString();
        com.fasterxml.jackson.core.JsonToken jsonToken20 = com.fasterxml.jackson.core.JsonToken.START_OBJECT;
        boolean boolean21 = jsonToken20.isStructStart();
        char[] charArray22 = jsonToken20.asCharArray();
        int int24 = serializedString18.appendUnquoted(charArray22, (int) '#');
        jsonGenerator8.writeRaw(charArray22, 2, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator8.writeRaw("ROOT", (int) (byte) 1, 31);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 32");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + jsonToken20 + "' != '" + com.fasterxml.jackson.core.JsonToken.START_OBJECT + "'", jsonToken20.equals(com.fasterxml.jackson.core.JsonToken.START_OBJECT));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "{");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "{");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[{]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter17 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter18 = defaultPrettyPrinter1.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter17);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter20 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec21 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = new com.fasterxml.jackson.core.JsonFactory(objectCodec21);
        com.fasterxml.jackson.core.JsonParser.Feature feature23 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean24 = feature23.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory26 = jsonFactory22.configure(feature23, false);
        java.io.OutputStream outputStream27 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding28 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator29 = jsonFactory26.createGenerator(outputStream27, jsonEncoding28);
        jsonGenerator29.writeRaw("JSON");
        defaultPrettyPrinter20.writeEndObject(jsonGenerator29, 56320);
        com.fasterxml.jackson.core.io.SerializedString serializedString36 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray39 = new char[] { '4', '#' };
        int int41 = serializedString36.appendQuoted(charArray39, (int) (byte) 10);
        byte[] byteArray42 = new byte[] {};
        int int44 = serializedString36.appendUnquotedUTF8(byteArray42, (int) (short) 1);
        jsonGenerator29.writeBinaryField("", byteArray42);
        nopIndenter17.writeIndentation(jsonGenerator29, (int) '#');
        com.fasterxml.jackson.core.Base64Variant base64Variant48 = null;
        java.io.InputStream inputStream49 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int51 = jsonGenerator29.writeBinary(base64Variant48, inputStream49, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter18);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature23.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(jsonFactory26);
        org.junit.Assert.assertTrue("'" + jsonEncoding28 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding28.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator29);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[4, #]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        com.fasterxml.jackson.core.ObjectCodec objectCodec17 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = new com.fasterxml.jackson.core.JsonFactory(objectCodec17);
        com.fasterxml.jackson.core.JsonParser.Feature feature19 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean20 = feature19.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = jsonFactory18.configure(feature19, false);
        java.io.OutputStream outputStream23 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding24 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = jsonFactory22.createGenerator(outputStream23, jsonEncoding24);
        com.fasterxml.jackson.core.io.SerializedString serializedString27 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature28 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean29 = serializedString27.equals((java.lang.Object) feature28);
        java.lang.String str30 = serializedString27.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator31 = jsonGenerator25.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString27);
        defaultPrettyPrinter1.beforeArrayValues(jsonGenerator25);
        java.lang.Object obj33 = jsonGenerator25.getOutputTarget();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes34 = jsonGenerator25.getCharacterEscapes();
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature19.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(jsonFactory22);
        org.junit.Assert.assertTrue("'" + jsonEncoding24 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding24.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator25);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature28.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(characterEscapes34);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature11 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean12 = serializedString10.equals((java.lang.Object) feature11);
        java.lang.String str13 = serializedString10.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonGenerator8.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString10);
        jsonGenerator8.writeString("JSON");
        java.lang.Object obj17 = jsonGenerator8.getCurrentValue();
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature11.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        java.lang.Object obj9 = new java.lang.Object();
        jsonGenerator8.setCurrentValue(obj9);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        defaultPrettyPrinter1.writeEndObject(jsonGenerator10, 56320);
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray20 = new char[] { '4', '#' };
        int int22 = serializedString17.appendQuoted(charArray20, (int) (byte) 10);
        byte[] byteArray23 = new byte[] {};
        int int25 = serializedString17.appendUnquotedUTF8(byteArray23, (int) (short) 1);
        jsonGenerator10.writeBinaryField("", byteArray23);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter28 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec29 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory(objectCodec29);
        com.fasterxml.jackson.core.JsonParser.Feature feature31 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean32 = feature31.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory30.configure(feature31, false);
        java.io.OutputStream outputStream35 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding36 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = jsonFactory34.createGenerator(outputStream35, jsonEncoding36);
        jsonGenerator37.writeRaw("JSON");
        defaultPrettyPrinter28.writeEndObject(jsonGenerator37, 56320);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator42 = jsonGenerator10.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter28);
        com.fasterxml.jackson.core.io.SerializedString serializedString44 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray47 = new char[] { '4', '#' };
        int int49 = serializedString44.appendQuoted(charArray47, (int) (byte) 10);
        char[] charArray50 = serializedString44.asQuotedChars();
        byte[] byteArray51 = serializedString44.asQuotedUTF8();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter52 = defaultPrettyPrinter28.withRootSeparator((com.fasterxml.jackson.core.SerializableString) serializedString44);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter54 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec55 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory56 = new com.fasterxml.jackson.core.JsonFactory(objectCodec55);
        com.fasterxml.jackson.core.JsonParser.Feature feature57 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean58 = feature57.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory60 = jsonFactory56.configure(feature57, false);
        java.io.OutputStream outputStream61 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding62 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator63 = jsonFactory60.createGenerator(outputStream61, jsonEncoding62);
        jsonGenerator63.writeRaw("JSON");
        boolean boolean66 = jsonGenerator63.isClosed();
        jsonGenerator63.writeRaw('4');
        defaultPrettyPrinter54.writeObjectFieldValueSeparator(jsonGenerator63);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter70 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        defaultPrettyPrinter54.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter70);
        boolean boolean72 = nopIndenter70.isInline();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter73 = defaultPrettyPrinter52.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter70);
        boolean boolean74 = nopIndenter70.isInline();
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[4, #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature31.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertTrue("'" + jsonEncoding36 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding36.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator37);
        org.junit.Assert.assertNotNull(jsonGenerator42);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[4, #]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[h, i, !]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[104, 105, 33]");
        org.junit.Assert.assertNotNull(defaultPrettyPrinter52);
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature57.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(jsonFactory60);
        org.junit.Assert.assertTrue("'" + jsonEncoding62 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding62.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        defaultPrettyPrinter1.writeEndObject(jsonGenerator10, 56320);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator16 = jsonGenerator10.setFeatureMask((int) (short) -1);
        com.fasterxml.jackson.core.io.SerializedString serializedString18 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray21 = new char[] { '4', '#' };
        int int23 = serializedString18.appendQuoted(charArray21, (int) (byte) 10);
        char[] charArray24 = serializedString18.asQuotedChars();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10 };
        int int29 = serializedString18.appendUnquotedUTF8(byteArray27, 1);
        jsonGenerator16.writeString((com.fasterxml.jackson.core.SerializableString) serializedString18);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator16.writeRaw("JSON", 1, 512);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 513");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertNotNull(jsonGenerator16);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, #]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[h, i, !]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature11 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean12 = serializedString10.equals((java.lang.Object) feature11);
        java.lang.String str13 = serializedString10.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonGenerator8.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString10);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 10, (byte) 10 };
        int int20 = serializedString10.appendQuotedUTF8(byteArray18, (int) (short) 1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature11.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 10, 10]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.JsonFactory.Feature feature9 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean10 = jsonFactory5.isEnabled(feature9);
        java.io.Writer writer11 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator12 = jsonFactory5.createJsonGenerator(writer11);
        java.io.OutputStream outputStream13 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec14 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory15 = new com.fasterxml.jackson.core.JsonFactory(objectCodec14);
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean17 = feature16.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = jsonFactory15.configure(feature16, false);
        java.io.OutputStream outputStream20 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding21 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator22 = jsonFactory19.createGenerator(outputStream20, jsonEncoding21);
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature25 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean26 = serializedString24.equals((java.lang.Object) feature25);
        java.lang.String str27 = serializedString24.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator28 = jsonGenerator22.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString24);
        jsonGenerator22.writeString("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator31 = jsonGenerator22.useDefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding32 = com.fasterxml.jackson.core.JsonEncoding.UTF32_BE;
        jsonGenerator22.setCurrentValue((java.lang.Object) jsonEncoding32);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonGenerator jsonGenerator34 = jsonFactory5.createJsonGenerator(outputStream13, jsonEncoding32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature9.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(jsonGenerator12);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(jsonFactory19);
        org.junit.Assert.assertTrue("'" + jsonEncoding21 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding21.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator22);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature25.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator28);
        org.junit.Assert.assertNotNull(jsonGenerator31);
        org.junit.Assert.assertTrue("'" + jsonEncoding32 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF32_BE + "'", jsonEncoding32.equals(com.fasterxml.jackson.core.JsonEncoding.UTF32_BE));
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        defaultPrettyPrinter1.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonParser.Feature feature8 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean9 = feature8.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory7.configure(feature8, false);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding13 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory11.createGenerator(outputStream12, jsonEncoding13);
        jsonGenerator14.writeRaw("JSON");
        boolean boolean17 = jsonGenerator14.isClosed();
        jsonGenerator14.writeRaw('4');
        defaultPrettyPrinter5.writeObjectFieldValueSeparator(jsonGenerator14);
        com.fasterxml.jackson.core.ObjectCodec objectCodec21 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = new com.fasterxml.jackson.core.JsonFactory(objectCodec21);
        com.fasterxml.jackson.core.JsonParser.Feature feature23 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean24 = feature23.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory26 = jsonFactory22.configure(feature23, false);
        java.io.OutputStream outputStream27 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding28 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator29 = jsonFactory26.createGenerator(outputStream27, jsonEncoding28);
        com.fasterxml.jackson.core.io.SerializedString serializedString31 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature32 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean33 = serializedString31.equals((java.lang.Object) feature32);
        java.lang.String str34 = serializedString31.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonGenerator29.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString31);
        defaultPrettyPrinter5.beforeArrayValues(jsonGenerator29);
        defaultPrettyPrinter1.writeEndObject(jsonGenerator29, (int) (short) 10);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter40 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec41 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory42 = new com.fasterxml.jackson.core.JsonFactory(objectCodec41);
        com.fasterxml.jackson.core.JsonParser.Feature feature43 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean44 = feature43.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory46 = jsonFactory42.configure(feature43, false);
        java.io.OutputStream outputStream47 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding48 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator49 = jsonFactory46.createGenerator(outputStream47, jsonEncoding48);
        jsonGenerator49.writeRaw("JSON");
        boolean boolean52 = jsonGenerator49.isClosed();
        jsonGenerator49.writeRaw('4');
        defaultPrettyPrinter40.writeObjectFieldValueSeparator(jsonGenerator49);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter56 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter57 = defaultPrettyPrinter40.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter56);
        defaultPrettyPrinter1.indentObjectsWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter56);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter60 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter61 = defaultPrettyPrinter60.createInstance();
        defaultPrettyPrinter61.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory65 = new com.fasterxml.jackson.core.JsonFactory(objectCodec64);
        com.fasterxml.jackson.core.JsonParser.Feature feature66 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean67 = feature66.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory69 = jsonFactory65.configure(feature66, false);
        java.io.OutputStream outputStream70 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding71 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = jsonFactory69.createGenerator(outputStream70, jsonEncoding71);
        jsonGenerator72.writeRaw("JSON");
        defaultPrettyPrinter61.beforeObjectEntries(jsonGenerator72);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter77 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter78 = defaultPrettyPrinter77.createInstance();
        defaultPrettyPrinter78.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec81 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory82 = new com.fasterxml.jackson.core.JsonFactory(objectCodec81);
        com.fasterxml.jackson.core.JsonParser.Feature feature83 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean84 = feature83.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory86 = jsonFactory82.configure(feature83, false);
        java.io.OutputStream outputStream87 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding88 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator89 = jsonFactory86.createGenerator(outputStream87, jsonEncoding88);
        jsonGenerator89.writeRaw("JSON");
        defaultPrettyPrinter78.beforeObjectEntries(jsonGenerator89);
        defaultPrettyPrinter61.writeObjectEntrySeparator(jsonGenerator89);
        boolean boolean94 = jsonGenerator89.isClosed();
        defaultPrettyPrinter1.writeEndObject(jsonGenerator89, (int) (short) -1);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature8.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + jsonEncoding13 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding13.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature23.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(jsonFactory26);
        org.junit.Assert.assertTrue("'" + jsonEncoding28 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding28.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator29);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature32.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature43.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(jsonFactory46);
        org.junit.Assert.assertTrue("'" + jsonEncoding48 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding48.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter57);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter61);
        org.junit.Assert.assertTrue("'" + feature66 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature66.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(jsonFactory69);
        org.junit.Assert.assertTrue("'" + jsonEncoding71 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding71.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter78);
        org.junit.Assert.assertTrue("'" + feature83 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature83.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(jsonFactory86);
        org.junit.Assert.assertTrue("'" + jsonEncoding88 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding88.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator89);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        defaultPrettyPrinter1.writeEndObject(jsonGenerator10, 56320);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator16 = jsonGenerator10.setFeatureMask((int) (short) -1);
        com.fasterxml.jackson.core.Base64Variant base64Variant17 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter19 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec20 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory21 = new com.fasterxml.jackson.core.JsonFactory(objectCodec20);
        com.fasterxml.jackson.core.JsonParser.Feature feature22 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean23 = feature22.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory25 = jsonFactory21.configure(feature22, false);
        java.io.OutputStream outputStream26 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding27 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator28 = jsonFactory25.createGenerator(outputStream26, jsonEncoding27);
        jsonGenerator28.writeRaw("JSON");
        defaultPrettyPrinter19.writeEndObject(jsonGenerator28, 56320);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray38 = new char[] { '4', '#' };
        int int40 = serializedString35.appendQuoted(charArray38, (int) (byte) 10);
        byte[] byteArray41 = new byte[] {};
        int int43 = serializedString35.appendUnquotedUTF8(byteArray41, (int) (short) 1);
        jsonGenerator28.writeBinaryField("", byteArray41);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator10.writeBinary(base64Variant17, byteArray41, (int) (byte) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertNotNull(jsonGenerator16);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature22.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(jsonFactory25);
        org.junit.Assert.assertTrue("'" + jsonEncoding27 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding27.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator28);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[4, #]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException3 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation2);
        java.lang.Throwable throwable4 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator5 = null;
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException6 = new com.fasterxml.jackson.core.JsonGenerationException(throwable4, jsonGenerator5);
        jsonParseException3.addSuppressed((java.lang.Throwable) jsonGenerationException6);
        java.lang.String str8 = jsonParseException3.getOriginalMessage();
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory10 = new com.fasterxml.jackson.core.JsonFactory(objectCodec9);
        com.fasterxml.jackson.core.JsonParser.Feature feature11 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean12 = feature11.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory14 = jsonFactory10.configure(feature11, false);
        java.io.OutputStream outputStream15 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding16 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator17 = jsonFactory14.createGenerator(outputStream15, jsonEncoding16);
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature20 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean21 = serializedString19.equals((java.lang.Object) feature20);
        java.lang.String str22 = serializedString19.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator23 = jsonGenerator17.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString19);
        jsonGenerator17.writeString("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator26 = jsonGenerator17.useDefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding27 = com.fasterxml.jackson.core.JsonEncoding.UTF32_BE;
        jsonGenerator17.setCurrentValue((java.lang.Object) jsonEncoding27);
        jsonGenerator17.writeNumber("[");
        com.fasterxml.jackson.core.ObjectCodec objectCodec32 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory33 = new com.fasterxml.jackson.core.JsonFactory(objectCodec32);
        com.fasterxml.jackson.core.JsonParser.Feature feature34 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean35 = feature34.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory37 = jsonFactory33.configure(feature34, false);
        java.io.OutputStream outputStream38 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding39 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator40 = jsonFactory37.createGenerator(outputStream38, jsonEncoding39);
        com.fasterxml.jackson.core.JsonFactory.Feature feature41 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean42 = jsonFactory37.isEnabled(feature41);
        java.io.Writer writer43 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator44 = jsonFactory37.createJsonGenerator(writer43);
        com.fasterxml.jackson.core.ObjectCodec objectCodec45 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory46 = new com.fasterxml.jackson.core.JsonFactory(objectCodec45);
        com.fasterxml.jackson.core.JsonParser.Feature feature47 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean48 = feature47.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory50 = jsonFactory46.configure(feature47, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec51 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory52 = new com.fasterxml.jackson.core.JsonFactory(objectCodec51);
        com.fasterxml.jackson.core.JsonParser.Feature feature53 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean54 = feature53.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory56 = jsonFactory52.configure(feature53, false);
        java.io.OutputStream outputStream57 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding58 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator59 = jsonFactory56.createGenerator(outputStream57, jsonEncoding58);
        com.fasterxml.jackson.core.JsonFactory.Feature feature60 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean61 = jsonFactory56.isEnabled(feature60);
        com.fasterxml.jackson.core.JsonFactory jsonFactory62 = jsonFactory46.disable(feature60);
        com.fasterxml.jackson.core.JsonFactory jsonFactory63 = jsonFactory37.disable(feature60);
        com.fasterxml.jackson.core.io.SerializedString serializedString65 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        java.lang.String str66 = serializedString65.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray71 = new char[] { '4', '#' };
        int int73 = serializedString68.appendQuoted(charArray71, (int) (byte) 10);
        byte[] byteArray74 = new byte[] {};
        int int76 = serializedString68.appendUnquotedUTF8(byteArray74, (int) (short) 1);
        int int78 = serializedString65.appendQuotedUTF8(byteArray74, 8);
        com.fasterxml.jackson.core.JsonParser jsonParser79 = jsonFactory37.createJsonParser(byteArray74);
        jsonGenerator17.writeBinaryField("hi!", byteArray74);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException81 = new com.fasterxml.jackson.core.JsonGenerationException("", (java.lang.Throwable) jsonParseException3, jsonGenerator17);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator17.writeEndArray();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: Current context not an ARRAY but ROOT");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature11.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(jsonFactory14);
        org.junit.Assert.assertTrue("'" + jsonEncoding16 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding16.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator17);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature20.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator23);
        org.junit.Assert.assertNotNull(jsonGenerator26);
        org.junit.Assert.assertTrue("'" + jsonEncoding27 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF32_BE + "'", jsonEncoding27.equals(com.fasterxml.jackson.core.JsonEncoding.UTF32_BE));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature34.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(jsonFactory37);
        org.junit.Assert.assertTrue("'" + jsonEncoding39 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding39.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator40);
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature41.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(jsonGenerator44);
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature47.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(jsonFactory50);
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature53.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(jsonFactory56);
        org.junit.Assert.assertTrue("'" + jsonEncoding58 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding58.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator59);
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature60.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(jsonFactory62);
        org.junit.Assert.assertNotNull(jsonFactory63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[4, #]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(jsonParser79);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter1.createInstance();
        com.fasterxml.jackson.core.io.SerializedString serializedString4 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature5 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean6 = serializedString4.equals((java.lang.Object) feature5);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter7 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, (com.fasterxml.jackson.core.SerializableString) serializedString4);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter9 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        defaultPrettyPrinter9.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter13 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec14 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory15 = new com.fasterxml.jackson.core.JsonFactory(objectCodec14);
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean17 = feature16.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = jsonFactory15.configure(feature16, false);
        java.io.OutputStream outputStream20 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding21 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator22 = jsonFactory19.createGenerator(outputStream20, jsonEncoding21);
        jsonGenerator22.writeRaw("JSON");
        boolean boolean25 = jsonGenerator22.isClosed();
        jsonGenerator22.writeRaw('4');
        defaultPrettyPrinter13.writeObjectFieldValueSeparator(jsonGenerator22);
        com.fasterxml.jackson.core.ObjectCodec objectCodec29 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory(objectCodec29);
        com.fasterxml.jackson.core.JsonParser.Feature feature31 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean32 = feature31.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory30.configure(feature31, false);
        java.io.OutputStream outputStream35 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding36 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = jsonFactory34.createGenerator(outputStream35, jsonEncoding36);
        com.fasterxml.jackson.core.io.SerializedString serializedString39 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature40 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean41 = serializedString39.equals((java.lang.Object) feature40);
        java.lang.String str42 = serializedString39.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator43 = jsonGenerator37.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString39);
        defaultPrettyPrinter13.beforeArrayValues(jsonGenerator37);
        jsonGenerator37.writeNumber("");
        defaultPrettyPrinter9.writeArrayValueSeparator(jsonGenerator37);
        defaultPrettyPrinter1.writeObjectEntrySeparator(jsonGenerator37);
        com.fasterxml.jackson.core.ObjectCodec objectCodec49 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory50 = new com.fasterxml.jackson.core.JsonFactory(objectCodec49);
        com.fasterxml.jackson.core.JsonParser.Feature feature51 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean52 = feature51.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory54 = jsonFactory50.configure(feature51, false);
        java.io.OutputStream outputStream55 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding56 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator57 = jsonFactory54.createGenerator(outputStream55, jsonEncoding56);
        com.fasterxml.jackson.core.io.SerializedString serializedString59 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature60 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean61 = serializedString59.equals((java.lang.Object) feature60);
        java.lang.String str62 = serializedString59.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator63 = jsonGenerator57.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString59);
        jsonGenerator57.writeString("JSON");
        defaultPrettyPrinter1.writeEndObject(jsonGenerator57, (int) (short) -1);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter2);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature5.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(jsonFactory19);
        org.junit.Assert.assertTrue("'" + jsonEncoding21 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding21.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature31.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertTrue("'" + jsonEncoding36 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding36.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator37);
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature40.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator43);
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature51.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(jsonFactory54);
        org.junit.Assert.assertTrue("'" + jsonEncoding56 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding56.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator57);
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature60.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator63);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        boolean boolean17 = jsonGenerator10.canWriteObjectId();
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonParser.Feature feature8 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean9 = feature8.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory7.configure(feature8, false);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding13 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory11.createGenerator(outputStream12, jsonEncoding13);
        com.fasterxml.jackson.core.JsonFactory.Feature feature15 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean16 = jsonFactory11.isEnabled(feature15);
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = jsonFactory1.disable(feature15);
        com.fasterxml.jackson.core.JsonFactory.Feature feature18 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean19 = feature18.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = jsonFactory1.disable(feature18);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature21 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
        com.fasterxml.jackson.core.JsonFactory jsonFactory23 = jsonFactory20.configure(feature21, false);
        java.io.Reader reader24 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser25 = jsonFactory20.createParser(reader24);
        java.io.File file26 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser27 = jsonFactory20.createParser(file26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature8.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + jsonEncoding13 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding13.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature15.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(jsonFactory17);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature18.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(jsonFactory20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN + "'", feature21.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN));
        org.junit.Assert.assertNotNull(jsonFactory23);
        org.junit.Assert.assertNotNull(jsonParser25);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("");
        jsonGenerator8.writeRawValue((com.fasterxml.jackson.core.SerializableString) serializedString10);
        jsonGenerator8.writeRaw('a');
        com.fasterxml.jackson.core.io.SerializedString serializedString15 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray18 = new char[] { '4', '#' };
        int int20 = serializedString15.appendQuoted(charArray18, (int) (byte) 10);
        char[] charArray21 = serializedString15.asQuotedChars();
        char[] charArray22 = serializedString15.asQuotedChars();
        jsonGenerator8.writeRawValue((com.fasterxml.jackson.core.SerializableString) serializedString15);
        java.nio.ByteBuffer byteBuffer24 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int25 = serializedString15.putQuotedUTF8(byteBuffer24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4, #]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[h, i, !]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[h, i, !]");
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter17 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter18 = defaultPrettyPrinter1.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter17);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter19 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter18);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec22 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory23 = new com.fasterxml.jackson.core.JsonFactory(objectCodec22);
        com.fasterxml.jackson.core.JsonParser.Feature feature24 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean25 = feature24.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory27 = jsonFactory23.configure(feature24, false);
        java.io.OutputStream outputStream28 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding29 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator30 = jsonFactory27.createGenerator(outputStream28, jsonEncoding29);
        jsonGenerator30.writeRaw("JSON");
        boolean boolean33 = jsonGenerator30.isClosed();
        jsonGenerator30.writeRaw('4');
        defaultPrettyPrinter21.writeObjectFieldValueSeparator(jsonGenerator30);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter37 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        defaultPrettyPrinter21.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter37);
        boolean boolean39 = nopIndenter37.isInline();
        defaultPrettyPrinter19.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter37);
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter18);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature24.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(jsonFactory27);
        org.junit.Assert.assertTrue("'" + jsonEncoding29 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding29.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.JsonFactory.Feature feature9 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean10 = jsonFactory5.isEnabled(feature9);
        java.io.Writer writer11 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator12 = jsonFactory5.createJsonGenerator(writer11);
        long[] longArray16 = new long[] { 100, 0, (byte) 0 };
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator12.writeArray(longArray16, 31, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 31");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature9.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(jsonGenerator12);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[100, 0, 0]");
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        com.fasterxml.jackson.core.json.DupDetector dupDetector0 = null;
        com.fasterxml.jackson.core.json.JsonWriteContext jsonWriteContext1 = com.fasterxml.jackson.core.json.JsonWriteContext.createRootContext(dupDetector0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec4 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory(objectCodec4);
        com.fasterxml.jackson.core.JsonParser.Feature feature6 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean7 = feature6.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory9 = jsonFactory5.configure(feature6, false);
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding11 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator12 = jsonFactory9.createGenerator(outputStream10, jsonEncoding11);
        jsonGenerator12.writeRaw("JSON");
        boolean boolean15 = jsonGenerator12.isClosed();
        jsonGenerator12.writeRaw('4');
        defaultPrettyPrinter3.writeObjectFieldValueSeparator(jsonGenerator12);
        com.fasterxml.jackson.core.ObjectCodec objectCodec19 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = new com.fasterxml.jackson.core.JsonFactory(objectCodec19);
        com.fasterxml.jackson.core.JsonParser.Feature feature21 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean22 = feature21.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory24 = jsonFactory20.configure(feature21, false);
        java.io.OutputStream outputStream25 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding26 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator27 = jsonFactory24.createGenerator(outputStream25, jsonEncoding26);
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature30 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean31 = serializedString29.equals((java.lang.Object) feature30);
        java.lang.String str32 = serializedString29.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator33 = jsonGenerator27.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString29);
        defaultPrettyPrinter3.beforeArrayValues(jsonGenerator27);
        jsonWriteContext1.setCurrentValue((java.lang.Object) jsonGenerator27);
        com.fasterxml.jackson.core.json.DupDetector dupDetector36 = jsonWriteContext1._dups;
        com.fasterxml.jackson.core.ObjectCodec objectCodec37 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = new com.fasterxml.jackson.core.JsonFactory(objectCodec37);
        com.fasterxml.jackson.core.io.SerializedString serializedString40 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray43 = new char[] { '4', '#' };
        int int45 = serializedString40.appendQuoted(charArray43, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser46 = jsonFactory38.createParser(charArray43);
        java.lang.String str47 = jsonFactory38.getFormatName();
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory38.createJsonParser("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.JsonToken jsonToken50 = jsonParser49.getLastClearedToken();
        com.fasterxml.jackson.core.FormatSchema formatSchema51 = null;
        boolean boolean52 = jsonParser49.canUseSchema(formatSchema51);
        jsonWriteContext1.setCurrentValue((java.lang.Object) boolean52);
        boolean boolean54 = jsonWriteContext1.inObject();
        com.fasterxml.jackson.core.json.JsonWriteContext jsonWriteContext55 = jsonWriteContext1.createChildArrayContext();
        java.lang.Object obj56 = jsonWriteContext1.getCurrentValue();
        org.junit.Assert.assertNotNull(jsonWriteContext1);
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature6.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(jsonFactory9);
        org.junit.Assert.assertTrue("'" + jsonEncoding11 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding11.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature21.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(jsonFactory24);
        org.junit.Assert.assertTrue("'" + jsonEncoding26 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding26.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator27);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature30.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator33);
        org.junit.Assert.assertNull(dupDetector36);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[4, #]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(jsonParser46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "JSON" + "'", str47, "JSON");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNull(jsonToken50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jsonWriteContext55);
        org.junit.Assert.assertEquals("'" + obj56 + "' != '" + false + "'", obj56, false);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        com.fasterxml.jackson.core.ObjectCodec objectCodec17 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = new com.fasterxml.jackson.core.JsonFactory(objectCodec17);
        com.fasterxml.jackson.core.JsonParser.Feature feature19 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean20 = feature19.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = jsonFactory18.configure(feature19, false);
        java.io.OutputStream outputStream23 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding24 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = jsonFactory22.createGenerator(outputStream23, jsonEncoding24);
        com.fasterxml.jackson.core.io.SerializedString serializedString27 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature28 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean29 = serializedString27.equals((java.lang.Object) feature28);
        java.lang.String str30 = serializedString27.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator31 = jsonGenerator25.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString27);
        defaultPrettyPrinter1.beforeArrayValues(jsonGenerator25);
        boolean boolean33 = jsonGenerator25.canWriteTypeId();
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature19.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(jsonFactory22);
        org.junit.Assert.assertTrue("'" + jsonEncoding24 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding24.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator25);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature28.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature11 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean12 = serializedString10.equals((java.lang.Object) feature11);
        java.lang.String str13 = serializedString10.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonGenerator8.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString10);
        jsonGenerator8.writeString("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator17 = jsonGenerator8.useDefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding18 = com.fasterxml.jackson.core.JsonEncoding.UTF32_BE;
        jsonGenerator8.setCurrentValue((java.lang.Object) jsonEncoding18);
        int int20 = jsonEncoding18.bits();
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature11.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertNotNull(jsonGenerator17);
        org.junit.Assert.assertTrue("'" + jsonEncoding18 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF32_BE + "'", jsonEncoding18.equals(com.fasterxml.jackson.core.JsonEncoding.UTF32_BE));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 32 + "'", int20 == 32);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        jsonGenerator8.writeRaw("JSON");
        jsonGenerator8.writeNumber("hi!");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonGenerator8.setHighestNonEscapedChar((-1));
        jsonGenerator8.writeRaw('4');
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNotNull(jsonGenerator14);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        defaultPrettyPrinter1.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonParser.Feature feature8 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean9 = feature8.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory7.configure(feature8, false);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding13 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory11.createGenerator(outputStream12, jsonEncoding13);
        jsonGenerator14.writeRaw("JSON");
        boolean boolean17 = jsonGenerator14.isClosed();
        jsonGenerator14.writeRaw('4');
        defaultPrettyPrinter5.writeObjectFieldValueSeparator(jsonGenerator14);
        com.fasterxml.jackson.core.ObjectCodec objectCodec21 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = new com.fasterxml.jackson.core.JsonFactory(objectCodec21);
        com.fasterxml.jackson.core.JsonParser.Feature feature23 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean24 = feature23.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory26 = jsonFactory22.configure(feature23, false);
        java.io.OutputStream outputStream27 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding28 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator29 = jsonFactory26.createGenerator(outputStream27, jsonEncoding28);
        com.fasterxml.jackson.core.io.SerializedString serializedString31 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature32 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean33 = serializedString31.equals((java.lang.Object) feature32);
        java.lang.String str34 = serializedString31.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonGenerator29.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString31);
        defaultPrettyPrinter5.beforeArrayValues(jsonGenerator29);
        defaultPrettyPrinter1.writeEndObject(jsonGenerator29, (int) (short) 10);
        com.fasterxml.jackson.core.FormatSchema formatSchema39 = null;
        boolean boolean40 = jsonGenerator29.canUseSchema(formatSchema39);
        com.fasterxml.jackson.core.FormatSchema formatSchema41 = jsonGenerator29.getSchema();
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature8.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + jsonEncoding13 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding13.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature23.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(jsonFactory26);
        org.junit.Assert.assertTrue("'" + jsonEncoding28 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding28.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator29);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature32.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(formatSchema41);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonParser.Feature feature8 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean9 = feature8.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory7.configure(feature8, false);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding13 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory11.createGenerator(outputStream12, jsonEncoding13);
        com.fasterxml.jackson.core.JsonFactory.Feature feature15 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean16 = jsonFactory11.isEnabled(feature15);
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = jsonFactory1.disable(feature15);
        com.fasterxml.jackson.core.JsonFactory.Feature feature18 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean19 = feature18.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = jsonFactory1.disable(feature18);
        java.io.File file21 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding22 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        boolean boolean23 = jsonEncoding22.isBigEndian();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonGenerator jsonGenerator24 = jsonFactory1.createGenerator(file21, jsonEncoding22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature8.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + jsonEncoding13 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding13.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature15.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(jsonFactory17);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature18.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(jsonFactory20);
        org.junit.Assert.assertTrue("'" + jsonEncoding22 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding22.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonParser.Feature feature8 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean9 = feature8.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory7.configure(feature8, false);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding13 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory11.createGenerator(outputStream12, jsonEncoding13);
        com.fasterxml.jackson.core.JsonFactory.Feature feature15 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean16 = jsonFactory11.isEnabled(feature15);
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = jsonFactory1.disable(feature15);
        com.fasterxml.jackson.core.JsonFactory.Feature feature18 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean19 = feature18.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = jsonFactory1.disable(feature18);
        java.io.OutputStream outputStream21 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding22 = com.fasterxml.jackson.core.JsonEncoding.UTF32_BE;
        int int23 = jsonEncoding22.bits();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonGenerator jsonGenerator24 = jsonFactory1.createGenerator(outputStream21, jsonEncoding22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature8.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + jsonEncoding13 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding13.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature15.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(jsonFactory17);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature18.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(jsonFactory20);
        org.junit.Assert.assertTrue("'" + jsonEncoding22 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF32_BE + "'", jsonEncoding22.equals(com.fasterxml.jackson.core.JsonEncoding.UTF32_BE));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 32 + "'", int23 == 32);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter1.createInstance();
        defaultPrettyPrinter2.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec5 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory6 = new com.fasterxml.jackson.core.JsonFactory(objectCodec5);
        com.fasterxml.jackson.core.JsonParser.Feature feature7 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean8 = feature7.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory10 = jsonFactory6.configure(feature7, false);
        java.io.OutputStream outputStream11 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding12 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator13 = jsonFactory10.createGenerator(outputStream11, jsonEncoding12);
        jsonGenerator13.writeRaw("JSON");
        defaultPrettyPrinter2.beforeObjectEntries(jsonGenerator13);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter18 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter19 = defaultPrettyPrinter18.createInstance();
        defaultPrettyPrinter19.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec22 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory23 = new com.fasterxml.jackson.core.JsonFactory(objectCodec22);
        com.fasterxml.jackson.core.JsonParser.Feature feature24 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean25 = feature24.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory27 = jsonFactory23.configure(feature24, false);
        java.io.OutputStream outputStream28 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding29 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator30 = jsonFactory27.createGenerator(outputStream28, jsonEncoding29);
        jsonGenerator30.writeRaw("JSON");
        defaultPrettyPrinter19.beforeObjectEntries(jsonGenerator30);
        defaultPrettyPrinter2.writeObjectEntrySeparator(jsonGenerator30);
        com.fasterxml.jackson.core.ObjectCodec objectCodec35 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory36 = new com.fasterxml.jackson.core.JsonFactory(objectCodec35);
        java.io.Writer writer37 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator38 = jsonFactory36.createJsonGenerator(writer37);
        com.fasterxml.jackson.core.ObjectCodec objectCodec39 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = new com.fasterxml.jackson.core.JsonFactory(objectCodec39);
        com.fasterxml.jackson.core.JsonParser.Feature feature41 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean42 = feature41.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory44 = jsonFactory40.configure(feature41, false);
        java.io.OutputStream outputStream45 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding46 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator47 = jsonFactory44.createGenerator(outputStream45, jsonEncoding46);
        jsonGenerator47.writeRaw("JSON");
        jsonGenerator47.writeNumber("hi!");
        int[] intArray52 = com.fasterxml.jackson.core.json.ReaderBasedJsonParser._icLatin1;
        jsonGenerator47.writeArray(intArray52, 64, 0);
        jsonGenerator38.writeArray(intArray52, 0, 32);
        defaultPrettyPrinter2.writeArrayValueSeparator(jsonGenerator38);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter2);
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature7.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(jsonFactory10);
        org.junit.Assert.assertTrue("'" + jsonEncoding12 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding12.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator13);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter19);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature24.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(jsonFactory27);
        org.junit.Assert.assertTrue("'" + jsonEncoding29 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding29.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator30);
        org.junit.Assert.assertNotNull(jsonGenerator38);
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature41.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(jsonFactory44);
        org.junit.Assert.assertTrue("'" + jsonEncoding46 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding46.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonParser.Feature feature8 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean9 = feature8.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory7.configure(feature8, false);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding13 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory11.createGenerator(outputStream12, jsonEncoding13);
        com.fasterxml.jackson.core.JsonFactory.Feature feature15 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean16 = jsonFactory11.isEnabled(feature15);
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = jsonFactory1.disable(feature15);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator18 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = jsonFactory1.setInputDecorator(inputDecorator18);
        com.fasterxml.jackson.core.JsonParser jsonParser21 = jsonFactory19.createParser("JSON");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = jsonParser21.nextFieldName();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')? at [Source: JSON; line: 1, column: 9]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature8.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + jsonEncoding13 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding13.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature15.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(jsonFactory17);
        org.junit.Assert.assertNotNull(jsonFactory19);
        org.junit.Assert.assertNotNull(jsonParser21);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator7 = jsonFactory1.createJsonGenerator(outputStream6);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertNotNull(jsonGenerator7);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        defaultPrettyPrinter1.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonParser.Feature feature8 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean9 = feature8.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory7.configure(feature8, false);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding13 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory11.createGenerator(outputStream12, jsonEncoding13);
        jsonGenerator14.writeRaw("JSON");
        boolean boolean17 = jsonGenerator14.isClosed();
        jsonGenerator14.writeRaw('4');
        defaultPrettyPrinter5.writeObjectFieldValueSeparator(jsonGenerator14);
        com.fasterxml.jackson.core.ObjectCodec objectCodec21 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = new com.fasterxml.jackson.core.JsonFactory(objectCodec21);
        com.fasterxml.jackson.core.JsonParser.Feature feature23 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean24 = feature23.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory26 = jsonFactory22.configure(feature23, false);
        java.io.OutputStream outputStream27 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding28 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator29 = jsonFactory26.createGenerator(outputStream27, jsonEncoding28);
        com.fasterxml.jackson.core.io.SerializedString serializedString31 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature32 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean33 = serializedString31.equals((java.lang.Object) feature32);
        java.lang.String str34 = serializedString31.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonGenerator29.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString31);
        defaultPrettyPrinter5.beforeArrayValues(jsonGenerator29);
        jsonGenerator29.writeNumber("");
        defaultPrettyPrinter1.writeArrayValueSeparator(jsonGenerator29);
        jsonGenerator29.writeFieldName("");
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature8.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + jsonEncoding13 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding13.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature23.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(jsonFactory26);
        org.junit.Assert.assertTrue("'" + jsonEncoding28 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding28.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator29);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature32.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator35);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        jsonGenerator8.writeRaw("JSON");
        boolean boolean11 = jsonGenerator8.isClosed();
        jsonGenerator8.writeNumber((float) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonGenerator jsonGenerator16 = jsonGenerator8.overrideFormatFeatures((int) (short) 10, 512);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No FormatFeatures defined for generator of type com.fasterxml.jackson.core.json.UTF8JsonGenerator");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        com.fasterxml.jackson.core.ObjectCodec objectCodec1 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory2 = new com.fasterxml.jackson.core.JsonFactory(objectCodec1);
        com.fasterxml.jackson.core.io.SerializedString serializedString4 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray7 = new char[] { '4', '#' };
        int int9 = serializedString4.appendQuoted(charArray7, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser10 = jsonFactory2.createParser(charArray7);
        boolean boolean12 = jsonParser10.hasTokenId(0);
        com.fasterxml.jackson.core.JsonParseException jsonParseException14 = new com.fasterxml.jackson.core.JsonParseException(jsonParser10, "com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter16 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec17 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = new com.fasterxml.jackson.core.JsonFactory(objectCodec17);
        com.fasterxml.jackson.core.JsonParser.Feature feature19 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean20 = feature19.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = jsonFactory18.configure(feature19, false);
        java.io.OutputStream outputStream23 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding24 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = jsonFactory22.createGenerator(outputStream23, jsonEncoding24);
        jsonGenerator25.writeRaw("JSON");
        defaultPrettyPrinter16.writeEndObject(jsonGenerator25, 56320);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator31 = jsonGenerator25.setFeatureMask((int) (short) -1);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException32 = new com.fasterxml.jackson.core.JsonGenerationException("com.fasterxml.jackson.core.JsonGenerationException: N/A", (java.lang.Throwable) jsonParseException14, jsonGenerator31);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter34 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec35 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory36 = new com.fasterxml.jackson.core.JsonFactory(objectCodec35);
        com.fasterxml.jackson.core.JsonParser.Feature feature37 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean38 = feature37.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory36.configure(feature37, false);
        java.io.OutputStream outputStream41 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding42 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator43 = jsonFactory40.createGenerator(outputStream41, jsonEncoding42);
        jsonGenerator43.writeRaw("JSON");
        boolean boolean46 = jsonGenerator43.isClosed();
        jsonGenerator43.writeRaw('4');
        defaultPrettyPrinter34.writeObjectFieldValueSeparator(jsonGenerator43);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter50 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter51 = defaultPrettyPrinter34.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter50);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter53 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        defaultPrettyPrinter53.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter57 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec58 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory59 = new com.fasterxml.jackson.core.JsonFactory(objectCodec58);
        com.fasterxml.jackson.core.JsonParser.Feature feature60 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean61 = feature60.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory63 = jsonFactory59.configure(feature60, false);
        java.io.OutputStream outputStream64 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding65 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator66 = jsonFactory63.createGenerator(outputStream64, jsonEncoding65);
        jsonGenerator66.writeRaw("JSON");
        boolean boolean69 = jsonGenerator66.isClosed();
        jsonGenerator66.writeRaw('4');
        defaultPrettyPrinter57.writeObjectFieldValueSeparator(jsonGenerator66);
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory74 = new com.fasterxml.jackson.core.JsonFactory(objectCodec73);
        com.fasterxml.jackson.core.JsonParser.Feature feature75 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean76 = feature75.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory78 = jsonFactory74.configure(feature75, false);
        java.io.OutputStream outputStream79 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding80 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator81 = jsonFactory78.createGenerator(outputStream79, jsonEncoding80);
        com.fasterxml.jackson.core.io.SerializedString serializedString83 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature84 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean85 = serializedString83.equals((java.lang.Object) feature84);
        java.lang.String str86 = serializedString83.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator87 = jsonGenerator81.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString83);
        defaultPrettyPrinter57.beforeArrayValues(jsonGenerator81);
        defaultPrettyPrinter53.writeEndObject(jsonGenerator81, (int) (short) 10);
        defaultPrettyPrinter51.writeArrayValueSeparator(jsonGenerator81);
        java.math.BigInteger bigInteger92 = null;
        jsonGenerator81.writeNumber(bigInteger92);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException94 = jsonGenerationException32.withGenerator(jsonGenerator81);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator95 = jsonGenerationException94.getProcessor();
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator95.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4, #]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(jsonParser10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature19.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(jsonFactory22);
        org.junit.Assert.assertTrue("'" + jsonEncoding24 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding24.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator25);
        org.junit.Assert.assertNotNull(jsonGenerator31);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature37.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertTrue("'" + jsonEncoding42 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding42.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter51);
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature60.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(jsonFactory63);
        org.junit.Assert.assertTrue("'" + jsonEncoding65 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding65.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + feature75 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature75.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(jsonFactory78);
        org.junit.Assert.assertTrue("'" + jsonEncoding80 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding80.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator81);
        org.junit.Assert.assertTrue("'" + feature84 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature84.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator87);
        org.junit.Assert.assertNotNull(jsonGenerationException94);
        org.junit.Assert.assertNotNull(jsonGenerator95);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray6 = new char[] { '4', '#' };
        int int8 = serializedString3.appendQuoted(charArray6, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory1.createParser(charArray6);
        java.lang.String str10 = jsonFactory1.getFormatName();
        java.io.Writer writer11 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator12 = jsonFactory1.createJsonGenerator(writer11);
        java.io.OutputStream outputStream13 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory1.createGenerator(outputStream13);
        jsonGenerator14.writeRawValue("[com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: size=0, hashSize=0, 0/0/0/0 pri/sec/ter/spill (=0), total:0]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "JSON" + "'", str10, "JSON");
        org.junit.Assert.assertNotNull(jsonGenerator12);
        org.junit.Assert.assertNotNull(jsonGenerator14);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        jsonGenerator8.writeRaw("JSON");
        jsonGenerator8.writeNumber("hi!");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonGenerator8.setHighestNonEscapedChar((-1));
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator15 = jsonGenerator8.useDefaultPrettyPrinter();
        java.math.BigDecimal bigDecimal17 = null;
        jsonGenerator8.writeNumberField("UTF-8", bigDecimal17);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertNotNull(jsonGenerator15);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("");
        jsonGenerator8.writeRawValue((com.fasterxml.jackson.core.SerializableString) serializedString10);
        java.math.BigDecimal bigDecimal13 = null;
        jsonGenerator8.writeNumberField("", bigDecimal13);
        boolean boolean15 = jsonGenerator8.isClosed();
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        java.io.Writer writer2 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator3 = jsonFactory1.createJsonGenerator(writer2);
        com.fasterxml.jackson.core.ObjectCodec objectCodec4 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory(objectCodec4);
        com.fasterxml.jackson.core.JsonParser.Feature feature6 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean7 = feature6.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory9 = jsonFactory5.configure(feature6, false);
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding11 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator12 = jsonFactory9.createGenerator(outputStream10, jsonEncoding11);
        jsonGenerator12.writeRaw("JSON");
        jsonGenerator12.writeNumber("hi!");
        int[] intArray17 = com.fasterxml.jackson.core.json.ReaderBasedJsonParser._icLatin1;
        jsonGenerator12.writeArray(intArray17, 64, 0);
        jsonGenerator3.writeArray(intArray17, 0, 32);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator3.writeEndObject();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: Current context not an object but ROOT");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonGenerator3);
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature6.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(jsonFactory9);
        org.junit.Assert.assertTrue("'" + jsonEncoding11 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding11.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator12);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter17 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter18 = defaultPrettyPrinter1.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter17);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator19 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter1.beforeObjectEntries(jsonGenerator19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter18);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.JsonFactory.Feature feature9 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean10 = jsonFactory5.isEnabled(feature9);
        java.io.Writer writer11 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator12 = jsonFactory5.createJsonGenerator(writer11);
        java.io.Reader reader13 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser14 = jsonFactory5.createJsonParser(reader13);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = jsonParser14.getDoubleValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature9.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(jsonGenerator12);
        org.junit.Assert.assertNotNull(jsonParser14);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature> wildcardClass9 = jsonFactory5.getFormatWriteFeatureType();
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = new com.fasterxml.jackson.core.JsonFactory(objectCodec10);
        com.fasterxml.jackson.core.JsonParser.Feature feature12 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean13 = feature12.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory15 = jsonFactory11.configure(feature12, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec16 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = new com.fasterxml.jackson.core.JsonFactory(objectCodec16);
        com.fasterxml.jackson.core.JsonParser.Feature feature18 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean19 = feature18.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory21 = jsonFactory17.configure(feature18, false);
        java.io.OutputStream outputStream22 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding23 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator24 = jsonFactory21.createGenerator(outputStream22, jsonEncoding23);
        com.fasterxml.jackson.core.JsonFactory.Feature feature25 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean26 = jsonFactory21.isEnabled(feature25);
        com.fasterxml.jackson.core.JsonFactory jsonFactory27 = jsonFactory11.disable(feature25);
        boolean boolean28 = jsonFactory5.isEnabled(feature25);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature29 = com.fasterxml.jackson.core.JsonGenerator.Feature.IGNORE_UNKNOWN;
        boolean boolean31 = feature29.enabledIn((int) '4');
        int int32 = feature29.getMask();
        com.fasterxml.jackson.core.JsonFactory jsonFactory33 = jsonFactory5.disable(feature29);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature12.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(jsonFactory15);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature18.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(jsonFactory21);
        org.junit.Assert.assertTrue("'" + jsonEncoding23 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding23.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator24);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature25.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(jsonFactory27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.IGNORE_UNKNOWN + "'", feature29.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.IGNORE_UNKNOWN));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 512 + "'", int32 == 512);
        org.junit.Assert.assertNotNull(jsonFactory33);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        com.fasterxml.jackson.core.json.DupDetector dupDetector0 = null;
        com.fasterxml.jackson.core.json.JsonWriteContext jsonWriteContext1 = com.fasterxml.jackson.core.json.JsonWriteContext.createRootContext(dupDetector0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec4 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory(objectCodec4);
        com.fasterxml.jackson.core.JsonParser.Feature feature6 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean7 = feature6.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory9 = jsonFactory5.configure(feature6, false);
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding11 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator12 = jsonFactory9.createGenerator(outputStream10, jsonEncoding11);
        jsonGenerator12.writeRaw("JSON");
        boolean boolean15 = jsonGenerator12.isClosed();
        jsonGenerator12.writeRaw('4');
        defaultPrettyPrinter3.writeObjectFieldValueSeparator(jsonGenerator12);
        com.fasterxml.jackson.core.ObjectCodec objectCodec19 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = new com.fasterxml.jackson.core.JsonFactory(objectCodec19);
        com.fasterxml.jackson.core.JsonParser.Feature feature21 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean22 = feature21.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory24 = jsonFactory20.configure(feature21, false);
        java.io.OutputStream outputStream25 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding26 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator27 = jsonFactory24.createGenerator(outputStream25, jsonEncoding26);
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature30 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean31 = serializedString29.equals((java.lang.Object) feature30);
        java.lang.String str32 = serializedString29.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator33 = jsonGenerator27.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString29);
        defaultPrettyPrinter3.beforeArrayValues(jsonGenerator27);
        jsonWriteContext1.setCurrentValue((java.lang.Object) jsonGenerator27);
        com.fasterxml.jackson.core.json.DupDetector dupDetector36 = jsonWriteContext1._dups;
        com.fasterxml.jackson.core.ObjectCodec objectCodec37 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = new com.fasterxml.jackson.core.JsonFactory(objectCodec37);
        com.fasterxml.jackson.core.io.SerializedString serializedString40 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray43 = new char[] { '4', '#' };
        int int45 = serializedString40.appendQuoted(charArray43, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser46 = jsonFactory38.createParser(charArray43);
        java.lang.String str47 = jsonFactory38.getFormatName();
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory38.createJsonParser("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.JsonToken jsonToken50 = jsonParser49.getLastClearedToken();
        com.fasterxml.jackson.core.FormatSchema formatSchema51 = null;
        boolean boolean52 = jsonParser49.canUseSchema(formatSchema51);
        jsonWriteContext1.setCurrentValue((java.lang.Object) boolean52);
        com.fasterxml.jackson.core.json.DupDetector dupDetector54 = null;
        com.fasterxml.jackson.core.json.JsonWriteContext jsonWriteContext55 = com.fasterxml.jackson.core.json.JsonWriteContext.createRootContext(dupDetector54);
        java.lang.Object obj56 = jsonWriteContext55.getCurrentValue();
        com.fasterxml.jackson.core.json.DupDetector dupDetector57 = null;
        com.fasterxml.jackson.core.json.JsonWriteContext jsonWriteContext58 = jsonWriteContext55.withDupDetector(dupDetector57);
        jsonWriteContext1.setCurrentValue((java.lang.Object) dupDetector57);
        org.junit.Assert.assertNotNull(jsonWriteContext1);
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature6.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(jsonFactory9);
        org.junit.Assert.assertTrue("'" + jsonEncoding11 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding11.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature21.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(jsonFactory24);
        org.junit.Assert.assertTrue("'" + jsonEncoding26 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding26.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator27);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature30.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator33);
        org.junit.Assert.assertNull(dupDetector36);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[4, #]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(jsonParser46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "JSON" + "'", str47, "JSON");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNull(jsonToken50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jsonWriteContext55);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(jsonWriteContext58);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.JsonFactory.Feature feature9 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean10 = jsonFactory5.isEnabled(feature9);
        java.io.Writer writer11 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator12 = jsonFactory5.createJsonGenerator(writer11);
        java.io.Reader reader13 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser14 = jsonFactory5.createJsonParser(reader13);
        java.io.File file15 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser16 = jsonFactory5.createJsonParser(file15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature9.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(jsonGenerator12);
        org.junit.Assert.assertNotNull(jsonParser14);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec4 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory(objectCodec4);
        com.fasterxml.jackson.core.JsonParser.Feature feature6 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean7 = feature6.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory9 = jsonFactory5.configure(feature6, false);
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding11 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator12 = jsonFactory9.createGenerator(outputStream10, jsonEncoding11);
        jsonGenerator12.writeRaw("JSON");
        boolean boolean15 = jsonGenerator12.isClosed();
        jsonGenerator12.writeRaw('4');
        defaultPrettyPrinter3.writeObjectFieldValueSeparator(jsonGenerator12);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter19 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter20 = defaultPrettyPrinter3.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter19);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec23 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory24 = new com.fasterxml.jackson.core.JsonFactory(objectCodec23);
        com.fasterxml.jackson.core.JsonParser.Feature feature25 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean26 = feature25.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory28 = jsonFactory24.configure(feature25, false);
        java.io.OutputStream outputStream29 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding30 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator31 = jsonFactory28.createGenerator(outputStream29, jsonEncoding30);
        jsonGenerator31.writeRaw("JSON");
        defaultPrettyPrinter22.writeEndObject(jsonGenerator31, 56320);
        com.fasterxml.jackson.core.io.SerializedString serializedString38 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray41 = new char[] { '4', '#' };
        int int43 = serializedString38.appendQuoted(charArray41, (int) (byte) 10);
        byte[] byteArray44 = new byte[] {};
        int int46 = serializedString38.appendUnquotedUTF8(byteArray44, (int) (short) 1);
        jsonGenerator31.writeBinaryField("", byteArray44);
        nopIndenter19.writeIndentation(jsonGenerator31, (int) '#');
        defaultPrettyPrinter1.writeStartObject(jsonGenerator31);
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature6.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(jsonFactory9);
        org.junit.Assert.assertTrue("'" + jsonEncoding11 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding11.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter20);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature25.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(jsonFactory28);
        org.junit.Assert.assertTrue("'" + jsonEncoding30 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding30.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator31);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[4, #]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature> wildcardClass9 = jsonFactory5.getFormatWriteFeatureType();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes10 = jsonFactory5.getCharacterEscapes();
        com.fasterxml.jackson.core.JsonParser.Feature feature11 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory12 = jsonFactory5.enable(feature11);
        java.io.Writer writer13 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory12.createGenerator(writer13);
        java.io.Reader reader15 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser16 = jsonFactory12.createParser(reader15);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType17 = jsonParser16.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(characterEscapes10);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES + "'", feature11.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES));
        org.junit.Assert.assertNotNull(jsonFactory12);
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertNotNull(jsonParser16);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonParser.Feature feature8 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean9 = feature8.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory7.configure(feature8, false);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding13 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory11.createGenerator(outputStream12, jsonEncoding13);
        com.fasterxml.jackson.core.JsonFactory.Feature feature15 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean16 = jsonFactory11.isEnabled(feature15);
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = jsonFactory1.disable(feature15);
        com.fasterxml.jackson.core.JsonFactory.Feature feature18 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean19 = feature18.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = jsonFactory1.disable(feature18);
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = jsonFactory20.setRootValueSeparator("");
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser24 = jsonFactory22.createParser(reader23);
        // The following exception was thrown during execution in test generation
        try {
            byte byte25 = jsonParser24.getByteValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature8.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + jsonEncoding13 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding13.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature15.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(jsonFactory17);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature18.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(jsonFactory20);
        org.junit.Assert.assertNotNull(jsonFactory22);
        org.junit.Assert.assertNotNull(jsonParser24);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec3 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = new com.fasterxml.jackson.core.JsonFactory(objectCodec3);
        com.fasterxml.jackson.core.io.SerializedString serializedString6 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray9 = new char[] { '4', '#' };
        int int11 = serializedString6.appendQuoted(charArray9, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonFactory4.createParser(charArray9);
        boolean boolean14 = jsonParser12.hasTokenId(0);
        com.fasterxml.jackson.core.JsonLocation jsonLocation16 = null;
        com.fasterxml.jackson.core.JsonLocation jsonLocation18 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException19 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation18);
        java.lang.Throwable throwable20 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator21 = null;
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException22 = new com.fasterxml.jackson.core.JsonGenerationException(throwable20, jsonGenerator21);
        jsonParseException19.addSuppressed((java.lang.Throwable) jsonGenerationException22);
        com.fasterxml.jackson.core.JsonParseException jsonParseException24 = new com.fasterxml.jackson.core.JsonParseException(jsonParser12, "com.fasterxml.jackson.core.JsonGenerationException: N/A", jsonLocation16, (java.lang.Throwable) jsonParseException19);
        com.fasterxml.jackson.core.JsonParseException jsonParseException25 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation2, (java.lang.Throwable) jsonParseException24);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException26 = new com.fasterxml.jackson.core.JsonGenerationException((java.lang.Throwable) jsonParseException24);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException27 = new com.fasterxml.jackson.core.JsonGenerationException((java.lang.Throwable) jsonGenerationException26);
        com.fasterxml.jackson.core.ObjectCodec objectCodec28 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory29 = new com.fasterxml.jackson.core.JsonFactory(objectCodec28);
        com.fasterxml.jackson.core.JsonParser.Feature feature30 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean31 = feature30.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory33 = jsonFactory29.configure(feature30, false);
        java.io.OutputStream outputStream34 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding35 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory33.createGenerator(outputStream34, jsonEncoding35);
        com.fasterxml.jackson.core.io.SerializedString serializedString38 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature39 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean40 = serializedString38.equals((java.lang.Object) feature39);
        java.lang.String str41 = serializedString38.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator42 = jsonGenerator36.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString38);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException43 = new com.fasterxml.jackson.core.JsonGenerationException("com.fasterxml.jackson.core.JsonGenerationException: N/A", (java.lang.Throwable) jsonGenerationException26, jsonGenerator36);
        jsonGenerator36.writeNumber(0);
        java.io.InputStream inputStream46 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int48 = jsonGenerator36.writeBinary(inputStream46, 56320);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4, #]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(jsonParser12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature30.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(jsonFactory33);
        org.junit.Assert.assertTrue("'" + jsonEncoding35 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding35.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature39.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator42);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter1.createInstance();
        com.fasterxml.jackson.core.io.SerializedString serializedString4 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature5 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean6 = serializedString4.equals((java.lang.Object) feature5);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter7 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, (com.fasterxml.jackson.core.SerializableString) serializedString4);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter9 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = new com.fasterxml.jackson.core.JsonFactory(objectCodec10);
        com.fasterxml.jackson.core.JsonParser.Feature feature12 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean13 = feature12.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory15 = jsonFactory11.configure(feature12, false);
        java.io.OutputStream outputStream16 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding17 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator18 = jsonFactory15.createGenerator(outputStream16, jsonEncoding17);
        jsonGenerator18.writeRaw("JSON");
        defaultPrettyPrinter9.writeEndObject(jsonGenerator18, 56320);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator24 = jsonGenerator18.setFeatureMask((int) (short) -1);
        com.fasterxml.jackson.core.io.SerializedString serializedString26 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray29 = new char[] { '4', '#' };
        int int31 = serializedString26.appendQuoted(charArray29, (int) (byte) 10);
        char[] charArray32 = serializedString26.asQuotedChars();
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10 };
        int int37 = serializedString26.appendUnquotedUTF8(byteArray35, 1);
        jsonGenerator24.writeString((com.fasterxml.jackson.core.SerializableString) serializedString26);
        defaultPrettyPrinter7.beforeObjectEntries(jsonGenerator24);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter2);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature5.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature12.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(jsonFactory15);
        org.junit.Assert.assertTrue("'" + jsonEncoding17 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding17.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator18);
        org.junit.Assert.assertNotNull(jsonGenerator24);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[4, #]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[h, i, !]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 10]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonParser.Feature feature8 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean9 = feature8.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory7.configure(feature8, false);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding13 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory11.createGenerator(outputStream12, jsonEncoding13);
        com.fasterxml.jackson.core.JsonFactory.Feature feature15 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean16 = jsonFactory11.isEnabled(feature15);
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = jsonFactory1.disable(feature15);
        com.fasterxml.jackson.core.JsonFactory.Feature feature18 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean19 = feature18.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = jsonFactory1.disable(feature18);
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = jsonFactory20.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray27 = new char[] { '4', '#' };
        int int29 = serializedString24.appendQuoted(charArray27, (int) (byte) 10);
        char[] charArray30 = serializedString24.asQuotedChars();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 10 };
        int int35 = serializedString24.appendUnquotedUTF8(byteArray33, 1);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonFactory20.createJsonParser(byteArray33, (int) (byte) 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature8.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + jsonEncoding13 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding13.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature15.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(jsonFactory17);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature18.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(jsonFactory20);
        org.junit.Assert.assertNotNull(jsonFactory22);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[4, #]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[h, i, !]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonParser.Feature feature8 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean9 = feature8.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory7.configure(feature8, false);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding13 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory11.createGenerator(outputStream12, jsonEncoding13);
        com.fasterxml.jackson.core.JsonFactory.Feature feature15 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean16 = jsonFactory11.isEnabled(feature15);
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = jsonFactory1.disable(feature15);
        com.fasterxml.jackson.core.JsonFactory.Feature feature18 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean19 = feature18.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = jsonFactory1.disable(feature18);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature21 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
        com.fasterxml.jackson.core.JsonFactory jsonFactory23 = jsonFactory20.configure(feature21, false);
        java.io.Reader reader24 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser25 = jsonFactory20.createParser(reader24);
        java.io.OutputStream outputStream26 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int27 = jsonParser25.readBinaryValue(outputStream26);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature8.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + jsonEncoding13 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding13.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature15.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(jsonFactory17);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature18.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(jsonFactory20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN + "'", feature21.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN));
        org.junit.Assert.assertNotNull(jsonFactory23);
        org.junit.Assert.assertNotNull(jsonParser25);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonParser.Feature feature8 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean9 = feature8.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory7.configure(feature8, false);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding13 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory11.createGenerator(outputStream12, jsonEncoding13);
        com.fasterxml.jackson.core.JsonFactory.Feature feature15 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean16 = jsonFactory11.isEnabled(feature15);
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = jsonFactory1.disable(feature15);
        com.fasterxml.jackson.core.JsonFactory.Feature feature18 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean19 = feature18.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = jsonFactory1.disable(feature18);
        java.io.File file21 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser22 = jsonFactory1.createJsonParser(file21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature8.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + jsonEncoding13 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding13.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature15.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(jsonFactory17);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature18.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(jsonFactory20);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature11 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean12 = serializedString10.equals((java.lang.Object) feature11);
        java.lang.String str13 = serializedString10.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonGenerator8.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString10);
        jsonGenerator8.writeString("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator17 = jsonGenerator8.useDefaultPrettyPrinter();
        boolean boolean18 = jsonGenerator8.canWriteFormattedNumbers();
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray23 = new char[] { '4', '#' };
        int int25 = serializedString20.appendQuoted(charArray23, (int) (byte) 10);
        jsonGenerator8.writeString((com.fasterxml.jackson.core.SerializableString) serializedString20);
        java.io.OutputStream outputStream27 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int28 = serializedString20.writeQuotedUTF8(outputStream27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature11.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertNotNull(jsonGenerator17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature> wildcardClass9 = jsonFactory5.getFormatWriteFeatureType();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes10 = jsonFactory5.getCharacterEscapes();
        com.fasterxml.jackson.core.JsonParser.Feature feature11 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory12 = jsonFactory5.enable(feature11);
        java.io.Writer writer13 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory12.createGenerator(writer13);
        jsonGenerator14.writeObjectFieldStart("");
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(characterEscapes10);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES + "'", feature11.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES));
        org.junit.Assert.assertNotNull(jsonFactory12);
        org.junit.Assert.assertNotNull(jsonGenerator14);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter17 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter18 = defaultPrettyPrinter1.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter17);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter20 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        defaultPrettyPrinter20.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec25 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory26 = new com.fasterxml.jackson.core.JsonFactory(objectCodec25);
        com.fasterxml.jackson.core.JsonParser.Feature feature27 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean28 = feature27.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = jsonFactory26.configure(feature27, false);
        java.io.OutputStream outputStream31 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding32 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator33 = jsonFactory30.createGenerator(outputStream31, jsonEncoding32);
        jsonGenerator33.writeRaw("JSON");
        boolean boolean36 = jsonGenerator33.isClosed();
        jsonGenerator33.writeRaw('4');
        defaultPrettyPrinter24.writeObjectFieldValueSeparator(jsonGenerator33);
        com.fasterxml.jackson.core.ObjectCodec objectCodec40 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = new com.fasterxml.jackson.core.JsonFactory(objectCodec40);
        com.fasterxml.jackson.core.JsonParser.Feature feature42 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean43 = feature42.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory45 = jsonFactory41.configure(feature42, false);
        java.io.OutputStream outputStream46 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding47 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator48 = jsonFactory45.createGenerator(outputStream46, jsonEncoding47);
        com.fasterxml.jackson.core.io.SerializedString serializedString50 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature51 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean52 = serializedString50.equals((java.lang.Object) feature51);
        java.lang.String str53 = serializedString50.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator54 = jsonGenerator48.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString50);
        defaultPrettyPrinter24.beforeArrayValues(jsonGenerator48);
        defaultPrettyPrinter20.writeEndObject(jsonGenerator48, (int) (short) 10);
        defaultPrettyPrinter18.writeArrayValueSeparator(jsonGenerator48);
        com.fasterxml.jackson.core.ObjectCodec objectCodec59 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory60 = new com.fasterxml.jackson.core.JsonFactory(objectCodec59);
        com.fasterxml.jackson.core.JsonParser.Feature feature61 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean62 = feature61.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory64 = jsonFactory60.configure(feature61, false);
        java.io.OutputStream outputStream65 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding66 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator67 = jsonFactory64.createGenerator(outputStream65, jsonEncoding66);
        com.fasterxml.jackson.core.io.SerializedString serializedString69 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature70 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean71 = serializedString69.equals((java.lang.Object) feature70);
        java.lang.String str72 = serializedString69.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = jsonGenerator67.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString69);
        jsonGenerator67.writeString("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        jsonGenerator67.writeObjectFieldStart("[com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: size=0, hashSize=0, 0/0/0/0 pri/sec/ter/spill (=0), total:0]");
        defaultPrettyPrinter18.writeObjectFieldValueSeparator(jsonGenerator67);
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter18);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature27.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(jsonFactory30);
        org.junit.Assert.assertTrue("'" + jsonEncoding32 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding32.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature42.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(jsonFactory45);
        org.junit.Assert.assertTrue("'" + jsonEncoding47 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding47.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator48);
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature51.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator54);
        org.junit.Assert.assertTrue("'" + feature61 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature61.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(jsonFactory64);
        org.junit.Assert.assertTrue("'" + jsonEncoding66 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding66.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator67);
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature70.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator73);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature> wildcardClass9 = jsonFactory5.getFormatReadFeatureType();
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNull(wildcardClass9);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        java.io.Writer writer2 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator3 = jsonFactory1.createJsonGenerator(writer2);
        com.fasterxml.jackson.core.io.OutputDecorator outputDecorator4 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.setOutputDecorator(outputDecorator4);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = jsonFactory5._getBufferRecycler();
        byte[] byteArray8 = null;
        bufferRecycler6.releaseByteBuffer(0, byteArray8);
        com.fasterxml.jackson.core.ObjectCodec objectCodec11 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory12 = new com.fasterxml.jackson.core.JsonFactory(objectCodec11);
        com.fasterxml.jackson.core.JsonParser.Feature feature13 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean14 = feature13.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory16 = jsonFactory12.configure(feature13, false);
        java.io.OutputStream outputStream17 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding18 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator19 = jsonFactory16.createGenerator(outputStream17, jsonEncoding18);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature22 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean23 = serializedString21.equals((java.lang.Object) feature22);
        java.lang.String str24 = serializedString21.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = jsonGenerator19.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString21);
        jsonGenerator19.writeString("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator28 = jsonGenerator19.useDefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding29 = com.fasterxml.jackson.core.JsonEncoding.UTF32_BE;
        jsonGenerator19.setCurrentValue((java.lang.Object) jsonEncoding29);
        jsonGenerator19.writeNumber("[");
        com.fasterxml.jackson.core.ObjectCodec objectCodec34 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory35 = new com.fasterxml.jackson.core.JsonFactory(objectCodec34);
        com.fasterxml.jackson.core.JsonParser.Feature feature36 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean37 = feature36.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory39 = jsonFactory35.configure(feature36, false);
        java.io.OutputStream outputStream40 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding41 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator42 = jsonFactory39.createGenerator(outputStream40, jsonEncoding41);
        com.fasterxml.jackson.core.JsonFactory.Feature feature43 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean44 = jsonFactory39.isEnabled(feature43);
        java.io.Writer writer45 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator46 = jsonFactory39.createJsonGenerator(writer45);
        com.fasterxml.jackson.core.ObjectCodec objectCodec47 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory48 = new com.fasterxml.jackson.core.JsonFactory(objectCodec47);
        com.fasterxml.jackson.core.JsonParser.Feature feature49 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean50 = feature49.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory52 = jsonFactory48.configure(feature49, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec53 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory54 = new com.fasterxml.jackson.core.JsonFactory(objectCodec53);
        com.fasterxml.jackson.core.JsonParser.Feature feature55 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean56 = feature55.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory58 = jsonFactory54.configure(feature55, false);
        java.io.OutputStream outputStream59 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding60 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator61 = jsonFactory58.createGenerator(outputStream59, jsonEncoding60);
        com.fasterxml.jackson.core.JsonFactory.Feature feature62 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean63 = jsonFactory58.isEnabled(feature62);
        com.fasterxml.jackson.core.JsonFactory jsonFactory64 = jsonFactory48.disable(feature62);
        com.fasterxml.jackson.core.JsonFactory jsonFactory65 = jsonFactory39.disable(feature62);
        com.fasterxml.jackson.core.io.SerializedString serializedString67 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        java.lang.String str68 = serializedString67.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray73 = new char[] { '4', '#' };
        int int75 = serializedString70.appendQuoted(charArray73, (int) (byte) 10);
        byte[] byteArray76 = new byte[] {};
        int int78 = serializedString70.appendUnquotedUTF8(byteArray76, (int) (short) 1);
        int int80 = serializedString67.appendQuotedUTF8(byteArray76, 8);
        com.fasterxml.jackson.core.JsonParser jsonParser81 = jsonFactory39.createJsonParser(byteArray76);
        jsonGenerator19.writeBinaryField("hi!", byteArray76);
        // The following exception was thrown during execution in test generation
        try {
            bufferRecycler6.releaseByteBuffer((-1700598963), byteArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1700598963");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonGenerator3);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertNotNull(bufferRecycler6);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature13.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(jsonFactory16);
        org.junit.Assert.assertTrue("'" + jsonEncoding18 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding18.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator19);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature22.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator25);
        org.junit.Assert.assertNotNull(jsonGenerator28);
        org.junit.Assert.assertTrue("'" + jsonEncoding29 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF32_BE + "'", jsonEncoding29.equals(com.fasterxml.jackson.core.JsonEncoding.UTF32_BE));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature36.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(jsonFactory39);
        org.junit.Assert.assertTrue("'" + jsonEncoding41 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding41.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator42);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature43.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(jsonGenerator46);
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature49.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(jsonFactory52);
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature55.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(jsonFactory58);
        org.junit.Assert.assertTrue("'" + jsonEncoding60 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding60.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator61);
        org.junit.Assert.assertTrue("'" + feature62 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature62.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(jsonFactory64);
        org.junit.Assert.assertNotNull(jsonFactory65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[4, #]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(jsonParser81);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature11 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean12 = serializedString10.equals((java.lang.Object) feature11);
        java.lang.String str13 = serializedString10.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonGenerator8.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString10);
        jsonGenerator8.writeString("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator17 = jsonGenerator8.useDefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding18 = com.fasterxml.jackson.core.JsonEncoding.UTF32_BE;
        jsonGenerator8.setCurrentValue((java.lang.Object) jsonEncoding18);
        jsonGenerator8.writeNumber("[");
        java.lang.Object obj22 = jsonGenerator8.getOutputTarget();
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature11.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertNotNull(jsonGenerator17);
        org.junit.Assert.assertTrue("'" + jsonEncoding18 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF32_BE + "'", jsonEncoding18.equals(com.fasterxml.jackson.core.JsonEncoding.UTF32_BE));
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter();
        com.fasterxml.jackson.core.ObjectCodec objectCodec1 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory2 = new com.fasterxml.jackson.core.JsonFactory(objectCodec1);
        com.fasterxml.jackson.core.JsonParser.Feature feature3 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean4 = feature3.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory6 = jsonFactory2.configure(feature3, false);
        java.io.OutputStream outputStream7 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding8 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator9 = jsonFactory6.createGenerator(outputStream7, jsonEncoding8);
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("");
        jsonGenerator9.writeRawValue((com.fasterxml.jackson.core.SerializableString) serializedString11);
        java.math.BigDecimal bigDecimal14 = null;
        jsonGenerator9.writeNumberField("", bigDecimal14);
        fixedSpaceIndenter0.writeIndentation(jsonGenerator9, 0);
        boolean boolean18 = fixedSpaceIndenter0.isInline();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter20 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = defaultPrettyPrinter20.createInstance();
        defaultPrettyPrinter21.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory25 = new com.fasterxml.jackson.core.JsonFactory(objectCodec24);
        com.fasterxml.jackson.core.JsonParser.Feature feature26 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean27 = feature26.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory29 = jsonFactory25.configure(feature26, false);
        java.io.OutputStream outputStream30 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding31 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory29.createGenerator(outputStream30, jsonEncoding31);
        jsonGenerator32.writeRaw("JSON");
        defaultPrettyPrinter21.beforeObjectEntries(jsonGenerator32);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter37 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter38 = defaultPrettyPrinter37.createInstance();
        defaultPrettyPrinter38.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec41 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory42 = new com.fasterxml.jackson.core.JsonFactory(objectCodec41);
        com.fasterxml.jackson.core.JsonParser.Feature feature43 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean44 = feature43.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory46 = jsonFactory42.configure(feature43, false);
        java.io.OutputStream outputStream47 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding48 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator49 = jsonFactory46.createGenerator(outputStream47, jsonEncoding48);
        jsonGenerator49.writeRaw("JSON");
        defaultPrettyPrinter38.beforeObjectEntries(jsonGenerator49);
        defaultPrettyPrinter21.writeObjectEntrySeparator(jsonGenerator49);
        boolean boolean54 = jsonGenerator49.isClosed();
        fixedSpaceIndenter0.writeIndentation(jsonGenerator49, (int) ' ');
        jsonGenerator49.writeBoolean(false);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature3.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(jsonFactory6);
        org.junit.Assert.assertTrue("'" + jsonEncoding8 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding8.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator9);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter21);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature26.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(jsonFactory29);
        org.junit.Assert.assertTrue("'" + jsonEncoding31 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding31.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter38);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature43.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(jsonFactory46);
        org.junit.Assert.assertTrue("'" + jsonEncoding48 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding48.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonParser.Feature feature8 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean9 = feature8.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory7.configure(feature8, false);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding13 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory11.createGenerator(outputStream12, jsonEncoding13);
        com.fasterxml.jackson.core.JsonFactory.Feature feature15 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean16 = jsonFactory11.isEnabled(feature15);
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = jsonFactory1.disable(feature15);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator18 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = jsonFactory1.setInputDecorator(inputDecorator18);
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = jsonFactory19.copy();
        com.fasterxml.jackson.core.ObjectCodec objectCodec21 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = new com.fasterxml.jackson.core.JsonFactory(objectCodec21);
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray27 = new char[] { '4', '#' };
        int int29 = serializedString24.appendQuoted(charArray27, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory22.createParser(charArray27);
        boolean boolean32 = jsonParser30.hasTokenId(0);
        com.fasterxml.jackson.core.JsonParseException jsonParseException34 = new com.fasterxml.jackson.core.JsonParseException(jsonParser30, "com.fasterxml.jackson.core.JsonGenerationException: N/A");
        boolean boolean36 = jsonParser30.hasTokenId(0);
        com.fasterxml.jackson.core.JsonParser.Feature feature37 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
        com.fasterxml.jackson.core.JsonParser jsonParser39 = jsonParser30.configure(feature37, true);
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory20.disable(feature37);
        java.io.OutputStream outputStream41 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator42 = jsonFactory20.createGenerator(outputStream41);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature8.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + jsonEncoding13 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding13.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature15.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(jsonFactory17);
        org.junit.Assert.assertNotNull(jsonFactory19);
        org.junit.Assert.assertNotNull(jsonFactory20);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[4, #]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER + "'", feature37.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER));
        org.junit.Assert.assertNotNull(jsonParser39);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertNotNull(jsonGenerator42);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter1.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1);
        com.fasterxml.jackson.core.ObjectCodec objectCodec4 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory(objectCodec4);
        com.fasterxml.jackson.core.JsonParser.Feature feature6 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean7 = feature6.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory9 = jsonFactory5.configure(feature6, false);
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding11 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator12 = jsonFactory9.createGenerator(outputStream10, jsonEncoding11);
        com.fasterxml.jackson.core.io.SerializedString serializedString14 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature15 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean16 = serializedString14.equals((java.lang.Object) feature15);
        java.lang.String str17 = serializedString14.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator18 = jsonGenerator12.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString14);
        jsonGenerator12.writeString("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator21 = jsonGenerator12.useDefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding22 = com.fasterxml.jackson.core.JsonEncoding.UTF32_BE;
        jsonGenerator12.setCurrentValue((java.lang.Object) jsonEncoding22);
        jsonGenerator12.writeNumber("[");
        com.fasterxml.jackson.core.ObjectCodec objectCodec27 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory28 = new com.fasterxml.jackson.core.JsonFactory(objectCodec27);
        com.fasterxml.jackson.core.JsonParser.Feature feature29 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean30 = feature29.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory32 = jsonFactory28.configure(feature29, false);
        java.io.OutputStream outputStream33 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding34 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory32.createGenerator(outputStream33, jsonEncoding34);
        com.fasterxml.jackson.core.JsonFactory.Feature feature36 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean37 = jsonFactory32.isEnabled(feature36);
        java.io.Writer writer38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonFactory32.createJsonGenerator(writer38);
        com.fasterxml.jackson.core.ObjectCodec objectCodec40 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = new com.fasterxml.jackson.core.JsonFactory(objectCodec40);
        com.fasterxml.jackson.core.JsonParser.Feature feature42 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean43 = feature42.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory45 = jsonFactory41.configure(feature42, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec46 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory47 = new com.fasterxml.jackson.core.JsonFactory(objectCodec46);
        com.fasterxml.jackson.core.JsonParser.Feature feature48 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean49 = feature48.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory47.configure(feature48, false);
        java.io.OutputStream outputStream52 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding53 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator54 = jsonFactory51.createGenerator(outputStream52, jsonEncoding53);
        com.fasterxml.jackson.core.JsonFactory.Feature feature55 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean56 = jsonFactory51.isEnabled(feature55);
        com.fasterxml.jackson.core.JsonFactory jsonFactory57 = jsonFactory41.disable(feature55);
        com.fasterxml.jackson.core.JsonFactory jsonFactory58 = jsonFactory32.disable(feature55);
        com.fasterxml.jackson.core.io.SerializedString serializedString60 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        java.lang.String str61 = serializedString60.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString63 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray66 = new char[] { '4', '#' };
        int int68 = serializedString63.appendQuoted(charArray66, (int) (byte) 10);
        byte[] byteArray69 = new byte[] {};
        int int71 = serializedString63.appendUnquotedUTF8(byteArray69, (int) (short) 1);
        int int73 = serializedString60.appendQuotedUTF8(byteArray69, 8);
        com.fasterxml.jackson.core.JsonParser jsonParser74 = jsonFactory32.createJsonParser(byteArray69);
        jsonGenerator12.writeBinaryField("hi!", byteArray69);
        defaultPrettyPrinter3.writeStartObject(jsonGenerator12);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter2);
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature6.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(jsonFactory9);
        org.junit.Assert.assertTrue("'" + jsonEncoding11 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding11.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator12);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature15.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator18);
        org.junit.Assert.assertNotNull(jsonGenerator21);
        org.junit.Assert.assertTrue("'" + jsonEncoding22 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF32_BE + "'", jsonEncoding22.equals(com.fasterxml.jackson.core.JsonEncoding.UTF32_BE));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature29.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(jsonFactory32);
        org.junit.Assert.assertTrue("'" + jsonEncoding34 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding34.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature36.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature42.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(jsonFactory45);
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature48.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertTrue("'" + jsonEncoding53 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding53.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator54);
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature55.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(jsonFactory57);
        org.junit.Assert.assertNotNull(jsonFactory58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[4, #]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(jsonParser74);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        com.fasterxml.jackson.core.ObjectCodec objectCodec1 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory2 = new com.fasterxml.jackson.core.JsonFactory(objectCodec1);
        com.fasterxml.jackson.core.io.SerializedString serializedString4 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray7 = new char[] { '4', '#' };
        int int9 = serializedString4.appendQuoted(charArray7, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser10 = jsonFactory2.createParser(charArray7);
        java.lang.String str11 = jsonFactory2.getFormatName();
        com.fasterxml.jackson.core.JsonParser jsonParser13 = jsonFactory2.createJsonParser("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec15 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory16 = new com.fasterxml.jackson.core.JsonFactory(objectCodec15);
        com.fasterxml.jackson.core.io.SerializedString serializedString18 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray21 = new char[] { '4', '#' };
        int int23 = serializedString18.appendQuoted(charArray21, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser24 = jsonFactory16.createParser(charArray21);
        boolean boolean26 = jsonParser24.hasTokenId(0);
        com.fasterxml.jackson.core.JsonLocation jsonLocation28 = null;
        com.fasterxml.jackson.core.JsonLocation jsonLocation30 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException31 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation30);
        java.lang.Throwable throwable32 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator33 = null;
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException34 = new com.fasterxml.jackson.core.JsonGenerationException(throwable32, jsonGenerator33);
        jsonParseException31.addSuppressed((java.lang.Throwable) jsonGenerationException34);
        com.fasterxml.jackson.core.JsonParseException jsonParseException36 = new com.fasterxml.jackson.core.JsonParseException(jsonParser24, "com.fasterxml.jackson.core.JsonGenerationException: N/A", jsonLocation28, (java.lang.Throwable) jsonParseException31);
        com.fasterxml.jackson.core.JsonParseException jsonParseException37 = new com.fasterxml.jackson.core.JsonParseException(jsonParser13, "com.fasterxml.jackson.core.JsonGenerationException: N/A", (java.lang.Throwable) jsonParseException31);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter39 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec40 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = new com.fasterxml.jackson.core.JsonFactory(objectCodec40);
        com.fasterxml.jackson.core.JsonParser.Feature feature42 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean43 = feature42.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory45 = jsonFactory41.configure(feature42, false);
        java.io.OutputStream outputStream46 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding47 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator48 = jsonFactory45.createGenerator(outputStream46, jsonEncoding47);
        jsonGenerator48.writeRaw("JSON");
        defaultPrettyPrinter39.writeEndObject(jsonGenerator48, 56320);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException53 = new com.fasterxml.jackson.core.JsonGenerationException("hi!", (java.lang.Throwable) jsonParseException31, jsonGenerator48);
        com.fasterxml.jackson.core.io.SerializedString serializedString55 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature56 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean57 = serializedString55.equals((java.lang.Object) feature56);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator58 = jsonGenerator48.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString55);
        java.nio.ByteBuffer byteBuffer59 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int60 = serializedString55.putQuotedUTF8(byteBuffer59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4, #]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(jsonParser10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JSON" + "'", str11, "JSON");
        org.junit.Assert.assertNotNull(jsonParser13);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, #]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(jsonParser24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature42.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(jsonFactory45);
        org.junit.Assert.assertTrue("'" + jsonEncoding47 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding47.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator48);
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature56.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jsonGenerator58);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = defaultPrettyPrinter2.createInstance();
        defaultPrettyPrinter3.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonParser.Feature feature8 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean9 = feature8.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory7.configure(feature8, false);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding13 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory11.createGenerator(outputStream12, jsonEncoding13);
        jsonGenerator14.writeRaw("JSON");
        defaultPrettyPrinter3.beforeObjectEntries(jsonGenerator14);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator18 = jsonGenerator14.useDefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException19 = new com.fasterxml.jackson.core.JsonGenerationException("hi!", jsonGenerator14);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter3);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature8.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + jsonEncoding13 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding13.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertNotNull(jsonGenerator18);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        jsonGenerator8.writeRaw("JSON");
        jsonGenerator8.writeNumber("hi!");
        com.fasterxml.jackson.core.FormatSchema formatSchema13 = null;
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator8.setSchema(formatSchema13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray6 = new char[] { '4', '#' };
        int int8 = serializedString3.appendQuoted(charArray6, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory1.createParser(charArray6);
        java.lang.String str10 = jsonFactory1.getFormatName();
        java.io.Writer writer11 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator12 = jsonFactory1.createJsonGenerator(writer11);
        java.io.OutputStream outputStream13 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory1.createGenerator(outputStream13);
        int int15 = jsonGenerator14.getHighestEscapedChar();
        com.fasterxml.jackson.core.Base64Variant base64Variant16 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString18 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        java.lang.String str19 = serializedString18.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray24 = new char[] { '4', '#' };
        int int26 = serializedString21.appendQuoted(charArray24, (int) (byte) 10);
        byte[] byteArray27 = new byte[] {};
        int int29 = serializedString21.appendUnquotedUTF8(byteArray27, (int) (short) 1);
        int int31 = serializedString18.appendQuotedUTF8(byteArray27, 8);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator14.writeBinary(base64Variant16, byteArray27, (int) '4', 31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "JSON" + "'", str10, "JSON");
        org.junit.Assert.assertNotNull(jsonGenerator12);
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonParser.Feature feature8 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean9 = feature8.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory7.configure(feature8, false);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding13 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory11.createGenerator(outputStream12, jsonEncoding13);
        com.fasterxml.jackson.core.JsonFactory.Feature feature15 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean16 = jsonFactory11.isEnabled(feature15);
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = jsonFactory1.disable(feature15);
        com.fasterxml.jackson.core.JsonFactory.Feature feature18 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean19 = feature18.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = jsonFactory1.disable(feature18);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature21 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
        com.fasterxml.jackson.core.JsonFactory jsonFactory23 = jsonFactory20.configure(feature21, false);
        java.io.Reader reader24 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser25 = jsonFactory20.createParser(reader24);
        long long26 = jsonParser25.getValueAsLong();
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature8.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + jsonEncoding13 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding13.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature15.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(jsonFactory17);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature18.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(jsonFactory20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN + "'", feature21.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN));
        org.junit.Assert.assertNotNull(jsonFactory23);
        org.junit.Assert.assertNotNull(jsonParser25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature> wildcardClass9 = jsonFactory5.getFormatWriteFeatureType();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes10 = jsonFactory5.getCharacterEscapes();
        com.fasterxml.jackson.core.JsonParser.Feature feature11 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory12 = jsonFactory5.enable(feature11);
        java.io.Writer writer13 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory12.createGenerator(writer13);
        com.fasterxml.jackson.core.ObjectCodec objectCodec15 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory16 = new com.fasterxml.jackson.core.JsonFactory(objectCodec15);
        com.fasterxml.jackson.core.JsonParser.Feature feature17 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature17.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = jsonFactory16.configure(feature17, false);
        java.io.OutputStream outputStream21 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding22 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator23 = jsonFactory20.createGenerator(outputStream21, jsonEncoding22);
        com.fasterxml.jackson.core.JsonFactory.Feature feature24 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean25 = jsonFactory20.isEnabled(feature24);
        java.io.Writer writer26 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator27 = jsonFactory20.createJsonGenerator(writer26);
        com.fasterxml.jackson.core.ObjectCodec objectCodec28 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory29 = new com.fasterxml.jackson.core.JsonFactory(objectCodec28);
        com.fasterxml.jackson.core.JsonParser.Feature feature30 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean31 = feature30.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory33 = jsonFactory29.configure(feature30, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec34 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory35 = new com.fasterxml.jackson.core.JsonFactory(objectCodec34);
        com.fasterxml.jackson.core.JsonParser.Feature feature36 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean37 = feature36.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory39 = jsonFactory35.configure(feature36, false);
        java.io.OutputStream outputStream40 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding41 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator42 = jsonFactory39.createGenerator(outputStream40, jsonEncoding41);
        com.fasterxml.jackson.core.JsonFactory.Feature feature43 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean44 = jsonFactory39.isEnabled(feature43);
        com.fasterxml.jackson.core.JsonFactory jsonFactory45 = jsonFactory29.disable(feature43);
        com.fasterxml.jackson.core.JsonFactory jsonFactory46 = jsonFactory20.disable(feature43);
        boolean boolean47 = feature43.enabledByDefault();
        int int48 = feature43.getMask();
        com.fasterxml.jackson.core.JsonFactory jsonFactory49 = jsonFactory12.enable(feature43);
        boolean boolean50 = jsonFactory12.requiresCustomCodec();
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(characterEscapes10);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES + "'", feature11.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES));
        org.junit.Assert.assertNotNull(jsonFactory12);
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature17.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(jsonFactory20);
        org.junit.Assert.assertTrue("'" + jsonEncoding22 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding22.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator23);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature24.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(jsonGenerator27);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature30.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(jsonFactory33);
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature36.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(jsonFactory39);
        org.junit.Assert.assertTrue("'" + jsonEncoding41 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding41.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator42);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature43.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(jsonFactory45);
        org.junit.Assert.assertNotNull(jsonFactory46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(jsonFactory49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        defaultPrettyPrinter1.writeEndObject(jsonGenerator10, 56320);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator16 = jsonGenerator10.setFeatureMask((int) (short) -1);
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer17 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int18 = byteQuadsCanonicalizer17.secondaryCount();
        jsonGenerator10.setCurrentValue((java.lang.Object) byteQuadsCanonicalizer17);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray24 = new char[] { '4', '#' };
        int int26 = serializedString21.appendQuoted(charArray24, (int) (byte) 10);
        byte[] byteArray27 = new byte[] {};
        int int29 = serializedString21.appendUnquotedUTF8(byteArray27, (int) (short) 1);
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int33 = serializedString21.appendUnquotedUTF8(byteArray31, 32);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator10.writeUTF8String(byteArray31, 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertNotNull(jsonGenerator16);
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        jsonGenerator8.writeRaw("JSON");
        jsonGenerator8.writeNumber("hi!");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonGenerator8.setHighestNonEscapedChar((-1));
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator14.writeRawValue("UTF-8", 5, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNotNull(jsonGenerator14);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        jsonGenerator8.writeRaw("JSON");
        jsonGenerator8.writeNumber("hi!");
        int[] intArray13 = com.fasterxml.jackson.core.json.ReaderBasedJsonParser._icLatin1;
        jsonGenerator8.writeArray(intArray13, 64, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString18 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        java.lang.String str19 = serializedString18.toString();
        com.fasterxml.jackson.core.JsonToken jsonToken20 = com.fasterxml.jackson.core.JsonToken.START_OBJECT;
        boolean boolean21 = jsonToken20.isStructStart();
        char[] charArray22 = jsonToken20.asCharArray();
        int int24 = serializedString18.appendUnquoted(charArray22, (int) '#');
        jsonGenerator8.writeRaw(charArray22, 2, (int) (byte) 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonToken jsonToken30 = com.fasterxml.jackson.core.JsonToken.START_OBJECT;
        boolean boolean31 = jsonToken30.isStructStart();
        char[] charArray32 = jsonToken30.asCharArray();
        int int34 = serializedString29.appendQuoted(charArray32, 15);
        char[] charArray35 = serializedString29.asQuotedChars();
        jsonGenerator8.writeRawValue((com.fasterxml.jackson.core.SerializableString) serializedString29);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + jsonToken20 + "' != '" + com.fasterxml.jackson.core.JsonToken.START_OBJECT + "'", jsonToken20.equals(com.fasterxml.jackson.core.JsonToken.START_OBJECT));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "{");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "{");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[{]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + jsonToken30 + "' != '" + com.fasterxml.jackson.core.JsonToken.START_OBJECT + "'", jsonToken30.equals(com.fasterxml.jackson.core.JsonToken.START_OBJECT));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "{");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "{");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[{]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[h, i, !]");
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.JsonFactory.Feature feature9 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean10 = jsonFactory5.isEnabled(feature9);
        java.io.Writer writer11 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator12 = jsonFactory5.createJsonGenerator(writer11);
        com.fasterxml.jackson.core.ObjectCodec objectCodec13 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory14 = new com.fasterxml.jackson.core.JsonFactory(objectCodec13);
        com.fasterxml.jackson.core.JsonParser.Feature feature15 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean16 = feature15.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = jsonFactory14.configure(feature15, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec19 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = new com.fasterxml.jackson.core.JsonFactory(objectCodec19);
        com.fasterxml.jackson.core.JsonParser.Feature feature21 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean22 = feature21.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory24 = jsonFactory20.configure(feature21, false);
        java.io.OutputStream outputStream25 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding26 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator27 = jsonFactory24.createGenerator(outputStream25, jsonEncoding26);
        com.fasterxml.jackson.core.JsonFactory.Feature feature28 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean29 = jsonFactory24.isEnabled(feature28);
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = jsonFactory14.disable(feature28);
        com.fasterxml.jackson.core.JsonFactory jsonFactory31 = jsonFactory5.disable(feature28);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator32 = jsonFactory5.getInputDecorator();
        com.fasterxml.jackson.core.io.OutputDecorator outputDecorator33 = jsonFactory5.getOutputDecorator();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler34 = jsonFactory5._getBufferRecycler();
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature9.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(jsonGenerator12);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature15.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(jsonFactory18);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature21.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(jsonFactory24);
        org.junit.Assert.assertTrue("'" + jsonEncoding26 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding26.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator27);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature28.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(jsonFactory30);
        org.junit.Assert.assertNotNull(jsonFactory31);
        org.junit.Assert.assertNull(inputDecorator32);
        org.junit.Assert.assertNull(outputDecorator33);
        org.junit.Assert.assertNotNull(bufferRecycler34);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        com.fasterxml.jackson.core.ObjectCodec objectCodec17 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = new com.fasterxml.jackson.core.JsonFactory(objectCodec17);
        com.fasterxml.jackson.core.JsonParser.Feature feature19 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean20 = feature19.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = jsonFactory18.configure(feature19, false);
        java.io.OutputStream outputStream23 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding24 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = jsonFactory22.createGenerator(outputStream23, jsonEncoding24);
        com.fasterxml.jackson.core.io.SerializedString serializedString27 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature28 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean29 = serializedString27.equals((java.lang.Object) feature28);
        java.lang.String str30 = serializedString27.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator31 = jsonGenerator25.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString27);
        defaultPrettyPrinter1.beforeArrayValues(jsonGenerator25);
        jsonGenerator25.writeNumberField("hi!", 0.0f);
        com.fasterxml.jackson.core.ObjectCodec objectCodec36 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory37 = new com.fasterxml.jackson.core.JsonFactory(objectCodec36);
        com.fasterxml.jackson.core.JsonParser.Feature feature38 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean39 = feature38.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = jsonFactory37.configure(feature38, false);
        java.io.OutputStream outputStream42 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding43 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator44 = jsonFactory41.createGenerator(outputStream42, jsonEncoding43);
        com.fasterxml.jackson.core.io.SerializedString serializedString46 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature47 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean48 = serializedString46.equals((java.lang.Object) feature47);
        java.lang.String str49 = serializedString46.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = jsonGenerator44.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString46);
        jsonGenerator44.writeString("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator53 = jsonGenerator44.useDefaultPrettyPrinter();
        jsonGenerator25.writeStartObject((java.lang.Object) jsonGenerator44);
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature19.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(jsonFactory22);
        org.junit.Assert.assertTrue("'" + jsonEncoding24 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding24.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator25);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature28.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator31);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature38.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(jsonFactory41);
        org.junit.Assert.assertTrue("'" + jsonEncoding43 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding43.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator44);
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature47.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator50);
        org.junit.Assert.assertNotNull(jsonGenerator53);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature> wildcardClass9 = jsonFactory5.getFormatWriteFeatureType();
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = new com.fasterxml.jackson.core.JsonFactory(objectCodec10);
        com.fasterxml.jackson.core.JsonParser.Feature feature12 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean13 = feature12.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory15 = jsonFactory11.configure(feature12, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec16 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = new com.fasterxml.jackson.core.JsonFactory(objectCodec16);
        com.fasterxml.jackson.core.JsonParser.Feature feature18 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean19 = feature18.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory21 = jsonFactory17.configure(feature18, false);
        java.io.OutputStream outputStream22 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding23 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator24 = jsonFactory21.createGenerator(outputStream22, jsonEncoding23);
        com.fasterxml.jackson.core.JsonFactory.Feature feature25 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean26 = jsonFactory21.isEnabled(feature25);
        com.fasterxml.jackson.core.JsonFactory jsonFactory27 = jsonFactory11.disable(feature25);
        boolean boolean28 = jsonFactory5.isEnabled(feature25);
        com.fasterxml.jackson.core.JsonFactory jsonFactory29 = jsonFactory5.copy();
        com.fasterxml.jackson.core.ObjectCodec objectCodec30 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory31 = new com.fasterxml.jackson.core.JsonFactory(objectCodec30);
        com.fasterxml.jackson.core.JsonParser.Feature feature32 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean33 = feature32.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory35 = jsonFactory31.configure(feature32, false);
        java.io.OutputStream outputStream36 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding37 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator38 = jsonFactory35.createGenerator(outputStream36, jsonEncoding37);
        com.fasterxml.jackson.core.JsonFactory.Feature feature39 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean40 = jsonFactory35.isEnabled(feature39);
        java.io.Writer writer41 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator42 = jsonFactory35.createJsonGenerator(writer41);
        com.fasterxml.jackson.core.ObjectCodec objectCodec43 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory44 = new com.fasterxml.jackson.core.JsonFactory(objectCodec43);
        com.fasterxml.jackson.core.JsonParser.Feature feature45 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean46 = feature45.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory48 = jsonFactory44.configure(feature45, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec49 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory50 = new com.fasterxml.jackson.core.JsonFactory(objectCodec49);
        com.fasterxml.jackson.core.JsonParser.Feature feature51 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean52 = feature51.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory54 = jsonFactory50.configure(feature51, false);
        java.io.OutputStream outputStream55 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding56 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator57 = jsonFactory54.createGenerator(outputStream55, jsonEncoding56);
        com.fasterxml.jackson.core.JsonFactory.Feature feature58 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean59 = jsonFactory54.isEnabled(feature58);
        com.fasterxml.jackson.core.JsonFactory jsonFactory60 = jsonFactory44.disable(feature58);
        com.fasterxml.jackson.core.JsonFactory jsonFactory61 = jsonFactory35.disable(feature58);
        boolean boolean62 = feature58.enabledByDefault();
        boolean boolean63 = jsonFactory5.isEnabled(feature58);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature12.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(jsonFactory15);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature18.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(jsonFactory21);
        org.junit.Assert.assertTrue("'" + jsonEncoding23 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding23.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator24);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature25.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(jsonFactory27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(jsonFactory29);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature32.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(jsonFactory35);
        org.junit.Assert.assertTrue("'" + jsonEncoding37 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding37.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator38);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature39.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(jsonGenerator42);
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature45.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(jsonFactory48);
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature51.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(jsonFactory54);
        org.junit.Assert.assertTrue("'" + jsonEncoding56 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding56.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator57);
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature58.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(jsonFactory60);
        org.junit.Assert.assertNotNull(jsonFactory61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonParser.Feature feature8 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean9 = feature8.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory7.configure(feature8, false);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding13 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory11.createGenerator(outputStream12, jsonEncoding13);
        com.fasterxml.jackson.core.JsonFactory.Feature feature15 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean16 = jsonFactory11.isEnabled(feature15);
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = jsonFactory1.disable(feature15);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator18 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = jsonFactory1.setInputDecorator(inputDecorator18);
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = jsonFactory19.copy();
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        java.lang.String str23 = serializedString22.toString();
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory25 = new com.fasterxml.jackson.core.JsonFactory(objectCodec24);
        com.fasterxml.jackson.core.JsonParser.Feature feature26 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean27 = feature26.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory29 = jsonFactory25.configure(feature26, false);
        java.io.OutputStream outputStream30 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding31 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory29.createGenerator(outputStream30, jsonEncoding31);
        com.fasterxml.jackson.core.JsonFactory.Feature feature33 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean34 = jsonFactory29.isEnabled(feature33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory29.createJsonGenerator(writer35);
        com.fasterxml.jackson.core.ObjectCodec objectCodec37 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = new com.fasterxml.jackson.core.JsonFactory(objectCodec37);
        com.fasterxml.jackson.core.JsonParser.Feature feature39 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean40 = feature39.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory42 = jsonFactory38.configure(feature39, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec43 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory44 = new com.fasterxml.jackson.core.JsonFactory(objectCodec43);
        com.fasterxml.jackson.core.JsonParser.Feature feature45 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean46 = feature45.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory48 = jsonFactory44.configure(feature45, false);
        java.io.OutputStream outputStream49 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding50 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator51 = jsonFactory48.createGenerator(outputStream49, jsonEncoding50);
        com.fasterxml.jackson.core.JsonFactory.Feature feature52 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean53 = jsonFactory48.isEnabled(feature52);
        com.fasterxml.jackson.core.JsonFactory jsonFactory54 = jsonFactory38.disable(feature52);
        com.fasterxml.jackson.core.JsonFactory jsonFactory55 = jsonFactory29.disable(feature52);
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        java.lang.String str58 = serializedString57.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString60 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray63 = new char[] { '4', '#' };
        int int65 = serializedString60.appendQuoted(charArray63, (int) (byte) 10);
        byte[] byteArray66 = new byte[] {};
        int int68 = serializedString60.appendUnquotedUTF8(byteArray66, (int) (short) 1);
        int int70 = serializedString57.appendQuotedUTF8(byteArray66, 8);
        com.fasterxml.jackson.core.JsonParser jsonParser71 = jsonFactory29.createJsonParser(byteArray66);
        int int73 = serializedString22.appendQuotedUTF8(byteArray66, 56319);
        com.fasterxml.jackson.core.JsonParser jsonParser76 = jsonFactory19.createParser(byteArray66, (int) (byte) 1, (-1700593753));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature8.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + jsonEncoding13 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding13.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature15.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(jsonFactory17);
        org.junit.Assert.assertNotNull(jsonFactory19);
        org.junit.Assert.assertNotNull(jsonFactory20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature26.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(jsonFactory29);
        org.junit.Assert.assertTrue("'" + jsonEncoding31 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding31.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature33.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature39.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(jsonFactory42);
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature45.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(jsonFactory48);
        org.junit.Assert.assertTrue("'" + jsonEncoding50 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding50.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator51);
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature52.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(jsonFactory54);
        org.junit.Assert.assertNotNull(jsonFactory55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[4, #]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(jsonParser71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(jsonParser76);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature11 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean12 = serializedString10.equals((java.lang.Object) feature11);
        java.lang.String str13 = serializedString10.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonGenerator8.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString10);
        jsonGenerator8.writeString("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator17 = jsonGenerator8.useDefaultPrettyPrinter();
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray22 = new char[] { '4', '#' };
        int int24 = serializedString19.appendQuoted(charArray22, (int) (byte) 10);
        char[] charArray25 = serializedString19.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString27 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray30 = new char[] { '4', '#' };
        int int32 = serializedString27.appendQuoted(charArray30, (int) (byte) 10);
        char[] charArray33 = serializedString27.asQuotedChars();
        int int35 = serializedString19.appendQuoted(charArray33, (int) (byte) 0);
        jsonGenerator17.writeStartObject((java.lang.Object) charArray33);
        com.fasterxml.jackson.core.Base64Variant base64Variant37 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString39 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray42 = new char[] { '4', '#' };
        int int44 = serializedString39.appendQuoted(charArray42, (int) (byte) 10);
        char[] charArray45 = serializedString39.asQuotedChars();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10 };
        int int50 = serializedString39.appendUnquotedUTF8(byteArray48, 1);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator17.writeBinary(base64Variant37, byteArray48, (int) (short) 1, 512);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: Can not write a binary value, expecting field name");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature11.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertNotNull(jsonGenerator17);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[4, #]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[h, i, !]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[4, #]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[h, i, !]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[4, #]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[h, i, !]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        com.fasterxml.jackson.core.ObjectCodec objectCodec1 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory2 = new com.fasterxml.jackson.core.JsonFactory(objectCodec1);
        com.fasterxml.jackson.core.io.SerializedString serializedString4 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray7 = new char[] { '4', '#' };
        int int9 = serializedString4.appendQuoted(charArray7, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser10 = jsonFactory2.createParser(charArray7);
        java.lang.String str11 = jsonFactory2.getFormatName();
        com.fasterxml.jackson.core.JsonParser jsonParser13 = jsonFactory2.createJsonParser("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec15 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory16 = new com.fasterxml.jackson.core.JsonFactory(objectCodec15);
        com.fasterxml.jackson.core.io.SerializedString serializedString18 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray21 = new char[] { '4', '#' };
        int int23 = serializedString18.appendQuoted(charArray21, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser24 = jsonFactory16.createParser(charArray21);
        boolean boolean26 = jsonParser24.hasTokenId(0);
        com.fasterxml.jackson.core.JsonLocation jsonLocation28 = null;
        com.fasterxml.jackson.core.JsonLocation jsonLocation30 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException31 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation30);
        java.lang.Throwable throwable32 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator33 = null;
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException34 = new com.fasterxml.jackson.core.JsonGenerationException(throwable32, jsonGenerator33);
        jsonParseException31.addSuppressed((java.lang.Throwable) jsonGenerationException34);
        com.fasterxml.jackson.core.JsonParseException jsonParseException36 = new com.fasterxml.jackson.core.JsonParseException(jsonParser24, "com.fasterxml.jackson.core.JsonGenerationException: N/A", jsonLocation28, (java.lang.Throwable) jsonParseException31);
        com.fasterxml.jackson.core.JsonParseException jsonParseException37 = new com.fasterxml.jackson.core.JsonParseException(jsonParser13, "com.fasterxml.jackson.core.JsonGenerationException: N/A", (java.lang.Throwable) jsonParseException31);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter39 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec40 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = new com.fasterxml.jackson.core.JsonFactory(objectCodec40);
        com.fasterxml.jackson.core.JsonParser.Feature feature42 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean43 = feature42.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory45 = jsonFactory41.configure(feature42, false);
        java.io.OutputStream outputStream46 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding47 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator48 = jsonFactory45.createGenerator(outputStream46, jsonEncoding47);
        jsonGenerator48.writeRaw("JSON");
        defaultPrettyPrinter39.writeEndObject(jsonGenerator48, 56320);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException53 = new com.fasterxml.jackson.core.JsonGenerationException("hi!", (java.lang.Throwable) jsonParseException31, jsonGenerator48);
        com.fasterxml.jackson.core.io.SerializedString serializedString55 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature56 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean57 = serializedString55.equals((java.lang.Object) feature56);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator58 = jsonGenerator48.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString55);
        jsonGenerator58.writeNumberField("", (double) 100);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4, #]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(jsonParser10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JSON" + "'", str11, "JSON");
        org.junit.Assert.assertNotNull(jsonParser13);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, #]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(jsonParser24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature42.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(jsonFactory45);
        org.junit.Assert.assertTrue("'" + jsonEncoding47 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding47.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator48);
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature56.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jsonGenerator58);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter18 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec19 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = new com.fasterxml.jackson.core.JsonFactory(objectCodec19);
        com.fasterxml.jackson.core.JsonParser.Feature feature21 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean22 = feature21.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory24 = jsonFactory20.configure(feature21, false);
        java.io.OutputStream outputStream25 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding26 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator27 = jsonFactory24.createGenerator(outputStream25, jsonEncoding26);
        jsonGenerator27.writeRaw("JSON");
        boolean boolean30 = jsonGenerator27.isClosed();
        jsonGenerator27.writeRaw('4');
        defaultPrettyPrinter18.writeObjectFieldValueSeparator(jsonGenerator27);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter34 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = defaultPrettyPrinter18.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter34);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter37 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory39 = new com.fasterxml.jackson.core.JsonFactory(objectCodec38);
        com.fasterxml.jackson.core.JsonParser.Feature feature40 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean41 = feature40.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory43 = jsonFactory39.configure(feature40, false);
        java.io.OutputStream outputStream44 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding45 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator46 = jsonFactory43.createGenerator(outputStream44, jsonEncoding45);
        jsonGenerator46.writeRaw("JSON");
        defaultPrettyPrinter37.writeEndObject(jsonGenerator46, 56320);
        com.fasterxml.jackson.core.io.SerializedString serializedString53 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray56 = new char[] { '4', '#' };
        int int58 = serializedString53.appendQuoted(charArray56, (int) (byte) 10);
        byte[] byteArray59 = new byte[] {};
        int int61 = serializedString53.appendUnquotedUTF8(byteArray59, (int) (short) 1);
        jsonGenerator46.writeBinaryField("", byteArray59);
        nopIndenter34.writeIndentation(jsonGenerator46, (int) '#');
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter65 = defaultPrettyPrinter1.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter34);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator66 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter65.writeObjectEntrySeparator(jsonGenerator66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature21.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(jsonFactory24);
        org.junit.Assert.assertTrue("'" + jsonEncoding26 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding26.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter35);
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature40.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(jsonFactory43);
        org.junit.Assert.assertTrue("'" + jsonEncoding45 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding45.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator46);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[4, #]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter65);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature> wildcardClass9 = jsonFactory5.getFormatWriteFeatureType();
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = new com.fasterxml.jackson.core.JsonFactory(objectCodec10);
        com.fasterxml.jackson.core.JsonParser.Feature feature12 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean13 = feature12.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory15 = jsonFactory11.configure(feature12, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec16 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = new com.fasterxml.jackson.core.JsonFactory(objectCodec16);
        com.fasterxml.jackson.core.JsonParser.Feature feature18 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean19 = feature18.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory21 = jsonFactory17.configure(feature18, false);
        java.io.OutputStream outputStream22 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding23 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator24 = jsonFactory21.createGenerator(outputStream22, jsonEncoding23);
        com.fasterxml.jackson.core.JsonFactory.Feature feature25 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean26 = jsonFactory21.isEnabled(feature25);
        com.fasterxml.jackson.core.JsonFactory jsonFactory27 = jsonFactory11.disable(feature25);
        boolean boolean28 = jsonFactory5.isEnabled(feature25);
        com.fasterxml.jackson.core.JsonFactory jsonFactory29 = jsonFactory5.copy();
        java.lang.String str30 = jsonFactory29.getFormatName();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray35 = new char[] { '4', '#' };
        int int37 = serializedString32.appendQuoted(charArray35, (int) (byte) 10);
        char[] charArray38 = serializedString32.asQuotedChars();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10 };
        int int43 = serializedString32.appendUnquotedUTF8(byteArray41, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser44 = jsonFactory29.createJsonParser(byteArray41);
        com.fasterxml.jackson.core.JsonFactory jsonFactory46 = jsonFactory29.setRootValueSeparator("[com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: size=0, hashSize=0, 0/0/0/0 pri/sec/ter/spill (=0), total:0]");
        boolean boolean47 = jsonFactory29.canUseCharArrays();
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature12.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(jsonFactory15);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature18.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(jsonFactory21);
        org.junit.Assert.assertTrue("'" + jsonEncoding23 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding23.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator24);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature25.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(jsonFactory27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(jsonFactory29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "JSON" + "'", str30, "JSON");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[4, #]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[h, i, !]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(jsonParser44);
        org.junit.Assert.assertNotNull(jsonFactory46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        jsonGenerator10.writeRaw('a');
        jsonGenerator10.writeObjectFieldStart("false");
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        defaultPrettyPrinter1.writeEndObject(jsonGenerator10, 56320);
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray20 = new char[] { '4', '#' };
        int int22 = serializedString17.appendQuoted(charArray20, (int) (byte) 10);
        byte[] byteArray23 = new byte[] {};
        int int25 = serializedString17.appendUnquotedUTF8(byteArray23, (int) (short) 1);
        jsonGenerator10.writeBinaryField("", byteArray23);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter28 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec29 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory(objectCodec29);
        com.fasterxml.jackson.core.JsonParser.Feature feature31 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean32 = feature31.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory30.configure(feature31, false);
        java.io.OutputStream outputStream35 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding36 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = jsonFactory34.createGenerator(outputStream35, jsonEncoding36);
        jsonGenerator37.writeRaw("JSON");
        defaultPrettyPrinter28.writeEndObject(jsonGenerator37, 56320);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator42 = jsonGenerator10.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter28);
        com.fasterxml.jackson.core.io.SerializedString serializedString44 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray47 = new char[] { '4', '#' };
        int int49 = serializedString44.appendQuoted(charArray47, (int) (byte) 10);
        char[] charArray50 = serializedString44.asQuotedChars();
        byte[] byteArray51 = serializedString44.asQuotedUTF8();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter52 = defaultPrettyPrinter28.withRootSeparator((com.fasterxml.jackson.core.SerializableString) serializedString44);
        java.lang.String str53 = serializedString44.getValue();
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[4, #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature31.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertTrue("'" + jsonEncoding36 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding36.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator37);
        org.junit.Assert.assertNotNull(jsonGenerator42);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[4, #]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[h, i, !]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[104, 105, 33]");
        org.junit.Assert.assertNotNull(defaultPrettyPrinter52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = defaultPrettyPrinter3.createInstance();
        defaultPrettyPrinter4.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter8 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory10 = new com.fasterxml.jackson.core.JsonFactory(objectCodec9);
        com.fasterxml.jackson.core.JsonParser.Feature feature11 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean12 = feature11.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory14 = jsonFactory10.configure(feature11, false);
        java.io.OutputStream outputStream15 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding16 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator17 = jsonFactory14.createGenerator(outputStream15, jsonEncoding16);
        jsonGenerator17.writeRaw("JSON");
        boolean boolean20 = jsonGenerator17.isClosed();
        jsonGenerator17.writeRaw('4');
        defaultPrettyPrinter8.writeObjectFieldValueSeparator(jsonGenerator17);
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory25 = new com.fasterxml.jackson.core.JsonFactory(objectCodec24);
        com.fasterxml.jackson.core.JsonParser.Feature feature26 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean27 = feature26.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory29 = jsonFactory25.configure(feature26, false);
        java.io.OutputStream outputStream30 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding31 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory29.createGenerator(outputStream30, jsonEncoding31);
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature35 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean36 = serializedString34.equals((java.lang.Object) feature35);
        java.lang.String str37 = serializedString34.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator38 = jsonGenerator32.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString34);
        defaultPrettyPrinter8.beforeArrayValues(jsonGenerator32);
        java.lang.Object obj40 = jsonGenerator32.getOutputTarget();
        defaultPrettyPrinter4.writeEndObject(jsonGenerator32, 33);
        defaultPrettyPrinter1.writeStartArray(jsonGenerator32);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes44 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator45 = jsonGenerator32.setCharacterEscapes(characterEscapes44);
        com.fasterxml.jackson.core.Base64Variant base64Variant46 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString48 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray51 = new char[] { '4', '#' };
        int int53 = serializedString48.appendQuoted(charArray51, (int) (byte) 10);
        char[] charArray54 = serializedString48.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString56 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray59 = new char[] { '4', '#' };
        int int61 = serializedString56.appendQuoted(charArray59, (int) (byte) 10);
        char[] charArray62 = serializedString56.asQuotedChars();
        int int64 = serializedString48.appendQuoted(charArray62, (int) (byte) 0);
        byte[] byteArray65 = serializedString48.asUnquotedUTF8();
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator45.writeBinary(base64Variant46, byteArray65, 0, 15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultPrettyPrinter4);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature11.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(jsonFactory14);
        org.junit.Assert.assertTrue("'" + jsonEncoding16 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding16.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature26.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(jsonFactory29);
        org.junit.Assert.assertTrue("'" + jsonEncoding31 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding31.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature35.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(jsonGenerator45);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[4, #]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[h, i, !]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[4, #]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[h, i, !]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[104, 105, 33]");
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter17 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter18 = defaultPrettyPrinter1.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter17);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter19 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter18);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter20 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter18);
        com.fasterxml.jackson.core.ObjectCodec objectCodec22 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory23 = new com.fasterxml.jackson.core.JsonFactory(objectCodec22);
        com.fasterxml.jackson.core.io.SerializedString serializedString25 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray28 = new char[] { '4', '#' };
        int int30 = serializedString25.appendQuoted(charArray28, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser31 = jsonFactory23.createParser(charArray28);
        java.lang.String str32 = jsonFactory23.getFormatName();
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory23.createJsonParser("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec36 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory37 = new com.fasterxml.jackson.core.JsonFactory(objectCodec36);
        com.fasterxml.jackson.core.io.SerializedString serializedString39 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray42 = new char[] { '4', '#' };
        int int44 = serializedString39.appendQuoted(charArray42, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser45 = jsonFactory37.createParser(charArray42);
        boolean boolean47 = jsonParser45.hasTokenId(0);
        com.fasterxml.jackson.core.JsonLocation jsonLocation49 = null;
        com.fasterxml.jackson.core.JsonLocation jsonLocation51 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException52 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation51);
        java.lang.Throwable throwable53 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator54 = null;
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException55 = new com.fasterxml.jackson.core.JsonGenerationException(throwable53, jsonGenerator54);
        jsonParseException52.addSuppressed((java.lang.Throwable) jsonGenerationException55);
        com.fasterxml.jackson.core.JsonParseException jsonParseException57 = new com.fasterxml.jackson.core.JsonParseException(jsonParser45, "com.fasterxml.jackson.core.JsonGenerationException: N/A", jsonLocation49, (java.lang.Throwable) jsonParseException52);
        com.fasterxml.jackson.core.JsonParseException jsonParseException58 = new com.fasterxml.jackson.core.JsonParseException(jsonParser34, "com.fasterxml.jackson.core.JsonGenerationException: N/A", (java.lang.Throwable) jsonParseException52);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter60 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec61 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory62 = new com.fasterxml.jackson.core.JsonFactory(objectCodec61);
        com.fasterxml.jackson.core.JsonParser.Feature feature63 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean64 = feature63.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory66 = jsonFactory62.configure(feature63, false);
        java.io.OutputStream outputStream67 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding68 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator69 = jsonFactory66.createGenerator(outputStream67, jsonEncoding68);
        jsonGenerator69.writeRaw("JSON");
        defaultPrettyPrinter60.writeEndObject(jsonGenerator69, 56320);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException74 = new com.fasterxml.jackson.core.JsonGenerationException("hi!", (java.lang.Throwable) jsonParseException52, jsonGenerator69);
        com.fasterxml.jackson.core.io.SerializedString serializedString76 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature77 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean78 = serializedString76.equals((java.lang.Object) feature77);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator79 = jsonGenerator69.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString76);
        jsonGenerator79.writeRaw("");
        defaultPrettyPrinter18.writeArrayValueSeparator(jsonGenerator79);
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter18);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[4, #]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(jsonParser31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "JSON" + "'", str32, "JSON");
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[4, #]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(jsonParser45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + feature63 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature63.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(jsonFactory66);
        org.junit.Assert.assertTrue("'" + jsonEncoding68 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding68.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator69);
        org.junit.Assert.assertTrue("'" + feature77 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature77.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jsonGenerator79);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.JsonToken jsonToken1 = com.fasterxml.jackson.core.JsonToken.END_ARRAY;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonToken1, false);
        java.lang.Object obj4 = iOContext3.getSourceReference();
        com.fasterxml.jackson.core.ObjectCodec objectCodec5 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory6 = new com.fasterxml.jackson.core.JsonFactory(objectCodec5);
        com.fasterxml.jackson.core.JsonParser.Feature feature7 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean8 = feature7.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory10 = jsonFactory6.configure(feature7, false);
        java.io.OutputStream outputStream11 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding12 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator13 = jsonFactory10.createGenerator(outputStream11, jsonEncoding12);
        com.fasterxml.jackson.core.io.SerializedString serializedString15 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature16 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean17 = serializedString15.equals((java.lang.Object) feature16);
        java.lang.String str18 = serializedString15.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator19 = jsonGenerator13.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString15);
        jsonGenerator13.writeString("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator22 = jsonGenerator13.useDefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding23 = com.fasterxml.jackson.core.JsonEncoding.UTF32_BE;
        jsonGenerator13.setCurrentValue((java.lang.Object) jsonEncoding23);
        jsonGenerator13.writeNumber("[");
        com.fasterxml.jackson.core.ObjectCodec objectCodec28 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory29 = new com.fasterxml.jackson.core.JsonFactory(objectCodec28);
        com.fasterxml.jackson.core.JsonParser.Feature feature30 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean31 = feature30.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory33 = jsonFactory29.configure(feature30, false);
        java.io.OutputStream outputStream34 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding35 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory33.createGenerator(outputStream34, jsonEncoding35);
        com.fasterxml.jackson.core.JsonFactory.Feature feature37 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean38 = jsonFactory33.isEnabled(feature37);
        java.io.Writer writer39 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator40 = jsonFactory33.createJsonGenerator(writer39);
        com.fasterxml.jackson.core.ObjectCodec objectCodec41 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory42 = new com.fasterxml.jackson.core.JsonFactory(objectCodec41);
        com.fasterxml.jackson.core.JsonParser.Feature feature43 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean44 = feature43.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory46 = jsonFactory42.configure(feature43, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec47 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory48 = new com.fasterxml.jackson.core.JsonFactory(objectCodec47);
        com.fasterxml.jackson.core.JsonParser.Feature feature49 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean50 = feature49.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory52 = jsonFactory48.configure(feature49, false);
        java.io.OutputStream outputStream53 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding54 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator55 = jsonFactory52.createGenerator(outputStream53, jsonEncoding54);
        com.fasterxml.jackson.core.JsonFactory.Feature feature56 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean57 = jsonFactory52.isEnabled(feature56);
        com.fasterxml.jackson.core.JsonFactory jsonFactory58 = jsonFactory42.disable(feature56);
        com.fasterxml.jackson.core.JsonFactory jsonFactory59 = jsonFactory33.disable(feature56);
        com.fasterxml.jackson.core.io.SerializedString serializedString61 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        java.lang.String str62 = serializedString61.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString64 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray67 = new char[] { '4', '#' };
        int int69 = serializedString64.appendQuoted(charArray67, (int) (byte) 10);
        byte[] byteArray70 = new byte[] {};
        int int72 = serializedString64.appendUnquotedUTF8(byteArray70, (int) (short) 1);
        int int74 = serializedString61.appendQuotedUTF8(byteArray70, 8);
        com.fasterxml.jackson.core.JsonParser jsonParser75 = jsonFactory33.createJsonParser(byteArray70);
        jsonGenerator13.writeBinaryField("hi!", byteArray70);
        // The following exception was thrown during execution in test generation
        try {
            iOContext3.releaseBase64Buffer(byteArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + jsonToken1 + "' != '" + com.fasterxml.jackson.core.JsonToken.END_ARRAY + "'", jsonToken1.equals(com.fasterxml.jackson.core.JsonToken.END_ARRAY));
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + com.fasterxml.jackson.core.JsonToken.END_ARRAY + "'", obj4.equals(com.fasterxml.jackson.core.JsonToken.END_ARRAY));
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature7.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(jsonFactory10);
        org.junit.Assert.assertTrue("'" + jsonEncoding12 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding12.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator13);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature16.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator19);
        org.junit.Assert.assertNotNull(jsonGenerator22);
        org.junit.Assert.assertTrue("'" + jsonEncoding23 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF32_BE + "'", jsonEncoding23.equals(com.fasterxml.jackson.core.JsonEncoding.UTF32_BE));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature30.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(jsonFactory33);
        org.junit.Assert.assertTrue("'" + jsonEncoding35 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding35.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature37.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(jsonGenerator40);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature43.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(jsonFactory46);
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature49.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(jsonFactory52);
        org.junit.Assert.assertTrue("'" + jsonEncoding54 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding54.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator55);
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature56.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(jsonFactory58);
        org.junit.Assert.assertNotNull(jsonFactory59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[4, #]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(jsonParser75);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        com.fasterxml.jackson.core.JsonLocation jsonLocation1 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException2 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation1);
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator4 = null;
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException5 = new com.fasterxml.jackson.core.JsonGenerationException(throwable3, jsonGenerator4);
        jsonParseException2.addSuppressed((java.lang.Throwable) jsonGenerationException5);
        com.fasterxml.jackson.core.ObjectCodec objectCodec7 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory8 = new com.fasterxml.jackson.core.JsonFactory(objectCodec7);
        com.fasterxml.jackson.core.JsonParser.Feature feature9 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean10 = feature9.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory12 = jsonFactory8.configure(feature9, false);
        java.io.OutputStream outputStream13 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding14 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator15 = jsonFactory12.createGenerator(outputStream13, jsonEncoding14);
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature18 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean19 = serializedString17.equals((java.lang.Object) feature18);
        java.lang.String str20 = serializedString17.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator21 = jsonGenerator15.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString17);
        jsonGenerator15.writeString("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        jsonGenerator15.writeObjectFieldStart("[com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: size=0, hashSize=0, 0/0/0/0 pri/sec/ter/spill (=0), total:0]");
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException26 = jsonGenerationException5.withGenerator(jsonGenerator15);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature9.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(jsonFactory12);
        org.junit.Assert.assertTrue("'" + jsonEncoding14 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding14.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator15);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature18.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator21);
        org.junit.Assert.assertNotNull(jsonGenerationException26);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature11 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean12 = serializedString10.equals((java.lang.Object) feature11);
        java.lang.String str13 = serializedString10.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonGenerator8.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString10);
        jsonGenerator8.writeString("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator17 = jsonGenerator8.useDefaultPrettyPrinter();
        jsonGenerator17.writeObjectField("hi!", (java.lang.Object) 56319);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature11.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertNotNull(jsonGenerator17);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        defaultPrettyPrinter1.writeEndObject(jsonGenerator10, 56320);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator16 = jsonGenerator10.setFeatureMask((int) (short) -1);
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer17 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int18 = byteQuadsCanonicalizer17.secondaryCount();
        jsonGenerator10.setCurrentValue((java.lang.Object) byteQuadsCanonicalizer17);
        int int20 = byteQuadsCanonicalizer17.spilloverCount();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = byteQuadsCanonicalizer17.addName("", 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertNotNull(jsonGenerator16);
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        com.fasterxml.jackson.core.JsonLocation jsonLocation1 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.io.SerializedString serializedString5 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray8 = new char[] { '4', '#' };
        int int10 = serializedString5.appendQuoted(charArray8, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser11 = jsonFactory3.createParser(charArray8);
        boolean boolean13 = jsonParser11.hasTokenId(0);
        com.fasterxml.jackson.core.JsonLocation jsonLocation15 = null;
        com.fasterxml.jackson.core.JsonLocation jsonLocation17 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException18 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation17);
        java.lang.Throwable throwable19 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator20 = null;
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException21 = new com.fasterxml.jackson.core.JsonGenerationException(throwable19, jsonGenerator20);
        jsonParseException18.addSuppressed((java.lang.Throwable) jsonGenerationException21);
        com.fasterxml.jackson.core.JsonParseException jsonParseException23 = new com.fasterxml.jackson.core.JsonParseException(jsonParser11, "com.fasterxml.jackson.core.JsonGenerationException: N/A", jsonLocation15, (java.lang.Throwable) jsonParseException18);
        com.fasterxml.jackson.core.JsonParseException jsonParseException24 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation1, (java.lang.Throwable) jsonParseException23);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException25 = new com.fasterxml.jackson.core.JsonGenerationException((java.lang.Throwable) jsonParseException23);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException26 = new com.fasterxml.jackson.core.JsonGenerationException((java.lang.Throwable) jsonGenerationException25);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator27 = jsonGenerationException25.getProcessor();
        com.fasterxml.jackson.core.ObjectCodec objectCodec28 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory29 = new com.fasterxml.jackson.core.JsonFactory(objectCodec28);
        com.fasterxml.jackson.core.JsonParser.Feature feature30 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean31 = feature30.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory33 = jsonFactory29.configure(feature30, false);
        java.io.OutputStream outputStream34 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding35 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory33.createGenerator(outputStream34, jsonEncoding35);
        jsonGenerator36.writeRaw("JSON");
        jsonGenerator36.writeNumber("hi!");
        int[] intArray41 = com.fasterxml.jackson.core.json.ReaderBasedJsonParser._icLatin1;
        jsonGenerator36.writeArray(intArray41, 64, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString46 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        java.lang.String str47 = serializedString46.toString();
        com.fasterxml.jackson.core.JsonToken jsonToken48 = com.fasterxml.jackson.core.JsonToken.START_OBJECT;
        boolean boolean49 = jsonToken48.isStructStart();
        char[] charArray50 = jsonToken48.asCharArray();
        int int52 = serializedString46.appendUnquoted(charArray50, (int) '#');
        jsonGenerator36.writeRaw(charArray50, 2, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException56 = jsonGenerationException25.withGenerator(jsonGenerator36);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4, #]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(jsonParser11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(jsonGenerator27);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature30.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(jsonFactory33);
        org.junit.Assert.assertTrue("'" + jsonEncoding35 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding35.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertTrue("'" + jsonToken48 + "' != '" + com.fasterxml.jackson.core.JsonToken.START_OBJECT + "'", jsonToken48.equals(com.fasterxml.jackson.core.JsonToken.START_OBJECT));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "{");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "{");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[{]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(jsonGenerationException56);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature> wildcardClass9 = jsonFactory5.getFormatWriteFeatureType();
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = new com.fasterxml.jackson.core.JsonFactory(objectCodec10);
        com.fasterxml.jackson.core.JsonParser.Feature feature12 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean13 = feature12.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory15 = jsonFactory11.configure(feature12, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec16 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = new com.fasterxml.jackson.core.JsonFactory(objectCodec16);
        com.fasterxml.jackson.core.JsonParser.Feature feature18 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean19 = feature18.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory21 = jsonFactory17.configure(feature18, false);
        java.io.OutputStream outputStream22 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding23 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator24 = jsonFactory21.createGenerator(outputStream22, jsonEncoding23);
        com.fasterxml.jackson.core.JsonFactory.Feature feature25 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean26 = jsonFactory21.isEnabled(feature25);
        com.fasterxml.jackson.core.JsonFactory jsonFactory27 = jsonFactory11.disable(feature25);
        boolean boolean28 = jsonFactory5.isEnabled(feature25);
        com.fasterxml.jackson.core.Version version29 = jsonFactory5.version();
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature12.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(jsonFactory15);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature18.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(jsonFactory21);
        org.junit.Assert.assertTrue("'" + jsonEncoding23 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding23.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator24);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature25.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(jsonFactory27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(version29);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter17 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter18 = defaultPrettyPrinter1.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter17);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter19 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter18);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter20 = defaultPrettyPrinter19.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.ObjectCodec objectCodec22 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory23 = new com.fasterxml.jackson.core.JsonFactory(objectCodec22);
        com.fasterxml.jackson.core.JsonParser.Feature feature24 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean25 = feature24.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory27 = jsonFactory23.configure(feature24, false);
        java.io.OutputStream outputStream28 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding29 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator30 = jsonFactory27.createGenerator(outputStream28, jsonEncoding29);
        jsonGenerator30.writeRaw("JSON");
        jsonGenerator30.writeNumber("hi!");
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException35 = new com.fasterxml.jackson.core.JsonGenerationException("com.fasterxml.jackson.core.JsonGenerationException: N/A", jsonGenerator30);
        jsonGenerator30.writeRaw('a');
        defaultPrettyPrinter19.writeEndArray(jsonGenerator30, (int) '4');
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter18);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter20);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature24.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(jsonFactory27);
        org.junit.Assert.assertTrue("'" + jsonEncoding29 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding29.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator30);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        com.fasterxml.jackson.core.ObjectCodec objectCodec1 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory2 = new com.fasterxml.jackson.core.JsonFactory(objectCodec1);
        com.fasterxml.jackson.core.JsonParser.Feature feature3 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean4 = feature3.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory6 = jsonFactory2.configure(feature3, false);
        java.io.OutputStream outputStream7 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding8 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator9 = jsonFactory6.createGenerator(outputStream7, jsonEncoding8);
        jsonGenerator9.writeRaw("JSON");
        boolean boolean12 = jsonGenerator9.isClosed();
        nopIndenter0.writeIndentation(jsonGenerator9, 64);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature3.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(jsonFactory6);
        org.junit.Assert.assertTrue("'" + jsonEncoding8 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding8.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.JsonFactory.Feature feature9 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean10 = jsonFactory5.isEnabled(feature9);
        java.io.Writer writer11 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator12 = jsonFactory5.createJsonGenerator(writer11);
        com.fasterxml.jackson.core.ObjectCodec objectCodec13 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory14 = new com.fasterxml.jackson.core.JsonFactory(objectCodec13);
        com.fasterxml.jackson.core.JsonParser.Feature feature15 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean16 = feature15.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = jsonFactory14.configure(feature15, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec19 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = new com.fasterxml.jackson.core.JsonFactory(objectCodec19);
        com.fasterxml.jackson.core.JsonParser.Feature feature21 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean22 = feature21.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory24 = jsonFactory20.configure(feature21, false);
        java.io.OutputStream outputStream25 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding26 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator27 = jsonFactory24.createGenerator(outputStream25, jsonEncoding26);
        com.fasterxml.jackson.core.JsonFactory.Feature feature28 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean29 = jsonFactory24.isEnabled(feature28);
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = jsonFactory14.disable(feature28);
        com.fasterxml.jackson.core.JsonFactory jsonFactory31 = jsonFactory5.disable(feature28);
        com.fasterxml.jackson.core.ObjectCodec objectCodec32 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory33 = new com.fasterxml.jackson.core.JsonFactory(objectCodec32);
        com.fasterxml.jackson.core.JsonParser.Feature feature34 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean35 = feature34.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory37 = jsonFactory33.configure(feature34, false);
        java.io.OutputStream outputStream38 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding39 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator40 = jsonFactory37.createGenerator(outputStream38, jsonEncoding39);
        com.fasterxml.jackson.core.JsonFactory.Feature feature41 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean42 = jsonFactory37.isEnabled(feature41);
        java.io.Writer writer43 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator44 = jsonFactory37.createJsonGenerator(writer43);
        com.fasterxml.jackson.core.ObjectCodec objectCodec45 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory46 = new com.fasterxml.jackson.core.JsonFactory(objectCodec45);
        com.fasterxml.jackson.core.JsonParser.Feature feature47 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean48 = feature47.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory50 = jsonFactory46.configure(feature47, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec51 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory52 = new com.fasterxml.jackson.core.JsonFactory(objectCodec51);
        com.fasterxml.jackson.core.JsonParser.Feature feature53 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean54 = feature53.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory56 = jsonFactory52.configure(feature53, false);
        java.io.OutputStream outputStream57 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding58 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator59 = jsonFactory56.createGenerator(outputStream57, jsonEncoding58);
        com.fasterxml.jackson.core.JsonFactory.Feature feature60 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean61 = jsonFactory56.isEnabled(feature60);
        com.fasterxml.jackson.core.JsonFactory jsonFactory62 = jsonFactory46.disable(feature60);
        com.fasterxml.jackson.core.JsonFactory jsonFactory63 = jsonFactory37.disable(feature60);
        com.fasterxml.jackson.core.JsonFactory jsonFactory65 = jsonFactory5.configure(feature60, false);
        com.fasterxml.jackson.core.io.SerializedString serializedString67 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonToken jsonToken68 = com.fasterxml.jackson.core.JsonToken.START_OBJECT;
        boolean boolean69 = jsonToken68.isStructStart();
        char[] charArray70 = jsonToken68.asCharArray();
        int int72 = serializedString67.appendQuoted(charArray70, 15);
        com.fasterxml.jackson.core.JsonParser jsonParser75 = jsonFactory5.createParser(charArray70, (int) (short) 0, 100);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature9.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(jsonGenerator12);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature15.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(jsonFactory18);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature21.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(jsonFactory24);
        org.junit.Assert.assertTrue("'" + jsonEncoding26 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding26.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator27);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature28.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(jsonFactory30);
        org.junit.Assert.assertNotNull(jsonFactory31);
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature34.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(jsonFactory37);
        org.junit.Assert.assertTrue("'" + jsonEncoding39 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding39.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator40);
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature41.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(jsonGenerator44);
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature47.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(jsonFactory50);
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature53.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(jsonFactory56);
        org.junit.Assert.assertTrue("'" + jsonEncoding58 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding58.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator59);
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature60.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(jsonFactory62);
        org.junit.Assert.assertNotNull(jsonFactory63);
        org.junit.Assert.assertNotNull(jsonFactory65);
        org.junit.Assert.assertTrue("'" + jsonToken68 + "' != '" + com.fasterxml.jackson.core.JsonToken.START_OBJECT + "'", jsonToken68.equals(com.fasterxml.jackson.core.JsonToken.START_OBJECT));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "{");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "{");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[{]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(jsonParser75);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        defaultPrettyPrinter1.writeEndObject(jsonGenerator10, 56320);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator16 = jsonGenerator10.setFeatureMask((int) (short) -1);
        com.fasterxml.jackson.core.io.SerializedString serializedString18 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray21 = new char[] { '4', '#' };
        int int23 = serializedString18.appendQuoted(charArray21, (int) (byte) 10);
        char[] charArray24 = serializedString18.asQuotedChars();
        char[] charArray25 = serializedString18.asQuotedChars();
        jsonGenerator10.writeRaw(charArray25, (int) 'a', 0);
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertNotNull(jsonGenerator16);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, #]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[h, i, !]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[h, i, !]");
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        com.fasterxml.jackson.core.ObjectCodec objectCodec17 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = new com.fasterxml.jackson.core.JsonFactory(objectCodec17);
        com.fasterxml.jackson.core.JsonParser.Feature feature19 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean20 = feature19.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = jsonFactory18.configure(feature19, false);
        java.io.OutputStream outputStream23 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding24 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = jsonFactory22.createGenerator(outputStream23, jsonEncoding24);
        com.fasterxml.jackson.core.io.SerializedString serializedString27 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature28 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean29 = serializedString27.equals((java.lang.Object) feature28);
        java.lang.String str30 = serializedString27.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator31 = jsonGenerator25.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString27);
        defaultPrettyPrinter1.beforeArrayValues(jsonGenerator25);
        java.lang.Object obj33 = jsonGenerator25.getOutputTarget();
        jsonGenerator25.writeNumber("");
        com.fasterxml.jackson.core.JsonToken jsonToken36 = com.fasterxml.jackson.core.JsonToken.END_ARRAY;
        byte[] byteArray37 = jsonToken36.asByteArray();
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator25.writeUTF8String(byteArray37, (-1822880715), (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1822880715");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature19.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(jsonFactory22);
        org.junit.Assert.assertTrue("'" + jsonEncoding24 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding24.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator25);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature28.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + jsonToken36 + "' != '" + com.fasterxml.jackson.core.JsonToken.END_ARRAY + "'", jsonToken36.equals(com.fasterxml.jackson.core.JsonToken.END_ARRAY));
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[93]");
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        com.fasterxml.jackson.core.ObjectCodec objectCodec1 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory2 = new com.fasterxml.jackson.core.JsonFactory(objectCodec1);
        com.fasterxml.jackson.core.io.SerializedString serializedString4 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray7 = new char[] { '4', '#' };
        int int9 = serializedString4.appendQuoted(charArray7, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser10 = jsonFactory2.createParser(charArray7);
        boolean boolean12 = jsonParser10.hasTokenId(0);
        com.fasterxml.jackson.core.JsonParseException jsonParseException14 = new com.fasterxml.jackson.core.JsonParseException(jsonParser10, "com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter16 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec17 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = new com.fasterxml.jackson.core.JsonFactory(objectCodec17);
        com.fasterxml.jackson.core.JsonParser.Feature feature19 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean20 = feature19.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = jsonFactory18.configure(feature19, false);
        java.io.OutputStream outputStream23 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding24 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = jsonFactory22.createGenerator(outputStream23, jsonEncoding24);
        jsonGenerator25.writeRaw("JSON");
        defaultPrettyPrinter16.writeEndObject(jsonGenerator25, 56320);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator31 = jsonGenerator25.setFeatureMask((int) (short) -1);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException32 = new com.fasterxml.jackson.core.JsonGenerationException("com.fasterxml.jackson.core.JsonGenerationException: N/A", (java.lang.Throwable) jsonParseException14, jsonGenerator31);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter34 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec35 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory36 = new com.fasterxml.jackson.core.JsonFactory(objectCodec35);
        com.fasterxml.jackson.core.JsonParser.Feature feature37 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean38 = feature37.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory36.configure(feature37, false);
        java.io.OutputStream outputStream41 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding42 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator43 = jsonFactory40.createGenerator(outputStream41, jsonEncoding42);
        jsonGenerator43.writeRaw("JSON");
        boolean boolean46 = jsonGenerator43.isClosed();
        jsonGenerator43.writeRaw('4');
        defaultPrettyPrinter34.writeObjectFieldValueSeparator(jsonGenerator43);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter50 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter51 = defaultPrettyPrinter34.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter50);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter53 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        defaultPrettyPrinter53.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter57 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec58 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory59 = new com.fasterxml.jackson.core.JsonFactory(objectCodec58);
        com.fasterxml.jackson.core.JsonParser.Feature feature60 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean61 = feature60.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory63 = jsonFactory59.configure(feature60, false);
        java.io.OutputStream outputStream64 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding65 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator66 = jsonFactory63.createGenerator(outputStream64, jsonEncoding65);
        jsonGenerator66.writeRaw("JSON");
        boolean boolean69 = jsonGenerator66.isClosed();
        jsonGenerator66.writeRaw('4');
        defaultPrettyPrinter57.writeObjectFieldValueSeparator(jsonGenerator66);
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory74 = new com.fasterxml.jackson.core.JsonFactory(objectCodec73);
        com.fasterxml.jackson.core.JsonParser.Feature feature75 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean76 = feature75.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory78 = jsonFactory74.configure(feature75, false);
        java.io.OutputStream outputStream79 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding80 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator81 = jsonFactory78.createGenerator(outputStream79, jsonEncoding80);
        com.fasterxml.jackson.core.io.SerializedString serializedString83 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature84 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean85 = serializedString83.equals((java.lang.Object) feature84);
        java.lang.String str86 = serializedString83.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator87 = jsonGenerator81.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString83);
        defaultPrettyPrinter57.beforeArrayValues(jsonGenerator81);
        defaultPrettyPrinter53.writeEndObject(jsonGenerator81, (int) (short) 10);
        defaultPrettyPrinter51.writeArrayValueSeparator(jsonGenerator81);
        java.math.BigInteger bigInteger92 = null;
        jsonGenerator81.writeNumber(bigInteger92);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException94 = jsonGenerationException32.withGenerator(jsonGenerator81);
        jsonGenerator81.writeNumber((long) '#');
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4, #]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(jsonParser10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature19.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(jsonFactory22);
        org.junit.Assert.assertTrue("'" + jsonEncoding24 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding24.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator25);
        org.junit.Assert.assertNotNull(jsonGenerator31);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature37.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertTrue("'" + jsonEncoding42 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding42.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter51);
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature60.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(jsonFactory63);
        org.junit.Assert.assertTrue("'" + jsonEncoding65 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding65.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + feature75 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature75.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(jsonFactory78);
        org.junit.Assert.assertTrue("'" + jsonEncoding80 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding80.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator81);
        org.junit.Assert.assertTrue("'" + feature84 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature84.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator87);
        org.junit.Assert.assertNotNull(jsonGenerationException94);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonParser.Feature feature8 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean9 = feature8.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory7.configure(feature8, false);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding13 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory11.createGenerator(outputStream12, jsonEncoding13);
        com.fasterxml.jackson.core.JsonFactory.Feature feature15 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean16 = jsonFactory11.isEnabled(feature15);
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = jsonFactory1.disable(feature15);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator18 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = jsonFactory1.setInputDecorator(inputDecorator18);
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = jsonFactory19.copy();
        com.fasterxml.jackson.core.ObjectCodec objectCodec21 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = new com.fasterxml.jackson.core.JsonFactory(objectCodec21);
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray27 = new char[] { '4', '#' };
        int int29 = serializedString24.appendQuoted(charArray27, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory22.createParser(charArray27);
        boolean boolean32 = jsonParser30.hasTokenId(0);
        com.fasterxml.jackson.core.JsonParseException jsonParseException34 = new com.fasterxml.jackson.core.JsonParseException(jsonParser30, "com.fasterxml.jackson.core.JsonGenerationException: N/A");
        boolean boolean36 = jsonParser30.hasTokenId(0);
        com.fasterxml.jackson.core.JsonParser.Feature feature37 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
        com.fasterxml.jackson.core.JsonParser jsonParser39 = jsonParser30.configure(feature37, true);
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory20.disable(feature37);
        com.fasterxml.jackson.core.ObjectCodec objectCodec41 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory42 = new com.fasterxml.jackson.core.JsonFactory(objectCodec41);
        com.fasterxml.jackson.core.JsonParser.Feature feature43 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean44 = feature43.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory46 = jsonFactory42.configure(feature43, false);
        java.io.OutputStream outputStream47 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding48 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator49 = jsonFactory46.createGenerator(outputStream47, jsonEncoding48);
        com.fasterxml.jackson.core.JsonFactory.Feature feature50 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean51 = jsonFactory46.isEnabled(feature50);
        java.io.Writer writer52 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator53 = jsonFactory46.createJsonGenerator(writer52);
        com.fasterxml.jackson.core.ObjectCodec objectCodec54 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory55 = new com.fasterxml.jackson.core.JsonFactory(objectCodec54);
        com.fasterxml.jackson.core.JsonParser.Feature feature56 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean57 = feature56.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory59 = jsonFactory55.configure(feature56, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec60 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory61 = new com.fasterxml.jackson.core.JsonFactory(objectCodec60);
        com.fasterxml.jackson.core.JsonParser.Feature feature62 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean63 = feature62.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory65 = jsonFactory61.configure(feature62, false);
        java.io.OutputStream outputStream66 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding67 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator68 = jsonFactory65.createGenerator(outputStream66, jsonEncoding67);
        com.fasterxml.jackson.core.JsonFactory.Feature feature69 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean70 = jsonFactory65.isEnabled(feature69);
        com.fasterxml.jackson.core.JsonFactory jsonFactory71 = jsonFactory55.disable(feature69);
        com.fasterxml.jackson.core.JsonFactory jsonFactory72 = jsonFactory46.disable(feature69);
        boolean boolean73 = feature69.enabledByDefault();
        boolean boolean74 = jsonFactory40.isEnabled(feature69);
        java.net.URL uRL75 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser76 = jsonFactory40.createJsonParser(uRL75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature8.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + jsonEncoding13 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding13.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature15.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(jsonFactory17);
        org.junit.Assert.assertNotNull(jsonFactory19);
        org.junit.Assert.assertNotNull(jsonFactory20);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[4, #]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER + "'", feature37.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER));
        org.junit.Assert.assertNotNull(jsonParser39);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature43.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(jsonFactory46);
        org.junit.Assert.assertTrue("'" + jsonEncoding48 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding48.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator49);
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature50.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(jsonGenerator53);
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature56.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(jsonFactory59);
        org.junit.Assert.assertTrue("'" + feature62 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature62.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(jsonFactory65);
        org.junit.Assert.assertTrue("'" + jsonEncoding67 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding67.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator68);
        org.junit.Assert.assertTrue("'" + feature69 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature69.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(jsonFactory71);
        org.junit.Assert.assertNotNull(jsonFactory72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonParser.Feature feature8 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean9 = feature8.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory7.configure(feature8, false);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding13 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory11.createGenerator(outputStream12, jsonEncoding13);
        com.fasterxml.jackson.core.JsonFactory.Feature feature15 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean16 = jsonFactory11.isEnabled(feature15);
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = jsonFactory1.disable(feature15);
        com.fasterxml.jackson.core.JsonFactory.Feature feature18 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean19 = feature18.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = jsonFactory1.disable(feature18);
        java.io.OutputStream outputStream21 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding22 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        boolean boolean23 = jsonEncoding22.isBigEndian();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator24 = jsonFactory20.createGenerator(outputStream21, jsonEncoding22);
        com.fasterxml.jackson.core.JsonParser.Feature feature25 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonFactory jsonFactory27 = jsonFactory20.configure(feature25, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature8.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + jsonEncoding13 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding13.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature15.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(jsonFactory17);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature18.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(jsonFactory20);
        org.junit.Assert.assertTrue("'" + jsonEncoding22 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding22.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jsonGenerator24);
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        com.fasterxml.jackson.core.FormatSchema formatSchema17 = jsonGenerator10.getSchema();
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator10.writeRaw("[", (int) '#', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 135");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(formatSchema17);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        defaultPrettyPrinter1.writeEndObject(jsonGenerator10, 56320);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter16 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec17 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = new com.fasterxml.jackson.core.JsonFactory(objectCodec17);
        com.fasterxml.jackson.core.JsonParser.Feature feature19 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean20 = feature19.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = jsonFactory18.configure(feature19, false);
        java.io.OutputStream outputStream23 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding24 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = jsonFactory22.createGenerator(outputStream23, jsonEncoding24);
        jsonGenerator25.writeRaw("JSON");
        boolean boolean28 = jsonGenerator25.isClosed();
        jsonGenerator25.writeRaw('4');
        defaultPrettyPrinter16.writeObjectFieldValueSeparator(jsonGenerator25);
        com.fasterxml.jackson.core.FormatSchema formatSchema32 = jsonGenerator25.getSchema();
        defaultPrettyPrinter1.writeEndObject(jsonGenerator25, 31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec36 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory37 = new com.fasterxml.jackson.core.JsonFactory(objectCodec36);
        com.fasterxml.jackson.core.io.SerializedString serializedString39 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray42 = new char[] { '4', '#' };
        int int44 = serializedString39.appendQuoted(charArray42, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser45 = jsonFactory37.createParser(charArray42);
        java.lang.String str46 = jsonFactory37.getFormatName();
        com.fasterxml.jackson.core.JsonParser jsonParser48 = jsonFactory37.createJsonParser("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec50 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = new com.fasterxml.jackson.core.JsonFactory(objectCodec50);
        com.fasterxml.jackson.core.io.SerializedString serializedString53 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray56 = new char[] { '4', '#' };
        int int58 = serializedString53.appendQuoted(charArray56, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser59 = jsonFactory51.createParser(charArray56);
        boolean boolean61 = jsonParser59.hasTokenId(0);
        com.fasterxml.jackson.core.JsonLocation jsonLocation63 = null;
        com.fasterxml.jackson.core.JsonLocation jsonLocation65 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException66 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation65);
        java.lang.Throwable throwable67 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator68 = null;
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException69 = new com.fasterxml.jackson.core.JsonGenerationException(throwable67, jsonGenerator68);
        jsonParseException66.addSuppressed((java.lang.Throwable) jsonGenerationException69);
        com.fasterxml.jackson.core.JsonParseException jsonParseException71 = new com.fasterxml.jackson.core.JsonParseException(jsonParser59, "com.fasterxml.jackson.core.JsonGenerationException: N/A", jsonLocation63, (java.lang.Throwable) jsonParseException66);
        com.fasterxml.jackson.core.JsonParseException jsonParseException72 = new com.fasterxml.jackson.core.JsonParseException(jsonParser48, "com.fasterxml.jackson.core.JsonGenerationException: N/A", (java.lang.Throwable) jsonParseException66);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter74 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec75 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory76 = new com.fasterxml.jackson.core.JsonFactory(objectCodec75);
        com.fasterxml.jackson.core.JsonParser.Feature feature77 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean78 = feature77.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory80 = jsonFactory76.configure(feature77, false);
        java.io.OutputStream outputStream81 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding82 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator83 = jsonFactory80.createGenerator(outputStream81, jsonEncoding82);
        jsonGenerator83.writeRaw("JSON");
        defaultPrettyPrinter74.writeEndObject(jsonGenerator83, 56320);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException88 = new com.fasterxml.jackson.core.JsonGenerationException("hi!", (java.lang.Throwable) jsonParseException66, jsonGenerator83);
        com.fasterxml.jackson.core.io.SerializedString serializedString90 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature91 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean92 = serializedString90.equals((java.lang.Object) feature91);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator93 = jsonGenerator83.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString90);
        jsonGenerator93.writeRaw("");
        java.math.BigDecimal bigDecimal97 = null;
        jsonGenerator93.writeNumberField("hi!", bigDecimal97);
        defaultPrettyPrinter1.beforeObjectEntries(jsonGenerator93);
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature19.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(jsonFactory22);
        org.junit.Assert.assertTrue("'" + jsonEncoding24 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding24.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(formatSchema32);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[4, #]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(jsonParser45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "JSON" + "'", str46, "JSON");
        org.junit.Assert.assertNotNull(jsonParser48);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[4, #]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(jsonParser59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + feature77 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature77.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(jsonFactory80);
        org.junit.Assert.assertTrue("'" + jsonEncoding82 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding82.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator83);
        org.junit.Assert.assertTrue("'" + feature91 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature91.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(jsonGenerator93);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature> wildcardClass9 = jsonFactory5.getFormatWriteFeatureType();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes10 = jsonFactory5.getCharacterEscapes();
        com.fasterxml.jackson.core.JsonParser.Feature feature11 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory12 = jsonFactory5.enable(feature11);
        java.io.Writer writer13 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory12.createGenerator(writer13);
        com.fasterxml.jackson.core.JsonParser jsonParser16 = jsonFactory12.createJsonParser("[");
        boolean boolean17 = jsonParser16.isClosed();
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(characterEscapes10);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES + "'", feature11.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES));
        org.junit.Assert.assertNotNull(jsonFactory12);
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertNotNull(jsonParser16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        defaultPrettyPrinter1.writeEndObject(jsonGenerator10, 56320);
        int[] intArray15 = com.fasterxml.jackson.core.io.CharTypes.getInputCodeLatin1JsNames();
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator10.writeArray(intArray15, (int) (byte) -1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        jsonGenerator8.writeRaw("JSON");
        boolean boolean11 = jsonGenerator8.isClosed();
        jsonGenerator8.writeNumber((float) (byte) 1);
        boolean boolean14 = jsonGenerator8.canWriteBinaryNatively();
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        jsonGenerator8.writeRaw("JSON");
        jsonGenerator8.writeNumber("hi!");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonGenerator8.setHighestNonEscapedChar((-1));
        double[] doubleArray16 = new double[] { 10.0d };
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator14.writeArray(doubleArray16, (-1700594541), 33);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1700594541");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0]");
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature11 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean12 = serializedString10.equals((java.lang.Object) feature11);
        java.lang.String str13 = serializedString10.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonGenerator8.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString10);
        jsonGenerator8.writeString("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        jsonGenerator8.writeObjectFieldStart("[com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: size=0, hashSize=0, 0/0/0/0 pri/sec/ter/spill (=0), total:0]");
        com.fasterxml.jackson.core.JsonToken jsonToken19 = com.fasterxml.jackson.core.JsonToken.END_ARRAY;
        byte[] byteArray20 = jsonToken19.asByteArray();
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator8.writeUTF8String(byteArray20, 5, 31);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: Can not write a string, expecting field name");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature11.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + jsonToken19 + "' != '" + com.fasterxml.jackson.core.JsonToken.END_ARRAY + "'", jsonToken19.equals(com.fasterxml.jackson.core.JsonToken.END_ARRAY));
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[93]");
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.JsonFactory.Feature feature9 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean10 = jsonFactory5.isEnabled(feature9);
        java.io.Writer writer11 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator12 = jsonFactory5.createJsonGenerator(writer11);
        com.fasterxml.jackson.core.ObjectCodec objectCodec13 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory14 = new com.fasterxml.jackson.core.JsonFactory(objectCodec13);
        com.fasterxml.jackson.core.JsonParser.Feature feature15 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean16 = feature15.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = jsonFactory14.configure(feature15, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec19 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = new com.fasterxml.jackson.core.JsonFactory(objectCodec19);
        com.fasterxml.jackson.core.JsonParser.Feature feature21 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean22 = feature21.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory24 = jsonFactory20.configure(feature21, false);
        java.io.OutputStream outputStream25 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding26 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator27 = jsonFactory24.createGenerator(outputStream25, jsonEncoding26);
        com.fasterxml.jackson.core.JsonFactory.Feature feature28 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean29 = jsonFactory24.isEnabled(feature28);
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = jsonFactory14.disable(feature28);
        com.fasterxml.jackson.core.JsonFactory jsonFactory31 = jsonFactory5.disable(feature28);
        java.io.OutputStream outputStream32 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding33 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        java.lang.String str34 = jsonEncoding33.getJavaName();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory5.createGenerator(outputStream32, jsonEncoding33);
        jsonGenerator35.writeNumber((-1700599777));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature9.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(jsonGenerator12);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature15.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(jsonFactory18);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature21.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(jsonFactory24);
        org.junit.Assert.assertTrue("'" + jsonEncoding26 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding26.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator27);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature28.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(jsonFactory30);
        org.junit.Assert.assertNotNull(jsonFactory31);
        org.junit.Assert.assertTrue("'" + jsonEncoding33 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding33.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTF-8" + "'", str34, "UTF-8");
        org.junit.Assert.assertNotNull(jsonGenerator35);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        defaultPrettyPrinter1.writeEndObject(jsonGenerator10, 56320);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator16 = jsonGenerator10.setFeatureMask((int) (short) -1);
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer17 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int18 = byteQuadsCanonicalizer17.secondaryCount();
        jsonGenerator10.setCurrentValue((java.lang.Object) byteQuadsCanonicalizer17);
        int int20 = byteQuadsCanonicalizer17.totalCount();
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertNotNull(jsonGenerator16);
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        com.fasterxml.jackson.core.ObjectCodec objectCodec1 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory2 = new com.fasterxml.jackson.core.JsonFactory(objectCodec1);
        com.fasterxml.jackson.core.io.SerializedString serializedString4 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray7 = new char[] { '4', '#' };
        int int9 = serializedString4.appendQuoted(charArray7, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser10 = jsonFactory2.createParser(charArray7);
        java.lang.String str11 = jsonFactory2.getFormatName();
        com.fasterxml.jackson.core.JsonParser jsonParser13 = jsonFactory2.createJsonParser("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec15 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory16 = new com.fasterxml.jackson.core.JsonFactory(objectCodec15);
        com.fasterxml.jackson.core.io.SerializedString serializedString18 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray21 = new char[] { '4', '#' };
        int int23 = serializedString18.appendQuoted(charArray21, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser24 = jsonFactory16.createParser(charArray21);
        boolean boolean26 = jsonParser24.hasTokenId(0);
        com.fasterxml.jackson.core.JsonLocation jsonLocation28 = null;
        com.fasterxml.jackson.core.JsonLocation jsonLocation30 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException31 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation30);
        java.lang.Throwable throwable32 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator33 = null;
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException34 = new com.fasterxml.jackson.core.JsonGenerationException(throwable32, jsonGenerator33);
        jsonParseException31.addSuppressed((java.lang.Throwable) jsonGenerationException34);
        com.fasterxml.jackson.core.JsonParseException jsonParseException36 = new com.fasterxml.jackson.core.JsonParseException(jsonParser24, "com.fasterxml.jackson.core.JsonGenerationException: N/A", jsonLocation28, (java.lang.Throwable) jsonParseException31);
        com.fasterxml.jackson.core.JsonParseException jsonParseException37 = new com.fasterxml.jackson.core.JsonParseException(jsonParser13, "com.fasterxml.jackson.core.JsonGenerationException: N/A", (java.lang.Throwable) jsonParseException31);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter39 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec40 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = new com.fasterxml.jackson.core.JsonFactory(objectCodec40);
        com.fasterxml.jackson.core.JsonParser.Feature feature42 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean43 = feature42.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory45 = jsonFactory41.configure(feature42, false);
        java.io.OutputStream outputStream46 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding47 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator48 = jsonFactory45.createGenerator(outputStream46, jsonEncoding47);
        jsonGenerator48.writeRaw("JSON");
        defaultPrettyPrinter39.writeEndObject(jsonGenerator48, 56320);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException53 = new com.fasterxml.jackson.core.JsonGenerationException("hi!", (java.lang.Throwable) jsonParseException31, jsonGenerator48);
        java.math.BigDecimal bigDecimal55 = null;
        jsonGenerator48.writeNumberField("JSON", bigDecimal55);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator48.writeEndObject();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: Current context not an object but ROOT");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4, #]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(jsonParser10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JSON" + "'", str11, "JSON");
        org.junit.Assert.assertNotNull(jsonParser13);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, #]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(jsonParser24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature42.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(jsonFactory45);
        org.junit.Assert.assertTrue("'" + jsonEncoding47 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding47.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator48);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        com.fasterxml.jackson.core.ObjectCodec objectCodec17 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = new com.fasterxml.jackson.core.JsonFactory(objectCodec17);
        com.fasterxml.jackson.core.JsonParser.Feature feature19 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean20 = feature19.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = jsonFactory18.configure(feature19, false);
        java.io.OutputStream outputStream23 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding24 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = jsonFactory22.createGenerator(outputStream23, jsonEncoding24);
        com.fasterxml.jackson.core.io.SerializedString serializedString27 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature28 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean29 = serializedString27.equals((java.lang.Object) feature28);
        java.lang.String str30 = serializedString27.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator31 = jsonGenerator25.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString27);
        defaultPrettyPrinter1.beforeArrayValues(jsonGenerator25);
        jsonGenerator25.writeNumberField("hi!", 0.0f);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature36 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = jsonGenerator25.disable(feature36);
        jsonGenerator25.writeNull();
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature19.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(jsonFactory22);
        org.junit.Assert.assertTrue("'" + jsonEncoding24 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding24.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator25);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature28.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator31);
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS + "'", feature36.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));
        org.junit.Assert.assertNotNull(jsonGenerator37);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.JsonFactory.Feature feature9 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean10 = jsonFactory5.isEnabled(feature9);
        java.io.Writer writer11 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator12 = jsonFactory5.createJsonGenerator(writer11);
        java.io.Reader reader13 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser14 = jsonFactory5.createJsonParser(reader13);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler15 = jsonFactory5._getBufferRecycler();
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature9.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(jsonGenerator12);
        org.junit.Assert.assertNotNull(jsonParser14);
        org.junit.Assert.assertNotNull(bufferRecycler15);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature> wildcardClass9 = jsonFactory5.getFormatWriteFeatureType();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes10 = jsonFactory5.getCharacterEscapes();
        com.fasterxml.jackson.core.JsonParser.Feature feature11 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory12 = jsonFactory5.enable(feature11);
        java.io.Writer writer13 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory12.createGenerator(writer13);
        com.fasterxml.jackson.core.ObjectCodec objectCodec15 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory16 = new com.fasterxml.jackson.core.JsonFactory(objectCodec15);
        com.fasterxml.jackson.core.JsonParser.Feature feature17 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature17.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = jsonFactory16.configure(feature17, false);
        java.io.OutputStream outputStream21 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding22 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator23 = jsonFactory20.createGenerator(outputStream21, jsonEncoding22);
        com.fasterxml.jackson.core.JsonFactory.Feature feature24 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean25 = jsonFactory20.isEnabled(feature24);
        java.io.Writer writer26 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator27 = jsonFactory20.createJsonGenerator(writer26);
        com.fasterxml.jackson.core.ObjectCodec objectCodec28 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory29 = new com.fasterxml.jackson.core.JsonFactory(objectCodec28);
        com.fasterxml.jackson.core.JsonParser.Feature feature30 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean31 = feature30.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory33 = jsonFactory29.configure(feature30, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec34 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory35 = new com.fasterxml.jackson.core.JsonFactory(objectCodec34);
        com.fasterxml.jackson.core.JsonParser.Feature feature36 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean37 = feature36.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory39 = jsonFactory35.configure(feature36, false);
        java.io.OutputStream outputStream40 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding41 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator42 = jsonFactory39.createGenerator(outputStream40, jsonEncoding41);
        com.fasterxml.jackson.core.JsonFactory.Feature feature43 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean44 = jsonFactory39.isEnabled(feature43);
        com.fasterxml.jackson.core.JsonFactory jsonFactory45 = jsonFactory29.disable(feature43);
        com.fasterxml.jackson.core.JsonFactory jsonFactory46 = jsonFactory20.disable(feature43);
        boolean boolean47 = feature43.enabledByDefault();
        int int48 = feature43.getMask();
        com.fasterxml.jackson.core.JsonFactory jsonFactory49 = jsonFactory12.enable(feature43);
        boolean boolean50 = jsonFactory49.requiresCustomCodec();
        com.fasterxml.jackson.core.JsonGenerator.Feature feature51 = com.fasterxml.jackson.core.JsonGenerator.Feature.IGNORE_UNKNOWN;
        boolean boolean53 = feature51.enabledIn((int) '4');
        com.fasterxml.jackson.core.JsonFactory jsonFactory55 = jsonFactory49.configure(feature51, false);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(characterEscapes10);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES + "'", feature11.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES));
        org.junit.Assert.assertNotNull(jsonFactory12);
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature17.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(jsonFactory20);
        org.junit.Assert.assertTrue("'" + jsonEncoding22 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding22.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator23);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature24.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(jsonGenerator27);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature30.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(jsonFactory33);
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature36.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(jsonFactory39);
        org.junit.Assert.assertTrue("'" + jsonEncoding41 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding41.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator42);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature43.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(jsonFactory45);
        org.junit.Assert.assertNotNull(jsonFactory46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(jsonFactory49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.IGNORE_UNKNOWN + "'", feature51.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.IGNORE_UNKNOWN));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(jsonFactory55);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonParser.Feature feature8 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean9 = feature8.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory7.configure(feature8, false);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding13 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory11.createGenerator(outputStream12, jsonEncoding13);
        com.fasterxml.jackson.core.JsonFactory.Feature feature15 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean16 = jsonFactory11.isEnabled(feature15);
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = jsonFactory1.disable(feature15);
        com.fasterxml.jackson.core.JsonFactory.Feature feature18 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean19 = feature18.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = jsonFactory1.disable(feature18);
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = jsonFactory20.setRootValueSeparator("");
        java.io.File file23 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding24 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        java.lang.String str25 = jsonEncoding24.getJavaName();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonGenerator jsonGenerator26 = jsonFactory22.createGenerator(file23, jsonEncoding24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature8.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + jsonEncoding13 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding13.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature15.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(jsonFactory17);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature18.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(jsonFactory20);
        org.junit.Assert.assertNotNull(jsonFactory22);
        org.junit.Assert.assertTrue("'" + jsonEncoding24 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding24.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTF-8" + "'", str25, "UTF-8");
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonParser.Feature feature8 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean9 = feature8.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory7.configure(feature8, false);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding13 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory11.createGenerator(outputStream12, jsonEncoding13);
        com.fasterxml.jackson.core.JsonFactory.Feature feature15 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean16 = jsonFactory11.isEnabled(feature15);
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = jsonFactory1.disable(feature15);
        com.fasterxml.jackson.core.JsonFactory.Feature feature18 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean19 = feature18.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = jsonFactory1.disable(feature18);
        java.io.OutputStream outputStream21 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding22 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        boolean boolean23 = jsonEncoding22.isBigEndian();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator24 = jsonFactory20.createGenerator(outputStream21, jsonEncoding22);
        java.lang.String str25 = jsonEncoding22.getJavaName();
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature8.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + jsonEncoding13 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding13.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature15.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(jsonFactory17);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature18.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(jsonFactory20);
        org.junit.Assert.assertTrue("'" + jsonEncoding22 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding22.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jsonGenerator24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTF-8" + "'", str25, "UTF-8");
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray6 = new char[] { '4', '#' };
        int int8 = serializedString3.appendQuoted(charArray6, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory1.createParser(charArray6);
        boolean boolean11 = jsonParser9.hasTokenId(0);
        com.fasterxml.jackson.core.JsonParseException jsonParseException13 = new com.fasterxml.jackson.core.JsonParseException(jsonParser9, "JSON");
        com.fasterxml.jackson.core.ObjectCodec objectCodec14 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory15 = new com.fasterxml.jackson.core.JsonFactory(objectCodec14);
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean17 = feature16.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = jsonFactory15.configure(feature16, false);
        java.io.OutputStream outputStream20 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding21 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator22 = jsonFactory19.createGenerator(outputStream20, jsonEncoding21);
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature25 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean26 = serializedString24.equals((java.lang.Object) feature25);
        java.lang.String str27 = serializedString24.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator28 = jsonGenerator22.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString24);
        jsonGenerator22.writeString("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator31 = jsonGenerator22.useDefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException32 = new com.fasterxml.jackson.core.JsonGenerationException((java.lang.Throwable) jsonParseException13, jsonGenerator22);
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        java.lang.String str35 = serializedString34.toString();
        com.fasterxml.jackson.core.ObjectCodec objectCodec36 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory37 = new com.fasterxml.jackson.core.JsonFactory(objectCodec36);
        com.fasterxml.jackson.core.JsonParser.Feature feature38 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean39 = feature38.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = jsonFactory37.configure(feature38, false);
        java.io.OutputStream outputStream42 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding43 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator44 = jsonFactory41.createGenerator(outputStream42, jsonEncoding43);
        com.fasterxml.jackson.core.JsonFactory.Feature feature45 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean46 = jsonFactory41.isEnabled(feature45);
        java.io.Writer writer47 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator48 = jsonFactory41.createJsonGenerator(writer47);
        com.fasterxml.jackson.core.ObjectCodec objectCodec49 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory50 = new com.fasterxml.jackson.core.JsonFactory(objectCodec49);
        com.fasterxml.jackson.core.JsonParser.Feature feature51 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean52 = feature51.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory54 = jsonFactory50.configure(feature51, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec55 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory56 = new com.fasterxml.jackson.core.JsonFactory(objectCodec55);
        com.fasterxml.jackson.core.JsonParser.Feature feature57 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean58 = feature57.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory60 = jsonFactory56.configure(feature57, false);
        java.io.OutputStream outputStream61 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding62 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator63 = jsonFactory60.createGenerator(outputStream61, jsonEncoding62);
        com.fasterxml.jackson.core.JsonFactory.Feature feature64 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean65 = jsonFactory60.isEnabled(feature64);
        com.fasterxml.jackson.core.JsonFactory jsonFactory66 = jsonFactory50.disable(feature64);
        com.fasterxml.jackson.core.JsonFactory jsonFactory67 = jsonFactory41.disable(feature64);
        com.fasterxml.jackson.core.io.SerializedString serializedString69 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        java.lang.String str70 = serializedString69.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString72 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray75 = new char[] { '4', '#' };
        int int77 = serializedString72.appendQuoted(charArray75, (int) (byte) 10);
        byte[] byteArray78 = new byte[] {};
        int int80 = serializedString72.appendUnquotedUTF8(byteArray78, (int) (short) 1);
        int int82 = serializedString69.appendQuotedUTF8(byteArray78, 8);
        com.fasterxml.jackson.core.JsonParser jsonParser83 = jsonFactory41.createJsonParser(byteArray78);
        int int85 = serializedString34.appendQuotedUTF8(byteArray78, 56319);
        jsonGenerator22.writeBinary(byteArray78);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(jsonFactory19);
        org.junit.Assert.assertTrue("'" + jsonEncoding21 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding21.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator22);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature25.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator28);
        org.junit.Assert.assertNotNull(jsonGenerator31);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature38.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(jsonFactory41);
        org.junit.Assert.assertTrue("'" + jsonEncoding43 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding43.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator44);
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature45.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(jsonGenerator48);
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature51.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(jsonFactory54);
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature57.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(jsonFactory60);
        org.junit.Assert.assertTrue("'" + jsonEncoding62 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding62.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator63);
        org.junit.Assert.assertTrue("'" + feature64 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature64.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(jsonFactory66);
        org.junit.Assert.assertNotNull(jsonFactory67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[4, #]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(jsonParser83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter1.createInstance();
        defaultPrettyPrinter2.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter6 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec7 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory8 = new com.fasterxml.jackson.core.JsonFactory(objectCodec7);
        com.fasterxml.jackson.core.JsonParser.Feature feature9 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean10 = feature9.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory12 = jsonFactory8.configure(feature9, false);
        java.io.OutputStream outputStream13 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding14 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator15 = jsonFactory12.createGenerator(outputStream13, jsonEncoding14);
        jsonGenerator15.writeRaw("JSON");
        boolean boolean18 = jsonGenerator15.isClosed();
        jsonGenerator15.writeRaw('4');
        defaultPrettyPrinter6.writeObjectFieldValueSeparator(jsonGenerator15);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter22 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter6.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter22);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter25 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec26 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory27 = new com.fasterxml.jackson.core.JsonFactory(objectCodec26);
        com.fasterxml.jackson.core.JsonParser.Feature feature28 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean29 = feature28.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory31 = jsonFactory27.configure(feature28, false);
        java.io.OutputStream outputStream32 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding33 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator34 = jsonFactory31.createGenerator(outputStream32, jsonEncoding33);
        jsonGenerator34.writeRaw("JSON");
        defaultPrettyPrinter25.writeEndObject(jsonGenerator34, 56320);
        com.fasterxml.jackson.core.io.SerializedString serializedString41 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray44 = new char[] { '4', '#' };
        int int46 = serializedString41.appendQuoted(charArray44, (int) (byte) 10);
        byte[] byteArray47 = new byte[] {};
        int int49 = serializedString41.appendUnquotedUTF8(byteArray47, (int) (short) 1);
        jsonGenerator34.writeBinaryField("", byteArray47);
        nopIndenter22.writeIndentation(jsonGenerator34, (int) '#');
        defaultPrettyPrinter2.writeObjectFieldValueSeparator(jsonGenerator34);
        com.fasterxml.jackson.core.ObjectCodec objectCodec54 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory55 = new com.fasterxml.jackson.core.JsonFactory(objectCodec54);
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray60 = new char[] { '4', '#' };
        int int62 = serializedString57.appendQuoted(charArray60, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser63 = jsonFactory55.createParser(charArray60);
        java.lang.String str64 = jsonParser63.getValueAsString();
        com.fasterxml.jackson.core.FormatSchema formatSchema65 = null;
        boolean boolean66 = jsonParser63.canUseSchema(formatSchema65);
        char[] charArray67 = jsonParser63.getTextCharacters();
        boolean boolean68 = jsonParser63.canReadObjectId();
        com.fasterxml.jackson.core.Version version69 = jsonParser63.version();
        com.fasterxml.jackson.core.JsonParser.Feature feature70 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        boolean boolean71 = feature70.enabledByDefault();
        com.fasterxml.jackson.core.JsonParser jsonParser72 = jsonParser63.enable(feature70);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator34.copyCurrentEvent(jsonParser72);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: No current event to copy");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultPrettyPrinter2);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature9.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(jsonFactory12);
        org.junit.Assert.assertTrue("'" + jsonEncoding14 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding14.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature28.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(jsonFactory31);
        org.junit.Assert.assertTrue("'" + jsonEncoding33 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding33.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator34);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[4, #]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[4, #]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(jsonParser63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(charArray67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(version69);
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature70.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(jsonParser72);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature11 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean12 = serializedString10.equals((java.lang.Object) feature11);
        java.lang.String str13 = serializedString10.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonGenerator8.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString10);
        jsonGenerator8.writeString("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator17 = jsonGenerator8.useDefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding18 = com.fasterxml.jackson.core.JsonEncoding.UTF32_BE;
        jsonGenerator8.setCurrentValue((java.lang.Object) jsonEncoding18);
        com.fasterxml.jackson.core.ObjectCodec objectCodec20 = jsonGenerator8.getCodec();
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature11.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertNotNull(jsonGenerator17);
        org.junit.Assert.assertTrue("'" + jsonEncoding18 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF32_BE + "'", jsonEncoding18.equals(com.fasterxml.jackson.core.JsonEncoding.UTF32_BE));
        org.junit.Assert.assertNull(objectCodec20);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        java.io.Writer writer2 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator3 = jsonFactory1.createJsonGenerator(writer2);
        com.fasterxml.jackson.core.io.OutputDecorator outputDecorator4 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.setOutputDecorator(outputDecorator4);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = jsonFactory5._getBufferRecycler();
        byte[] byteArray8 = null;
        bufferRecycler6.releaseByteBuffer(0, byteArray8);
        com.fasterxml.jackson.core.ObjectCodec objectCodec11 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory12 = new com.fasterxml.jackson.core.JsonFactory(objectCodec11);
        com.fasterxml.jackson.core.JsonParser.Feature feature13 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean14 = feature13.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory16 = jsonFactory12.configure(feature13, false);
        java.io.OutputStream outputStream17 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding18 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator19 = jsonFactory16.createGenerator(outputStream17, jsonEncoding18);
        jsonGenerator19.writeRaw("JSON");
        jsonGenerator19.writeNumber("hi!");
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException24 = new com.fasterxml.jackson.core.JsonGenerationException("com.fasterxml.jackson.core.JsonGenerationException: N/A", jsonGenerator19);
        com.fasterxml.jackson.core.io.IOContext iOContext26 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) jsonGenerationException24, true);
        char[] charArray27 = iOContext26.allocConcatBuffer();
        org.junit.Assert.assertNotNull(jsonGenerator3);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertNotNull(bufferRecycler6);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature13.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(jsonFactory16);
        org.junit.Assert.assertTrue("'" + jsonEncoding18 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding18.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator19);
        org.junit.Assert.assertNotNull(charArray27);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray6 = new char[] { '4', '#' };
        int int8 = serializedString3.appendQuoted(charArray6, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory1.createParser(charArray6);
        java.lang.String str10 = jsonParser9.getValueAsString();
        com.fasterxml.jackson.core.ObjectCodec objectCodec11 = null;
        jsonParser9.setCodec(objectCodec11);
        java.io.OutputStream outputStream13 = null;
        int int14 = jsonParser9.releaseBuffered(outputStream13);
        com.fasterxml.jackson.core.JsonLocation jsonLocation16 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec18 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = new com.fasterxml.jackson.core.JsonFactory(objectCodec18);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray24 = new char[] { '4', '#' };
        int int26 = serializedString21.appendQuoted(charArray24, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser27 = jsonFactory19.createParser(charArray24);
        java.lang.String str28 = jsonFactory19.getFormatName();
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory19.createJsonParser("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec32 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory33 = new com.fasterxml.jackson.core.JsonFactory(objectCodec32);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray38 = new char[] { '4', '#' };
        int int40 = serializedString35.appendQuoted(charArray38, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser41 = jsonFactory33.createParser(charArray38);
        boolean boolean43 = jsonParser41.hasTokenId(0);
        com.fasterxml.jackson.core.JsonLocation jsonLocation45 = null;
        com.fasterxml.jackson.core.JsonLocation jsonLocation47 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException48 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation47);
        java.lang.Throwable throwable49 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException51 = new com.fasterxml.jackson.core.JsonGenerationException(throwable49, jsonGenerator50);
        jsonParseException48.addSuppressed((java.lang.Throwable) jsonGenerationException51);
        com.fasterxml.jackson.core.JsonParseException jsonParseException53 = new com.fasterxml.jackson.core.JsonParseException(jsonParser41, "com.fasterxml.jackson.core.JsonGenerationException: N/A", jsonLocation45, (java.lang.Throwable) jsonParseException48);
        com.fasterxml.jackson.core.JsonParseException jsonParseException54 = new com.fasterxml.jackson.core.JsonParseException(jsonParser30, "com.fasterxml.jackson.core.JsonGenerationException: N/A", (java.lang.Throwable) jsonParseException48);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter56 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec57 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory58 = new com.fasterxml.jackson.core.JsonFactory(objectCodec57);
        com.fasterxml.jackson.core.JsonParser.Feature feature59 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean60 = feature59.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory62 = jsonFactory58.configure(feature59, false);
        java.io.OutputStream outputStream63 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding64 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator65 = jsonFactory62.createGenerator(outputStream63, jsonEncoding64);
        jsonGenerator65.writeRaw("JSON");
        defaultPrettyPrinter56.writeEndObject(jsonGenerator65, 56320);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException70 = new com.fasterxml.jackson.core.JsonGenerationException("hi!", (java.lang.Throwable) jsonParseException48, jsonGenerator65);
        com.fasterxml.jackson.core.JsonParseException jsonParseException71 = new com.fasterxml.jackson.core.JsonParseException(jsonParser9, "[", jsonLocation16, (java.lang.Throwable) jsonGenerationException70);
        boolean boolean72 = jsonParser9.hasTextCharacters();
        boolean boolean74 = jsonParser9.hasTokenId((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int75 = jsonParser9.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: [C@58a9351e; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(jsonParser27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "JSON" + "'", str28, "JSON");
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[4, #]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(jsonParser41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature59.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(jsonFactory62);
        org.junit.Assert.assertTrue("'" + jsonEncoding64 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding64.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator65);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature11 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean12 = serializedString10.equals((java.lang.Object) feature11);
        java.lang.String str13 = serializedString10.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonGenerator8.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString10);
        jsonGenerator8.writeString("JSON");
        java.math.BigDecimal bigDecimal18 = null;
        jsonGenerator8.writeNumberField("ROOT", bigDecimal18);
        long[] longArray20 = null;
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator8.writeArray(longArray20, 57343, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature11.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator14);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        com.fasterxml.jackson.core.ObjectCodec objectCodec1 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory2 = new com.fasterxml.jackson.core.JsonFactory(objectCodec1);
        com.fasterxml.jackson.core.io.SerializedString serializedString4 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray7 = new char[] { '4', '#' };
        int int9 = serializedString4.appendQuoted(charArray7, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser10 = jsonFactory2.createParser(charArray7);
        java.lang.String str11 = jsonFactory2.getFormatName();
        com.fasterxml.jackson.core.JsonParser jsonParser13 = jsonFactory2.createJsonParser("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec15 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory16 = new com.fasterxml.jackson.core.JsonFactory(objectCodec15);
        com.fasterxml.jackson.core.io.SerializedString serializedString18 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray21 = new char[] { '4', '#' };
        int int23 = serializedString18.appendQuoted(charArray21, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser24 = jsonFactory16.createParser(charArray21);
        boolean boolean26 = jsonParser24.hasTokenId(0);
        com.fasterxml.jackson.core.JsonLocation jsonLocation28 = null;
        com.fasterxml.jackson.core.JsonLocation jsonLocation30 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException31 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation30);
        java.lang.Throwable throwable32 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator33 = null;
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException34 = new com.fasterxml.jackson.core.JsonGenerationException(throwable32, jsonGenerator33);
        jsonParseException31.addSuppressed((java.lang.Throwable) jsonGenerationException34);
        com.fasterxml.jackson.core.JsonParseException jsonParseException36 = new com.fasterxml.jackson.core.JsonParseException(jsonParser24, "com.fasterxml.jackson.core.JsonGenerationException: N/A", jsonLocation28, (java.lang.Throwable) jsonParseException31);
        com.fasterxml.jackson.core.JsonParseException jsonParseException37 = new com.fasterxml.jackson.core.JsonParseException(jsonParser13, "com.fasterxml.jackson.core.JsonGenerationException: N/A", (java.lang.Throwable) jsonParseException31);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter39 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec40 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = new com.fasterxml.jackson.core.JsonFactory(objectCodec40);
        com.fasterxml.jackson.core.JsonParser.Feature feature42 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean43 = feature42.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory45 = jsonFactory41.configure(feature42, false);
        java.io.OutputStream outputStream46 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding47 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator48 = jsonFactory45.createGenerator(outputStream46, jsonEncoding47);
        jsonGenerator48.writeRaw("JSON");
        defaultPrettyPrinter39.writeEndObject(jsonGenerator48, 56320);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException53 = new com.fasterxml.jackson.core.JsonGenerationException("hi!", (java.lang.Throwable) jsonParseException31, jsonGenerator48);
        com.fasterxml.jackson.core.io.SerializedString serializedString55 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature56 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean57 = serializedString55.equals((java.lang.Object) feature56);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator58 = jsonGenerator48.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString55);
        jsonGenerator58.writeNumber((long) (-1700598963));
        com.fasterxml.jackson.core.Base64Variant base64Variant61 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString63 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray66 = new char[] { '4', '#' };
        int int68 = serializedString63.appendQuoted(charArray66, (int) (byte) 10);
        char[] charArray69 = serializedString63.asQuotedChars();
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray74 = new char[] { '4', '#' };
        int int76 = serializedString71.appendQuoted(charArray74, (int) (byte) 10);
        char[] charArray77 = serializedString71.asQuotedChars();
        int int79 = serializedString63.appendQuoted(charArray77, (int) (byte) 0);
        byte[] byteArray80 = serializedString63.asUnquotedUTF8();
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator58.writeBinary(base64Variant61, byteArray80, (int) ' ', (-1700593753));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4, #]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(jsonParser10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JSON" + "'", str11, "JSON");
        org.junit.Assert.assertNotNull(jsonParser13);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, #]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(jsonParser24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature42.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(jsonFactory45);
        org.junit.Assert.assertTrue("'" + jsonEncoding47 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding47.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator48);
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature56.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jsonGenerator58);
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[4, #]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[h, i, !]");
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[4, #]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[h, i, !]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[104, 105, 33]");
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        com.fasterxml.jackson.core.ObjectCodec objectCodec17 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = new com.fasterxml.jackson.core.JsonFactory(objectCodec17);
        com.fasterxml.jackson.core.JsonParser.Feature feature19 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean20 = feature19.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = jsonFactory18.configure(feature19, false);
        java.io.OutputStream outputStream23 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding24 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = jsonFactory22.createGenerator(outputStream23, jsonEncoding24);
        com.fasterxml.jackson.core.io.SerializedString serializedString27 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature28 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean29 = serializedString27.equals((java.lang.Object) feature28);
        java.lang.String str30 = serializedString27.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator31 = jsonGenerator25.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString27);
        defaultPrettyPrinter1.beforeArrayValues(jsonGenerator25);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator33 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter1.writeArrayValueSeparator(jsonGenerator33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature19.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(jsonFactory22);
        org.junit.Assert.assertTrue("'" + jsonEncoding24 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding24.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator25);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature28.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator31);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter1.createInstance();
        com.fasterxml.jackson.core.ObjectCodec objectCodec3 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = new com.fasterxml.jackson.core.JsonFactory(objectCodec3);
        com.fasterxml.jackson.core.JsonParser.Feature feature5 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean6 = feature5.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory8 = jsonFactory4.configure(feature5, false);
        java.io.OutputStream outputStream9 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding10 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator11 = jsonFactory8.createGenerator(outputStream9, jsonEncoding10);
        jsonGenerator11.writeRaw("JSON");
        jsonGenerator11.writeNumber("hi!");
        int[] intArray16 = com.fasterxml.jackson.core.json.ReaderBasedJsonParser._icLatin1;
        jsonGenerator11.writeArray(intArray16, 64, 0);
        defaultPrettyPrinter2.writeRootValueSeparator(jsonGenerator11);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec23 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory24 = new com.fasterxml.jackson.core.JsonFactory(objectCodec23);
        com.fasterxml.jackson.core.JsonParser.Feature feature25 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean26 = feature25.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory28 = jsonFactory24.configure(feature25, false);
        java.io.OutputStream outputStream29 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding30 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator31 = jsonFactory28.createGenerator(outputStream29, jsonEncoding30);
        jsonGenerator31.writeRaw("JSON");
        boolean boolean34 = jsonGenerator31.isClosed();
        jsonGenerator31.writeRaw('4');
        defaultPrettyPrinter22.writeObjectFieldValueSeparator(jsonGenerator31);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter38 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter39 = defaultPrettyPrinter22.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter38);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter41 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        defaultPrettyPrinter41.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter45 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec46 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory47 = new com.fasterxml.jackson.core.JsonFactory(objectCodec46);
        com.fasterxml.jackson.core.JsonParser.Feature feature48 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean49 = feature48.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory47.configure(feature48, false);
        java.io.OutputStream outputStream52 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding53 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator54 = jsonFactory51.createGenerator(outputStream52, jsonEncoding53);
        jsonGenerator54.writeRaw("JSON");
        boolean boolean57 = jsonGenerator54.isClosed();
        jsonGenerator54.writeRaw('4');
        defaultPrettyPrinter45.writeObjectFieldValueSeparator(jsonGenerator54);
        com.fasterxml.jackson.core.ObjectCodec objectCodec61 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory62 = new com.fasterxml.jackson.core.JsonFactory(objectCodec61);
        com.fasterxml.jackson.core.JsonParser.Feature feature63 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean64 = feature63.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory66 = jsonFactory62.configure(feature63, false);
        java.io.OutputStream outputStream67 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding68 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator69 = jsonFactory66.createGenerator(outputStream67, jsonEncoding68);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature72 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean73 = serializedString71.equals((java.lang.Object) feature72);
        java.lang.String str74 = serializedString71.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator75 = jsonGenerator69.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString71);
        defaultPrettyPrinter45.beforeArrayValues(jsonGenerator69);
        defaultPrettyPrinter41.writeEndObject(jsonGenerator69, (int) (short) 10);
        defaultPrettyPrinter39.writeArrayValueSeparator(jsonGenerator69);
        java.lang.Object obj80 = jsonGenerator69.getOutputTarget();
        defaultPrettyPrinter2.writeEndObject(jsonGenerator69, (int) '4');
        org.junit.Assert.assertNotNull(defaultPrettyPrinter2);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature5.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(jsonFactory8);
        org.junit.Assert.assertTrue("'" + jsonEncoding10 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding10.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator11);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature25.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(jsonFactory28);
        org.junit.Assert.assertTrue("'" + jsonEncoding30 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding30.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter39);
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature48.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertTrue("'" + jsonEncoding53 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding53.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + feature63 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature63.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(jsonFactory66);
        org.junit.Assert.assertTrue("'" + jsonEncoding68 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding68.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator69);
        org.junit.Assert.assertTrue("'" + feature72 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature72.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator75);
        org.junit.Assert.assertNull(obj80);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonParser.Feature feature8 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean9 = feature8.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory7.configure(feature8, false);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding13 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory11.createGenerator(outputStream12, jsonEncoding13);
        com.fasterxml.jackson.core.JsonFactory.Feature feature15 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean16 = jsonFactory11.isEnabled(feature15);
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = jsonFactory1.disable(feature15);
        java.io.OutputStream outputStream18 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator19 = jsonFactory1.createGenerator(outputStream18);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator20 = jsonFactory1.getInputDecorator();
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature8.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + jsonEncoding13 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding13.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature15.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(jsonFactory17);
        org.junit.Assert.assertNotNull(jsonGenerator19);
        org.junit.Assert.assertNull(inputDecorator20);
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature11 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean12 = serializedString10.equals((java.lang.Object) feature11);
        java.lang.String str13 = serializedString10.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonGenerator8.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString10);
        jsonGenerator8.writeString("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator8.flush();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature11.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator14);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature> wildcardClass9 = jsonFactory5.getFormatWriteFeatureType();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes10 = jsonFactory5.getCharacterEscapes();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory5.copy();
        com.fasterxml.jackson.core.JsonParser.Feature feature12 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        boolean boolean13 = feature12.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory14 = jsonFactory11.disable(feature12);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(characterEscapes10);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature12.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jsonFactory14);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.JsonFactory.Feature feature9 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean10 = jsonFactory5.isEnabled(feature9);
        java.io.Writer writer11 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator12 = jsonFactory5.createJsonGenerator(writer11);
        com.fasterxml.jackson.core.ObjectCodec objectCodec13 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory14 = new com.fasterxml.jackson.core.JsonFactory(objectCodec13);
        com.fasterxml.jackson.core.JsonParser.Feature feature15 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean16 = feature15.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = jsonFactory14.configure(feature15, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec19 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = new com.fasterxml.jackson.core.JsonFactory(objectCodec19);
        com.fasterxml.jackson.core.JsonParser.Feature feature21 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean22 = feature21.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory24 = jsonFactory20.configure(feature21, false);
        java.io.OutputStream outputStream25 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding26 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator27 = jsonFactory24.createGenerator(outputStream25, jsonEncoding26);
        com.fasterxml.jackson.core.JsonFactory.Feature feature28 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean29 = jsonFactory24.isEnabled(feature28);
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = jsonFactory14.disable(feature28);
        com.fasterxml.jackson.core.JsonFactory jsonFactory31 = jsonFactory5.disable(feature28);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator32 = jsonFactory5.getInputDecorator();
        java.io.OutputStream outputStream33 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator34 = jsonFactory5.createJsonGenerator(outputStream33);
        com.fasterxml.jackson.core.SerializableString serializableString35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonGenerator34.setRootValueSeparator(serializableString35);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature9.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(jsonGenerator12);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature15.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(jsonFactory18);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature21.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(jsonFactory24);
        org.junit.Assert.assertTrue("'" + jsonEncoding26 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding26.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator27);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature28.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(jsonFactory30);
        org.junit.Assert.assertNotNull(jsonFactory31);
        org.junit.Assert.assertNull(inputDecorator32);
        org.junit.Assert.assertNotNull(jsonGenerator34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        defaultPrettyPrinter1.writeEndObject(jsonGenerator10, 56320);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter16 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec17 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = new com.fasterxml.jackson.core.JsonFactory(objectCodec17);
        com.fasterxml.jackson.core.JsonParser.Feature feature19 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean20 = feature19.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = jsonFactory18.configure(feature19, false);
        java.io.OutputStream outputStream23 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding24 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = jsonFactory22.createGenerator(outputStream23, jsonEncoding24);
        jsonGenerator25.writeRaw("JSON");
        boolean boolean28 = jsonGenerator25.isClosed();
        jsonGenerator25.writeRaw('4');
        defaultPrettyPrinter16.writeObjectFieldValueSeparator(jsonGenerator25);
        com.fasterxml.jackson.core.FormatSchema formatSchema32 = jsonGenerator25.getSchema();
        defaultPrettyPrinter1.writeEndObject(jsonGenerator25, 31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec35 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory36 = new com.fasterxml.jackson.core.JsonFactory(objectCodec35);
        java.io.Writer writer37 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator38 = jsonFactory36.createJsonGenerator(writer37);
        com.fasterxml.jackson.core.ObjectCodec objectCodec39 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = new com.fasterxml.jackson.core.JsonFactory(objectCodec39);
        com.fasterxml.jackson.core.JsonParser.Feature feature41 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean42 = feature41.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory44 = jsonFactory40.configure(feature41, false);
        java.io.OutputStream outputStream45 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding46 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator47 = jsonFactory44.createGenerator(outputStream45, jsonEncoding46);
        jsonGenerator47.writeRaw("JSON");
        jsonGenerator47.writeNumber("hi!");
        int[] intArray52 = com.fasterxml.jackson.core.json.ReaderBasedJsonParser._icLatin1;
        jsonGenerator47.writeArray(intArray52, 64, 0);
        jsonGenerator38.writeArray(intArray52, 0, 32);
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator38);
        com.fasterxml.jackson.core.ObjectCodec objectCodec60 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory61 = new com.fasterxml.jackson.core.JsonFactory(objectCodec60);
        java.io.Writer writer62 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator63 = jsonFactory61.createJsonGenerator(writer62);
        jsonGenerator63.writeNullField("JSON");
        com.fasterxml.jackson.core.io.SerializedString serializedString67 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray70 = new char[] { '4', '#' };
        int int72 = serializedString67.appendQuoted(charArray70, (int) (byte) 10);
        byte[] byteArray73 = new byte[] {};
        int int75 = serializedString67.appendUnquotedUTF8(byteArray73, (int) (short) 1);
        java.lang.String str76 = serializedString67.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator77 = jsonGenerator63.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString67);
        defaultPrettyPrinter1.writeStartObject(jsonGenerator63);
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature19.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(jsonFactory22);
        org.junit.Assert.assertTrue("'" + jsonEncoding24 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding24.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(formatSchema32);
        org.junit.Assert.assertNotNull(jsonGenerator38);
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature41.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(jsonFactory44);
        org.junit.Assert.assertTrue("'" + jsonEncoding46 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding46.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(jsonGenerator63);
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[4, #]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator77);
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("");
        jsonGenerator8.writeRawValue((com.fasterxml.jackson.core.SerializableString) serializedString10);
        jsonGenerator8.writeRaw('a');
        com.fasterxml.jackson.core.Base64Variant base64Variant14 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray19 = new char[] { '4', '#' };
        int int21 = serializedString16.appendQuoted(charArray19, (int) (byte) 10);
        byte[] byteArray22 = new byte[] {};
        int int24 = serializedString16.appendUnquotedUTF8(byteArray22, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator8.writeBinary(base64Variant14, byteArray22, 3, 64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.JsonToken jsonToken1 = com.fasterxml.jackson.core.JsonToken.END_ARRAY;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonToken1, false);
        java.lang.Object obj4 = iOContext3.getSourceReference();
        com.fasterxml.jackson.core.util.TextBuffer textBuffer5 = iOContext3.constructTextBuffer();
        com.fasterxml.jackson.core.ObjectCodec objectCodec7 = null;
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter10 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec11 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory12 = new com.fasterxml.jackson.core.JsonFactory(objectCodec11);
        com.fasterxml.jackson.core.JsonParser.Feature feature13 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean14 = feature13.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory16 = jsonFactory12.configure(feature13, false);
        java.io.OutputStream outputStream17 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding18 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator19 = jsonFactory16.createGenerator(outputStream17, jsonEncoding18);
        jsonGenerator19.writeRaw("JSON");
        defaultPrettyPrinter10.writeEndObject(jsonGenerator19, 56320);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = jsonGenerator19.setFeatureMask((int) (short) -1);
        com.fasterxml.jackson.core.io.SerializedString serializedString27 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray30 = new char[] { '4', '#' };
        int int32 = serializedString27.appendQuoted(charArray30, (int) (byte) 10);
        char[] charArray33 = serializedString27.asQuotedChars();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 10 };
        int int38 = serializedString27.appendUnquotedUTF8(byteArray36, 1);
        jsonGenerator25.writeString((com.fasterxml.jackson.core.SerializableString) serializedString27);
        byte[] byteArray40 = serializedString27.asUnquotedUTF8();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator43 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext3, (-1700599729), objectCodec7, outputStream8, byteArray40, 727155286, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + jsonToken1 + "' != '" + com.fasterxml.jackson.core.JsonToken.END_ARRAY + "'", jsonToken1.equals(com.fasterxml.jackson.core.JsonToken.END_ARRAY));
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + com.fasterxml.jackson.core.JsonToken.END_ARRAY + "'", obj4.equals(com.fasterxml.jackson.core.JsonToken.END_ARRAY));
        org.junit.Assert.assertNotNull(textBuffer5);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature13.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(jsonFactory16);
        org.junit.Assert.assertTrue("'" + jsonEncoding18 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding18.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator19);
        org.junit.Assert.assertNotNull(jsonGenerator25);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[4, #]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[h, i, !]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[104, 105, 33]");
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter17 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter18 = defaultPrettyPrinter1.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter17);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter19 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter18);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter20 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter18);
        com.fasterxml.jackson.core.ObjectCodec objectCodec21 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = new com.fasterxml.jackson.core.JsonFactory(objectCodec21);
        com.fasterxml.jackson.core.JsonParser.Feature feature23 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean24 = feature23.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory26 = jsonFactory22.configure(feature23, false);
        java.io.OutputStream outputStream27 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding28 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator29 = jsonFactory26.createGenerator(outputStream27, jsonEncoding28);
        jsonGenerator29.writeRaw("JSON");
        boolean boolean32 = jsonGenerator29.isClosed();
        java.io.InputStream inputStream33 = null;
        int int35 = jsonGenerator29.writeBinary(inputStream33, (int) (byte) 0);
        defaultPrettyPrinter20.beforeArrayValues(jsonGenerator29);
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter18);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature23.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(jsonFactory26);
        org.junit.Assert.assertTrue("'" + jsonEncoding28 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding28.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature> wildcardClass9 = jsonFactory5.getFormatWriteFeatureType();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes10 = jsonFactory5.getCharacterEscapes();
        java.io.OutputStream outputStream11 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator12 = jsonFactory5.createJsonGenerator(outputStream11);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature13 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = jsonGenerator12.isEnabled(feature13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(characterEscapes10);
        org.junit.Assert.assertNotNull(jsonGenerator12);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter17 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter18 = defaultPrettyPrinter1.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter17);
        boolean boolean19 = nopIndenter17.isInline();
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter17 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter18 = defaultPrettyPrinter1.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter17);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter19 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter18);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter20 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter18);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter22.createInstance();
        defaultPrettyPrinter23.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter27 = defaultPrettyPrinter23.withRootSeparator("[");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter28 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter29 = defaultPrettyPrinter27.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter28);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter30 = defaultPrettyPrinter18.withObjectIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter28);
        com.fasterxml.jackson.core.ObjectCodec objectCodec31 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory32 = new com.fasterxml.jackson.core.JsonFactory(objectCodec31);
        com.fasterxml.jackson.core.JsonParser.Feature feature33 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean34 = feature33.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory36 = jsonFactory32.configure(feature33, false);
        java.io.OutputStream outputStream37 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding38 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonFactory36.createGenerator(outputStream37, jsonEncoding38);
        com.fasterxml.jackson.core.io.SerializedString serializedString41 = new com.fasterxml.jackson.core.io.SerializedString("");
        jsonGenerator39.writeRawValue((com.fasterxml.jackson.core.SerializableString) serializedString41);
        jsonGenerator39.writeRaw('a');
        jsonGenerator39.writeRawValue("JSON");
        defaultPrettyPrinter18.writeStartArray(jsonGenerator39);
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter18);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter27);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter28);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter29);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter30);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature33.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(jsonFactory36);
        org.junit.Assert.assertTrue("'" + jsonEncoding38 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding38.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator39);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        com.fasterxml.jackson.core.json.DupDetector dupDetector0 = null;
        com.fasterxml.jackson.core.json.JsonWriteContext jsonWriteContext1 = com.fasterxml.jackson.core.json.JsonWriteContext.createRootContext(dupDetector0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec4 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory(objectCodec4);
        com.fasterxml.jackson.core.JsonParser.Feature feature6 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean7 = feature6.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory9 = jsonFactory5.configure(feature6, false);
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding11 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator12 = jsonFactory9.createGenerator(outputStream10, jsonEncoding11);
        jsonGenerator12.writeRaw("JSON");
        boolean boolean15 = jsonGenerator12.isClosed();
        jsonGenerator12.writeRaw('4');
        defaultPrettyPrinter3.writeObjectFieldValueSeparator(jsonGenerator12);
        com.fasterxml.jackson.core.ObjectCodec objectCodec19 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = new com.fasterxml.jackson.core.JsonFactory(objectCodec19);
        com.fasterxml.jackson.core.JsonParser.Feature feature21 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean22 = feature21.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory24 = jsonFactory20.configure(feature21, false);
        java.io.OutputStream outputStream25 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding26 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator27 = jsonFactory24.createGenerator(outputStream25, jsonEncoding26);
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature30 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean31 = serializedString29.equals((java.lang.Object) feature30);
        java.lang.String str32 = serializedString29.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator33 = jsonGenerator27.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString29);
        defaultPrettyPrinter3.beforeArrayValues(jsonGenerator27);
        jsonWriteContext1.setCurrentValue((java.lang.Object) jsonGenerator27);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes36 = jsonGenerator27.getCharacterEscapes();
        org.junit.Assert.assertNotNull(jsonWriteContext1);
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature6.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(jsonFactory9);
        org.junit.Assert.assertTrue("'" + jsonEncoding11 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding11.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature21.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(jsonFactory24);
        org.junit.Assert.assertTrue("'" + jsonEncoding26 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding26.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator27);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature30.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator33);
        org.junit.Assert.assertNull(characterEscapes36);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec3 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = new com.fasterxml.jackson.core.JsonFactory(objectCodec3);
        com.fasterxml.jackson.core.io.SerializedString serializedString6 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray9 = new char[] { '4', '#' };
        int int11 = serializedString6.appendQuoted(charArray9, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonFactory4.createParser(charArray9);
        boolean boolean14 = jsonParser12.hasTokenId(0);
        com.fasterxml.jackson.core.JsonLocation jsonLocation16 = null;
        com.fasterxml.jackson.core.JsonLocation jsonLocation18 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException19 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation18);
        java.lang.Throwable throwable20 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator21 = null;
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException22 = new com.fasterxml.jackson.core.JsonGenerationException(throwable20, jsonGenerator21);
        jsonParseException19.addSuppressed((java.lang.Throwable) jsonGenerationException22);
        com.fasterxml.jackson.core.JsonParseException jsonParseException24 = new com.fasterxml.jackson.core.JsonParseException(jsonParser12, "com.fasterxml.jackson.core.JsonGenerationException: N/A", jsonLocation16, (java.lang.Throwable) jsonParseException19);
        com.fasterxml.jackson.core.JsonParseException jsonParseException25 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation2, (java.lang.Throwable) jsonParseException24);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException26 = new com.fasterxml.jackson.core.JsonGenerationException((java.lang.Throwable) jsonParseException24);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException27 = new com.fasterxml.jackson.core.JsonGenerationException((java.lang.Throwable) jsonGenerationException26);
        com.fasterxml.jackson.core.ObjectCodec objectCodec28 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory29 = new com.fasterxml.jackson.core.JsonFactory(objectCodec28);
        com.fasterxml.jackson.core.JsonParser.Feature feature30 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean31 = feature30.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory33 = jsonFactory29.configure(feature30, false);
        java.io.OutputStream outputStream34 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding35 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory33.createGenerator(outputStream34, jsonEncoding35);
        com.fasterxml.jackson.core.io.SerializedString serializedString38 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature39 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean40 = serializedString38.equals((java.lang.Object) feature39);
        java.lang.String str41 = serializedString38.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator42 = jsonGenerator36.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString38);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException43 = new com.fasterxml.jackson.core.JsonGenerationException("com.fasterxml.jackson.core.JsonGenerationException: N/A", (java.lang.Throwable) jsonGenerationException26, jsonGenerator36);
        com.fasterxml.jackson.core.ObjectCodec objectCodec44 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory45 = new com.fasterxml.jackson.core.JsonFactory(objectCodec44);
        com.fasterxml.jackson.core.JsonParser.Feature feature46 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean47 = feature46.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory49 = jsonFactory45.configure(feature46, false);
        java.io.OutputStream outputStream50 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding51 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = jsonFactory49.createGenerator(outputStream50, jsonEncoding51);
        jsonGenerator52.writeRaw("JSON");
        jsonGenerator52.writeNumber("hi!");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator58 = jsonGenerator52.setHighestNonEscapedChar((-1));
        com.fasterxml.jackson.core.JsonGenerator.Feature feature59 = com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator60 = jsonGenerator58.disable(feature59);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException61 = jsonGenerationException26.withGenerator(jsonGenerator60);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4, #]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(jsonParser12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature30.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(jsonFactory33);
        org.junit.Assert.assertTrue("'" + jsonEncoding35 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding35.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature39.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator42);
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature46.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(jsonFactory49);
        org.junit.Assert.assertTrue("'" + jsonEncoding51 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding51.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator52);
        org.junit.Assert.assertNotNull(jsonGenerator58);
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII + "'", feature59.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII));
        org.junit.Assert.assertNotNull(jsonGenerator60);
        org.junit.Assert.assertNotNull(jsonGenerationException61);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature> wildcardClass9 = jsonFactory5.getFormatWriteFeatureType();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes10 = jsonFactory5.getCharacterEscapes();
        com.fasterxml.jackson.core.JsonParser.Feature feature11 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory12 = jsonFactory5.enable(feature11);
        java.io.Writer writer13 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory12.createGenerator(writer13);
        com.fasterxml.jackson.core.ObjectCodec objectCodec15 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory16 = new com.fasterxml.jackson.core.JsonFactory(objectCodec15);
        com.fasterxml.jackson.core.JsonParser.Feature feature17 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature17.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = jsonFactory16.configure(feature17, false);
        java.io.OutputStream outputStream21 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding22 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator23 = jsonFactory20.createGenerator(outputStream21, jsonEncoding22);
        com.fasterxml.jackson.core.JsonFactory.Feature feature24 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean25 = jsonFactory20.isEnabled(feature24);
        java.io.Writer writer26 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator27 = jsonFactory20.createJsonGenerator(writer26);
        com.fasterxml.jackson.core.ObjectCodec objectCodec28 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory29 = new com.fasterxml.jackson.core.JsonFactory(objectCodec28);
        com.fasterxml.jackson.core.JsonParser.Feature feature30 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean31 = feature30.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory33 = jsonFactory29.configure(feature30, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec34 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory35 = new com.fasterxml.jackson.core.JsonFactory(objectCodec34);
        com.fasterxml.jackson.core.JsonParser.Feature feature36 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean37 = feature36.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory39 = jsonFactory35.configure(feature36, false);
        java.io.OutputStream outputStream40 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding41 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator42 = jsonFactory39.createGenerator(outputStream40, jsonEncoding41);
        com.fasterxml.jackson.core.JsonFactory.Feature feature43 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean44 = jsonFactory39.isEnabled(feature43);
        com.fasterxml.jackson.core.JsonFactory jsonFactory45 = jsonFactory29.disable(feature43);
        com.fasterxml.jackson.core.JsonFactory jsonFactory46 = jsonFactory20.disable(feature43);
        boolean boolean47 = feature43.enabledByDefault();
        int int48 = feature43.getMask();
        com.fasterxml.jackson.core.JsonFactory jsonFactory49 = jsonFactory12.enable(feature43);
        boolean boolean50 = jsonFactory49.requiresCustomCodec();
        com.fasterxml.jackson.core.ObjectCodec objectCodec51 = jsonFactory49.getCodec();
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(characterEscapes10);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES + "'", feature11.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES));
        org.junit.Assert.assertNotNull(jsonFactory12);
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature17.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(jsonFactory20);
        org.junit.Assert.assertTrue("'" + jsonEncoding22 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding22.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator23);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature24.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(jsonGenerator27);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature30.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(jsonFactory33);
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature36.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(jsonFactory39);
        org.junit.Assert.assertTrue("'" + jsonEncoding41 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding41.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator42);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature43.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(jsonFactory45);
        org.junit.Assert.assertNotNull(jsonFactory46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(jsonFactory49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(objectCodec51);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("");
        jsonGenerator8.writeRawValue((com.fasterxml.jackson.core.SerializableString) serializedString10);
        int int12 = jsonGenerator8.getFormatFeatures();
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature11 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean12 = serializedString10.equals((java.lang.Object) feature11);
        java.lang.String str13 = serializedString10.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonGenerator8.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString10);
        jsonGenerator8.writeString("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator17 = jsonGenerator8.useDefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding18 = com.fasterxml.jackson.core.JsonEncoding.UTF32_BE;
        jsonGenerator8.setCurrentValue((java.lang.Object) jsonEncoding18);
        jsonGenerator8.writeNumber("[");
        boolean boolean22 = jsonGenerator8.canWriteObjectId();
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory25 = new com.fasterxml.jackson.core.JsonFactory(objectCodec24);
        com.fasterxml.jackson.core.io.SerializedString serializedString27 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray30 = new char[] { '4', '#' };
        int int32 = serializedString27.appendQuoted(charArray30, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory25.createParser(charArray30);
        java.lang.String str34 = jsonParser33.getValueAsString();
        com.fasterxml.jackson.core.FormatSchema formatSchema35 = null;
        boolean boolean36 = jsonParser33.canUseSchema(formatSchema35);
        jsonGenerator8.writeObjectField("/", (java.lang.Object) formatSchema35);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature11.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertNotNull(jsonGenerator17);
        org.junit.Assert.assertTrue("'" + jsonEncoding18 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF32_BE + "'", jsonEncoding18.equals(com.fasterxml.jackson.core.JsonEncoding.UTF32_BE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[4, #]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature> wildcardClass9 = jsonFactory5.getFormatWriteFeatureType();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes10 = jsonFactory5.getCharacterEscapes();
        java.io.OutputStream outputStream11 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator12 = jsonFactory5.createJsonGenerator(outputStream11);
        com.fasterxml.jackson.core.JsonParser.Feature feature13 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
        com.fasterxml.jackson.core.JsonFactory jsonFactory14 = jsonFactory5.enable(feature13);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(characterEscapes10);
        org.junit.Assert.assertNotNull(jsonGenerator12);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS + "'", feature13.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS));
        org.junit.Assert.assertNotNull(jsonFactory14);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        defaultPrettyPrinter1.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonParser.Feature feature8 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean9 = feature8.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory7.configure(feature8, false);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding13 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory11.createGenerator(outputStream12, jsonEncoding13);
        jsonGenerator14.writeRaw("JSON");
        boolean boolean17 = jsonGenerator14.isClosed();
        jsonGenerator14.writeRaw('4');
        defaultPrettyPrinter5.writeObjectFieldValueSeparator(jsonGenerator14);
        com.fasterxml.jackson.core.ObjectCodec objectCodec21 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = new com.fasterxml.jackson.core.JsonFactory(objectCodec21);
        com.fasterxml.jackson.core.JsonParser.Feature feature23 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean24 = feature23.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory26 = jsonFactory22.configure(feature23, false);
        java.io.OutputStream outputStream27 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding28 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator29 = jsonFactory26.createGenerator(outputStream27, jsonEncoding28);
        com.fasterxml.jackson.core.io.SerializedString serializedString31 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature32 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean33 = serializedString31.equals((java.lang.Object) feature32);
        java.lang.String str34 = serializedString31.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonGenerator29.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString31);
        defaultPrettyPrinter5.beforeArrayValues(jsonGenerator29);
        defaultPrettyPrinter1.writeEndObject(jsonGenerator29, (int) (short) 10);
        com.fasterxml.jackson.core.FormatSchema formatSchema39 = null;
        boolean boolean40 = jsonGenerator29.canUseSchema(formatSchema39);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter42 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec43 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory44 = new com.fasterxml.jackson.core.JsonFactory(objectCodec43);
        com.fasterxml.jackson.core.JsonParser.Feature feature45 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean46 = feature45.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory48 = jsonFactory44.configure(feature45, false);
        java.io.OutputStream outputStream49 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding50 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator51 = jsonFactory48.createGenerator(outputStream49, jsonEncoding50);
        jsonGenerator51.writeRaw("JSON");
        boolean boolean54 = jsonGenerator51.isClosed();
        jsonGenerator51.writeRaw('4');
        defaultPrettyPrinter42.writeObjectFieldValueSeparator(jsonGenerator51);
        com.fasterxml.jackson.core.ObjectCodec objectCodec58 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory59 = new com.fasterxml.jackson.core.JsonFactory(objectCodec58);
        com.fasterxml.jackson.core.JsonParser.Feature feature60 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean61 = feature60.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory63 = jsonFactory59.configure(feature60, false);
        java.io.OutputStream outputStream64 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding65 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator66 = jsonFactory63.createGenerator(outputStream64, jsonEncoding65);
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature69 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean70 = serializedString68.equals((java.lang.Object) feature69);
        java.lang.String str71 = serializedString68.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = jsonGenerator66.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString68);
        defaultPrettyPrinter42.beforeArrayValues(jsonGenerator66);
        jsonGenerator66.writeNumberField("hi!", 0.0f);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature77 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator78 = jsonGenerator66.disable(feature77);
        boolean boolean79 = jsonGenerator29.isEnabled(feature77);
        jsonGenerator29.writeNumber(0.0d);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature8.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + jsonEncoding13 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding13.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature23.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(jsonFactory26);
        org.junit.Assert.assertTrue("'" + jsonEncoding28 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding28.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator29);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature32.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature45.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(jsonFactory48);
        org.junit.Assert.assertTrue("'" + jsonEncoding50 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding50.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature60.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(jsonFactory63);
        org.junit.Assert.assertTrue("'" + jsonEncoding65 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding65.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator66);
        org.junit.Assert.assertTrue("'" + feature69 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature69.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertTrue("'" + feature77 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS + "'", feature77.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));
        org.junit.Assert.assertNotNull(jsonGenerator78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter1.createInstance();
        com.fasterxml.jackson.core.ObjectCodec objectCodec3 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = new com.fasterxml.jackson.core.JsonFactory(objectCodec3);
        com.fasterxml.jackson.core.JsonParser.Feature feature5 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean6 = feature5.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory8 = jsonFactory4.configure(feature5, false);
        java.io.OutputStream outputStream9 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding10 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator11 = jsonFactory8.createGenerator(outputStream9, jsonEncoding10);
        jsonGenerator11.writeRaw("JSON");
        jsonGenerator11.writeNumber("hi!");
        int[] intArray16 = com.fasterxml.jackson.core.json.ReaderBasedJsonParser._icLatin1;
        jsonGenerator11.writeArray(intArray16, 64, 0);
        defaultPrettyPrinter2.writeRootValueSeparator(jsonGenerator11);
        jsonGenerator11.writeObjectFieldStart("false");
        org.junit.Assert.assertNotNull(defaultPrettyPrinter2);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature5.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(jsonFactory8);
        org.junit.Assert.assertTrue("'" + jsonEncoding10 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding10.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator11);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        com.fasterxml.jackson.core.json.DupDetector dupDetector0 = null;
        com.fasterxml.jackson.core.json.JsonWriteContext jsonWriteContext1 = com.fasterxml.jackson.core.json.JsonWriteContext.createRootContext(dupDetector0);
        com.fasterxml.jackson.core.json.JsonWriteContext jsonWriteContext2 = jsonWriteContext1._child;
        com.fasterxml.jackson.core.json.JsonWriteContext jsonWriteContext3 = jsonWriteContext1.clearAndGetParent();
        com.fasterxml.jackson.core.ObjectCodec objectCodec4 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory(objectCodec4);
        com.fasterxml.jackson.core.io.SerializedString serializedString7 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray10 = new char[] { '4', '#' };
        int int12 = serializedString7.appendQuoted(charArray10, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser13 = jsonFactory5.createParser(charArray10);
        java.lang.String str14 = jsonFactory5.getFormatName();
        java.io.Writer writer15 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator16 = jsonFactory5.createJsonGenerator(writer15);
        java.io.OutputStream outputStream17 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator18 = jsonFactory5.createGenerator(outputStream17);
        int int19 = jsonGenerator18.getHighestEscapedChar();
        java.math.BigDecimal bigDecimal21 = null;
        jsonGenerator18.writeNumberField("", bigDecimal21);
        jsonWriteContext1._currentValue = jsonGenerator18;
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext24 = jsonWriteContext1.getParent();
        org.junit.Assert.assertNotNull(jsonWriteContext1);
        org.junit.Assert.assertNull(jsonWriteContext2);
        org.junit.Assert.assertNull(jsonWriteContext3);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, #]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(jsonParser13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JSON" + "'", str14, "JSON");
        org.junit.Assert.assertNotNull(jsonGenerator16);
        org.junit.Assert.assertNotNull(jsonGenerator18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(jsonStreamContext24);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter();
        com.fasterxml.jackson.core.ObjectCodec objectCodec1 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory2 = new com.fasterxml.jackson.core.JsonFactory(objectCodec1);
        com.fasterxml.jackson.core.JsonParser.Feature feature3 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean4 = feature3.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory6 = jsonFactory2.configure(feature3, false);
        java.io.OutputStream outputStream7 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding8 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator9 = jsonFactory6.createGenerator(outputStream7, jsonEncoding8);
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("");
        jsonGenerator9.writeRawValue((com.fasterxml.jackson.core.SerializableString) serializedString11);
        java.math.BigDecimal bigDecimal14 = null;
        jsonGenerator9.writeNumberField("", bigDecimal14);
        fixedSpaceIndenter0.writeIndentation(jsonGenerator9, 0);
        com.fasterxml.jackson.core.ObjectCodec objectCodec18 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = new com.fasterxml.jackson.core.JsonFactory(objectCodec18);
        com.fasterxml.jackson.core.JsonParser.Feature feature20 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean21 = feature20.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory23 = jsonFactory19.configure(feature20, false);
        java.io.OutputStream outputStream24 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding25 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator26 = jsonFactory23.createGenerator(outputStream24, jsonEncoding25);
        com.fasterxml.jackson.core.io.SerializedString serializedString28 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature29 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean30 = serializedString28.equals((java.lang.Object) feature29);
        java.lang.String str31 = serializedString28.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonGenerator26.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString28);
        jsonGenerator26.writeString("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonGenerator26.useDefaultPrettyPrinter();
        boolean boolean36 = jsonGenerator26.canWriteFormattedNumbers();
        com.fasterxml.jackson.core.io.SerializedString serializedString38 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray41 = new char[] { '4', '#' };
        int int43 = serializedString38.appendQuoted(charArray41, (int) (byte) 10);
        jsonGenerator26.writeString((com.fasterxml.jackson.core.SerializableString) serializedString38);
        fixedSpaceIndenter0.writeIndentation(jsonGenerator26, 64);
        boolean boolean47 = jsonGenerator26.canWriteObjectId();
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature3.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(jsonFactory6);
        org.junit.Assert.assertTrue("'" + jsonEncoding8 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding8.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator9);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature20.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(jsonFactory23);
        org.junit.Assert.assertTrue("'" + jsonEncoding25 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding25.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator26);
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature29.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[4, #]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonParser.Feature feature8 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean9 = feature8.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory7.configure(feature8, false);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding13 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory11.createGenerator(outputStream12, jsonEncoding13);
        com.fasterxml.jackson.core.JsonFactory.Feature feature15 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean16 = jsonFactory11.isEnabled(feature15);
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = jsonFactory1.disable(feature15);
        com.fasterxml.jackson.core.JsonFactory.Feature feature18 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean19 = feature18.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = jsonFactory1.disable(feature18);
        java.io.OutputStream outputStream21 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding22 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        boolean boolean23 = jsonEncoding22.isBigEndian();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator24 = jsonFactory20.createGenerator(outputStream21, jsonEncoding22);
        java.io.OutputStream outputStream25 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding26 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        java.lang.String str27 = jsonEncoding26.getJavaName();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator28 = jsonFactory20.createJsonGenerator(outputStream25, jsonEncoding26);
        com.fasterxml.jackson.core.ObjectCodec objectCodec29 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory(objectCodec29);
        com.fasterxml.jackson.core.JsonParser.Feature feature31 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean32 = feature31.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory30.configure(feature31, false);
        java.io.OutputStream outputStream35 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding36 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = jsonFactory34.createGenerator(outputStream35, jsonEncoding36);
        java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature> wildcardClass38 = jsonFactory34.getFormatWriteFeatureType();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes39 = jsonFactory34.getCharacterEscapes();
        com.fasterxml.jackson.core.ObjectCodec objectCodec40 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = new com.fasterxml.jackson.core.JsonFactory(objectCodec40);
        com.fasterxml.jackson.core.JsonParser.Feature feature42 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean43 = feature42.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory45 = jsonFactory41.configure(feature42, false);
        java.io.OutputStream outputStream46 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding47 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator48 = jsonFactory45.createGenerator(outputStream46, jsonEncoding47);
        com.fasterxml.jackson.core.JsonFactory.Feature feature49 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean50 = jsonFactory45.isEnabled(feature49);
        java.io.Writer writer51 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = jsonFactory45.createJsonGenerator(writer51);
        com.fasterxml.jackson.core.ObjectCodec objectCodec53 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory54 = new com.fasterxml.jackson.core.JsonFactory(objectCodec53);
        com.fasterxml.jackson.core.JsonParser.Feature feature55 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean56 = feature55.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory58 = jsonFactory54.configure(feature55, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec59 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory60 = new com.fasterxml.jackson.core.JsonFactory(objectCodec59);
        com.fasterxml.jackson.core.JsonParser.Feature feature61 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean62 = feature61.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory64 = jsonFactory60.configure(feature61, false);
        java.io.OutputStream outputStream65 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding66 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator67 = jsonFactory64.createGenerator(outputStream65, jsonEncoding66);
        com.fasterxml.jackson.core.JsonFactory.Feature feature68 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean69 = jsonFactory64.isEnabled(feature68);
        com.fasterxml.jackson.core.JsonFactory jsonFactory70 = jsonFactory54.disable(feature68);
        com.fasterxml.jackson.core.JsonFactory jsonFactory71 = jsonFactory45.disable(feature68);
        boolean boolean72 = jsonFactory34.isEnabled(feature68);
        com.fasterxml.jackson.core.JsonFactory jsonFactory74 = jsonFactory20.configure(feature68, false);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature8.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + jsonEncoding13 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding13.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature15.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(jsonFactory17);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature18.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(jsonFactory20);
        org.junit.Assert.assertTrue("'" + jsonEncoding22 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding22.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jsonGenerator24);
        org.junit.Assert.assertTrue("'" + jsonEncoding26 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding26.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTF-8" + "'", str27, "UTF-8");
        org.junit.Assert.assertNotNull(jsonGenerator28);
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature31.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertTrue("'" + jsonEncoding36 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding36.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator37);
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertNull(characterEscapes39);
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature42.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(jsonFactory45);
        org.junit.Assert.assertTrue("'" + jsonEncoding47 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding47.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator48);
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature49.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(jsonGenerator52);
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature55.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(jsonFactory58);
        org.junit.Assert.assertTrue("'" + feature61 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature61.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(jsonFactory64);
        org.junit.Assert.assertTrue("'" + jsonEncoding66 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding66.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator67);
        org.junit.Assert.assertTrue("'" + feature68 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature68.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(jsonFactory70);
        org.junit.Assert.assertNotNull(jsonFactory71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(jsonFactory74);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        defaultPrettyPrinter1.writeEndObject(jsonGenerator10, 56320);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator16 = jsonGenerator10.setFeatureMask((int) (short) -1);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes17 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator18 = jsonGenerator16.setCharacterEscapes(characterEscapes17);
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertNotNull(jsonGenerator16);
        org.junit.Assert.assertNotNull(jsonGenerator18);
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        com.fasterxml.jackson.core.ObjectCodec objectCodec17 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = new com.fasterxml.jackson.core.JsonFactory(objectCodec17);
        com.fasterxml.jackson.core.JsonParser.Feature feature19 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean20 = feature19.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = jsonFactory18.configure(feature19, false);
        java.io.OutputStream outputStream23 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding24 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = jsonFactory22.createGenerator(outputStream23, jsonEncoding24);
        com.fasterxml.jackson.core.io.SerializedString serializedString27 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature28 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean29 = serializedString27.equals((java.lang.Object) feature28);
        java.lang.String str30 = serializedString27.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator31 = jsonGenerator25.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString27);
        defaultPrettyPrinter1.beforeArrayValues(jsonGenerator25);
        jsonGenerator25.writeNumberField("hi!", 0.0f);
        com.fasterxml.jackson.core.io.SerializedString serializedString37 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray40 = new char[] { '4', '#' };
        int int42 = serializedString37.appendQuoted(charArray40, (int) (byte) 10);
        byte[] byteArray43 = new byte[] {};
        int int45 = serializedString37.appendUnquotedUTF8(byteArray43, (int) (short) 1);
        jsonGenerator25.writeBinary(byteArray43);
        com.fasterxml.jackson.core.ObjectCodec objectCodec47 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory48 = new com.fasterxml.jackson.core.JsonFactory(objectCodec47);
        com.fasterxml.jackson.core.io.SerializedString serializedString50 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray53 = new char[] { '4', '#' };
        int int55 = serializedString50.appendQuoted(charArray53, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser56 = jsonFactory48.createParser(charArray53);
        java.lang.String str57 = jsonParser56.getValueAsString();
        com.fasterxml.jackson.core.FormatSchema formatSchema58 = null;
        boolean boolean59 = jsonParser56.canUseSchema(formatSchema58);
        char[] charArray60 = jsonParser56.getTextCharacters();
        boolean boolean61 = jsonParser56.canReadObjectId();
        com.fasterxml.jackson.core.Version version62 = jsonParser56.version();
        com.fasterxml.jackson.core.JsonParser.Feature feature63 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        boolean boolean64 = feature63.enabledByDefault();
        com.fasterxml.jackson.core.JsonParser jsonParser65 = jsonParser56.enable(feature63);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator25.copyCurrentEvent(jsonParser56);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: No current event to copy");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature19.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(jsonFactory22);
        org.junit.Assert.assertTrue("'" + jsonEncoding24 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding24.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator25);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature28.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator31);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[4, #]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[4, #]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(jsonParser56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(charArray60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(version62);
        org.junit.Assert.assertTrue("'" + feature63 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature63.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jsonParser65);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray6 = new char[] { '4', '#' };
        int int8 = serializedString3.appendQuoted(charArray6, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory1.createParser(charArray6);
        boolean boolean11 = jsonParser9.hasTokenId(0);
        com.fasterxml.jackson.core.JsonParseException jsonParseException13 = new com.fasterxml.jackson.core.JsonParseException(jsonParser9, "JSON");
        com.fasterxml.jackson.core.ObjectCodec objectCodec14 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory15 = new com.fasterxml.jackson.core.JsonFactory(objectCodec14);
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean17 = feature16.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = jsonFactory15.configure(feature16, false);
        java.io.OutputStream outputStream20 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding21 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator22 = jsonFactory19.createGenerator(outputStream20, jsonEncoding21);
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature25 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean26 = serializedString24.equals((java.lang.Object) feature25);
        java.lang.String str27 = serializedString24.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator28 = jsonGenerator22.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString24);
        jsonGenerator22.writeString("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator31 = jsonGenerator22.useDefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException32 = new com.fasterxml.jackson.core.JsonGenerationException((java.lang.Throwable) jsonParseException13, jsonGenerator22);
        java.lang.Throwable[] throwableArray33 = jsonParseException13.getSuppressed();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(jsonFactory19);
        org.junit.Assert.assertTrue("'" + jsonEncoding21 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding21.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator22);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature25.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator28);
        org.junit.Assert.assertNotNull(jsonGenerator31);
        org.junit.Assert.assertNotNull(throwableArray33);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonParser.Feature feature8 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean9 = feature8.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory7.configure(feature8, false);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding13 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory11.createGenerator(outputStream12, jsonEncoding13);
        com.fasterxml.jackson.core.JsonFactory.Feature feature15 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean16 = jsonFactory11.isEnabled(feature15);
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = jsonFactory1.disable(feature15);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator18 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = jsonFactory1.setInputDecorator(inputDecorator18);
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = jsonFactory19.copy();
        com.fasterxml.jackson.core.ObjectCodec objectCodec21 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = new com.fasterxml.jackson.core.JsonFactory(objectCodec21);
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray27 = new char[] { '4', '#' };
        int int29 = serializedString24.appendQuoted(charArray27, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory22.createParser(charArray27);
        boolean boolean32 = jsonParser30.hasTokenId(0);
        com.fasterxml.jackson.core.JsonParseException jsonParseException34 = new com.fasterxml.jackson.core.JsonParseException(jsonParser30, "com.fasterxml.jackson.core.JsonGenerationException: N/A");
        boolean boolean36 = jsonParser30.hasTokenId(0);
        com.fasterxml.jackson.core.JsonParser.Feature feature37 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
        com.fasterxml.jackson.core.JsonParser jsonParser39 = jsonParser30.configure(feature37, true);
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory20.disable(feature37);
        boolean boolean41 = jsonFactory40.requiresPropertyOrdering();
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature8.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + jsonEncoding13 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding13.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature15.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(jsonFactory17);
        org.junit.Assert.assertNotNull(jsonFactory19);
        org.junit.Assert.assertNotNull(jsonFactory20);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[4, #]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER + "'", feature37.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER));
        org.junit.Assert.assertNotNull(jsonParser39);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        jsonGenerator8.writeRaw("JSON");
        jsonGenerator8.writeNumber("hi!");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonGenerator8.setHighestNonEscapedChar((-1));
        jsonGenerator14.writeBoolean(true);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNotNull(jsonGenerator14);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        java.io.Writer writer2 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator3 = jsonFactory1.createJsonGenerator(writer2);
        com.fasterxml.jackson.core.io.OutputDecorator outputDecorator4 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.setOutputDecorator(outputDecorator4);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = jsonFactory5._getBufferRecycler();
        byte[] byteArray8 = null;
        bufferRecycler6.releaseByteBuffer(0, byteArray8);
        com.fasterxml.jackson.core.ObjectCodec objectCodec11 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory12 = new com.fasterxml.jackson.core.JsonFactory(objectCodec11);
        com.fasterxml.jackson.core.JsonParser.Feature feature13 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean14 = feature13.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory16 = jsonFactory12.configure(feature13, false);
        java.io.OutputStream outputStream17 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding18 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator19 = jsonFactory16.createGenerator(outputStream17, jsonEncoding18);
        jsonGenerator19.writeRaw("JSON");
        jsonGenerator19.writeNumber("hi!");
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException24 = new com.fasterxml.jackson.core.JsonGenerationException("com.fasterxml.jackson.core.JsonGenerationException: N/A", jsonGenerator19);
        com.fasterxml.jackson.core.io.IOContext iOContext26 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) jsonGenerationException24, true);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter29 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec30 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory31 = new com.fasterxml.jackson.core.JsonFactory(objectCodec30);
        com.fasterxml.jackson.core.JsonParser.Feature feature32 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean33 = feature32.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory35 = jsonFactory31.configure(feature32, false);
        java.io.OutputStream outputStream36 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding37 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator38 = jsonFactory35.createGenerator(outputStream36, jsonEncoding37);
        jsonGenerator38.writeRaw("JSON");
        defaultPrettyPrinter29.writeEndObject(jsonGenerator38, 56320);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator44 = jsonGenerator38.setFeatureMask((int) (short) -1);
        com.fasterxml.jackson.core.io.SerializedString serializedString46 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray49 = new char[] { '4', '#' };
        int int51 = serializedString46.appendQuoted(charArray49, (int) (byte) 10);
        char[] charArray52 = serializedString46.asQuotedChars();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10 };
        int int57 = serializedString46.appendUnquotedUTF8(byteArray55, 1);
        jsonGenerator44.writeString((com.fasterxml.jackson.core.SerializableString) serializedString46);
        byte[] byteArray59 = serializedString46.asUnquotedUTF8();
        bufferRecycler6.releaseByteBuffer(0, byteArray59);
        org.junit.Assert.assertNotNull(jsonGenerator3);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertNotNull(bufferRecycler6);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature13.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(jsonFactory16);
        org.junit.Assert.assertTrue("'" + jsonEncoding18 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding18.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator19);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature32.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(jsonFactory35);
        org.junit.Assert.assertTrue("'" + jsonEncoding37 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding37.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator38);
        org.junit.Assert.assertNotNull(jsonGenerator44);
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[4, #]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[h, i, !]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[104, 105, 33]");
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter1.createInstance();
        defaultPrettyPrinter2.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec5 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory6 = new com.fasterxml.jackson.core.JsonFactory(objectCodec5);
        com.fasterxml.jackson.core.JsonParser.Feature feature7 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean8 = feature7.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory10 = jsonFactory6.configure(feature7, false);
        java.io.OutputStream outputStream11 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding12 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator13 = jsonFactory10.createGenerator(outputStream11, jsonEncoding12);
        jsonGenerator13.writeRaw("JSON");
        defaultPrettyPrinter2.beforeObjectEntries(jsonGenerator13);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator17 = jsonGenerator13.useDefaultPrettyPrinter();
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray22 = new char[] { '4', '#' };
        int int24 = serializedString19.appendQuoted(charArray22, (int) (byte) 10);
        byte[] byteArray25 = new byte[] {};
        int int27 = serializedString19.appendUnquotedUTF8(byteArray25, (int) (short) 1);
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int31 = serializedString19.appendUnquotedUTF8(byteArray29, 32);
        jsonGenerator17.writeBinary(byteArray29);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter2);
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature7.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(jsonFactory10);
        org.junit.Assert.assertTrue("'" + jsonEncoding12 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding12.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator13);
        org.junit.Assert.assertNotNull(jsonGenerator17);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[4, #]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = defaultPrettyPrinter3.createInstance();
        defaultPrettyPrinter4.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter8 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory10 = new com.fasterxml.jackson.core.JsonFactory(objectCodec9);
        com.fasterxml.jackson.core.JsonParser.Feature feature11 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean12 = feature11.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory14 = jsonFactory10.configure(feature11, false);
        java.io.OutputStream outputStream15 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding16 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator17 = jsonFactory14.createGenerator(outputStream15, jsonEncoding16);
        jsonGenerator17.writeRaw("JSON");
        boolean boolean20 = jsonGenerator17.isClosed();
        jsonGenerator17.writeRaw('4');
        defaultPrettyPrinter8.writeObjectFieldValueSeparator(jsonGenerator17);
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory25 = new com.fasterxml.jackson.core.JsonFactory(objectCodec24);
        com.fasterxml.jackson.core.JsonParser.Feature feature26 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean27 = feature26.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory29 = jsonFactory25.configure(feature26, false);
        java.io.OutputStream outputStream30 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding31 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory29.createGenerator(outputStream30, jsonEncoding31);
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature35 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean36 = serializedString34.equals((java.lang.Object) feature35);
        java.lang.String str37 = serializedString34.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator38 = jsonGenerator32.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString34);
        defaultPrettyPrinter8.beforeArrayValues(jsonGenerator32);
        java.lang.Object obj40 = jsonGenerator32.getOutputTarget();
        defaultPrettyPrinter4.writeEndObject(jsonGenerator32, 33);
        defaultPrettyPrinter1.writeStartArray(jsonGenerator32);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator32.writeRaw("[com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: size=0, hashSize=0, 0/0/0/0 pri/sec/ter/spill (=0), total:0]", (int) (byte) -1, 64);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultPrettyPrinter4);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature11.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(jsonFactory14);
        org.junit.Assert.assertTrue("'" + jsonEncoding16 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding16.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature26.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(jsonFactory29);
        org.junit.Assert.assertTrue("'" + jsonEncoding31 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding31.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature35.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator38);
        org.junit.Assert.assertNull(obj40);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec3 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = new com.fasterxml.jackson.core.JsonFactory(objectCodec3);
        com.fasterxml.jackson.core.io.SerializedString serializedString6 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray9 = new char[] { '4', '#' };
        int int11 = serializedString6.appendQuoted(charArray9, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonFactory4.createParser(charArray9);
        boolean boolean14 = jsonParser12.hasTokenId(0);
        com.fasterxml.jackson.core.JsonLocation jsonLocation16 = null;
        com.fasterxml.jackson.core.JsonLocation jsonLocation18 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException19 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation18);
        java.lang.Throwable throwable20 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator21 = null;
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException22 = new com.fasterxml.jackson.core.JsonGenerationException(throwable20, jsonGenerator21);
        jsonParseException19.addSuppressed((java.lang.Throwable) jsonGenerationException22);
        com.fasterxml.jackson.core.JsonParseException jsonParseException24 = new com.fasterxml.jackson.core.JsonParseException(jsonParser12, "com.fasterxml.jackson.core.JsonGenerationException: N/A", jsonLocation16, (java.lang.Throwable) jsonParseException19);
        com.fasterxml.jackson.core.JsonParseException jsonParseException25 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation2, (java.lang.Throwable) jsonParseException24);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException26 = new com.fasterxml.jackson.core.JsonGenerationException((java.lang.Throwable) jsonParseException24);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException27 = new com.fasterxml.jackson.core.JsonGenerationException((java.lang.Throwable) jsonGenerationException26);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator28 = null;
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException29 = new com.fasterxml.jackson.core.JsonGenerationException("[", (java.lang.Throwable) jsonGenerationException27, jsonGenerator28);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException30 = new com.fasterxml.jackson.core.JsonGenerationException((java.lang.Throwable) jsonGenerationException27);
        com.fasterxml.jackson.core.ObjectCodec objectCodec31 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory32 = new com.fasterxml.jackson.core.JsonFactory(objectCodec31);
        com.fasterxml.jackson.core.JsonParser.Feature feature33 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean34 = feature33.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory36 = jsonFactory32.configure(feature33, false);
        java.io.OutputStream outputStream37 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding38 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonFactory36.createGenerator(outputStream37, jsonEncoding38);
        jsonGenerator39.writeRaw("JSON");
        boolean boolean42 = jsonGenerator39.isClosed();
        jsonGenerator39.writeNumber((float) (byte) 1);
        int int45 = jsonGenerator39.getFeatureMask();
        jsonGenerator39.writeNumber((long) 1);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException48 = new com.fasterxml.jackson.core.JsonGenerationException((java.lang.Throwable) jsonGenerationException30, jsonGenerator39);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4, #]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(jsonParser12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature33.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(jsonFactory36);
        org.junit.Assert.assertTrue("'" + jsonEncoding38 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding38.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 31 + "'", int45 == 31);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonParser.Feature feature8 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean9 = feature8.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory7.configure(feature8, false);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding13 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory11.createGenerator(outputStream12, jsonEncoding13);
        com.fasterxml.jackson.core.JsonFactory.Feature feature15 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean16 = jsonFactory11.isEnabled(feature15);
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = jsonFactory1.disable(feature15);
        com.fasterxml.jackson.core.JsonFactory.Feature feature18 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean19 = feature18.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = jsonFactory1.disable(feature18);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature21 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
        com.fasterxml.jackson.core.JsonFactory jsonFactory23 = jsonFactory20.configure(feature21, false);
        java.io.Reader reader24 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser25 = jsonFactory20.createParser(reader24);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray26 = jsonParser25.getBinaryValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature8.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + jsonEncoding13 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding13.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature15.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(jsonFactory17);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature18.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(jsonFactory20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN + "'", feature21.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN));
        org.junit.Assert.assertNotNull(jsonFactory23);
        org.junit.Assert.assertNotNull(jsonParser25);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        com.fasterxml.jackson.core.FormatSchema formatSchema17 = jsonGenerator10.getSchema();
        double[] doubleArray18 = new double[] {};
        jsonGenerator10.writeArray(doubleArray18, 33, (-1700596179));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(formatSchema17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        defaultPrettyPrinter1.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonParser.Feature feature8 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean9 = feature8.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory7.configure(feature8, false);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding13 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory11.createGenerator(outputStream12, jsonEncoding13);
        jsonGenerator14.writeRaw("JSON");
        boolean boolean17 = jsonGenerator14.isClosed();
        jsonGenerator14.writeRaw('4');
        defaultPrettyPrinter5.writeObjectFieldValueSeparator(jsonGenerator14);
        com.fasterxml.jackson.core.ObjectCodec objectCodec21 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = new com.fasterxml.jackson.core.JsonFactory(objectCodec21);
        com.fasterxml.jackson.core.JsonParser.Feature feature23 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean24 = feature23.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory26 = jsonFactory22.configure(feature23, false);
        java.io.OutputStream outputStream27 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding28 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator29 = jsonFactory26.createGenerator(outputStream27, jsonEncoding28);
        com.fasterxml.jackson.core.io.SerializedString serializedString31 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature32 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean33 = serializedString31.equals((java.lang.Object) feature32);
        java.lang.String str34 = serializedString31.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonGenerator29.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString31);
        defaultPrettyPrinter5.beforeArrayValues(jsonGenerator29);
        defaultPrettyPrinter1.writeEndObject(jsonGenerator29, (int) (short) 10);
        java.math.BigInteger bigInteger39 = null;
        jsonGenerator29.writeNumber(bigInteger39);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature8.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + jsonEncoding13 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding13.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature23.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(jsonFactory26);
        org.junit.Assert.assertTrue("'" + jsonEncoding28 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding28.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator29);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature32.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator35);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature> wildcardClass9 = jsonFactory5.getFormatWriteFeatureType();
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = new com.fasterxml.jackson.core.JsonFactory(objectCodec10);
        com.fasterxml.jackson.core.JsonParser.Feature feature12 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean13 = feature12.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory15 = jsonFactory11.configure(feature12, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec16 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = new com.fasterxml.jackson.core.JsonFactory(objectCodec16);
        com.fasterxml.jackson.core.JsonParser.Feature feature18 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean19 = feature18.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory21 = jsonFactory17.configure(feature18, false);
        java.io.OutputStream outputStream22 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding23 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator24 = jsonFactory21.createGenerator(outputStream22, jsonEncoding23);
        com.fasterxml.jackson.core.JsonFactory.Feature feature25 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean26 = jsonFactory21.isEnabled(feature25);
        com.fasterxml.jackson.core.JsonFactory jsonFactory27 = jsonFactory11.disable(feature25);
        boolean boolean28 = jsonFactory5.isEnabled(feature25);
        com.fasterxml.jackson.core.JsonFactory jsonFactory29 = jsonFactory5.copy();
        java.lang.String str30 = jsonFactory29.getFormatName();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray35 = new char[] { '4', '#' };
        int int37 = serializedString32.appendQuoted(charArray35, (int) (byte) 10);
        char[] charArray38 = serializedString32.asQuotedChars();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10 };
        int int43 = serializedString32.appendUnquotedUTF8(byteArray41, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser44 = jsonFactory29.createJsonParser(byteArray41);
        com.fasterxml.jackson.core.JsonFactory jsonFactory46 = jsonFactory29.setRootValueSeparator("[com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: size=0, hashSize=0, 0/0/0/0 pri/sec/ter/spill (=0), total:0]");
        java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature> wildcardClass47 = jsonFactory29.getFormatReadFeatureType();
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature12.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(jsonFactory15);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature18.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(jsonFactory21);
        org.junit.Assert.assertTrue("'" + jsonEncoding23 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding23.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator24);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature25.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(jsonFactory27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(jsonFactory29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "JSON" + "'", str30, "JSON");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[4, #]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[h, i, !]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(jsonParser44);
        org.junit.Assert.assertNotNull(jsonFactory46);
        org.junit.Assert.assertNull(wildcardClass47);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.io.SerializedString serializedString5 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray8 = new char[] { '4', '#' };
        int int10 = serializedString5.appendQuoted(charArray8, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser11 = jsonFactory3.createParser(charArray8);
        boolean boolean13 = jsonParser11.hasTokenId(0);
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException(jsonParser11, "com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter17 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec18 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = new com.fasterxml.jackson.core.JsonFactory(objectCodec18);
        com.fasterxml.jackson.core.JsonParser.Feature feature20 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean21 = feature20.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory23 = jsonFactory19.configure(feature20, false);
        java.io.OutputStream outputStream24 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding25 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator26 = jsonFactory23.createGenerator(outputStream24, jsonEncoding25);
        jsonGenerator26.writeRaw("JSON");
        defaultPrettyPrinter17.writeEndObject(jsonGenerator26, 56320);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonGenerator26.setFeatureMask((int) (short) -1);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException33 = new com.fasterxml.jackson.core.JsonGenerationException("com.fasterxml.jackson.core.JsonGenerationException: N/A", (java.lang.Throwable) jsonParseException15, jsonGenerator32);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec36 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory37 = new com.fasterxml.jackson.core.JsonFactory(objectCodec36);
        com.fasterxml.jackson.core.JsonParser.Feature feature38 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean39 = feature38.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = jsonFactory37.configure(feature38, false);
        java.io.OutputStream outputStream42 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding43 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator44 = jsonFactory41.createGenerator(outputStream42, jsonEncoding43);
        jsonGenerator44.writeRaw("JSON");
        boolean boolean47 = jsonGenerator44.isClosed();
        jsonGenerator44.writeRaw('4');
        defaultPrettyPrinter35.writeObjectFieldValueSeparator(jsonGenerator44);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter51 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter52 = defaultPrettyPrinter35.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter51);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter54 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        defaultPrettyPrinter54.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter58 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec59 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory60 = new com.fasterxml.jackson.core.JsonFactory(objectCodec59);
        com.fasterxml.jackson.core.JsonParser.Feature feature61 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean62 = feature61.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory64 = jsonFactory60.configure(feature61, false);
        java.io.OutputStream outputStream65 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding66 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator67 = jsonFactory64.createGenerator(outputStream65, jsonEncoding66);
        jsonGenerator67.writeRaw("JSON");
        boolean boolean70 = jsonGenerator67.isClosed();
        jsonGenerator67.writeRaw('4');
        defaultPrettyPrinter58.writeObjectFieldValueSeparator(jsonGenerator67);
        com.fasterxml.jackson.core.ObjectCodec objectCodec74 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory75 = new com.fasterxml.jackson.core.JsonFactory(objectCodec74);
        com.fasterxml.jackson.core.JsonParser.Feature feature76 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean77 = feature76.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory79 = jsonFactory75.configure(feature76, false);
        java.io.OutputStream outputStream80 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding81 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator82 = jsonFactory79.createGenerator(outputStream80, jsonEncoding81);
        com.fasterxml.jackson.core.io.SerializedString serializedString84 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature85 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean86 = serializedString84.equals((java.lang.Object) feature85);
        java.lang.String str87 = serializedString84.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator88 = jsonGenerator82.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString84);
        defaultPrettyPrinter58.beforeArrayValues(jsonGenerator82);
        defaultPrettyPrinter54.writeEndObject(jsonGenerator82, (int) (short) 10);
        defaultPrettyPrinter52.writeArrayValueSeparator(jsonGenerator82);
        java.math.BigInteger bigInteger93 = null;
        jsonGenerator82.writeNumber(bigInteger93);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException95 = jsonGenerationException33.withGenerator(jsonGenerator82);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException96 = new com.fasterxml.jackson.core.JsonGenerationException("hi!", (java.lang.Throwable) jsonGenerationException95);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4, #]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(jsonParser11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature20.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(jsonFactory23);
        org.junit.Assert.assertTrue("'" + jsonEncoding25 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding25.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator26);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature38.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(jsonFactory41);
        org.junit.Assert.assertTrue("'" + jsonEncoding43 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding43.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter52);
        org.junit.Assert.assertTrue("'" + feature61 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature61.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(jsonFactory64);
        org.junit.Assert.assertTrue("'" + jsonEncoding66 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding66.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + feature76 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature76.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(jsonFactory79);
        org.junit.Assert.assertTrue("'" + jsonEncoding81 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding81.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator82);
        org.junit.Assert.assertTrue("'" + feature85 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature85.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hi!" + "'", str87, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator88);
        org.junit.Assert.assertNotNull(jsonGenerationException95);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        com.fasterxml.jackson.core.json.DupDetector dupDetector0 = null;
        com.fasterxml.jackson.core.json.JsonWriteContext jsonWriteContext1 = com.fasterxml.jackson.core.json.JsonWriteContext.createRootContext(dupDetector0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec4 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory(objectCodec4);
        com.fasterxml.jackson.core.JsonParser.Feature feature6 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean7 = feature6.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory9 = jsonFactory5.configure(feature6, false);
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding11 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator12 = jsonFactory9.createGenerator(outputStream10, jsonEncoding11);
        jsonGenerator12.writeRaw("JSON");
        boolean boolean15 = jsonGenerator12.isClosed();
        jsonGenerator12.writeRaw('4');
        defaultPrettyPrinter3.writeObjectFieldValueSeparator(jsonGenerator12);
        com.fasterxml.jackson.core.ObjectCodec objectCodec19 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = new com.fasterxml.jackson.core.JsonFactory(objectCodec19);
        com.fasterxml.jackson.core.JsonParser.Feature feature21 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean22 = feature21.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory24 = jsonFactory20.configure(feature21, false);
        java.io.OutputStream outputStream25 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding26 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator27 = jsonFactory24.createGenerator(outputStream25, jsonEncoding26);
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature30 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean31 = serializedString29.equals((java.lang.Object) feature30);
        java.lang.String str32 = serializedString29.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator33 = jsonGenerator27.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString29);
        defaultPrettyPrinter3.beforeArrayValues(jsonGenerator27);
        jsonWriteContext1.setCurrentValue((java.lang.Object) jsonGenerator27);
        com.fasterxml.jackson.core.ObjectCodec objectCodec36 = jsonGenerator27.getCodec();
        org.junit.Assert.assertNotNull(jsonWriteContext1);
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature6.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(jsonFactory9);
        org.junit.Assert.assertTrue("'" + jsonEncoding11 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding11.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature21.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(jsonFactory24);
        org.junit.Assert.assertTrue("'" + jsonEncoding26 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding26.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator27);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature30.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator33);
        org.junit.Assert.assertNull(objectCodec36);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        defaultPrettyPrinter1.writeEndObject(jsonGenerator10, 56320);
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray20 = new char[] { '4', '#' };
        int int22 = serializedString17.appendQuoted(charArray20, (int) (byte) 10);
        byte[] byteArray23 = new byte[] {};
        int int25 = serializedString17.appendUnquotedUTF8(byteArray23, (int) (short) 1);
        jsonGenerator10.writeBinaryField("", byteArray23);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter28 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec29 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory(objectCodec29);
        com.fasterxml.jackson.core.JsonParser.Feature feature31 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean32 = feature31.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory30.configure(feature31, false);
        java.io.OutputStream outputStream35 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding36 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = jsonFactory34.createGenerator(outputStream35, jsonEncoding36);
        jsonGenerator37.writeRaw("JSON");
        defaultPrettyPrinter28.writeEndObject(jsonGenerator37, 56320);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator42 = jsonGenerator10.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter28);
        com.fasterxml.jackson.core.io.SerializedString serializedString44 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray47 = new char[] { '4', '#' };
        int int49 = serializedString44.appendQuoted(charArray47, (int) (byte) 10);
        char[] charArray50 = serializedString44.asQuotedChars();
        byte[] byteArray51 = serializedString44.asQuotedUTF8();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter52 = defaultPrettyPrinter28.withRootSeparator((com.fasterxml.jackson.core.SerializableString) serializedString44);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter54 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec55 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory56 = new com.fasterxml.jackson.core.JsonFactory(objectCodec55);
        com.fasterxml.jackson.core.JsonParser.Feature feature57 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean58 = feature57.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory60 = jsonFactory56.configure(feature57, false);
        java.io.OutputStream outputStream61 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding62 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator63 = jsonFactory60.createGenerator(outputStream61, jsonEncoding62);
        jsonGenerator63.writeRaw("JSON");
        boolean boolean66 = jsonGenerator63.isClosed();
        jsonGenerator63.writeRaw('4');
        defaultPrettyPrinter54.writeObjectFieldValueSeparator(jsonGenerator63);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter70 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        defaultPrettyPrinter54.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter70);
        boolean boolean72 = nopIndenter70.isInline();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter73 = defaultPrettyPrinter52.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter74 = defaultPrettyPrinter52.createInstance();
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[4, #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature31.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertTrue("'" + jsonEncoding36 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding36.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator37);
        org.junit.Assert.assertNotNull(jsonGenerator42);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[4, #]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[h, i, !]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[104, 105, 33]");
        org.junit.Assert.assertNotNull(defaultPrettyPrinter52);
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature57.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(jsonFactory60);
        org.junit.Assert.assertTrue("'" + jsonEncoding62 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding62.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter73);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter74);
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        java.io.Writer writer2 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator3 = jsonFactory1.createJsonGenerator(writer2);
        jsonGenerator3.writeNullField("JSON");
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonParser.Feature feature8 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean9 = feature8.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory7.configure(feature8, false);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding13 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory11.createGenerator(outputStream12, jsonEncoding13);
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature17 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean18 = serializedString16.equals((java.lang.Object) feature17);
        java.lang.String str19 = serializedString16.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator20 = jsonGenerator14.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString16);
        jsonGenerator3.writeString((com.fasterxml.jackson.core.SerializableString) serializedString16);
        org.junit.Assert.assertNotNull(jsonGenerator3);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature8.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + jsonEncoding13 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding13.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature17.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator20);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature> wildcardClass9 = jsonFactory5.getFormatWriteFeatureType();
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = new com.fasterxml.jackson.core.JsonFactory(objectCodec10);
        com.fasterxml.jackson.core.JsonParser.Feature feature12 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean13 = feature12.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory15 = jsonFactory11.configure(feature12, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec16 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = new com.fasterxml.jackson.core.JsonFactory(objectCodec16);
        com.fasterxml.jackson.core.JsonParser.Feature feature18 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean19 = feature18.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory21 = jsonFactory17.configure(feature18, false);
        java.io.OutputStream outputStream22 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding23 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator24 = jsonFactory21.createGenerator(outputStream22, jsonEncoding23);
        com.fasterxml.jackson.core.JsonFactory.Feature feature25 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean26 = jsonFactory21.isEnabled(feature25);
        com.fasterxml.jackson.core.JsonFactory jsonFactory27 = jsonFactory11.disable(feature25);
        boolean boolean28 = jsonFactory5.isEnabled(feature25);
        com.fasterxml.jackson.core.JsonFactory jsonFactory29 = jsonFactory5.copy();
        com.fasterxml.jackson.core.ObjectCodec objectCodec30 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory31 = new com.fasterxml.jackson.core.JsonFactory(objectCodec30);
        com.fasterxml.jackson.core.JsonParser.Feature feature32 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean33 = feature32.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory35 = jsonFactory31.configure(feature32, false);
        java.io.OutputStream outputStream36 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding37 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator38 = jsonFactory35.createGenerator(outputStream36, jsonEncoding37);
        java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature> wildcardClass39 = jsonFactory35.getFormatWriteFeatureType();
        com.fasterxml.jackson.core.ObjectCodec objectCodec40 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = new com.fasterxml.jackson.core.JsonFactory(objectCodec40);
        com.fasterxml.jackson.core.JsonParser.Feature feature42 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean43 = feature42.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory45 = jsonFactory41.configure(feature42, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec46 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory47 = new com.fasterxml.jackson.core.JsonFactory(objectCodec46);
        com.fasterxml.jackson.core.JsonParser.Feature feature48 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean49 = feature48.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory47.configure(feature48, false);
        java.io.OutputStream outputStream52 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding53 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator54 = jsonFactory51.createGenerator(outputStream52, jsonEncoding53);
        com.fasterxml.jackson.core.JsonFactory.Feature feature55 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean56 = jsonFactory51.isEnabled(feature55);
        com.fasterxml.jackson.core.JsonFactory jsonFactory57 = jsonFactory41.disable(feature55);
        boolean boolean58 = jsonFactory35.isEnabled(feature55);
        int int59 = feature55.getMask();
        boolean boolean61 = feature55.enabledIn(0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory62 = jsonFactory29.disable(feature55);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature12.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(jsonFactory15);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature18.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(jsonFactory21);
        org.junit.Assert.assertTrue("'" + jsonEncoding23 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding23.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator24);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature25.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(jsonFactory27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(jsonFactory29);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature32.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(jsonFactory35);
        org.junit.Assert.assertTrue("'" + jsonEncoding37 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding37.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator38);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature42.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(jsonFactory45);
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature48.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertTrue("'" + jsonEncoding53 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding53.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator54);
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature55.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(jsonFactory57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(jsonFactory62);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        jsonGenerator10.writeRaw('a');
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray23 = new char[] { '4', '#' };
        int int25 = serializedString20.appendQuoted(charArray23, (int) (byte) 10);
        byte[] byteArray26 = new byte[] {};
        int int28 = serializedString20.appendUnquotedUTF8(byteArray26, (int) (short) 1);
        char[] charArray29 = serializedString20.asQuotedChars();
        byte[] byteArray30 = serializedString20.asQuotedUTF8();
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator10.writeTypeId((java.lang.Object) byteArray30);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: No native support for writing Type Ids");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[h, i, !]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[104, 105, 33]");
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        boolean boolean6 = jsonFactory1.requiresPropertyOrdering();
        java.io.InputStream inputStream7 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser8 = jsonFactory1.createParser(inputStream7);
        java.io.OutputStream outputStream9 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding10 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        java.lang.String str11 = jsonEncoding10.getJavaName();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator12 = jsonFactory1.createGenerator(outputStream9, jsonEncoding10);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jsonParser8);
        org.junit.Assert.assertTrue("'" + jsonEncoding10 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding10.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTF-8" + "'", str11, "UTF-8");
        org.junit.Assert.assertNotNull(jsonGenerator12);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter18 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec19 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = new com.fasterxml.jackson.core.JsonFactory(objectCodec19);
        com.fasterxml.jackson.core.JsonParser.Feature feature21 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean22 = feature21.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory24 = jsonFactory20.configure(feature21, false);
        java.io.OutputStream outputStream25 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding26 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator27 = jsonFactory24.createGenerator(outputStream25, jsonEncoding26);
        jsonGenerator27.writeRaw("JSON");
        boolean boolean30 = jsonGenerator27.isClosed();
        jsonGenerator27.writeRaw('4');
        defaultPrettyPrinter18.writeObjectFieldValueSeparator(jsonGenerator27);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter34 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = defaultPrettyPrinter18.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter34);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter37 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory39 = new com.fasterxml.jackson.core.JsonFactory(objectCodec38);
        com.fasterxml.jackson.core.JsonParser.Feature feature40 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean41 = feature40.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory43 = jsonFactory39.configure(feature40, false);
        java.io.OutputStream outputStream44 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding45 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator46 = jsonFactory43.createGenerator(outputStream44, jsonEncoding45);
        jsonGenerator46.writeRaw("JSON");
        defaultPrettyPrinter37.writeEndObject(jsonGenerator46, 56320);
        com.fasterxml.jackson.core.io.SerializedString serializedString53 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray56 = new char[] { '4', '#' };
        int int58 = serializedString53.appendQuoted(charArray56, (int) (byte) 10);
        byte[] byteArray59 = new byte[] {};
        int int61 = serializedString53.appendUnquotedUTF8(byteArray59, (int) (short) 1);
        jsonGenerator46.writeBinaryField("", byteArray59);
        nopIndenter34.writeIndentation(jsonGenerator46, (int) '#');
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter65 = defaultPrettyPrinter1.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter34);
        boolean boolean66 = nopIndenter34.isInline();
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature21.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(jsonFactory24);
        org.junit.Assert.assertTrue("'" + jsonEncoding26 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding26.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter35);
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature40.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(jsonFactory43);
        org.junit.Assert.assertTrue("'" + jsonEncoding45 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding45.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator46);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[4, #]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        com.fasterxml.jackson.core.ObjectCodec objectCodec17 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = new com.fasterxml.jackson.core.JsonFactory(objectCodec17);
        com.fasterxml.jackson.core.JsonParser.Feature feature19 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean20 = feature19.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = jsonFactory18.configure(feature19, false);
        java.io.OutputStream outputStream23 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding24 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = jsonFactory22.createGenerator(outputStream23, jsonEncoding24);
        com.fasterxml.jackson.core.io.SerializedString serializedString27 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature28 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean29 = serializedString27.equals((java.lang.Object) feature28);
        java.lang.String str30 = serializedString27.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator31 = jsonGenerator25.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString27);
        defaultPrettyPrinter1.beforeArrayValues(jsonGenerator25);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter33 = defaultPrettyPrinter1.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.ObjectCodec objectCodec34 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory35 = new com.fasterxml.jackson.core.JsonFactory(objectCodec34);
        com.fasterxml.jackson.core.io.SerializedString serializedString37 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray40 = new char[] { '4', '#' };
        int int42 = serializedString37.appendQuoted(charArray40, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser43 = jsonFactory35.createParser(charArray40);
        java.lang.String str44 = jsonFactory35.getFormatName();
        java.io.Writer writer45 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator46 = jsonFactory35.createJsonGenerator(writer45);
        java.io.OutputStream outputStream47 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator48 = jsonFactory35.createGenerator(outputStream47);
        int int49 = jsonGenerator48.getHighestEscapedChar();
        java.math.BigDecimal bigDecimal51 = null;
        jsonGenerator48.writeNumberField("", bigDecimal51);
        defaultPrettyPrinter33.writeEndArray(jsonGenerator48, 2);
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature19.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(jsonFactory22);
        org.junit.Assert.assertTrue("'" + jsonEncoding24 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding24.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator25);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature28.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator31);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter33);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[4, #]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(jsonParser43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "JSON" + "'", str44, "JSON");
        org.junit.Assert.assertNotNull(jsonGenerator46);
        org.junit.Assert.assertNotNull(jsonGenerator48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        com.fasterxml.jackson.core.json.DupDetector dupDetector2 = null;
        com.fasterxml.jackson.core.json.JsonWriteContext jsonWriteContext3 = com.fasterxml.jackson.core.json.JsonWriteContext.createRootContext(dupDetector2);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonParser.Feature feature8 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean9 = feature8.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory7.configure(feature8, false);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding13 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory11.createGenerator(outputStream12, jsonEncoding13);
        jsonGenerator14.writeRaw("JSON");
        boolean boolean17 = jsonGenerator14.isClosed();
        jsonGenerator14.writeRaw('4');
        defaultPrettyPrinter5.writeObjectFieldValueSeparator(jsonGenerator14);
        com.fasterxml.jackson.core.ObjectCodec objectCodec21 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = new com.fasterxml.jackson.core.JsonFactory(objectCodec21);
        com.fasterxml.jackson.core.JsonParser.Feature feature23 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean24 = feature23.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory26 = jsonFactory22.configure(feature23, false);
        java.io.OutputStream outputStream27 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding28 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator29 = jsonFactory26.createGenerator(outputStream27, jsonEncoding28);
        com.fasterxml.jackson.core.io.SerializedString serializedString31 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature32 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean33 = serializedString31.equals((java.lang.Object) feature32);
        java.lang.String str34 = serializedString31.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonGenerator29.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString31);
        defaultPrettyPrinter5.beforeArrayValues(jsonGenerator29);
        jsonWriteContext3.setCurrentValue((java.lang.Object) jsonGenerator29);
        java.lang.Object obj38 = jsonWriteContext3.getCurrentValue();
        boolean boolean39 = jsonWriteContext3.inArray();
        com.fasterxml.jackson.core.json.DupDetector dupDetector40 = null;
        com.fasterxml.jackson.core.json.JsonWriteContext jsonWriteContext41 = new com.fasterxml.jackson.core.json.JsonWriteContext((int) 'a', jsonWriteContext3, dupDetector40);
        com.fasterxml.jackson.core.json.DupDetector dupDetector42 = null;
        com.fasterxml.jackson.core.json.JsonWriteContext jsonWriteContext43 = new com.fasterxml.jackson.core.json.JsonWriteContext(1, jsonWriteContext3, dupDetector42);
        org.junit.Assert.assertNotNull(jsonWriteContext3);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature8.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + jsonEncoding13 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding13.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature23.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(jsonFactory26);
        org.junit.Assert.assertTrue("'" + jsonEncoding28 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding28.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator29);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature32.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter17 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter18 = defaultPrettyPrinter1.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter17);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter19 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter18);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter20 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter18);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter22.createInstance();
        defaultPrettyPrinter23.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter27 = defaultPrettyPrinter23.withRootSeparator("[");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter28 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter29 = defaultPrettyPrinter27.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter28);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter30 = defaultPrettyPrinter18.withObjectIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter28);
        com.fasterxml.jackson.core.ObjectCodec objectCodec31 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory32 = new com.fasterxml.jackson.core.JsonFactory(objectCodec31);
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray37 = new char[] { '4', '#' };
        int int39 = serializedString34.appendQuoted(charArray37, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser40 = jsonFactory32.createParser(charArray37);
        java.lang.String str41 = jsonFactory32.getFormatName();
        java.io.Writer writer42 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator43 = jsonFactory32.createJsonGenerator(writer42);
        java.io.OutputStream outputStream44 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator45 = jsonFactory32.createGenerator(outputStream44);
        jsonGenerator45.writeBooleanField("[", true);
        com.fasterxml.jackson.core.FormatSchema formatSchema49 = null;
        boolean boolean50 = jsonGenerator45.canUseSchema(formatSchema49);
        defaultPrettyPrinter18.writeObjectFieldValueSeparator(jsonGenerator45);
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter18);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter27);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter28);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter29);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter30);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[4, #]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(jsonParser40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "JSON" + "'", str41, "JSON");
        org.junit.Assert.assertNotNull(jsonGenerator43);
        org.junit.Assert.assertNotNull(jsonGenerator45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature> wildcardClass9 = jsonFactory5.getFormatWriteFeatureType();
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = new com.fasterxml.jackson.core.JsonFactory(objectCodec10);
        com.fasterxml.jackson.core.JsonParser.Feature feature12 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean13 = feature12.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory15 = jsonFactory11.configure(feature12, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec16 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = new com.fasterxml.jackson.core.JsonFactory(objectCodec16);
        com.fasterxml.jackson.core.JsonParser.Feature feature18 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean19 = feature18.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory21 = jsonFactory17.configure(feature18, false);
        java.io.OutputStream outputStream22 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding23 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator24 = jsonFactory21.createGenerator(outputStream22, jsonEncoding23);
        com.fasterxml.jackson.core.JsonFactory.Feature feature25 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean26 = jsonFactory21.isEnabled(feature25);
        com.fasterxml.jackson.core.JsonFactory jsonFactory27 = jsonFactory11.disable(feature25);
        boolean boolean28 = jsonFactory5.isEnabled(feature25);
        com.fasterxml.jackson.core.JsonFactory jsonFactory29 = jsonFactory5.copy();
        java.lang.String str30 = jsonFactory29.getFormatName();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray35 = new char[] { '4', '#' };
        int int37 = serializedString32.appendQuoted(charArray35, (int) (byte) 10);
        char[] charArray38 = serializedString32.asQuotedChars();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10 };
        int int43 = serializedString32.appendUnquotedUTF8(byteArray41, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser44 = jsonFactory29.createJsonParser(byteArray41);
        com.fasterxml.jackson.core.JsonFactory jsonFactory46 = jsonFactory29.setRootValueSeparator("[com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: size=0, hashSize=0, 0/0/0/0 pri/sec/ter/spill (=0), total:0]");
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes47 = jsonFactory29.getCharacterEscapes();
        com.fasterxml.jackson.core.ObjectCodec objectCodec48 = jsonFactory29.getCodec();
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature12.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(jsonFactory15);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature18.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(jsonFactory21);
        org.junit.Assert.assertTrue("'" + jsonEncoding23 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding23.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator24);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature25.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(jsonFactory27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(jsonFactory29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "JSON" + "'", str30, "JSON");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[4, #]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[h, i, !]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(jsonParser44);
        org.junit.Assert.assertNotNull(jsonFactory46);
        org.junit.Assert.assertNull(characterEscapes47);
        org.junit.Assert.assertNull(objectCodec48);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter17 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter18 = defaultPrettyPrinter1.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter17);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter20 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        defaultPrettyPrinter20.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter24 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec25 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory26 = new com.fasterxml.jackson.core.JsonFactory(objectCodec25);
        com.fasterxml.jackson.core.JsonParser.Feature feature27 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean28 = feature27.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = jsonFactory26.configure(feature27, false);
        java.io.OutputStream outputStream31 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding32 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator33 = jsonFactory30.createGenerator(outputStream31, jsonEncoding32);
        jsonGenerator33.writeRaw("JSON");
        boolean boolean36 = jsonGenerator33.isClosed();
        jsonGenerator33.writeRaw('4');
        defaultPrettyPrinter24.writeObjectFieldValueSeparator(jsonGenerator33);
        com.fasterxml.jackson.core.ObjectCodec objectCodec40 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = new com.fasterxml.jackson.core.JsonFactory(objectCodec40);
        com.fasterxml.jackson.core.JsonParser.Feature feature42 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean43 = feature42.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory45 = jsonFactory41.configure(feature42, false);
        java.io.OutputStream outputStream46 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding47 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator48 = jsonFactory45.createGenerator(outputStream46, jsonEncoding47);
        com.fasterxml.jackson.core.io.SerializedString serializedString50 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature51 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean52 = serializedString50.equals((java.lang.Object) feature51);
        java.lang.String str53 = serializedString50.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator54 = jsonGenerator48.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString50);
        defaultPrettyPrinter24.beforeArrayValues(jsonGenerator48);
        defaultPrettyPrinter20.writeEndObject(jsonGenerator48, (int) (short) 10);
        defaultPrettyPrinter18.writeArrayValueSeparator(jsonGenerator48);
        jsonGenerator48.writeStringField("[com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: size=0, hashSize=0, 0/0/0/0 pri/sec/ter/spill (=0), total:0]", "[");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator62 = jsonGenerator48.useDefaultPrettyPrinter();
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter18);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature27.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(jsonFactory30);
        org.junit.Assert.assertTrue("'" + jsonEncoding32 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding32.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature42.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(jsonFactory45);
        org.junit.Assert.assertTrue("'" + jsonEncoding47 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding47.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator48);
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature51.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator54);
        org.junit.Assert.assertNotNull(jsonGenerator62);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        java.io.Writer writer2 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator3 = jsonFactory1.createJsonGenerator(writer2);
        com.fasterxml.jackson.core.io.OutputDecorator outputDecorator4 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.setOutputDecorator(outputDecorator4);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = jsonFactory5._getBufferRecycler();
        byte[] byteArray8 = null;
        bufferRecycler6.releaseByteBuffer(0, byteArray8);
        com.fasterxml.jackson.core.ObjectCodec objectCodec11 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory12 = new com.fasterxml.jackson.core.JsonFactory(objectCodec11);
        com.fasterxml.jackson.core.JsonParser.Feature feature13 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean14 = feature13.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory16 = jsonFactory12.configure(feature13, false);
        java.io.OutputStream outputStream17 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding18 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator19 = jsonFactory16.createGenerator(outputStream17, jsonEncoding18);
        jsonGenerator19.writeRaw("JSON");
        jsonGenerator19.writeNumber("hi!");
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException24 = new com.fasterxml.jackson.core.JsonGenerationException("com.fasterxml.jackson.core.JsonGenerationException: N/A", jsonGenerator19);
        com.fasterxml.jackson.core.io.IOContext iOContext26 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, (java.lang.Object) jsonGenerationException24, true);
        char[] charArray28 = iOContext26.allocNameCopyBuffer(0);
        org.junit.Assert.assertNotNull(jsonGenerator3);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertNotNull(bufferRecycler6);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature13.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(jsonFactory16);
        org.junit.Assert.assertTrue("'" + jsonEncoding18 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding18.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator19);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter();
        com.fasterxml.jackson.core.ObjectCodec objectCodec1 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory2 = new com.fasterxml.jackson.core.JsonFactory(objectCodec1);
        com.fasterxml.jackson.core.JsonParser.Feature feature3 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean4 = feature3.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory6 = jsonFactory2.configure(feature3, false);
        java.io.OutputStream outputStream7 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding8 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator9 = jsonFactory6.createGenerator(outputStream7, jsonEncoding8);
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("");
        jsonGenerator9.writeRawValue((com.fasterxml.jackson.core.SerializableString) serializedString11);
        java.math.BigDecimal bigDecimal14 = null;
        jsonGenerator9.writeNumberField("", bigDecimal14);
        fixedSpaceIndenter0.writeIndentation(jsonGenerator9, 0);
        boolean boolean18 = fixedSpaceIndenter0.isInline();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter20 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec21 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = new com.fasterxml.jackson.core.JsonFactory(objectCodec21);
        com.fasterxml.jackson.core.JsonParser.Feature feature23 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean24 = feature23.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory26 = jsonFactory22.configure(feature23, false);
        java.io.OutputStream outputStream27 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding28 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator29 = jsonFactory26.createGenerator(outputStream27, jsonEncoding28);
        jsonGenerator29.writeRaw("JSON");
        boolean boolean32 = jsonGenerator29.isClosed();
        jsonGenerator29.writeRaw('4');
        defaultPrettyPrinter20.writeObjectFieldValueSeparator(jsonGenerator29);
        com.fasterxml.jackson.core.FormatSchema formatSchema36 = jsonGenerator29.getSchema();
        fixedSpaceIndenter0.writeIndentation(jsonGenerator29, (-1822880715));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature3.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(jsonFactory6);
        org.junit.Assert.assertTrue("'" + jsonEncoding8 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding8.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator9);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature23.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(jsonFactory26);
        org.junit.Assert.assertTrue("'" + jsonEncoding28 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding28.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(formatSchema36);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature> wildcardClass9 = jsonFactory5.getFormatWriteFeatureType();
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = new com.fasterxml.jackson.core.JsonFactory(objectCodec10);
        com.fasterxml.jackson.core.JsonParser.Feature feature12 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean13 = feature12.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory15 = jsonFactory11.configure(feature12, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec16 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = new com.fasterxml.jackson.core.JsonFactory(objectCodec16);
        com.fasterxml.jackson.core.JsonParser.Feature feature18 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean19 = feature18.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory21 = jsonFactory17.configure(feature18, false);
        java.io.OutputStream outputStream22 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding23 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator24 = jsonFactory21.createGenerator(outputStream22, jsonEncoding23);
        com.fasterxml.jackson.core.JsonFactory.Feature feature25 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean26 = jsonFactory21.isEnabled(feature25);
        com.fasterxml.jackson.core.JsonFactory jsonFactory27 = jsonFactory11.disable(feature25);
        boolean boolean28 = jsonFactory5.isEnabled(feature25);
        com.fasterxml.jackson.core.JsonFactory jsonFactory29 = jsonFactory5.copy();
        java.lang.String str30 = jsonFactory29.getFormatName();
        com.fasterxml.jackson.core.JsonParser.Feature feature31 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        com.fasterxml.jackson.core.JsonFactory jsonFactory32 = jsonFactory29.disable(feature31);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature12.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(jsonFactory15);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature18.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(jsonFactory21);
        org.junit.Assert.assertTrue("'" + jsonEncoding23 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding23.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator24);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature25.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(jsonFactory27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(jsonFactory29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "JSON" + "'", str30, "JSON");
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature31.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertNotNull(jsonFactory32);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = defaultPrettyPrinter3.createInstance();
        defaultPrettyPrinter4.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter8 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory10 = new com.fasterxml.jackson.core.JsonFactory(objectCodec9);
        com.fasterxml.jackson.core.JsonParser.Feature feature11 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean12 = feature11.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory14 = jsonFactory10.configure(feature11, false);
        java.io.OutputStream outputStream15 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding16 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator17 = jsonFactory14.createGenerator(outputStream15, jsonEncoding16);
        jsonGenerator17.writeRaw("JSON");
        boolean boolean20 = jsonGenerator17.isClosed();
        jsonGenerator17.writeRaw('4');
        defaultPrettyPrinter8.writeObjectFieldValueSeparator(jsonGenerator17);
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory25 = new com.fasterxml.jackson.core.JsonFactory(objectCodec24);
        com.fasterxml.jackson.core.JsonParser.Feature feature26 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean27 = feature26.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory29 = jsonFactory25.configure(feature26, false);
        java.io.OutputStream outputStream30 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding31 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory29.createGenerator(outputStream30, jsonEncoding31);
        com.fasterxml.jackson.core.io.SerializedString serializedString34 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature35 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean36 = serializedString34.equals((java.lang.Object) feature35);
        java.lang.String str37 = serializedString34.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator38 = jsonGenerator32.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString34);
        defaultPrettyPrinter8.beforeArrayValues(jsonGenerator32);
        java.lang.Object obj40 = jsonGenerator32.getOutputTarget();
        defaultPrettyPrinter4.writeEndObject(jsonGenerator32, 33);
        defaultPrettyPrinter1.writeStartArray(jsonGenerator32);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes44 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator45 = jsonGenerator32.setCharacterEscapes(characterEscapes44);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator47 = jsonGenerator32.setFeatureMask((int) (short) 100);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter4);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature11.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(jsonFactory14);
        org.junit.Assert.assertTrue("'" + jsonEncoding16 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding16.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature26.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(jsonFactory29);
        org.junit.Assert.assertTrue("'" + jsonEncoding31 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding31.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature35.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(jsonGenerator45);
        org.junit.Assert.assertNotNull(jsonGenerator47);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature> wildcardClass9 = jsonFactory5.getFormatWriteFeatureType();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes10 = jsonFactory5.getCharacterEscapes();
        com.fasterxml.jackson.core.JsonParser.Feature feature11 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory12 = jsonFactory5.enable(feature11);
        java.io.Writer writer13 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory12.createGenerator(writer13);
        com.fasterxml.jackson.core.io.OutputDecorator outputDecorator15 = jsonFactory12.getOutputDecorator();
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(characterEscapes10);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES + "'", feature11.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES));
        org.junit.Assert.assertNotNull(jsonFactory12);
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertNull(outputDecorator15);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        jsonGenerator8.writeRaw("JSON");
        jsonGenerator8.writeNumber("hi!");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonGenerator8.setHighestNonEscapedChar((-1));
        com.fasterxml.jackson.core.JsonGenerator.Feature feature15 = com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII;
        boolean boolean16 = jsonGenerator14.isEnabled(feature15);
        com.fasterxml.jackson.core.ObjectCodec objectCodec17 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = new com.fasterxml.jackson.core.JsonFactory(objectCodec17);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray23 = new char[] { '4', '#' };
        int int25 = serializedString20.appendQuoted(charArray23, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser26 = jsonFactory18.createParser(charArray23);
        java.lang.String str27 = jsonParser26.getValueAsString();
        com.fasterxml.jackson.core.FormatSchema formatSchema28 = null;
        boolean boolean29 = jsonParser26.canUseSchema(formatSchema28);
        char[] charArray30 = jsonParser26.getTextCharacters();
        int int31 = jsonParser26.getTextLength();
        long long33 = jsonParser26.getValueAsLong((long) (byte) 100);
        boolean boolean34 = jsonParser26.isExpectedStartArrayToken();
        jsonGenerator14.writeStartObject((java.lang.Object) jsonParser26);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII + "'", feature15.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(jsonParser26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(charArray30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 100L + "'", long33 == 100L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter1.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1);
        com.fasterxml.jackson.core.ObjectCodec objectCodec4 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory(objectCodec4);
        com.fasterxml.jackson.core.JsonParser.Feature feature6 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean7 = feature6.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory9 = jsonFactory5.configure(feature6, false);
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding11 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator12 = jsonFactory9.createGenerator(outputStream10, jsonEncoding11);
        com.fasterxml.jackson.core.io.SerializedString serializedString14 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature15 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean16 = serializedString14.equals((java.lang.Object) feature15);
        java.lang.String str17 = serializedString14.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator18 = jsonGenerator12.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString14);
        jsonGenerator12.writeString("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator21 = jsonGenerator12.useDefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding22 = com.fasterxml.jackson.core.JsonEncoding.UTF32_BE;
        jsonGenerator12.setCurrentValue((java.lang.Object) jsonEncoding22);
        jsonGenerator12.writeNumber("[");
        defaultPrettyPrinter3.writeObjectFieldValueSeparator(jsonGenerator12);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter2);
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature6.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(jsonFactory9);
        org.junit.Assert.assertTrue("'" + jsonEncoding11 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding11.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator12);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature15.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator18);
        org.junit.Assert.assertNotNull(jsonGenerator21);
        org.junit.Assert.assertTrue("'" + jsonEncoding22 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF32_BE + "'", jsonEncoding22.equals(com.fasterxml.jackson.core.JsonEncoding.UTF32_BE));
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        java.io.Writer writer2 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator3 = jsonFactory1.createJsonGenerator(writer2);
        com.fasterxml.jackson.core.ObjectCodec objectCodec4 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory(objectCodec4);
        com.fasterxml.jackson.core.JsonParser.Feature feature6 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean7 = feature6.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory9 = jsonFactory5.configure(feature6, false);
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding11 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator12 = jsonFactory9.createGenerator(outputStream10, jsonEncoding11);
        com.fasterxml.jackson.core.JsonFactory.Feature feature13 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean14 = jsonFactory9.isEnabled(feature13);
        java.io.Writer writer15 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator16 = jsonFactory9.createJsonGenerator(writer15);
        com.fasterxml.jackson.core.ObjectCodec objectCodec17 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = new com.fasterxml.jackson.core.JsonFactory(objectCodec17);
        com.fasterxml.jackson.core.JsonParser.Feature feature19 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean20 = feature19.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = jsonFactory18.configure(feature19, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec23 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory24 = new com.fasterxml.jackson.core.JsonFactory(objectCodec23);
        com.fasterxml.jackson.core.JsonParser.Feature feature25 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean26 = feature25.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory28 = jsonFactory24.configure(feature25, false);
        java.io.OutputStream outputStream29 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding30 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator31 = jsonFactory28.createGenerator(outputStream29, jsonEncoding30);
        com.fasterxml.jackson.core.JsonFactory.Feature feature32 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean33 = jsonFactory28.isEnabled(feature32);
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory18.disable(feature32);
        com.fasterxml.jackson.core.JsonFactory jsonFactory35 = jsonFactory9.disable(feature32);
        boolean boolean36 = feature32.enabledByDefault();
        int int37 = feature32.getMask();
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = jsonFactory1.enable(feature32);
        org.junit.Assert.assertNotNull(jsonGenerator3);
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature6.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(jsonFactory9);
        org.junit.Assert.assertTrue("'" + jsonEncoding11 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding11.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator12);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature13.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(jsonGenerator16);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature19.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(jsonFactory22);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature25.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(jsonFactory28);
        org.junit.Assert.assertTrue("'" + jsonEncoding30 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding30.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator31);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature32.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonFactory35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(jsonFactory38);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonParser.Feature feature8 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean9 = feature8.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory7.configure(feature8, false);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding13 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory11.createGenerator(outputStream12, jsonEncoding13);
        com.fasterxml.jackson.core.JsonFactory.Feature feature15 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean16 = jsonFactory11.isEnabled(feature15);
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = jsonFactory1.disable(feature15);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator18 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = jsonFactory1.setInputDecorator(inputDecorator18);
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = jsonFactory19.copy();
        com.fasterxml.jackson.core.ObjectCodec objectCodec21 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = new com.fasterxml.jackson.core.JsonFactory(objectCodec21);
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray27 = new char[] { '4', '#' };
        int int29 = serializedString24.appendQuoted(charArray27, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory22.createParser(charArray27);
        boolean boolean32 = jsonParser30.hasTokenId(0);
        com.fasterxml.jackson.core.JsonParseException jsonParseException34 = new com.fasterxml.jackson.core.JsonParseException(jsonParser30, "com.fasterxml.jackson.core.JsonGenerationException: N/A");
        boolean boolean36 = jsonParser30.hasTokenId(0);
        com.fasterxml.jackson.core.JsonParser.Feature feature37 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
        com.fasterxml.jackson.core.JsonParser jsonParser39 = jsonParser30.configure(feature37, true);
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory20.disable(feature37);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature41 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        com.fasterxml.jackson.core.JsonFactory jsonFactory43 = jsonFactory20.configure(feature41, true);
        java.io.Reader reader44 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser45 = jsonFactory43.createJsonParser(reader44);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature8.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + jsonEncoding13 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding13.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature15.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(jsonFactory17);
        org.junit.Assert.assertNotNull(jsonFactory19);
        org.junit.Assert.assertNotNull(jsonFactory20);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[4, #]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER + "'", feature37.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER));
        org.junit.Assert.assertNotNull(jsonParser39);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS + "'", feature41.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));
        org.junit.Assert.assertNotNull(jsonFactory43);
        org.junit.Assert.assertNotNull(jsonParser45);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        com.fasterxml.jackson.core.ObjectCodec objectCodec17 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = new com.fasterxml.jackson.core.JsonFactory(objectCodec17);
        com.fasterxml.jackson.core.JsonParser.Feature feature19 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean20 = feature19.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = jsonFactory18.configure(feature19, false);
        java.io.OutputStream outputStream23 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding24 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = jsonFactory22.createGenerator(outputStream23, jsonEncoding24);
        com.fasterxml.jackson.core.io.SerializedString serializedString27 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature28 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean29 = serializedString27.equals((java.lang.Object) feature28);
        java.lang.String str30 = serializedString27.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator31 = jsonGenerator25.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString27);
        defaultPrettyPrinter1.beforeArrayValues(jsonGenerator25);
        jsonGenerator25.writeNumberField("hi!", 0.0f);
        boolean boolean36 = jsonGenerator25.isClosed();
        int int37 = jsonGenerator25.getOutputBuffered();
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature19.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(jsonFactory22);
        org.junit.Assert.assertTrue("'" + jsonEncoding24 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding24.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator25);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature28.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.JsonFactory.Feature feature9 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean10 = jsonFactory5.isEnabled(feature9);
        java.io.Writer writer11 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator12 = jsonFactory5.createJsonGenerator(writer11);
        com.fasterxml.jackson.core.ObjectCodec objectCodec13 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory14 = new com.fasterxml.jackson.core.JsonFactory(objectCodec13);
        com.fasterxml.jackson.core.JsonParser.Feature feature15 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean16 = feature15.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = jsonFactory14.configure(feature15, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec19 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = new com.fasterxml.jackson.core.JsonFactory(objectCodec19);
        com.fasterxml.jackson.core.JsonParser.Feature feature21 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean22 = feature21.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory24 = jsonFactory20.configure(feature21, false);
        java.io.OutputStream outputStream25 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding26 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator27 = jsonFactory24.createGenerator(outputStream25, jsonEncoding26);
        com.fasterxml.jackson.core.JsonFactory.Feature feature28 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean29 = jsonFactory24.isEnabled(feature28);
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = jsonFactory14.disable(feature28);
        com.fasterxml.jackson.core.JsonFactory jsonFactory31 = jsonFactory5.disable(feature28);
        com.fasterxml.jackson.core.ObjectCodec objectCodec32 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory33 = new com.fasterxml.jackson.core.JsonFactory(objectCodec32);
        com.fasterxml.jackson.core.JsonParser.Feature feature34 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean35 = feature34.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory37 = jsonFactory33.configure(feature34, false);
        java.io.OutputStream outputStream38 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding39 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator40 = jsonFactory37.createGenerator(outputStream38, jsonEncoding39);
        com.fasterxml.jackson.core.JsonFactory.Feature feature41 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean42 = jsonFactory37.isEnabled(feature41);
        java.io.Writer writer43 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator44 = jsonFactory37.createJsonGenerator(writer43);
        com.fasterxml.jackson.core.ObjectCodec objectCodec45 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory46 = new com.fasterxml.jackson.core.JsonFactory(objectCodec45);
        com.fasterxml.jackson.core.JsonParser.Feature feature47 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean48 = feature47.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory50 = jsonFactory46.configure(feature47, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec51 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory52 = new com.fasterxml.jackson.core.JsonFactory(objectCodec51);
        com.fasterxml.jackson.core.JsonParser.Feature feature53 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean54 = feature53.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory56 = jsonFactory52.configure(feature53, false);
        java.io.OutputStream outputStream57 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding58 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator59 = jsonFactory56.createGenerator(outputStream57, jsonEncoding58);
        com.fasterxml.jackson.core.JsonFactory.Feature feature60 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean61 = jsonFactory56.isEnabled(feature60);
        com.fasterxml.jackson.core.JsonFactory jsonFactory62 = jsonFactory46.disable(feature60);
        com.fasterxml.jackson.core.JsonFactory jsonFactory63 = jsonFactory37.disable(feature60);
        com.fasterxml.jackson.core.JsonFactory jsonFactory65 = jsonFactory5.configure(feature60, false);
        java.io.Reader reader66 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser67 = jsonFactory65.createParser(reader66);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature9.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(jsonGenerator12);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature15.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(jsonFactory18);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature21.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(jsonFactory24);
        org.junit.Assert.assertTrue("'" + jsonEncoding26 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding26.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator27);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature28.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(jsonFactory30);
        org.junit.Assert.assertNotNull(jsonFactory31);
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature34.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(jsonFactory37);
        org.junit.Assert.assertTrue("'" + jsonEncoding39 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding39.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator40);
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature41.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(jsonGenerator44);
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature47.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(jsonFactory50);
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature53.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(jsonFactory56);
        org.junit.Assert.assertTrue("'" + jsonEncoding58 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding58.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator59);
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature60.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(jsonFactory62);
        org.junit.Assert.assertNotNull(jsonFactory63);
        org.junit.Assert.assertNotNull(jsonFactory65);
        org.junit.Assert.assertNotNull(jsonParser67);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature> wildcardClass9 = jsonFactory5.getFormatWriteFeatureType();
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = new com.fasterxml.jackson.core.JsonFactory(objectCodec10);
        com.fasterxml.jackson.core.JsonParser.Feature feature12 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean13 = feature12.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory15 = jsonFactory11.configure(feature12, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec16 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = new com.fasterxml.jackson.core.JsonFactory(objectCodec16);
        com.fasterxml.jackson.core.JsonParser.Feature feature18 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean19 = feature18.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory21 = jsonFactory17.configure(feature18, false);
        java.io.OutputStream outputStream22 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding23 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator24 = jsonFactory21.createGenerator(outputStream22, jsonEncoding23);
        com.fasterxml.jackson.core.JsonFactory.Feature feature25 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean26 = jsonFactory21.isEnabled(feature25);
        com.fasterxml.jackson.core.JsonFactory jsonFactory27 = jsonFactory11.disable(feature25);
        boolean boolean28 = jsonFactory5.isEnabled(feature25);
        com.fasterxml.jackson.core.JsonFactory jsonFactory29 = jsonFactory5.copy();
        java.lang.String str30 = jsonFactory29.getFormatName();
        com.fasterxml.jackson.core.ObjectCodec objectCodec31 = jsonFactory29.getCodec();
        java.io.File file32 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory29.createJsonParser(file32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature12.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(jsonFactory15);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature18.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(jsonFactory21);
        org.junit.Assert.assertTrue("'" + jsonEncoding23 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding23.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator24);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature25.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(jsonFactory27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(jsonFactory29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "JSON" + "'", str30, "JSON");
        org.junit.Assert.assertNull(objectCodec31);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        jsonGenerator8.writeRaw("JSON");
        jsonGenerator8.writeNumber("hi!");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonGenerator8.setHighestNonEscapedChar((-1));
        com.fasterxml.jackson.core.JsonGenerator.Feature feature15 = com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator16 = jsonGenerator14.disable(feature15);
        int int17 = jsonGenerator14.getFeatureMask();
        com.fasterxml.jackson.core.ObjectCodec objectCodec18 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = new com.fasterxml.jackson.core.JsonFactory(objectCodec18);
        com.fasterxml.jackson.core.JsonParser.Feature feature20 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean21 = feature20.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory23 = jsonFactory19.configure(feature20, false);
        java.io.OutputStream outputStream24 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding25 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator26 = jsonFactory23.createGenerator(outputStream24, jsonEncoding25);
        java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature> wildcardClass27 = jsonFactory23.getFormatWriteFeatureType();
        com.fasterxml.jackson.core.ObjectCodec objectCodec28 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory29 = new com.fasterxml.jackson.core.JsonFactory(objectCodec28);
        com.fasterxml.jackson.core.JsonParser.Feature feature30 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean31 = feature30.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory33 = jsonFactory29.configure(feature30, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec34 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory35 = new com.fasterxml.jackson.core.JsonFactory(objectCodec34);
        com.fasterxml.jackson.core.JsonParser.Feature feature36 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean37 = feature36.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory39 = jsonFactory35.configure(feature36, false);
        java.io.OutputStream outputStream40 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding41 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator42 = jsonFactory39.createGenerator(outputStream40, jsonEncoding41);
        com.fasterxml.jackson.core.JsonFactory.Feature feature43 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean44 = jsonFactory39.isEnabled(feature43);
        com.fasterxml.jackson.core.JsonFactory jsonFactory45 = jsonFactory29.disable(feature43);
        boolean boolean46 = jsonFactory23.isEnabled(feature43);
        com.fasterxml.jackson.core.JsonFactory jsonFactory47 = jsonFactory23.copy();
        java.lang.String str48 = jsonFactory47.getFormatName();
        com.fasterxml.jackson.core.ObjectCodec objectCodec49 = jsonFactory47.getCodec();
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator14.writeTypeId((java.lang.Object) objectCodec49);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: No native support for writing Type Ids");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII + "'", feature15.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII));
        org.junit.Assert.assertNotNull(jsonGenerator16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 31 + "'", int17 == 31);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature20.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(jsonFactory23);
        org.junit.Assert.assertTrue("'" + jsonEncoding25 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding25.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator26);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature30.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(jsonFactory33);
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature36.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(jsonFactory39);
        org.junit.Assert.assertTrue("'" + jsonEncoding41 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding41.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator42);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature43.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(jsonFactory45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(jsonFactory47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "JSON" + "'", str48, "JSON");
        org.junit.Assert.assertNull(objectCodec49);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature> wildcardClass9 = jsonFactory5.getFormatWriteFeatureType();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes10 = jsonFactory5.getCharacterEscapes();
        com.fasterxml.jackson.core.JsonParser.Feature feature11 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory12 = jsonFactory5.enable(feature11);
        java.io.Writer writer13 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory12.createGenerator(writer13);
        int int15 = jsonGenerator14.getFormatFeatures();
        jsonGenerator14.writeNumber((double) (-1700599777));
        com.fasterxml.jackson.core.ObjectCodec objectCodec18 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = new com.fasterxml.jackson.core.JsonFactory(objectCodec18);
        com.fasterxml.jackson.core.JsonParser.Feature feature20 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean21 = feature20.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory23 = jsonFactory19.configure(feature20, false);
        java.io.OutputStream outputStream24 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding25 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator26 = jsonFactory23.createGenerator(outputStream24, jsonEncoding25);
        com.fasterxml.jackson.core.io.SerializedString serializedString28 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature29 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean30 = serializedString28.equals((java.lang.Object) feature29);
        java.lang.String str31 = serializedString28.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonGenerator26.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString28);
        byte[] byteArray33 = serializedString28.asUnquotedUTF8();
        jsonGenerator14.writeRaw((com.fasterxml.jackson.core.SerializableString) serializedString28);
        int int35 = jsonGenerator14.getHighestEscapedChar();
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(characterEscapes10);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES + "'", feature11.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES));
        org.junit.Assert.assertNotNull(jsonFactory12);
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature20.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(jsonFactory23);
        org.junit.Assert.assertTrue("'" + jsonEncoding25 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding25.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator26);
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature29.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 105, 33]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter17 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter18 = defaultPrettyPrinter1.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter17);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter19 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter18);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter20 = defaultPrettyPrinter19.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = defaultPrettyPrinter19.withRootSeparator("");
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter18);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter20);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter22);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        defaultPrettyPrinter1.writeEndObject(jsonGenerator10, 56320);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator16 = jsonGenerator10.setFeatureMask((int) (short) -1);
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer17 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int18 = byteQuadsCanonicalizer17.secondaryCount();
        jsonGenerator10.setCurrentValue((java.lang.Object) byteQuadsCanonicalizer17);
        int int20 = byteQuadsCanonicalizer17.spilloverCount();
        int int21 = byteQuadsCanonicalizer17.primaryCount();
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertNotNull(jsonGenerator16);
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter17 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter18 = defaultPrettyPrinter1.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter17);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter19 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter18);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter20 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter18);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter22.createInstance();
        defaultPrettyPrinter23.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter27 = defaultPrettyPrinter23.withRootSeparator("[");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter28 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter29 = defaultPrettyPrinter27.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter28);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter30 = defaultPrettyPrinter18.withObjectIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter28);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter32 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = new com.fasterxml.jackson.core.JsonFactory(objectCodec33);
        com.fasterxml.jackson.core.JsonParser.Feature feature35 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean36 = feature35.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = jsonFactory34.configure(feature35, false);
        java.io.OutputStream outputStream39 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding40 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator41 = jsonFactory38.createGenerator(outputStream39, jsonEncoding40);
        jsonGenerator41.writeRaw("JSON");
        boolean boolean44 = jsonGenerator41.isClosed();
        jsonGenerator41.writeRaw('4');
        defaultPrettyPrinter32.writeObjectFieldValueSeparator(jsonGenerator41);
        com.fasterxml.jackson.core.FormatSchema formatSchema48 = jsonGenerator41.getSchema();
        defaultPrettyPrinter30.writeObjectEntrySeparator(jsonGenerator41);
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter18);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter27);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter28);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter29);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter30);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature35.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(jsonFactory38);
        org.junit.Assert.assertTrue("'" + jsonEncoding40 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding40.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(formatSchema48);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        java.io.Writer writer2 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator3 = jsonFactory1.createJsonGenerator(writer2);
        com.fasterxml.jackson.core.io.OutputDecorator outputDecorator4 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.setOutputDecorator(outputDecorator4);
        boolean boolean6 = jsonFactory1.canHandleBinaryNatively();
        com.fasterxml.jackson.core.ObjectCodec objectCodec7 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory8 = new com.fasterxml.jackson.core.JsonFactory(objectCodec7);
        com.fasterxml.jackson.core.JsonParser.Feature feature9 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean10 = feature9.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory12 = jsonFactory8.configure(feature9, false);
        java.io.OutputStream outputStream13 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding14 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator15 = jsonFactory12.createGenerator(outputStream13, jsonEncoding14);
        com.fasterxml.jackson.core.JsonFactory.Feature feature16 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean17 = jsonFactory12.isEnabled(feature16);
        java.io.Writer writer18 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator19 = jsonFactory12.createJsonGenerator(writer18);
        com.fasterxml.jackson.core.ObjectCodec objectCodec20 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory21 = new com.fasterxml.jackson.core.JsonFactory(objectCodec20);
        com.fasterxml.jackson.core.JsonParser.Feature feature22 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean23 = feature22.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory25 = jsonFactory21.configure(feature22, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec26 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory27 = new com.fasterxml.jackson.core.JsonFactory(objectCodec26);
        com.fasterxml.jackson.core.JsonParser.Feature feature28 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean29 = feature28.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory31 = jsonFactory27.configure(feature28, false);
        java.io.OutputStream outputStream32 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding33 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator34 = jsonFactory31.createGenerator(outputStream32, jsonEncoding33);
        com.fasterxml.jackson.core.JsonFactory.Feature feature35 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean36 = jsonFactory31.isEnabled(feature35);
        com.fasterxml.jackson.core.JsonFactory jsonFactory37 = jsonFactory21.disable(feature35);
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = jsonFactory12.disable(feature35);
        boolean boolean39 = jsonFactory1.isEnabled(feature35);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature40 = com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        boolean boolean41 = feature40.enabledByDefault();
        boolean boolean42 = jsonFactory1.isEnabled(feature40);
        org.junit.Assert.assertNotNull(jsonGenerator3);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature9.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(jsonFactory12);
        org.junit.Assert.assertTrue("'" + jsonEncoding14 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding14.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature16.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(jsonGenerator19);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature22.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(jsonFactory25);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature28.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(jsonFactory31);
        org.junit.Assert.assertTrue("'" + jsonEncoding33 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding33.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator34);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature35.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(jsonFactory37);
        org.junit.Assert.assertNotNull(jsonFactory38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES + "'", feature40.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        defaultPrettyPrinter1.writeEndObject(jsonGenerator10, 56320);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator16 = jsonGenerator10.setFeatureMask((int) (short) -1);
        com.fasterxml.jackson.core.io.SerializedString serializedString18 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray21 = new char[] { '4', '#' };
        int int23 = serializedString18.appendQuoted(charArray21, (int) (byte) 10);
        char[] charArray24 = serializedString18.asQuotedChars();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10 };
        int int29 = serializedString18.appendUnquotedUTF8(byteArray27, 1);
        jsonGenerator16.writeString((com.fasterxml.jackson.core.SerializableString) serializedString18);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature31 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonGenerator16.disable(feature31);
        boolean boolean34 = feature31.enabledIn(1338306729);
        boolean boolean35 = feature31.enabledByDefault();
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertNotNull(jsonGenerator16);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, #]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "hi!");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[h, i, !]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature31.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature> wildcardClass9 = jsonFactory5.getFormatWriteFeatureType();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes10 = jsonFactory5.getCharacterEscapes();
        com.fasterxml.jackson.core.JsonParser.Feature feature11 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory12 = jsonFactory5.enable(feature11);
        java.io.Writer writer13 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory12.createGenerator(writer13);
        int int15 = jsonGenerator14.getFormatFeatures();
        jsonGenerator14.writeNumber((double) (-1700599777));
        com.fasterxml.jackson.core.ObjectCodec objectCodec18 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = new com.fasterxml.jackson.core.JsonFactory(objectCodec18);
        com.fasterxml.jackson.core.JsonParser.Feature feature20 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean21 = feature20.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory23 = jsonFactory19.configure(feature20, false);
        java.io.OutputStream outputStream24 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding25 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator26 = jsonFactory23.createGenerator(outputStream24, jsonEncoding25);
        com.fasterxml.jackson.core.io.SerializedString serializedString28 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature29 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean30 = serializedString28.equals((java.lang.Object) feature29);
        java.lang.String str31 = serializedString28.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonGenerator26.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString28);
        byte[] byteArray33 = serializedString28.asUnquotedUTF8();
        jsonGenerator14.writeRaw((com.fasterxml.jackson.core.SerializableString) serializedString28);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter36 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec37 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = new com.fasterxml.jackson.core.JsonFactory(objectCodec37);
        com.fasterxml.jackson.core.JsonParser.Feature feature39 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean40 = feature39.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory42 = jsonFactory38.configure(feature39, false);
        java.io.OutputStream outputStream43 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding44 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator45 = jsonFactory42.createGenerator(outputStream43, jsonEncoding44);
        jsonGenerator45.writeRaw("JSON");
        boolean boolean48 = jsonGenerator45.isClosed();
        jsonGenerator45.writeRaw('4');
        defaultPrettyPrinter36.writeObjectFieldValueSeparator(jsonGenerator45);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter52 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter53 = defaultPrettyPrinter36.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter52);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter54 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter53);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter55 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter53);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator56 = jsonGenerator14.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter55);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter58 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec59 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory60 = new com.fasterxml.jackson.core.JsonFactory(objectCodec59);
        com.fasterxml.jackson.core.JsonParser.Feature feature61 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean62 = feature61.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory64 = jsonFactory60.configure(feature61, false);
        java.io.OutputStream outputStream65 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding66 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator67 = jsonFactory64.createGenerator(outputStream65, jsonEncoding66);
        jsonGenerator67.writeRaw("JSON");
        boolean boolean70 = jsonGenerator67.isClosed();
        jsonGenerator67.writeRaw('4');
        defaultPrettyPrinter58.writeObjectFieldValueSeparator(jsonGenerator67);
        com.fasterxml.jackson.core.ObjectCodec objectCodec74 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory75 = new com.fasterxml.jackson.core.JsonFactory(objectCodec74);
        com.fasterxml.jackson.core.JsonParser.Feature feature76 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean77 = feature76.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory79 = jsonFactory75.configure(feature76, false);
        java.io.OutputStream outputStream80 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding81 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator82 = jsonFactory79.createGenerator(outputStream80, jsonEncoding81);
        com.fasterxml.jackson.core.io.SerializedString serializedString84 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature85 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean86 = serializedString84.equals((java.lang.Object) feature85);
        java.lang.String str87 = serializedString84.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator88 = jsonGenerator82.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString84);
        defaultPrettyPrinter58.beforeArrayValues(jsonGenerator82);
        jsonGenerator82.writeNumberField("hi!", 0.0f);
        boolean boolean93 = jsonGenerator82.isClosed();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator96 = jsonGenerator82.overrideStdFeatures((-1), 33);
        defaultPrettyPrinter55.beforeObjectEntries(jsonGenerator96);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(characterEscapes10);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES + "'", feature11.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES));
        org.junit.Assert.assertNotNull(jsonFactory12);
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature20.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(jsonFactory23);
        org.junit.Assert.assertTrue("'" + jsonEncoding25 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding25.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator26);
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature29.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 105, 33]");
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature39.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(jsonFactory42);
        org.junit.Assert.assertTrue("'" + jsonEncoding44 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding44.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter53);
        org.junit.Assert.assertNotNull(jsonGenerator56);
        org.junit.Assert.assertTrue("'" + feature61 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature61.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(jsonFactory64);
        org.junit.Assert.assertTrue("'" + jsonEncoding66 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding66.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + feature76 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature76.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(jsonFactory79);
        org.junit.Assert.assertTrue("'" + jsonEncoding81 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding81.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator82);
        org.junit.Assert.assertTrue("'" + feature85 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature85.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hi!" + "'", str87, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator88);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(jsonGenerator96);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        com.fasterxml.jackson.core.ObjectCodec objectCodec17 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = new com.fasterxml.jackson.core.JsonFactory(objectCodec17);
        com.fasterxml.jackson.core.JsonParser.Feature feature19 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean20 = feature19.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = jsonFactory18.configure(feature19, false);
        java.io.OutputStream outputStream23 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding24 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = jsonFactory22.createGenerator(outputStream23, jsonEncoding24);
        com.fasterxml.jackson.core.io.SerializedString serializedString27 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature28 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean29 = serializedString27.equals((java.lang.Object) feature28);
        java.lang.String str30 = serializedString27.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator31 = jsonGenerator25.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString27);
        defaultPrettyPrinter1.beforeArrayValues(jsonGenerator25);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter33 = defaultPrettyPrinter1.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter35 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        defaultPrettyPrinter35.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter39 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec40 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = new com.fasterxml.jackson.core.JsonFactory(objectCodec40);
        com.fasterxml.jackson.core.JsonParser.Feature feature42 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean43 = feature42.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory45 = jsonFactory41.configure(feature42, false);
        java.io.OutputStream outputStream46 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding47 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator48 = jsonFactory45.createGenerator(outputStream46, jsonEncoding47);
        jsonGenerator48.writeRaw("JSON");
        boolean boolean51 = jsonGenerator48.isClosed();
        jsonGenerator48.writeRaw('4');
        defaultPrettyPrinter39.writeObjectFieldValueSeparator(jsonGenerator48);
        com.fasterxml.jackson.core.ObjectCodec objectCodec55 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory56 = new com.fasterxml.jackson.core.JsonFactory(objectCodec55);
        com.fasterxml.jackson.core.JsonParser.Feature feature57 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean58 = feature57.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory60 = jsonFactory56.configure(feature57, false);
        java.io.OutputStream outputStream61 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding62 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator63 = jsonFactory60.createGenerator(outputStream61, jsonEncoding62);
        com.fasterxml.jackson.core.io.SerializedString serializedString65 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature66 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean67 = serializedString65.equals((java.lang.Object) feature66);
        java.lang.String str68 = serializedString65.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator69 = jsonGenerator63.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString65);
        defaultPrettyPrinter39.beforeArrayValues(jsonGenerator63);
        jsonGenerator63.writeNumber("");
        defaultPrettyPrinter35.writeArrayValueSeparator(jsonGenerator63);
        jsonGenerator63.writeNumber((short) 1);
        defaultPrettyPrinter33.writeRootValueSeparator(jsonGenerator63);
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature19.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(jsonFactory22);
        org.junit.Assert.assertTrue("'" + jsonEncoding24 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding24.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator25);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature28.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator31);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter33);
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature42.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(jsonFactory45);
        org.junit.Assert.assertTrue("'" + jsonEncoding47 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding47.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature57.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(jsonFactory60);
        org.junit.Assert.assertTrue("'" + jsonEncoding62 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding62.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator63);
        org.junit.Assert.assertTrue("'" + feature66 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature66.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator69);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonParser.Feature feature8 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean9 = feature8.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory7.configure(feature8, false);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding13 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory11.createGenerator(outputStream12, jsonEncoding13);
        com.fasterxml.jackson.core.JsonFactory.Feature feature15 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean16 = jsonFactory11.isEnabled(feature15);
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = jsonFactory1.disable(feature15);
        com.fasterxml.jackson.core.format.InputAccessor inputAccessor18 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.format.MatchStrength matchStrength19 = jsonFactory17.hasFormat(inputAccessor18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature8.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + jsonEncoding13 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding13.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature15.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(jsonFactory17);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray6 = new char[] { '4', '#' };
        int int8 = serializedString3.appendQuoted(charArray6, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory1.createParser(charArray6);
        boolean boolean11 = jsonParser9.hasTokenId(0);
        com.fasterxml.jackson.core.JsonParseException jsonParseException13 = new com.fasterxml.jackson.core.JsonParseException(jsonParser9, "JSON");
        int int14 = jsonParser9.getCurrentTokenId();
        jsonParser9.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec17 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = new com.fasterxml.jackson.core.JsonFactory(objectCodec17);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray23 = new char[] { '4', '#' };
        int int25 = serializedString20.appendQuoted(charArray23, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser26 = jsonFactory18.createParser(charArray23);
        java.lang.String str27 = jsonParser26.getValueAsString();
        com.fasterxml.jackson.core.ObjectCodec objectCodec28 = null;
        jsonParser26.setCodec(objectCodec28);
        com.fasterxml.jackson.core.JsonLocation jsonLocation30 = jsonParser26.getCurrentLocation();
        com.fasterxml.jackson.core.ObjectCodec objectCodec32 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory33 = new com.fasterxml.jackson.core.JsonFactory(objectCodec32);
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray38 = new char[] { '4', '#' };
        int int40 = serializedString35.appendQuoted(charArray38, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser41 = jsonFactory33.createParser(charArray38);
        java.lang.String str42 = jsonFactory33.getFormatName();
        com.fasterxml.jackson.core.JsonParser jsonParser44 = jsonFactory33.createJsonParser("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec46 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory47 = new com.fasterxml.jackson.core.JsonFactory(objectCodec46);
        com.fasterxml.jackson.core.io.SerializedString serializedString49 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray52 = new char[] { '4', '#' };
        int int54 = serializedString49.appendQuoted(charArray52, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser55 = jsonFactory47.createParser(charArray52);
        boolean boolean57 = jsonParser55.hasTokenId(0);
        com.fasterxml.jackson.core.JsonLocation jsonLocation59 = null;
        com.fasterxml.jackson.core.JsonLocation jsonLocation61 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException62 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation61);
        java.lang.Throwable throwable63 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator64 = null;
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException65 = new com.fasterxml.jackson.core.JsonGenerationException(throwable63, jsonGenerator64);
        jsonParseException62.addSuppressed((java.lang.Throwable) jsonGenerationException65);
        com.fasterxml.jackson.core.JsonParseException jsonParseException67 = new com.fasterxml.jackson.core.JsonParseException(jsonParser55, "com.fasterxml.jackson.core.JsonGenerationException: N/A", jsonLocation59, (java.lang.Throwable) jsonParseException62);
        com.fasterxml.jackson.core.JsonParseException jsonParseException68 = new com.fasterxml.jackson.core.JsonParseException(jsonParser44, "com.fasterxml.jackson.core.JsonGenerationException: N/A", (java.lang.Throwable) jsonParseException62);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter70 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec71 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory72 = new com.fasterxml.jackson.core.JsonFactory(objectCodec71);
        com.fasterxml.jackson.core.JsonParser.Feature feature73 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean74 = feature73.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory76 = jsonFactory72.configure(feature73, false);
        java.io.OutputStream outputStream77 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding78 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator79 = jsonFactory76.createGenerator(outputStream77, jsonEncoding78);
        jsonGenerator79.writeRaw("JSON");
        defaultPrettyPrinter70.writeEndObject(jsonGenerator79, 56320);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException84 = new com.fasterxml.jackson.core.JsonGenerationException("hi!", (java.lang.Throwable) jsonParseException62, jsonGenerator79);
        com.fasterxml.jackson.core.JsonParseException jsonParseException85 = new com.fasterxml.jackson.core.JsonParseException(jsonParser9, "JSON", jsonLocation30, (java.lang.Throwable) jsonGenerationException84);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, #]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(jsonParser26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(jsonLocation30);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[4, #]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(jsonParser41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "JSON" + "'", str42, "JSON");
        org.junit.Assert.assertNotNull(jsonParser44);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[4, #]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(jsonParser55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + feature73 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature73.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(jsonFactory76);
        org.junit.Assert.assertTrue("'" + jsonEncoding78 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding78.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator79);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.JsonFactory.Feature feature9 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean10 = jsonFactory5.isEnabled(feature9);
        java.io.Writer writer11 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator12 = jsonFactory5.createJsonGenerator(writer11);
        com.fasterxml.jackson.core.ObjectCodec objectCodec13 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory14 = new com.fasterxml.jackson.core.JsonFactory(objectCodec13);
        com.fasterxml.jackson.core.JsonParser.Feature feature15 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean16 = feature15.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = jsonFactory14.configure(feature15, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec19 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = new com.fasterxml.jackson.core.JsonFactory(objectCodec19);
        com.fasterxml.jackson.core.JsonParser.Feature feature21 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean22 = feature21.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory24 = jsonFactory20.configure(feature21, false);
        java.io.OutputStream outputStream25 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding26 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator27 = jsonFactory24.createGenerator(outputStream25, jsonEncoding26);
        com.fasterxml.jackson.core.JsonFactory.Feature feature28 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean29 = jsonFactory24.isEnabled(feature28);
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = jsonFactory14.disable(feature28);
        com.fasterxml.jackson.core.JsonFactory jsonFactory31 = jsonFactory5.disable(feature28);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator32 = jsonFactory5.getInputDecorator();
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = new com.fasterxml.jackson.core.JsonFactory(objectCodec33);
        com.fasterxml.jackson.core.io.SerializedString serializedString36 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray39 = new char[] { '4', '#' };
        int int41 = serializedString36.appendQuoted(charArray39, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser42 = jsonFactory34.createParser(charArray39);
        java.lang.String str43 = jsonParser42.getValueAsString();
        com.fasterxml.jackson.core.FormatSchema formatSchema44 = null;
        boolean boolean45 = jsonParser42.canUseSchema(formatSchema44);
        char[] charArray46 = jsonParser42.getTextCharacters();
        int int47 = jsonParser42.getTextLength();
        com.fasterxml.jackson.core.JsonParser.Feature feature48 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        boolean boolean49 = jsonParser42.isEnabled(feature48);
        boolean boolean50 = jsonFactory5.isEnabled(feature48);
        java.net.URL uRL51 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser52 = jsonFactory5.createParser(uRL51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature9.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(jsonGenerator12);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature15.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(jsonFactory18);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature21.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(jsonFactory24);
        org.junit.Assert.assertTrue("'" + jsonEncoding26 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding26.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator27);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature28.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(jsonFactory30);
        org.junit.Assert.assertNotNull(jsonFactory31);
        org.junit.Assert.assertNull(inputDecorator32);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[4, #]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(jsonParser42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(charArray46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature48.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        com.fasterxml.jackson.core.JsonFactory.Feature feature9 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean10 = jsonFactory5.isEnabled(feature9);
        java.io.Writer writer11 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator12 = jsonFactory5.createJsonGenerator(writer11);
        com.fasterxml.jackson.core.ObjectCodec objectCodec13 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory14 = new com.fasterxml.jackson.core.JsonFactory(objectCodec13);
        com.fasterxml.jackson.core.JsonParser.Feature feature15 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean16 = feature15.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = jsonFactory14.configure(feature15, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec19 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = new com.fasterxml.jackson.core.JsonFactory(objectCodec19);
        com.fasterxml.jackson.core.JsonParser.Feature feature21 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean22 = feature21.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory24 = jsonFactory20.configure(feature21, false);
        java.io.OutputStream outputStream25 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding26 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator27 = jsonFactory24.createGenerator(outputStream25, jsonEncoding26);
        com.fasterxml.jackson.core.JsonFactory.Feature feature28 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean29 = jsonFactory24.isEnabled(feature28);
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = jsonFactory14.disable(feature28);
        com.fasterxml.jackson.core.JsonFactory jsonFactory31 = jsonFactory5.disable(feature28);
        java.io.Writer writer32 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator33 = jsonFactory31.createGenerator(writer32);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature9.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(jsonGenerator12);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature15.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(jsonFactory18);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature21.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(jsonFactory24);
        org.junit.Assert.assertTrue("'" + jsonEncoding26 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding26.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator27);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature28.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(jsonFactory30);
        org.junit.Assert.assertNotNull(jsonFactory31);
        org.junit.Assert.assertNotNull(jsonGenerator33);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec3 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = new com.fasterxml.jackson.core.JsonFactory(objectCodec3);
        com.fasterxml.jackson.core.io.SerializedString serializedString6 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray9 = new char[] { '4', '#' };
        int int11 = serializedString6.appendQuoted(charArray9, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonFactory4.createParser(charArray9);
        java.lang.String str13 = jsonFactory4.getFormatName();
        com.fasterxml.jackson.core.JsonParser jsonParser15 = jsonFactory4.createJsonParser("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec17 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = new com.fasterxml.jackson.core.JsonFactory(objectCodec17);
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray23 = new char[] { '4', '#' };
        int int25 = serializedString20.appendQuoted(charArray23, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser26 = jsonFactory18.createParser(charArray23);
        boolean boolean28 = jsonParser26.hasTokenId(0);
        com.fasterxml.jackson.core.JsonLocation jsonLocation30 = null;
        com.fasterxml.jackson.core.JsonLocation jsonLocation32 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException33 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation32);
        java.lang.Throwable throwable34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = null;
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException36 = new com.fasterxml.jackson.core.JsonGenerationException(throwable34, jsonGenerator35);
        jsonParseException33.addSuppressed((java.lang.Throwable) jsonGenerationException36);
        com.fasterxml.jackson.core.JsonParseException jsonParseException38 = new com.fasterxml.jackson.core.JsonParseException(jsonParser26, "com.fasterxml.jackson.core.JsonGenerationException: N/A", jsonLocation30, (java.lang.Throwable) jsonParseException33);
        com.fasterxml.jackson.core.JsonParseException jsonParseException39 = new com.fasterxml.jackson.core.JsonParseException(jsonParser15, "com.fasterxml.jackson.core.JsonGenerationException: N/A", (java.lang.Throwable) jsonParseException33);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter41 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec42 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory43 = new com.fasterxml.jackson.core.JsonFactory(objectCodec42);
        com.fasterxml.jackson.core.JsonParser.Feature feature44 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean45 = feature44.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory47 = jsonFactory43.configure(feature44, false);
        java.io.OutputStream outputStream48 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding49 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = jsonFactory47.createGenerator(outputStream48, jsonEncoding49);
        jsonGenerator50.writeRaw("JSON");
        defaultPrettyPrinter41.writeEndObject(jsonGenerator50, 56320);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException55 = new com.fasterxml.jackson.core.JsonGenerationException("hi!", (java.lang.Throwable) jsonParseException33, jsonGenerator50);
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature58 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean59 = serializedString57.equals((java.lang.Object) feature58);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator60 = jsonGenerator50.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString57);
        jsonGenerator60.writeNumber((long) (-1700598963));
        defaultPrettyPrinter1.writeObjectEntrySeparator(jsonGenerator60);
        jsonGenerator60.writeStartArray(32);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4, #]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(jsonParser12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JSON" + "'", str13, "JSON");
        org.junit.Assert.assertNotNull(jsonParser15);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(jsonParser26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature44.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(jsonFactory47);
        org.junit.Assert.assertTrue("'" + jsonEncoding49 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding49.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator50);
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature58.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(jsonGenerator60);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        boolean boolean13 = jsonGenerator10.isClosed();
        jsonGenerator10.writeRaw('4');
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator10);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter17 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter18 = defaultPrettyPrinter1.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter17);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter19 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter18);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter20 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter18);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter22.createInstance();
        defaultPrettyPrinter23.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter27 = defaultPrettyPrinter23.withRootSeparator("[");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter28 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter29 = defaultPrettyPrinter27.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter28);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter30 = defaultPrettyPrinter18.withObjectIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter28);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter31 = defaultPrettyPrinter18.createInstance();
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter18);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter27);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter28);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter29);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter30);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter31);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        java.io.InputStream inputStream2 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser3 = jsonFactory1.createParser(inputStream2);
        java.io.Reader reader4 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser5 = jsonFactory1.createParser(reader4);
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonParser.Feature feature8 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean9 = feature8.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory7.configure(feature8, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec12 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory13 = new com.fasterxml.jackson.core.JsonFactory(objectCodec12);
        com.fasterxml.jackson.core.JsonParser.Feature feature14 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean15 = feature14.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = jsonFactory13.configure(feature14, false);
        java.io.OutputStream outputStream18 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding19 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator20 = jsonFactory17.createGenerator(outputStream18, jsonEncoding19);
        com.fasterxml.jackson.core.JsonFactory.Feature feature21 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean22 = jsonFactory17.isEnabled(feature21);
        com.fasterxml.jackson.core.JsonFactory jsonFactory23 = jsonFactory7.disable(feature21);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator24 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory25 = jsonFactory7.setInputDecorator(inputDecorator24);
        com.fasterxml.jackson.core.JsonParser jsonParser27 = jsonFactory25.createParser("JSON");
        double double28 = jsonParser27.getValueAsDouble();
        com.fasterxml.jackson.core.JsonParser.Feature feature29 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean30 = feature29.enabledByDefault();
        com.fasterxml.jackson.core.JsonParser jsonParser31 = jsonParser27.enable(feature29);
        boolean boolean33 = feature29.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonParser5.enable(feature29);
        int int36 = jsonParser34.getValueAsInt(57343);
        org.junit.Assert.assertNotNull(jsonParser3);
        org.junit.Assert.assertNotNull(jsonParser5);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature8.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature14.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(jsonFactory17);
        org.junit.Assert.assertTrue("'" + jsonEncoding19 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding19.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature21.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(jsonFactory23);
        org.junit.Assert.assertNotNull(jsonFactory25);
        org.junit.Assert.assertNotNull(jsonParser27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature29.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(jsonParser31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 57343 + "'", int36 == 57343);
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        defaultPrettyPrinter1.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec6 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory(objectCodec6);
        com.fasterxml.jackson.core.JsonParser.Feature feature8 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean9 = feature8.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory7.configure(feature8, false);
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding13 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory11.createGenerator(outputStream12, jsonEncoding13);
        jsonGenerator14.writeRaw("JSON");
        boolean boolean17 = jsonGenerator14.isClosed();
        jsonGenerator14.writeRaw('4');
        defaultPrettyPrinter5.writeObjectFieldValueSeparator(jsonGenerator14);
        com.fasterxml.jackson.core.ObjectCodec objectCodec21 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = new com.fasterxml.jackson.core.JsonFactory(objectCodec21);
        com.fasterxml.jackson.core.JsonParser.Feature feature23 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean24 = feature23.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory26 = jsonFactory22.configure(feature23, false);
        java.io.OutputStream outputStream27 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding28 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator29 = jsonFactory26.createGenerator(outputStream27, jsonEncoding28);
        com.fasterxml.jackson.core.io.SerializedString serializedString31 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature32 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean33 = serializedString31.equals((java.lang.Object) feature32);
        java.lang.String str34 = serializedString31.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonGenerator29.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString31);
        defaultPrettyPrinter5.beforeArrayValues(jsonGenerator29);
        jsonGenerator29.writeNumber("");
        defaultPrettyPrinter1.writeArrayValueSeparator(jsonGenerator29);
        jsonGenerator29.writeNumber((short) 1);
        java.lang.Object obj42 = null;
        jsonGenerator29.setCurrentValue(obj42);
        jsonGenerator29.writeBooleanField("[com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: size=0, hashSize=0, 0/0/0/0 pri/sec/ter/spill (=0), total:0]", true);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature8.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertTrue("'" + jsonEncoding13 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding13.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature23.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(jsonFactory26);
        org.junit.Assert.assertTrue("'" + jsonEncoding28 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding28.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator29);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature32.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator35);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature> wildcardClass9 = jsonFactory5.getFormatWriteFeatureType();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes10 = jsonFactory5.getCharacterEscapes();
        com.fasterxml.jackson.core.JsonParser.Feature feature11 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory12 = jsonFactory5.enable(feature11);
        boolean boolean14 = feature11.enabledIn((-1752253645));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(characterEscapes10);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES + "'", feature11.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES));
        org.junit.Assert.assertNotNull(jsonFactory12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        com.fasterxml.jackson.core.ObjectCodec objectCodec1 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory2 = new com.fasterxml.jackson.core.JsonFactory(objectCodec1);
        com.fasterxml.jackson.core.io.SerializedString serializedString4 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray7 = new char[] { '4', '#' };
        int int9 = serializedString4.appendQuoted(charArray7, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser10 = jsonFactory2.createParser(charArray7);
        java.lang.String str11 = jsonFactory2.getFormatName();
        com.fasterxml.jackson.core.JsonParser jsonParser13 = jsonFactory2.createJsonParser("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec15 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory16 = new com.fasterxml.jackson.core.JsonFactory(objectCodec15);
        com.fasterxml.jackson.core.io.SerializedString serializedString18 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray21 = new char[] { '4', '#' };
        int int23 = serializedString18.appendQuoted(charArray21, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonParser jsonParser24 = jsonFactory16.createParser(charArray21);
        boolean boolean26 = jsonParser24.hasTokenId(0);
        com.fasterxml.jackson.core.JsonLocation jsonLocation28 = null;
        com.fasterxml.jackson.core.JsonLocation jsonLocation30 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException31 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation30);
        java.lang.Throwable throwable32 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator33 = null;
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException34 = new com.fasterxml.jackson.core.JsonGenerationException(throwable32, jsonGenerator33);
        jsonParseException31.addSuppressed((java.lang.Throwable) jsonGenerationException34);
        com.fasterxml.jackson.core.JsonParseException jsonParseException36 = new com.fasterxml.jackson.core.JsonParseException(jsonParser24, "com.fasterxml.jackson.core.JsonGenerationException: N/A", jsonLocation28, (java.lang.Throwable) jsonParseException31);
        com.fasterxml.jackson.core.JsonParseException jsonParseException37 = new com.fasterxml.jackson.core.JsonParseException(jsonParser13, "com.fasterxml.jackson.core.JsonGenerationException: N/A", (java.lang.Throwable) jsonParseException31);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter39 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec40 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = new com.fasterxml.jackson.core.JsonFactory(objectCodec40);
        com.fasterxml.jackson.core.JsonParser.Feature feature42 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean43 = feature42.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory45 = jsonFactory41.configure(feature42, false);
        java.io.OutputStream outputStream46 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding47 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator48 = jsonFactory45.createGenerator(outputStream46, jsonEncoding47);
        jsonGenerator48.writeRaw("JSON");
        defaultPrettyPrinter39.writeEndObject(jsonGenerator48, 56320);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException53 = new com.fasterxml.jackson.core.JsonGenerationException("hi!", (java.lang.Throwable) jsonParseException31, jsonGenerator48);
        com.fasterxml.jackson.core.io.SerializedString serializedString55 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature56 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean57 = serializedString55.equals((java.lang.Object) feature56);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator58 = jsonGenerator48.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString55);
        jsonGenerator58.writeRaw("");
        java.math.BigDecimal bigDecimal62 = null;
        jsonGenerator58.writeNumberField("hi!", bigDecimal62);
        com.fasterxml.jackson.core.FormatSchema formatSchema64 = null;
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator58.setSchema(formatSchema64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4, #]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(jsonParser10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JSON" + "'", str11, "JSON");
        org.junit.Assert.assertNotNull(jsonParser13);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, #]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(jsonParser24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature42.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(jsonFactory45);
        org.junit.Assert.assertTrue("'" + jsonEncoding47 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding47.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator48);
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature56.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jsonGenerator58);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory(objectCodec2);
        com.fasterxml.jackson.core.JsonParser.Feature feature4 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean5 = feature4.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory3.configure(feature4, false);
        java.io.OutputStream outputStream8 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding9 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonFactory7.createGenerator(outputStream8, jsonEncoding9);
        jsonGenerator10.writeRaw("JSON");
        defaultPrettyPrinter1.writeEndObject(jsonGenerator10, 56320);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter16 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.ObjectCodec objectCodec17 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = new com.fasterxml.jackson.core.JsonFactory(objectCodec17);
        com.fasterxml.jackson.core.JsonParser.Feature feature19 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean20 = feature19.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = jsonFactory18.configure(feature19, false);
        java.io.OutputStream outputStream23 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding24 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = jsonFactory22.createGenerator(outputStream23, jsonEncoding24);
        jsonGenerator25.writeRaw("JSON");
        boolean boolean28 = jsonGenerator25.isClosed();
        jsonGenerator25.writeRaw('4');
        defaultPrettyPrinter16.writeObjectFieldValueSeparator(jsonGenerator25);
        com.fasterxml.jackson.core.FormatSchema formatSchema32 = jsonGenerator25.getSchema();
        defaultPrettyPrinter1.writeEndObject(jsonGenerator25, 31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec35 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory36 = new com.fasterxml.jackson.core.JsonFactory(objectCodec35);
        java.io.Writer writer37 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator38 = jsonFactory36.createJsonGenerator(writer37);
        com.fasterxml.jackson.core.ObjectCodec objectCodec39 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = new com.fasterxml.jackson.core.JsonFactory(objectCodec39);
        com.fasterxml.jackson.core.JsonParser.Feature feature41 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean42 = feature41.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory44 = jsonFactory40.configure(feature41, false);
        java.io.OutputStream outputStream45 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding46 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator47 = jsonFactory44.createGenerator(outputStream45, jsonEncoding46);
        jsonGenerator47.writeRaw("JSON");
        jsonGenerator47.writeNumber("hi!");
        int[] intArray52 = com.fasterxml.jackson.core.json.ReaderBasedJsonParser._icLatin1;
        jsonGenerator47.writeArray(intArray52, 64, 0);
        jsonGenerator38.writeArray(intArray52, 0, 32);
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator38);
        long[] longArray66 = new long[] { 555785191, 15, (-1700572163), (-1700594541), 1566302491, (short) -1 };
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator38.writeArray(longArray66, 1338306729, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1338306729");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature4.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jsonFactory7);
        org.junit.Assert.assertTrue("'" + jsonEncoding9 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding9.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature19.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(jsonFactory22);
        org.junit.Assert.assertTrue("'" + jsonEncoding24 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding24.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(formatSchema32);
        org.junit.Assert.assertNotNull(jsonGenerator38);
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature41.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(jsonFactory44);
        org.junit.Assert.assertTrue("'" + jsonEncoding46 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding46.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(longArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray66), "[555785191, 15, -1700572163, -1700594541, 1566302491, -1]");
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory(objectCodec0);
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory1.configure(feature2, false);
        java.io.OutputStream outputStream6 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding7 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = jsonFactory5.createGenerator(outputStream6, jsonEncoding7);
        java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature> wildcardClass9 = jsonFactory5.getFormatWriteFeatureType();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes10 = jsonFactory5.getCharacterEscapes();
        com.fasterxml.jackson.core.JsonParser.Feature feature11 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory12 = jsonFactory5.enable(feature11);
        java.io.Writer writer13 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = jsonFactory12.createGenerator(writer13);
        com.fasterxml.jackson.core.ObjectCodec objectCodec15 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory16 = new com.fasterxml.jackson.core.JsonFactory(objectCodec15);
        com.fasterxml.jackson.core.JsonParser.Feature feature17 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature17.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = jsonFactory16.configure(feature17, false);
        java.io.OutputStream outputStream21 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding22 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator23 = jsonFactory20.createGenerator(outputStream21, jsonEncoding22);
        com.fasterxml.jackson.core.JsonFactory.Feature feature24 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean25 = jsonFactory20.isEnabled(feature24);
        java.io.Writer writer26 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator27 = jsonFactory20.createJsonGenerator(writer26);
        com.fasterxml.jackson.core.ObjectCodec objectCodec28 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory29 = new com.fasterxml.jackson.core.JsonFactory(objectCodec28);
        com.fasterxml.jackson.core.JsonParser.Feature feature30 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean31 = feature30.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory33 = jsonFactory29.configure(feature30, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec34 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory35 = new com.fasterxml.jackson.core.JsonFactory(objectCodec34);
        com.fasterxml.jackson.core.JsonParser.Feature feature36 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean37 = feature36.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory39 = jsonFactory35.configure(feature36, false);
        java.io.OutputStream outputStream40 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding41 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator42 = jsonFactory39.createGenerator(outputStream40, jsonEncoding41);
        com.fasterxml.jackson.core.JsonFactory.Feature feature43 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean44 = jsonFactory39.isEnabled(feature43);
        com.fasterxml.jackson.core.JsonFactory jsonFactory45 = jsonFactory29.disable(feature43);
        com.fasterxml.jackson.core.JsonFactory jsonFactory46 = jsonFactory20.disable(feature43);
        boolean boolean47 = feature43.enabledByDefault();
        int int48 = feature43.getMask();
        com.fasterxml.jackson.core.JsonFactory jsonFactory49 = jsonFactory12.enable(feature43);
        boolean boolean50 = jsonFactory49.requiresCustomCodec();
        boolean boolean51 = jsonFactory49.requiresCustomCodec();
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertTrue("'" + jsonEncoding7 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding7.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(characterEscapes10);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES + "'", feature11.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES));
        org.junit.Assert.assertNotNull(jsonFactory12);
        org.junit.Assert.assertNotNull(jsonGenerator14);
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature17.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(jsonFactory20);
        org.junit.Assert.assertTrue("'" + jsonEncoding22 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding22.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator23);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature24.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(jsonGenerator27);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature30.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(jsonFactory33);
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature36.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(jsonFactory39);
        org.junit.Assert.assertTrue("'" + jsonEncoding41 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding41.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator42);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature43.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(jsonFactory45);
        org.junit.Assert.assertNotNull(jsonFactory46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(jsonFactory49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter1.createInstance();
        com.fasterxml.jackson.core.ObjectCodec objectCodec3 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = new com.fasterxml.jackson.core.JsonFactory(objectCodec3);
        com.fasterxml.jackson.core.JsonParser.Feature feature5 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean6 = feature5.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory8 = jsonFactory4.configure(feature5, false);
        java.io.OutputStream outputStream9 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding10 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator11 = jsonFactory8.createGenerator(outputStream9, jsonEncoding10);
        jsonGenerator11.writeRaw("JSON");
        jsonGenerator11.writeNumber("hi!");
        int[] intArray16 = com.fasterxml.jackson.core.json.ReaderBasedJsonParser._icLatin1;
        jsonGenerator11.writeArray(intArray16, 64, 0);
        defaultPrettyPrinter2.writeRootValueSeparator(jsonGenerator11);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter22 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter23 = defaultPrettyPrinter22.createInstance();
        com.fasterxml.jackson.core.io.SerializedString serializedString25 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature26 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean27 = serializedString25.equals((java.lang.Object) feature26);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter28 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter22, (com.fasterxml.jackson.core.SerializableString) serializedString25);
        byte[] byteArray29 = serializedString25.asQuotedUTF8();
        java.lang.String str30 = serializedString25.getValue();
        jsonGenerator11.writeFieldName((com.fasterxml.jackson.core.SerializableString) serializedString25);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter2);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature5.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(jsonFactory8);
        org.junit.Assert.assertTrue("'" + jsonEncoding10 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding10.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator11);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(defaultPrettyPrinter23);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature26.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 105, 33]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException3 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation2);
        java.lang.Throwable throwable4 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator5 = null;
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException6 = new com.fasterxml.jackson.core.JsonGenerationException(throwable4, jsonGenerator5);
        jsonParseException3.addSuppressed((java.lang.Throwable) jsonGenerationException6);
        java.lang.String str8 = jsonParseException3.getOriginalMessage();
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory10 = new com.fasterxml.jackson.core.JsonFactory(objectCodec9);
        com.fasterxml.jackson.core.JsonParser.Feature feature11 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean12 = feature11.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory14 = jsonFactory10.configure(feature11, false);
        java.io.OutputStream outputStream15 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding16 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator17 = jsonFactory14.createGenerator(outputStream15, jsonEncoding16);
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature20 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        boolean boolean21 = serializedString19.equals((java.lang.Object) feature20);
        java.lang.String str22 = serializedString19.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator23 = jsonGenerator17.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString19);
        jsonGenerator17.writeString("com.fasterxml.jackson.core.JsonGenerationException: N/A");
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator26 = jsonGenerator17.useDefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding27 = com.fasterxml.jackson.core.JsonEncoding.UTF32_BE;
        jsonGenerator17.setCurrentValue((java.lang.Object) jsonEncoding27);
        jsonGenerator17.writeNumber("[");
        com.fasterxml.jackson.core.ObjectCodec objectCodec32 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory33 = new com.fasterxml.jackson.core.JsonFactory(objectCodec32);
        com.fasterxml.jackson.core.JsonParser.Feature feature34 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean35 = feature34.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory37 = jsonFactory33.configure(feature34, false);
        java.io.OutputStream outputStream38 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding39 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator40 = jsonFactory37.createGenerator(outputStream38, jsonEncoding39);
        com.fasterxml.jackson.core.JsonFactory.Feature feature41 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean42 = jsonFactory37.isEnabled(feature41);
        java.io.Writer writer43 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator44 = jsonFactory37.createJsonGenerator(writer43);
        com.fasterxml.jackson.core.ObjectCodec objectCodec45 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory46 = new com.fasterxml.jackson.core.JsonFactory(objectCodec45);
        com.fasterxml.jackson.core.JsonParser.Feature feature47 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean48 = feature47.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory50 = jsonFactory46.configure(feature47, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec51 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory52 = new com.fasterxml.jackson.core.JsonFactory(objectCodec51);
        com.fasterxml.jackson.core.JsonParser.Feature feature53 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean54 = feature53.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory56 = jsonFactory52.configure(feature53, false);
        java.io.OutputStream outputStream57 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding58 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator59 = jsonFactory56.createGenerator(outputStream57, jsonEncoding58);
        com.fasterxml.jackson.core.JsonFactory.Feature feature60 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean61 = jsonFactory56.isEnabled(feature60);
        com.fasterxml.jackson.core.JsonFactory jsonFactory62 = jsonFactory46.disable(feature60);
        com.fasterxml.jackson.core.JsonFactory jsonFactory63 = jsonFactory37.disable(feature60);
        com.fasterxml.jackson.core.io.SerializedString serializedString65 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        java.lang.String str66 = serializedString65.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString68 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        char[] charArray71 = new char[] { '4', '#' };
        int int73 = serializedString68.appendQuoted(charArray71, (int) (byte) 10);
        byte[] byteArray74 = new byte[] {};
        int int76 = serializedString68.appendUnquotedUTF8(byteArray74, (int) (short) 1);
        int int78 = serializedString65.appendQuotedUTF8(byteArray74, 8);
        com.fasterxml.jackson.core.JsonParser jsonParser79 = jsonFactory37.createJsonParser(byteArray74);
        jsonGenerator17.writeBinaryField("hi!", byteArray74);
        com.fasterxml.jackson.core.JsonGenerationException jsonGenerationException81 = new com.fasterxml.jackson.core.JsonGenerationException("", (java.lang.Throwable) jsonParseException3, jsonGenerator17);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature82 = com.fasterxml.jackson.core.JsonGenerator.Feature.IGNORE_UNKNOWN;
        boolean boolean84 = feature82.enabledIn((int) '4');
        int int85 = feature82.getMask();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator87 = jsonGenerator17.configure(feature82, true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature11.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(jsonFactory14);
        org.junit.Assert.assertTrue("'" + jsonEncoding16 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding16.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator17);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET + "'", feature20.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(jsonGenerator23);
        org.junit.Assert.assertNotNull(jsonGenerator26);
        org.junit.Assert.assertTrue("'" + jsonEncoding27 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF32_BE + "'", jsonEncoding27.equals(com.fasterxml.jackson.core.JsonEncoding.UTF32_BE));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature34.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(jsonFactory37);
        org.junit.Assert.assertTrue("'" + jsonEncoding39 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding39.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator40);
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature41.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(jsonGenerator44);
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature47.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(jsonFactory50);
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature53.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(jsonFactory56);
        org.junit.Assert.assertTrue("'" + jsonEncoding58 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding58.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator59);
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature60.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(jsonFactory62);
        org.junit.Assert.assertNotNull(jsonFactory63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[4, #]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(jsonParser79);
        org.junit.Assert.assertTrue("'" + feature82 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.IGNORE_UNKNOWN + "'", feature82.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.IGNORE_UNKNOWN));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 512 + "'", int85 == 512);
        org.junit.Assert.assertNotNull(jsonGenerator87);
    }
}

