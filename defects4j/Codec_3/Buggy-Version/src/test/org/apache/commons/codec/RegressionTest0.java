package org.apache.commons.codec.binary;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) 100);
        byte[] byteArray2 = null;
        org.apache.commons.codec.binary.BaseNCodec.Context context5 = null;
        // The following exception was thrown during execution in test generation
        try {
            base32_1.encode(byteArray2, (int) (byte) 10, 76, context5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        org.apache.commons.codec.binary.BaseNCodec.Context context13 = null;
        // The following exception was thrown during execution in test generation
        try {
            base32_4.encode(byteArray8, (int) (byte) 100, (int) (byte) 100, context13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) 1);
        org.apache.commons.codec.binary.BaseNCodec.Context context3 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray4 = base32_1.ensureBufferSize((int) '#', context3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet("");
        org.apache.commons.codec.binary.BaseNCodec.Context context6 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = base32_1.hasData(context6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        byte[] byteArray5 = null;
        org.apache.commons.codec.binary.BaseNCodec.Context context8 = null;
        // The following exception was thrown during execution in test generation
        try {
            base32_4.decode(byteArray5, (int) (byte) 61, (int) '4', context8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj5 = base32_1.decode((java.lang.Object) 1.0f);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        byte[] byteArray3 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32(0, byteArray3, false);
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        org.apache.commons.codec.binary.Base32 base32_12 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean14 = base32_12.isInAlphabet("");
        byte[] byteArray17 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_19 = new org.apache.commons.codec.binary.Base32(0, byteArray17, false);
        java.lang.String str20 = base32_12.encodeToString(byteArray17);
        byte[] byteArray27 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean28 = base32_12.containsAlphabetOrPad(byteArray27);
        byte[] byteArray29 = base32_10.encode(byteArray27);
        java.lang.Object obj30 = base32_5.encode((java.lang.Object) byteArray29);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base32 base32_33 = new org.apache.commons.codec.binary.Base32((int) (short) -1, byteArray29, false, (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: pad must not be in alphabet or whitespace");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "CG======" + "'", str20, "CG======");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj30);
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) 100);
        org.apache.commons.codec.binary.BaseNCodec.Context context3 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray4 = base32_1.ensureBufferSize((int) ' ', context3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        byte[] byteArray7 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32(0, byteArray7, false);
        org.apache.commons.codec.binary.Base32 base32_11 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean13 = base32_11.isInAlphabet("");
        byte[] byteArray16 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_18 = new org.apache.commons.codec.binary.Base32(0, byteArray16, false);
        java.lang.String str19 = base32_11.encodeToString(byteArray16);
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean27 = base32_11.containsAlphabetOrPad(byteArray26);
        byte[] byteArray28 = base32_9.encode(byteArray26);
        java.lang.Object obj29 = base32_4.encode((java.lang.Object) byteArray28);
        byte[] byteArray32 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_34 = new org.apache.commons.codec.binary.Base32(0, byteArray32, false);
        org.apache.commons.codec.binary.Base32 base32_36 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean38 = base32_36.isInAlphabet("");
        byte[] byteArray41 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_43 = new org.apache.commons.codec.binary.Base32(0, byteArray41, false);
        java.lang.String str44 = base32_36.encodeToString(byteArray41);
        byte[] byteArray51 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean52 = base32_36.containsAlphabetOrPad(byteArray51);
        byte[] byteArray53 = base32_34.encode(byteArray51);
        java.lang.String str54 = base32_4.encodeAsString(byteArray53);
        org.apache.commons.codec.binary.Base32 base32_56 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_62 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray61);
        byte[] byteArray63 = base32_56.encode(byteArray61);
        org.apache.commons.codec.binary.BaseNCodec.Context context66 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        // The following exception was thrown during execution in test generation
        try {
            base32_4.encode(byteArray63, (int) 'a', (int) (short) 100, context66);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CG======" + "'", str19, "CG======");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "CG======" + "'", str44, "CG======");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "JVIUCUKBLJAUCTKRHU6T2PJ5HU======" + "'", str54, "JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[48, 52, 48, 48, 75, 61, 61, 61]");
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        byte[] byteArray7 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32(0, byteArray7, false);
        org.apache.commons.codec.binary.Base32 base32_11 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean13 = base32_11.isInAlphabet("");
        byte[] byteArray16 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_18 = new org.apache.commons.codec.binary.Base32(0, byteArray16, false);
        java.lang.String str19 = base32_11.encodeToString(byteArray16);
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean27 = base32_11.containsAlphabetOrPad(byteArray26);
        byte[] byteArray28 = base32_9.encode(byteArray26);
        java.lang.Object obj29 = base32_4.encode((java.lang.Object) byteArray28);
        org.apache.commons.codec.binary.Base32 base32_31 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_37 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray36);
        byte[] byteArray38 = base32_31.encode(byteArray36);
        org.apache.commons.codec.binary.BaseNCodec.Context context41 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context41.ibitWorkArea = 0;
        // The following exception was thrown during execution in test generation
        try {
            base32_4.decode(byteArray38, 64, 76, context41);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 64");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CG======" + "'", str19, "CG======");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[48, 52, 48, 48, 75, 61, 61, 61]");
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(true, (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: pad must not be in alphabet or whitespace");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean8 = base32_6.isInAlphabet("");
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        java.lang.String str14 = base32_6.encodeToString(byteArray11);
        byte[] byteArray21 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean22 = base32_6.containsAlphabetOrPad(byteArray21);
        byte[] byteArray23 = base32_4.encode(byteArray21);
        org.apache.commons.codec.binary.Base32 base32_25 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean27 = base32_25.isInAlphabet("");
        byte[] byteArray30 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_32 = new org.apache.commons.codec.binary.Base32(0, byteArray30, false);
        java.lang.String str33 = base32_25.encodeToString(byteArray30);
        byte[] byteArray40 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean41 = base32_25.containsAlphabetOrPad(byteArray40);
        org.apache.commons.codec.binary.BaseNCodec.Context context44 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context44.ibitWorkArea = (byte) 61;
        // The following exception was thrown during execution in test generation
        try {
            base32_4.encode(byteArray40, (int) (short) 1, (int) (short) 100, context44);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 6");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CG======" + "'", str14, "CG======");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "CG======" + "'", str33, "CG======");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        byte[] byteArray6 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_8 = new org.apache.commons.codec.binary.Base32(0, byteArray6, false);
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        org.apache.commons.codec.binary.Base32 base32_15 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean17 = base32_15.isInAlphabet("");
        byte[] byteArray20 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_22 = new org.apache.commons.codec.binary.Base32(0, byteArray20, false);
        java.lang.String str23 = base32_15.encodeToString(byteArray20);
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean31 = base32_15.containsAlphabetOrPad(byteArray30);
        byte[] byteArray32 = base32_13.encode(byteArray30);
        java.lang.Object obj33 = base32_8.encode((java.lang.Object) byteArray32);
        byte[] byteArray36 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_38 = new org.apache.commons.codec.binary.Base32(0, byteArray36, false);
        org.apache.commons.codec.binary.Base32 base32_40 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean42 = base32_40.isInAlphabet("");
        byte[] byteArray45 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_47 = new org.apache.commons.codec.binary.Base32(0, byteArray45, false);
        java.lang.String str48 = base32_40.encodeToString(byteArray45);
        byte[] byteArray55 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean56 = base32_40.containsAlphabetOrPad(byteArray55);
        byte[] byteArray57 = base32_38.encode(byteArray55);
        java.lang.String str58 = base32_8.encodeAsString(byteArray57);
        byte[] byteArray63 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_65 = new org.apache.commons.codec.binary.Base32(0, byteArray63, false);
        int int66 = base32_65.lineLength;
        byte byte67 = base32_65.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context68 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean69 = base32_65.hasData(context68);
        byte[] byteArray70 = null;
        context68.buffer = byteArray70;
        context68.currentLinePos = (short) 100;
        // The following exception was thrown during execution in test generation
        try {
            base32_1.encode(byteArray57, (int) (short) 10, (int) 'a', context68);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "CG======" + "'", str23, "CG======");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "CG======" + "'", str48, "CG======");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "JVIUCUKBLJAUCTKRHU6T2PJ5HU======" + "'", str58, "JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[100]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + byte67 + "' != '" + (byte) 61 + "'", byte67 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) -1);
        boolean boolean3 = base32_1.isInAlphabet((byte) 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        java.lang.Class<?> wildcardClass11 = context7.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet("CG======");
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32((byte) 100);
        boolean boolean9 = base32_7.isInAlphabet("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj10 = base32_1.decode((java.lang.Object) boolean9);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.currentLinePos;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        byte[] byteArray3 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32(0, byteArray3, false);
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean9 = base32_7.isInAlphabet("");
        byte[] byteArray12 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_14 = new org.apache.commons.codec.binary.Base32(0, byteArray12, false);
        java.lang.String str15 = base32_7.encodeToString(byteArray12);
        byte[] byteArray22 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean23 = base32_7.containsAlphabetOrPad(byteArray22);
        byte[] byteArray24 = base32_5.encode(byteArray22);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base32 base32_27 = new org.apache.commons.codec.binary.Base32((int) '4', byteArray24, true, (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain Base32 characters: [MQAQAZAAMQ======]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CG======" + "'", str15, "CG======");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        context7.currentLinePos = (-1);
        byte[] byteArray14 = context7.buffer;
        byte[] byteArray15 = context7.buffer;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertNull(byteArray15);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte[] byteArray7 = base32_4.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        int int8 = base32_4.getDefaultBufferSize();
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean12 = base32_10.isInAlphabet("");
        byte[] byteArray15 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(0, byteArray15, false);
        java.lang.String str18 = base32_10.encodeToString(byteArray15);
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean26 = base32_10.containsAlphabetOrPad(byteArray25);
        byte[] byteArray31 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_33 = new org.apache.commons.codec.binary.Base32(0, byteArray31, false);
        int int34 = base32_33.lineLength;
        byte byte35 = base32_33.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context36 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean37 = base32_33.hasData(context36);
        context36.pos = 0;
        int int40 = context36.readPos;
        context36.currentLinePos = (-1);
        byte[] byteArray43 = context36.buffer;
        context36.ibitWorkArea = (-1);
        // The following exception was thrown during execution in test generation
        try {
            base32_4.decode(byteArray25, (int) 'a', 10, context36);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[33, 8]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CG======" + "'", str18, "CG======");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + byte35 + "' != '" + (byte) 61 + "'", byte35 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(byteArray43);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        byte[] byteArray14 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(0, byteArray14, false);
        org.apache.commons.codec.binary.Base32 base32_18 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean20 = base32_18.isInAlphabet("");
        byte[] byteArray23 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_25 = new org.apache.commons.codec.binary.Base32(0, byteArray23, false);
        java.lang.String str26 = base32_18.encodeToString(byteArray23);
        byte[] byteArray33 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean34 = base32_18.containsAlphabetOrPad(byteArray33);
        byte[] byteArray35 = base32_16.encode(byteArray33);
        byte[] byteArray41 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str42 = base32_16.encodeToString(byteArray41);
        context7.buffer = byteArray41;
        java.lang.String str44 = context7.toString();
        java.lang.Class<?> wildcardClass45 = context7.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "CG======" + "'", str26, "CG======");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "MQ6QUCQB" + "'", str42, "MQ6QUCQB");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str44, "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(true, (byte) -1);
        byte[] byteArray5 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32(0, byteArray5, false);
        int int8 = base32_7.lineLength;
        byte[] byteArray10 = base32_7.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj11 = base32_2.encode((java.lang.Object) base32_7);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[33, 8]");
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte[] byteArray7 = base32_4.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_12 = new org.apache.commons.codec.binary.Base32(0, byteArray10, false);
        int int13 = base32_12.lineLength;
        byte byte14 = base32_12.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context15 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean16 = base32_12.hasData(context15);
        context15.pos = 0;
        int int19 = context15.readPos;
        byte[] byteArray22 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32(0, byteArray22, false);
        org.apache.commons.codec.binary.Base32 base32_26 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean28 = base32_26.isInAlphabet("");
        byte[] byteArray31 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_33 = new org.apache.commons.codec.binary.Base32(0, byteArray31, false);
        java.lang.String str34 = base32_26.encodeToString(byteArray31);
        byte[] byteArray41 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean42 = base32_26.containsAlphabetOrPad(byteArray41);
        byte[] byteArray43 = base32_24.encode(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str50 = base32_24.encodeToString(byteArray49);
        context15.buffer = byteArray49;
        java.lang.String str52 = base32_4.encodeToString(byteArray49);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[33, 8]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 61 + "'", byte14 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "CG======" + "'", str34, "CG======");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MQ6QUCQB" + "'", str50, "MQ6QUCQB");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "MQ6QUCQB" + "'", str52, "MQ6QUCQB");
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet("CG======");
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        byte[] byteArray13 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_15 = new org.apache.commons.codec.binary.Base32(0, byteArray13, false);
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean19 = base32_17.isInAlphabet("");
        byte[] byteArray22 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32(0, byteArray22, false);
        java.lang.String str25 = base32_17.encodeToString(byteArray22);
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean33 = base32_17.containsAlphabetOrPad(byteArray32);
        byte[] byteArray34 = base32_15.encode(byteArray32);
        java.lang.Object obj35 = base32_10.encode((java.lang.Object) byteArray34);
        byte[] byteArray38 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_40 = new org.apache.commons.codec.binary.Base32(0, byteArray38, false);
        org.apache.commons.codec.binary.Base32 base32_42 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean44 = base32_42.isInAlphabet("");
        byte[] byteArray47 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_49 = new org.apache.commons.codec.binary.Base32(0, byteArray47, false);
        java.lang.String str50 = base32_42.encodeToString(byteArray47);
        byte[] byteArray57 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean58 = base32_42.containsAlphabetOrPad(byteArray57);
        byte[] byteArray59 = base32_40.encode(byteArray57);
        java.lang.String str60 = base32_10.encodeAsString(byteArray59);
        boolean boolean62 = base32_1.isInAlphabet(byteArray59, false);
        byte[] byteArray64 = base32_1.decode("");
        org.apache.commons.codec.binary.BaseNCodec.Context context65 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context65.ibitWorkArea = (byte) 61;
        long long68 = context65.lbitWorkArea;
        int int69 = context65.modulus;
        boolean boolean70 = base32_1.hasData(context65);
        java.lang.Object obj71 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj72 = base32_1.decode(obj71);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CG======" + "'", str25, "CG======");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "CG======" + "'", str50, "CG======");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "JVIUCUKBLJAUCTKRHU6T2PJ5HU======" + "'", str60, "JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet("");
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean9 = base32_7.isInAlphabet("");
        byte[] byteArray12 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_14 = new org.apache.commons.codec.binary.Base32(0, byteArray12, false);
        java.lang.String str15 = base32_7.encodeToString(byteArray12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj16 = base32_1.decode((java.lang.Object) base32_7);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CG======" + "'", str15, "CG======");
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        byte[] byteArray5 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray5);
        byte[] byteArray9 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_11 = new org.apache.commons.codec.binary.Base32(0, byteArray9, false);
        int int12 = base32_11.lineLength;
        byte[] byteArray14 = base32_11.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        boolean boolean16 = base32_6.isInAlphabet(byteArray14, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base32 base32_19 = new org.apache.commons.codec.binary.Base32(0, byteArray14, true, (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: pad must not be in alphabet or whitespace");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[33, 8]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) 1);
        byte byte2 = base32_1.pad;
        org.apache.commons.codec.binary.BaseNCodec.Context context3 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context3.ibitWorkArea = (byte) 61;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj6 = base32_1.decode((java.lang.Object) (byte) 61);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 1 + "'", byte2 == (byte) 1);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean8 = base32_6.isInAlphabet("");
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        java.lang.String str14 = base32_6.encodeToString(byteArray11);
        byte[] byteArray19 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_21 = new org.apache.commons.codec.binary.Base32(0, byteArray19, false);
        int int22 = base32_21.lineLength;
        byte byte23 = base32_21.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context24 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean25 = base32_21.hasData(context24);
        context24.pos = 0;
        int int28 = context24.readPos;
        byte[] byteArray31 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_33 = new org.apache.commons.codec.binary.Base32(0, byteArray31, false);
        org.apache.commons.codec.binary.Base32 base32_35 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean37 = base32_35.isInAlphabet("");
        byte[] byteArray40 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_42 = new org.apache.commons.codec.binary.Base32(0, byteArray40, false);
        java.lang.String str43 = base32_35.encodeToString(byteArray40);
        byte[] byteArray50 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean51 = base32_35.containsAlphabetOrPad(byteArray50);
        byte[] byteArray52 = base32_33.encode(byteArray50);
        byte[] byteArray58 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str59 = base32_33.encodeToString(byteArray58);
        context24.buffer = byteArray58;
        // The following exception was thrown during execution in test generation
        try {
            base32_4.decode(byteArray11, 100, (int) ' ', context24);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CG======" + "'", str14, "CG======");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + byte23 + "' != '" + (byte) 61 + "'", byte23 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[100]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "CG======" + "'", str43, "CG======");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "MQ6QUCQB" + "'", str59, "MQ6QUCQB");
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        byte[] byteArray7 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32(0, byteArray7, false);
        org.apache.commons.codec.binary.Base32 base32_11 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean13 = base32_11.isInAlphabet("");
        byte[] byteArray16 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_18 = new org.apache.commons.codec.binary.Base32(0, byteArray16, false);
        java.lang.String str19 = base32_11.encodeToString(byteArray16);
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean27 = base32_11.containsAlphabetOrPad(byteArray26);
        byte[] byteArray28 = base32_9.encode(byteArray26);
        java.lang.Object obj29 = base32_4.encode((java.lang.Object) byteArray28);
        byte[] byteArray32 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_34 = new org.apache.commons.codec.binary.Base32(0, byteArray32, false);
        org.apache.commons.codec.binary.Base32 base32_36 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean38 = base32_36.isInAlphabet("");
        byte[] byteArray41 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_43 = new org.apache.commons.codec.binary.Base32(0, byteArray41, false);
        java.lang.String str44 = base32_36.encodeToString(byteArray41);
        byte[] byteArray51 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean52 = base32_36.containsAlphabetOrPad(byteArray51);
        byte[] byteArray53 = base32_34.encode(byteArray51);
        java.lang.String str54 = base32_4.encodeAsString(byteArray53);
        byte[] byteArray57 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_59 = new org.apache.commons.codec.binary.Base32(0, byteArray57, false);
        org.apache.commons.codec.binary.Base32 base32_61 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean63 = base32_61.isInAlphabet("");
        byte[] byteArray66 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_68 = new org.apache.commons.codec.binary.Base32(0, byteArray66, false);
        java.lang.String str69 = base32_61.encodeToString(byteArray66);
        byte[] byteArray76 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean77 = base32_61.containsAlphabetOrPad(byteArray76);
        byte[] byteArray78 = base32_59.encode(byteArray76);
        byte[] byteArray84 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str85 = base32_59.encodeToString(byteArray84);
        byte[] byteArray86 = base32_4.decode(byteArray84);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj88 = base32_4.decode((java.lang.Object) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CG======" + "'", str19, "CG======");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "CG======" + "'", str44, "CG======");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "JVIUCUKBLJAUCTKRHU6T2PJ5HU======" + "'", str54, "JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[100]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "CG======" + "'", str69, "CG======");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "MQ6QUCQB" + "'", str85, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet("CG======");
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        byte[] byteArray13 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_15 = new org.apache.commons.codec.binary.Base32(0, byteArray13, false);
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean19 = base32_17.isInAlphabet("");
        byte[] byteArray22 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32(0, byteArray22, false);
        java.lang.String str25 = base32_17.encodeToString(byteArray22);
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean33 = base32_17.containsAlphabetOrPad(byteArray32);
        byte[] byteArray34 = base32_15.encode(byteArray32);
        java.lang.Object obj35 = base32_10.encode((java.lang.Object) byteArray34);
        byte[] byteArray38 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_40 = new org.apache.commons.codec.binary.Base32(0, byteArray38, false);
        org.apache.commons.codec.binary.Base32 base32_42 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean44 = base32_42.isInAlphabet("");
        byte[] byteArray47 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_49 = new org.apache.commons.codec.binary.Base32(0, byteArray47, false);
        java.lang.String str50 = base32_42.encodeToString(byteArray47);
        byte[] byteArray57 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean58 = base32_42.containsAlphabetOrPad(byteArray57);
        byte[] byteArray59 = base32_40.encode(byteArray57);
        java.lang.String str60 = base32_10.encodeAsString(byteArray59);
        boolean boolean62 = base32_1.isInAlphabet(byteArray59, false);
        org.apache.commons.codec.EncoderException encoderException64 = new org.apache.commons.codec.EncoderException("");
        java.lang.Throwable[] throwableArray65 = encoderException64.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj66 = base32_1.decode((java.lang.Object) encoderException64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CG======" + "'", str25, "CG======");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "CG======" + "'", str50, "CG======");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "JVIUCUKBLJAUCTKRHU6T2PJ5HU======" + "'", str60, "JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(throwableArray65);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet((byte) 61);
        java.lang.Object obj6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj7 = base32_1.encode(obj6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        byte[] byteArray6 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_8 = new org.apache.commons.codec.binary.Base32(0, byteArray6, false);
        java.lang.String str9 = base32_1.encodeToString(byteArray6);
        byte[] byteArray16 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean17 = base32_1.containsAlphabetOrPad(byteArray16);
        org.apache.commons.codec.binary.BaseNCodec.Context context19 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray20 = base32_1.ensureBufferSize((-1), context19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CG======" + "'", str9, "CG======");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        byte[] byteArray14 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(0, byteArray14, false);
        org.apache.commons.codec.binary.Base32 base32_18 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean20 = base32_18.isInAlphabet("");
        byte[] byteArray23 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_25 = new org.apache.commons.codec.binary.Base32(0, byteArray23, false);
        java.lang.String str26 = base32_18.encodeToString(byteArray23);
        byte[] byteArray33 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean34 = base32_18.containsAlphabetOrPad(byteArray33);
        byte[] byteArray35 = base32_16.encode(byteArray33);
        byte[] byteArray41 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str42 = base32_16.encodeToString(byteArray41);
        context7.buffer = byteArray41;
        java.lang.String str44 = context7.toString();
        int int45 = context7.modulus;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "CG======" + "'", str26, "CG======");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "MQ6QUCQB" + "'", str42, "MQ6QUCQB");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str44, "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.Base32 base32_8 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean10 = base32_8.isInAlphabet("");
        byte[] byteArray12 = base32_8.decode("MQ6QUCQB");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj13 = base32_4.encode((java.lang.Object) "MQ6QUCQB");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-74, -115, -81, 51, 75]");
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        byte[] byteArray7 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32(0, byteArray7, false);
        org.apache.commons.codec.binary.Base32 base32_11 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean13 = base32_11.isInAlphabet("");
        byte[] byteArray16 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_18 = new org.apache.commons.codec.binary.Base32(0, byteArray16, false);
        java.lang.String str19 = base32_11.encodeToString(byteArray16);
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean27 = base32_11.containsAlphabetOrPad(byteArray26);
        byte[] byteArray28 = base32_9.encode(byteArray26);
        java.lang.Object obj29 = base32_4.encode((java.lang.Object) byteArray28);
        byte[] byteArray32 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_34 = new org.apache.commons.codec.binary.Base32(0, byteArray32, false);
        int int35 = base32_34.lineLength;
        byte[] byteArray37 = base32_34.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        int int38 = base32_34.getDefaultBufferSize();
        byte byte39 = base32_34.PAD;
        byte[] byteArray42 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_44 = new org.apache.commons.codec.binary.Base32(0, byteArray42, false);
        org.apache.commons.codec.binary.Base32 base32_46 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean48 = base32_46.isInAlphabet("");
        byte[] byteArray51 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_53 = new org.apache.commons.codec.binary.Base32(0, byteArray51, false);
        java.lang.String str54 = base32_46.encodeToString(byteArray51);
        byte[] byteArray61 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean62 = base32_46.containsAlphabetOrPad(byteArray61);
        byte[] byteArray63 = base32_44.encode(byteArray61);
        byte[] byteArray69 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str70 = base32_44.encodeToString(byteArray69);
        byte[] byteArray72 = base32_44.decode("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray75 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_77 = new org.apache.commons.codec.binary.Base32(0, byteArray75, false);
        java.lang.String str78 = base32_44.encodeAsString(byteArray75);
        byte[] byteArray83 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_85 = new org.apache.commons.codec.binary.Base32(0, byteArray83, false);
        int int86 = base32_85.lineLength;
        byte byte87 = base32_85.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context88 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean89 = base32_85.hasData(context88);
        byte[] byteArray90 = null;
        context88.buffer = byteArray90;
        context88.currentLinePos = (short) 100;
        long long94 = context88.lbitWorkArea;
        base32_34.encode(byteArray75, (int) (byte) 10, (-1), context88);
        boolean boolean97 = base32_4.isInAlphabet(byteArray75, false);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CG======" + "'", str19, "CG======");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[33, 8]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8192 + "'", int38 == 8192);
        org.junit.Assert.assertTrue("'" + byte39 + "' != '" + (byte) 61 + "'", byte39 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[100]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "CG======" + "'", str54, "CG======");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "MQ6QUCQB" + "'", str70, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[100]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "MQ======" + "'", str78, "MQ======");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[100]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + byte87 + "' != '" + (byte) 61 + "'", byte87 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(false);
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray9);
        byte[] byteArray11 = base32_4.encode(byteArray9);
        boolean boolean12 = base32_2.containsAlphabetOrPad(byteArray11);
        byte[] byteArray15 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(0, byteArray15, false);
        int int18 = base32_17.lineLength;
        byte byte19 = base32_17.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context20 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean21 = base32_17.hasData(context20);
        context20.pos = 0;
        int int24 = context20.readPos;
        byte[] byteArray27 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_29 = new org.apache.commons.codec.binary.Base32(0, byteArray27, false);
        org.apache.commons.codec.binary.Base32 base32_31 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean33 = base32_31.isInAlphabet("");
        byte[] byteArray36 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_38 = new org.apache.commons.codec.binary.Base32(0, byteArray36, false);
        java.lang.String str39 = base32_31.encodeToString(byteArray36);
        byte[] byteArray46 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean47 = base32_31.containsAlphabetOrPad(byteArray46);
        byte[] byteArray48 = base32_29.encode(byteArray46);
        byte[] byteArray54 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str55 = base32_29.encodeToString(byteArray54);
        context20.buffer = byteArray54;
        org.apache.commons.codec.binary.BaseNCodec.Context context59 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        long long60 = context59.lbitWorkArea;
        base32_2.decode(byteArray54, 0, (int) (byte) 0, context59);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base32 base32_64 = new org.apache.commons.codec.binary.Base32((int) (byte) 1, byteArray54, false, (byte) 61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain Base32 characters: [d=???]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) 61 + "'", byte19 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "CG======" + "'", str39, "CG======");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "MQ6QUCQB" + "'", str55, "MQ6QUCQB");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.Base32 base32_8 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean10 = base32_8.isInAlphabet("");
        boolean boolean12 = base32_8.isInAlphabet("CG======");
        byte[] byteArray15 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(0, byteArray15, false);
        byte[] byteArray20 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_22 = new org.apache.commons.codec.binary.Base32(0, byteArray20, false);
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean26 = base32_24.isInAlphabet("");
        byte[] byteArray29 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_31 = new org.apache.commons.codec.binary.Base32(0, byteArray29, false);
        java.lang.String str32 = base32_24.encodeToString(byteArray29);
        byte[] byteArray39 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean40 = base32_24.containsAlphabetOrPad(byteArray39);
        byte[] byteArray41 = base32_22.encode(byteArray39);
        java.lang.Object obj42 = base32_17.encode((java.lang.Object) byteArray41);
        byte[] byteArray45 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_47 = new org.apache.commons.codec.binary.Base32(0, byteArray45, false);
        org.apache.commons.codec.binary.Base32 base32_49 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean51 = base32_49.isInAlphabet("");
        byte[] byteArray54 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_56 = new org.apache.commons.codec.binary.Base32(0, byteArray54, false);
        java.lang.String str57 = base32_49.encodeToString(byteArray54);
        byte[] byteArray64 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean65 = base32_49.containsAlphabetOrPad(byteArray64);
        byte[] byteArray66 = base32_47.encode(byteArray64);
        java.lang.String str67 = base32_17.encodeAsString(byteArray66);
        boolean boolean69 = base32_8.isInAlphabet(byteArray66, false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj70 = base32_4.encode((java.lang.Object) base32_8);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "CG======" + "'", str32, "CG======");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[100]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "CG======" + "'", str57, "CG======");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "JVIUCUKBLJAUCTKRHU6T2PJ5HU======" + "'", str67, "JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(8192);
        org.apache.commons.codec.DecoderException decoderException3 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.DecoderException: hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj4 = base32_1.encode((java.lang.Object) "org.apache.commons.codec.DecoderException: hi!");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(false);
        org.apache.commons.codec.binary.Base32 base32_3 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray8);
        byte[] byteArray10 = base32_3.encode(byteArray8);
        boolean boolean11 = base32_1.containsAlphabetOrPad(byteArray10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj13 = base32_1.encode((java.lang.Object) "AEAAUddd");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean8 = base32_6.isInAlphabet("");
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        java.lang.String str14 = base32_6.encodeToString(byteArray11);
        byte[] byteArray21 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean22 = base32_6.containsAlphabetOrPad(byteArray21);
        byte[] byteArray23 = base32_4.encode(byteArray21);
        org.apache.commons.codec.binary.Base32 base32_25 = new org.apache.commons.codec.binary.Base32(8192);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj26 = base32_4.decode((java.lang.Object) 8192);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CG======" + "'", str14, "CG======");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        context7.lbitWorkArea = (byte) 61;
        int int14 = context7.modulus;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) (byte) 10);
        org.apache.commons.codec.binary.Base32 base32_3 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray8);
        byte[] byteArray10 = base32_3.encode(byteArray8);
        byte[] byteArray15 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(0, byteArray15, false);
        int int18 = base32_17.lineLength;
        byte byte19 = base32_17.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context20 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean21 = base32_17.hasData(context20);
        context20.pos = 0;
        int int24 = context20.readPos;
        byte[] byteArray27 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_29 = new org.apache.commons.codec.binary.Base32(0, byteArray27, false);
        org.apache.commons.codec.binary.Base32 base32_31 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean33 = base32_31.isInAlphabet("");
        byte[] byteArray36 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_38 = new org.apache.commons.codec.binary.Base32(0, byteArray36, false);
        java.lang.String str39 = base32_31.encodeToString(byteArray36);
        byte[] byteArray46 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean47 = base32_31.containsAlphabetOrPad(byteArray46);
        byte[] byteArray48 = base32_29.encode(byteArray46);
        byte[] byteArray54 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str55 = base32_29.encodeToString(byteArray54);
        context20.buffer = byteArray54;
        java.lang.String str57 = context20.toString();
        base32_1.encode(byteArray10, (int) (byte) 0, (int) (short) 1, context20);
        org.apache.commons.codec.EncoderException encoderException60 = new org.apache.commons.codec.EncoderException("hi!");
        org.apache.commons.codec.EncoderException encoderException62 = new org.apache.commons.codec.EncoderException("");
        org.apache.commons.codec.EncoderException encoderException63 = new org.apache.commons.codec.EncoderException((java.lang.Throwable) encoderException62);
        encoderException60.addSuppressed((java.lang.Throwable) encoderException63);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj65 = base32_1.encode((java.lang.Object) encoderException60);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) 61 + "'", byte19 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "CG======" + "'", str39, "CG======");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "MQ6QUCQB" + "'", str55, "MQ6QUCQB");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str57, "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(0, byteArray1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj4 = base32_2.decode((java.lang.Object) 100.0f);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(false);
        org.apache.commons.codec.DecoderException decoderException4 = new org.apache.commons.codec.DecoderException("hi!");
        org.apache.commons.codec.EncoderException encoderException5 = new org.apache.commons.codec.EncoderException("", (java.lang.Throwable) decoderException4);
        java.lang.Throwable[] throwableArray6 = encoderException5.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj7 = base32_1.decode((java.lang.Object) encoderException5);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray6);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet((byte) 61);
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32(true);
        int int8 = base32_7.lineLength;
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        org.apache.commons.codec.binary.Base32 base32_15 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean17 = base32_15.isInAlphabet("");
        byte[] byteArray20 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_22 = new org.apache.commons.codec.binary.Base32(0, byteArray20, false);
        java.lang.String str23 = base32_15.encodeToString(byteArray20);
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean31 = base32_15.containsAlphabetOrPad(byteArray30);
        byte[] byteArray32 = base32_13.encode(byteArray30);
        byte[] byteArray38 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str39 = base32_13.encodeToString(byteArray38);
        byte[] byteArray44 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_46 = new org.apache.commons.codec.binary.Base32(0, byteArray44, false);
        int int47 = base32_46.lineLength;
        byte byte48 = base32_46.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context49 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean50 = base32_46.hasData(context49);
        context49.pos = 0;
        int int53 = context49.readPos;
        context49.currentLinePos = (-1);
        byte[] byteArray56 = context49.buffer;
        base32_7.encode(byteArray38, 64, 0, context49);
        int int58 = base32_1.available(context49);
        byte[] byteArray61 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_63 = new org.apache.commons.codec.binary.Base32(0, byteArray61, false);
        org.apache.commons.codec.binary.Base32 base32_65 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean67 = base32_65.isInAlphabet("");
        byte[] byteArray70 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_72 = new org.apache.commons.codec.binary.Base32(0, byteArray70, false);
        java.lang.String str73 = base32_65.encodeToString(byteArray70);
        byte[] byteArray80 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean81 = base32_65.containsAlphabetOrPad(byteArray80);
        byte[] byteArray82 = base32_63.encode(byteArray80);
        byte[] byteArray87 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_89 = new org.apache.commons.codec.binary.Base32(0, byteArray87, false);
        int int90 = base32_89.lineLength;
        byte byte91 = base32_89.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context92 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean93 = base32_89.hasData(context92);
        byte[] byteArray94 = null;
        context92.buffer = byteArray94;
        context92.currentLinePos = (short) 100;
        long long98 = context92.lbitWorkArea;
        int int99 = base32_1.readResults(byteArray80, 1, (-1), context92);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "CG======" + "'", str23, "CG======");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "MQ6QUCQB" + "'", str39, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + byte48 + "' != '" + (byte) 61 + "'", byte48 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNull(byteArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[100]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[100]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "CG======" + "'", str73, "CG======");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[100]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + byte91 + "' != '" + (byte) 61 + "'", byte91 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 0L + "'", long98 == 0L);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet("");
        byte byte6 = base32_1.pad;
        byte byte7 = base32_1.pad;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 61 + "'", byte7 == (byte) 61);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        byte[] byteArray9 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_11 = new org.apache.commons.codec.binary.Base32(0, byteArray9, false);
        int int12 = base32_11.lineLength;
        byte byte13 = base32_11.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context14 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean15 = base32_11.hasData(context14);
        context14.pos = 0;
        int int18 = context14.readPos;
        context14.currentLinePos = (-1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj21 = base32_4.decode((java.lang.Object) context14);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + byte13 + "' != '" + (byte) 61 + "'", byte13 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        byte[] byteArray3 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32(0, byteArray3, false);
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        int int11 = base32_10.lineLength;
        byte byte12 = base32_10.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context13 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean14 = base32_10.hasData(context13);
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean18 = base32_16.isInAlphabet("");
        byte[] byteArray21 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_23 = new org.apache.commons.codec.binary.Base32(0, byteArray21, false);
        java.lang.String str24 = base32_16.encodeToString(byteArray21);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean32 = base32_16.containsAlphabetOrPad(byteArray31);
        byte[] byteArray33 = base32_10.encode(byteArray31);
        byte[] byteArray34 = base32_5.encode(byteArray31);
        org.apache.commons.codec.binary.Base32 base32_35 = new org.apache.commons.codec.binary.Base32((int) 'a', byteArray31);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 61 + "'", byte12 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "CG======" + "'", str24, "CG======");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(0);
        byte[] byteArray4 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32(0, byteArray4, false);
        int int7 = base32_6.lineLength;
        byte byte8 = base32_6.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context9 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean10 = base32_6.hasData(context9);
        byte[] byteArray11 = null;
        context9.buffer = byteArray11;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj13 = base32_1.decode((java.lang.Object) byteArray11);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 61 + "'", byte8 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet("CG======");
        byte byte6 = base32_1.PAD;
        org.apache.commons.codec.binary.Base32 base32_8 = new org.apache.commons.codec.binary.Base32(true);
        int int9 = base32_8.lineLength;
        byte[] byteArray12 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_14 = new org.apache.commons.codec.binary.Base32(0, byteArray12, false);
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean18 = base32_16.isInAlphabet("");
        byte[] byteArray21 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_23 = new org.apache.commons.codec.binary.Base32(0, byteArray21, false);
        java.lang.String str24 = base32_16.encodeToString(byteArray21);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean32 = base32_16.containsAlphabetOrPad(byteArray31);
        byte[] byteArray33 = base32_14.encode(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str40 = base32_14.encodeToString(byteArray39);
        byte[] byteArray45 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_47 = new org.apache.commons.codec.binary.Base32(0, byteArray45, false);
        int int48 = base32_47.lineLength;
        byte byte49 = base32_47.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context50 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean51 = base32_47.hasData(context50);
        context50.pos = 0;
        int int54 = context50.readPos;
        context50.currentLinePos = (-1);
        byte[] byteArray57 = context50.buffer;
        base32_8.encode(byteArray39, 64, 0, context50);
        org.apache.commons.codec.binary.BaseNCodec.Context context61 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context61.ibitWorkArea = 0;
        byte[] byteArray64 = context61.buffer;
        // The following exception was thrown during execution in test generation
        try {
            base32_1.decode(byteArray39, (int) (byte) -1, (int) ' ', context61);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "CG======" + "'", str24, "CG======");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "MQ6QUCQB" + "'", str40, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + byte49 + "' != '" + (byte) 61 + "'", byte49 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNull(byteArray64);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet((byte) 61);
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32(true);
        int int8 = base32_7.lineLength;
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        org.apache.commons.codec.binary.Base32 base32_15 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean17 = base32_15.isInAlphabet("");
        byte[] byteArray20 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_22 = new org.apache.commons.codec.binary.Base32(0, byteArray20, false);
        java.lang.String str23 = base32_15.encodeToString(byteArray20);
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean31 = base32_15.containsAlphabetOrPad(byteArray30);
        byte[] byteArray32 = base32_13.encode(byteArray30);
        byte[] byteArray38 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str39 = base32_13.encodeToString(byteArray38);
        byte[] byteArray44 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_46 = new org.apache.commons.codec.binary.Base32(0, byteArray44, false);
        int int47 = base32_46.lineLength;
        byte byte48 = base32_46.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context49 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean50 = base32_46.hasData(context49);
        context49.pos = 0;
        int int53 = context49.readPos;
        context49.currentLinePos = (-1);
        byte[] byteArray56 = context49.buffer;
        base32_7.encode(byteArray38, 64, 0, context49);
        int int58 = base32_1.available(context49);
        java.lang.Class<?> wildcardClass59 = base32_1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "CG======" + "'", str23, "CG======");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "MQ6QUCQB" + "'", str39, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + byte48 + "' != '" + (byte) 61 + "'", byte48 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNull(byteArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet("");
        java.lang.Object obj7 = base32_1.decode((java.lang.Object) "MQ6QUCQB");
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32((byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj10 = base32_1.decode((java.lang.Object) base32_9);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(obj7);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet((byte) 61);
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32(true);
        int int8 = base32_7.lineLength;
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        org.apache.commons.codec.binary.Base32 base32_15 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean17 = base32_15.isInAlphabet("");
        byte[] byteArray20 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_22 = new org.apache.commons.codec.binary.Base32(0, byteArray20, false);
        java.lang.String str23 = base32_15.encodeToString(byteArray20);
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean31 = base32_15.containsAlphabetOrPad(byteArray30);
        byte[] byteArray32 = base32_13.encode(byteArray30);
        byte[] byteArray38 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str39 = base32_13.encodeToString(byteArray38);
        byte[] byteArray44 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_46 = new org.apache.commons.codec.binary.Base32(0, byteArray44, false);
        int int47 = base32_46.lineLength;
        byte byte48 = base32_46.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context49 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean50 = base32_46.hasData(context49);
        context49.pos = 0;
        int int53 = context49.readPos;
        context49.currentLinePos = (-1);
        byte[] byteArray56 = context49.buffer;
        base32_7.encode(byteArray38, 64, 0, context49);
        int int58 = base32_1.available(context49);
        org.apache.commons.codec.binary.Base32 base32_60 = new org.apache.commons.codec.binary.Base32((byte) 1);
        byte byte61 = base32_60.pad;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj62 = base32_1.decode((java.lang.Object) byte61);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "CG======" + "'", str23, "CG======");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "MQ6QUCQB" + "'", str39, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + byte48 + "' != '" + (byte) 61 + "'", byte48 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNull(byteArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + byte61 + "' != '" + (byte) 1 + "'", byte61 == (byte) 1);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        byte[] byteArray7 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32(0, byteArray7, false);
        org.apache.commons.codec.binary.Base32 base32_11 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean13 = base32_11.isInAlphabet("");
        byte[] byteArray16 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_18 = new org.apache.commons.codec.binary.Base32(0, byteArray16, false);
        java.lang.String str19 = base32_11.encodeToString(byteArray16);
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean27 = base32_11.containsAlphabetOrPad(byteArray26);
        byte[] byteArray28 = base32_9.encode(byteArray26);
        java.lang.Object obj29 = base32_4.encode((java.lang.Object) byteArray28);
        byte[] byteArray32 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_34 = new org.apache.commons.codec.binary.Base32(0, byteArray32, false);
        org.apache.commons.codec.binary.Base32 base32_36 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean38 = base32_36.isInAlphabet("");
        byte[] byteArray41 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_43 = new org.apache.commons.codec.binary.Base32(0, byteArray41, false);
        java.lang.String str44 = base32_36.encodeToString(byteArray41);
        byte[] byteArray51 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean52 = base32_36.containsAlphabetOrPad(byteArray51);
        byte[] byteArray53 = base32_34.encode(byteArray51);
        java.lang.String str54 = base32_4.encodeAsString(byteArray53);
        byte[] byteArray57 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_59 = new org.apache.commons.codec.binary.Base32(0, byteArray57, false);
        org.apache.commons.codec.binary.Base32 base32_61 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean63 = base32_61.isInAlphabet("");
        byte[] byteArray66 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_68 = new org.apache.commons.codec.binary.Base32(0, byteArray66, false);
        java.lang.String str69 = base32_61.encodeToString(byteArray66);
        byte[] byteArray76 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean77 = base32_61.containsAlphabetOrPad(byteArray76);
        byte[] byteArray78 = base32_59.encode(byteArray76);
        byte[] byteArray84 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str85 = base32_59.encodeToString(byteArray84);
        byte[] byteArray86 = base32_4.decode(byteArray84);
        byte[] byteArray89 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_91 = new org.apache.commons.codec.binary.Base32(0, byteArray89, false);
        int int92 = base32_91.lineLength;
        byte[] byteArray94 = base32_91.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        int int95 = base32_91.getDefaultBufferSize();
        byte byte96 = base32_91.PAD;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj97 = base32_4.decode((java.lang.Object) base32_91);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CG======" + "'", str19, "CG======");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "CG======" + "'", str44, "CG======");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "JVIUCUKBLJAUCTKRHU6T2PJ5HU======" + "'", str54, "JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[100]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "CG======" + "'", str69, "CG======");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "MQ6QUCQB" + "'", str85, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[100]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[33, 8]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 8192 + "'", int95 == 8192);
        org.junit.Assert.assertTrue("'" + byte96 + "' != '" + (byte) 61 + "'", byte96 == (byte) 61);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        int int2 = base32_1.lineLength;
        byte[] byteArray5 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32(0, byteArray5, false);
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean11 = base32_9.isInAlphabet("");
        byte[] byteArray14 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(0, byteArray14, false);
        java.lang.String str17 = base32_9.encodeToString(byteArray14);
        byte[] byteArray24 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean25 = base32_9.containsAlphabetOrPad(byteArray24);
        byte[] byteArray26 = base32_7.encode(byteArray24);
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str33 = base32_7.encodeToString(byteArray32);
        byte[] byteArray38 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_40 = new org.apache.commons.codec.binary.Base32(0, byteArray38, false);
        int int41 = base32_40.lineLength;
        byte byte42 = base32_40.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context43 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean44 = base32_40.hasData(context43);
        context43.pos = 0;
        int int47 = context43.readPos;
        context43.currentLinePos = (-1);
        byte[] byteArray50 = context43.buffer;
        base32_1.encode(byteArray32, 64, 0, context43);
        context43.readPos = 1;
        long long54 = context43.lbitWorkArea;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CG======" + "'", str17, "CG======");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "MQ6QUCQB" + "'", str33, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + byte42 + "' != '" + (byte) 61 + "'", byte42 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        int int9 = context7.ibitWorkArea;
        context7.modulus = 64;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean8 = base32_6.isInAlphabet("");
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        java.lang.String str14 = base32_6.encodeToString(byteArray11);
        byte[] byteArray21 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean22 = base32_6.containsAlphabetOrPad(byteArray21);
        byte[] byteArray23 = base32_4.encode(byteArray21);
        byte[] byteArray24 = null;
        byte[] byteArray25 = base32_4.decode(byteArray24);
        org.apache.commons.codec.binary.Base32 base32_27 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean29 = base32_27.isInAlphabet("");
        byte[] byteArray32 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_34 = new org.apache.commons.codec.binary.Base32(0, byteArray32, false);
        java.lang.String str35 = base32_27.encodeToString(byteArray32);
        byte[] byteArray40 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_42 = new org.apache.commons.codec.binary.Base32(0, byteArray40, false);
        int int43 = base32_42.lineLength;
        byte byte44 = base32_42.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context45 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean46 = base32_42.hasData(context45);
        int int47 = base32_4.readResults(byteArray32, (int) (short) 10, (int) (short) -1, context45);
        java.lang.Object obj48 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj49 = base32_4.encode(obj48);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CG======" + "'", str14, "CG======");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "CG======" + "'", str35, "CG======");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[100]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + byte44 + "' != '" + (byte) 61 + "'", byte44 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) 100);
        boolean boolean3 = base32_1.isInAlphabet("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray5 = base32_1.decode("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_11 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray10);
        java.lang.String str12 = base32_1.encodeAsString(byteArray10);
        org.apache.commons.codec.binary.BaseNCodec.Context context14 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray15 = base32_1.ensureBufferSize((int) (short) 100, context14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 0, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AEAAUddd" + "'", str12, "AEAAUddd");
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        int int2 = base32_1.lineLength;
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32((int) (byte) 10);
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_12 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray11);
        byte[] byteArray13 = base32_6.encode(byteArray11);
        byte[] byteArray18 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_20 = new org.apache.commons.codec.binary.Base32(0, byteArray18, false);
        int int21 = base32_20.lineLength;
        byte byte22 = base32_20.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context23 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean24 = base32_20.hasData(context23);
        context23.pos = 0;
        int int27 = context23.readPos;
        byte[] byteArray30 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_32 = new org.apache.commons.codec.binary.Base32(0, byteArray30, false);
        org.apache.commons.codec.binary.Base32 base32_34 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean36 = base32_34.isInAlphabet("");
        byte[] byteArray39 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_41 = new org.apache.commons.codec.binary.Base32(0, byteArray39, false);
        java.lang.String str42 = base32_34.encodeToString(byteArray39);
        byte[] byteArray49 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean50 = base32_34.containsAlphabetOrPad(byteArray49);
        byte[] byteArray51 = base32_32.encode(byteArray49);
        byte[] byteArray57 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str58 = base32_32.encodeToString(byteArray57);
        context23.buffer = byteArray57;
        java.lang.String str60 = context23.toString();
        base32_4.encode(byteArray13, (int) (byte) 0, (int) (short) 1, context23);
        long long62 = base32_1.getEncodedLength(byteArray13);
        org.apache.commons.codec.binary.Base32 base32_65 = new org.apache.commons.codec.binary.Base32(false, (byte) 61);
        org.apache.commons.codec.binary.Base32 base32_67 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_73 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray72);
        byte[] byteArray74 = base32_67.encode(byteArray72);
        boolean boolean75 = base32_65.containsAlphabetOrPad(byteArray72);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj76 = base32_1.decode((java.lang.Object) boolean75);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + byte22 + "' != '" + (byte) 61 + "'", byte22 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "CG======" + "'", str42, "CG======");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "MQ6QUCQB" + "'", str58, "MQ6QUCQB");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str60, "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 16L + "'", long62 == 16L);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32((int) (byte) -1, byteArray1, false, (byte) 0);
        byte[] byteArray5 = null;
        byte[] byteArray10 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_12 = new org.apache.commons.codec.binary.Base32(0, byteArray10, false);
        int int13 = base32_12.lineLength;
        byte byte14 = base32_12.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context15 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean16 = base32_12.hasData(context15);
        context15.pos = 0;
        int int19 = context15.readPos;
        context15.currentLinePos = (-1);
        byte[] byteArray22 = context15.buffer;
        context15.ibitWorkArea = (-1);
        int int25 = context15.pos;
        // The following exception was thrown during execution in test generation
        try {
            base32_4.encode(byteArray5, (int) (short) -1, 61, context15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 61 + "'", byte14 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(false, (byte) 61);
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32((byte) 100);
        boolean boolean6 = base32_4.isInAlphabet("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray8 = base32_4.decode("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.apache.commons.codec.binary.BaseNCodec.Context context11 = null;
        // The following exception was thrown during execution in test generation
        try {
            base32_2.decode(byteArray8, (int) (short) 10, 10, context11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(0);
        byte[] byteArray4 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32(0, byteArray4, false);
        int int7 = base32_6.lineLength;
        byte byte8 = base32_6.PAD;
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        int int14 = base32_13.lineLength;
        byte[] byteArray16 = base32_13.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str17 = base32_6.encodeToString(byteArray16);
        byte[] byteArray18 = base32_1.encode(byteArray16);
        byte[] byteArray20 = base32_1.decode("hi!");
        byte[] byteArray23 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_25 = new org.apache.commons.codec.binary.Base32(0, byteArray23, false);
        int int26 = base32_25.lineLength;
        byte byte27 = base32_25.PAD;
        byte[] byteArray30 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_32 = new org.apache.commons.codec.binary.Base32(0, byteArray30, false);
        int int33 = base32_32.lineLength;
        byte[] byteArray35 = base32_32.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str36 = base32_25.encodeToString(byteArray35);
        byte[] byteArray39 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_41 = new org.apache.commons.codec.binary.Base32(0, byteArray39, false);
        org.apache.commons.codec.binary.Base32 base32_43 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean45 = base32_43.isInAlphabet("");
        byte[] byteArray48 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_50 = new org.apache.commons.codec.binary.Base32(0, byteArray48, false);
        java.lang.String str51 = base32_43.encodeToString(byteArray48);
        byte[] byteArray58 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean59 = base32_43.containsAlphabetOrPad(byteArray58);
        byte[] byteArray60 = base32_41.encode(byteArray58);
        byte[] byteArray66 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str67 = base32_41.encodeToString(byteArray66);
        java.lang.Object obj68 = base32_25.decode((java.lang.Object) byteArray66);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj69 = base32_1.decode((java.lang.Object) base32_25);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 61 + "'", byte8 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "EEEA====" + "'", str17, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 61 + "'", byte27 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "EEEA====" + "'", str36, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "CG======" + "'", str51, "CG======");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "MQ6QUCQB" + "'", str67, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(obj68);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet("CG======");
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        byte[] byteArray13 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_15 = new org.apache.commons.codec.binary.Base32(0, byteArray13, false);
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean19 = base32_17.isInAlphabet("");
        byte[] byteArray22 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32(0, byteArray22, false);
        java.lang.String str25 = base32_17.encodeToString(byteArray22);
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean33 = base32_17.containsAlphabetOrPad(byteArray32);
        byte[] byteArray34 = base32_15.encode(byteArray32);
        java.lang.Object obj35 = base32_10.encode((java.lang.Object) byteArray34);
        byte[] byteArray38 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_40 = new org.apache.commons.codec.binary.Base32(0, byteArray38, false);
        org.apache.commons.codec.binary.Base32 base32_42 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean44 = base32_42.isInAlphabet("");
        byte[] byteArray47 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_49 = new org.apache.commons.codec.binary.Base32(0, byteArray47, false);
        java.lang.String str50 = base32_42.encodeToString(byteArray47);
        byte[] byteArray57 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean58 = base32_42.containsAlphabetOrPad(byteArray57);
        byte[] byteArray59 = base32_40.encode(byteArray57);
        java.lang.String str60 = base32_10.encodeAsString(byteArray59);
        boolean boolean62 = base32_1.isInAlphabet(byteArray59, false);
        byte[] byteArray64 = base32_1.decode("");
        org.apache.commons.codec.binary.BaseNCodec.Context context65 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context65.ibitWorkArea = (byte) 61;
        long long68 = context65.lbitWorkArea;
        int int69 = context65.modulus;
        boolean boolean70 = base32_1.hasData(context65);
        context65.lbitWorkArea = '#';
        context65.lbitWorkArea = 0;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CG======" + "'", str25, "CG======");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "CG======" + "'", str50, "CG======");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "JVIUCUKBLJAUCTKRHU6T2PJ5HU======" + "'", str60, "JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) 100);
        boolean boolean3 = base32_1.isInAlphabet("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray5 = base32_1.decode("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_11 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray10);
        java.lang.String str12 = base32_1.encodeAsString(byteArray10);
        boolean boolean14 = base32_1.isInAlphabet((byte) 61);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 0, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AEAAUddd" + "'", str12, "AEAAUddd");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) -1);
        byte byte2 = base32_1.PAD;
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 61 + "'", byte2 == (byte) 61);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet("");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj7 = base32_1.decode((java.lang.Object) 1.0d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean4 = base32_2.isInAlphabet("");
        byte[] byteArray7 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32(0, byteArray7, false);
        java.lang.String str10 = base32_2.encodeToString(byteArray7);
        byte[] byteArray17 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean18 = base32_2.containsAlphabetOrPad(byteArray17);
        org.apache.commons.codec.binary.Base32 base32_20 = new org.apache.commons.codec.binary.Base32((int) (byte) 0, byteArray17, false);
        org.apache.commons.codec.EncoderException encoderException22 = new org.apache.commons.codec.EncoderException("hi!");
        org.apache.commons.codec.EncoderException encoderException24 = new org.apache.commons.codec.EncoderException("");
        org.apache.commons.codec.EncoderException encoderException25 = new org.apache.commons.codec.EncoderException((java.lang.Throwable) encoderException24);
        encoderException22.addSuppressed((java.lang.Throwable) encoderException25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj27 = base32_20.decode((java.lang.Object) encoderException25);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CG======" + "'", str10, "CG======");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet("CG======");
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        byte[] byteArray13 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_15 = new org.apache.commons.codec.binary.Base32(0, byteArray13, false);
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean19 = base32_17.isInAlphabet("");
        byte[] byteArray22 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32(0, byteArray22, false);
        java.lang.String str25 = base32_17.encodeToString(byteArray22);
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean33 = base32_17.containsAlphabetOrPad(byteArray32);
        byte[] byteArray34 = base32_15.encode(byteArray32);
        java.lang.Object obj35 = base32_10.encode((java.lang.Object) byteArray34);
        byte[] byteArray38 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_40 = new org.apache.commons.codec.binary.Base32(0, byteArray38, false);
        org.apache.commons.codec.binary.Base32 base32_42 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean44 = base32_42.isInAlphabet("");
        byte[] byteArray47 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_49 = new org.apache.commons.codec.binary.Base32(0, byteArray47, false);
        java.lang.String str50 = base32_42.encodeToString(byteArray47);
        byte[] byteArray57 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean58 = base32_42.containsAlphabetOrPad(byteArray57);
        byte[] byteArray59 = base32_40.encode(byteArray57);
        java.lang.String str60 = base32_10.encodeAsString(byteArray59);
        boolean boolean62 = base32_1.isInAlphabet(byteArray59, false);
        byte[] byteArray64 = base32_1.decode("");
        byte[] byteArray65 = null;
        byte[] byteArray70 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_72 = new org.apache.commons.codec.binary.Base32(0, byteArray70, false);
        int int73 = base32_72.lineLength;
        byte byte74 = base32_72.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context75 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean76 = base32_72.hasData(context75);
        context75.pos = 0;
        int int79 = context75.readPos;
        int int80 = context75.modulus;
        int int81 = context75.ibitWorkArea;
        context75.modulus = 0;
        int int84 = context75.ibitWorkArea;
        // The following exception was thrown during execution in test generation
        try {
            base32_1.decode(byteArray65, (int) (short) 10, (int) (byte) 1, context75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CG======" + "'", str25, "CG======");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "CG======" + "'", str50, "CG======");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "JVIUCUKBLJAUCTKRHU6T2PJ5HU======" + "'", str60, "JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[100]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + byte74 + "' != '" + (byte) 61 + "'", byte74 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        byte[] byteArray3 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32(0, byteArray3, false);
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        org.apache.commons.codec.binary.Base32 base32_12 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean14 = base32_12.isInAlphabet("");
        byte[] byteArray17 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_19 = new org.apache.commons.codec.binary.Base32(0, byteArray17, false);
        java.lang.String str20 = base32_12.encodeToString(byteArray17);
        byte[] byteArray27 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean28 = base32_12.containsAlphabetOrPad(byteArray27);
        byte[] byteArray29 = base32_10.encode(byteArray27);
        java.lang.Object obj30 = base32_5.encode((java.lang.Object) byteArray29);
        byte[] byteArray33 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_35 = new org.apache.commons.codec.binary.Base32(0, byteArray33, false);
        org.apache.commons.codec.binary.Base32 base32_37 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean39 = base32_37.isInAlphabet("");
        byte[] byteArray42 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_44 = new org.apache.commons.codec.binary.Base32(0, byteArray42, false);
        java.lang.String str45 = base32_37.encodeToString(byteArray42);
        byte[] byteArray52 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean53 = base32_37.containsAlphabetOrPad(byteArray52);
        byte[] byteArray54 = base32_35.encode(byteArray52);
        java.lang.String str55 = base32_5.encodeAsString(byteArray54);
        byte[] byteArray58 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_60 = new org.apache.commons.codec.binary.Base32(0, byteArray58, false);
        org.apache.commons.codec.binary.Base32 base32_62 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean64 = base32_62.isInAlphabet("");
        byte[] byteArray67 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_69 = new org.apache.commons.codec.binary.Base32(0, byteArray67, false);
        java.lang.String str70 = base32_62.encodeToString(byteArray67);
        byte[] byteArray77 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean78 = base32_62.containsAlphabetOrPad(byteArray77);
        byte[] byteArray79 = base32_60.encode(byteArray77);
        byte[] byteArray85 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str86 = base32_60.encodeToString(byteArray85);
        byte[] byteArray87 = base32_5.decode(byteArray85);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base32 base32_89 = new org.apache.commons.codec.binary.Base32(61, byteArray85, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain Base32 characters: [d=???]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "CG======" + "'", str20, "CG======");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[100]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "CG======" + "'", str45, "CG======");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "JVIUCUKBLJAUCTKRHU6T2PJ5HU======" + "'", str55, "JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[100]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[100]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "CG======" + "'", str70, "CG======");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "MQ6QUCQB" + "'", str86, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        context7.currentLinePos = (-1);
        byte[] byteArray14 = context7.buffer;
        context7.ibitWorkArea = (-1);
        context7.lbitWorkArea = 64;
        long long19 = context7.lbitWorkArea;
        int int20 = context7.pos;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 64L + "'", long19 == 64L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        byte[] byteArray9 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_11 = new org.apache.commons.codec.binary.Base32(0, byteArray9, false);
        int int12 = base32_11.lineLength;
        byte[] byteArray14 = base32_11.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str15 = base32_4.encodeToString(byteArray14);
        byte[] byteArray18 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_20 = new org.apache.commons.codec.binary.Base32(0, byteArray18, false);
        org.apache.commons.codec.binary.Base32 base32_22 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean24 = base32_22.isInAlphabet("");
        byte[] byteArray27 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_29 = new org.apache.commons.codec.binary.Base32(0, byteArray27, false);
        java.lang.String str30 = base32_22.encodeToString(byteArray27);
        byte[] byteArray37 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean38 = base32_22.containsAlphabetOrPad(byteArray37);
        byte[] byteArray39 = base32_20.encode(byteArray37);
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str46 = base32_20.encodeToString(byteArray45);
        java.lang.Object obj47 = base32_4.decode((java.lang.Object) byteArray45);
        org.apache.commons.codec.EncoderException encoderException49 = new org.apache.commons.codec.EncoderException("hi!");
        org.apache.commons.codec.EncoderException encoderException51 = new org.apache.commons.codec.EncoderException("");
        org.apache.commons.codec.EncoderException encoderException52 = new org.apache.commons.codec.EncoderException((java.lang.Throwable) encoderException51);
        encoderException49.addSuppressed((java.lang.Throwable) encoderException52);
        java.lang.Throwable[] throwableArray54 = encoderException49.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj55 = base32_4.decode((java.lang.Object) encoderException49);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "EEEA====" + "'", str15, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "CG======" + "'", str30, "CG======");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "MQ6QUCQB" + "'", str46, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(throwableArray54);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) 1);
        byte byte2 = base32_1.pad;
        org.apache.commons.codec.binary.BaseNCodec.Context context4 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray5 = base32_1.ensureBufferSize((int) '#', context4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 1 + "'", byte2 == (byte) 1);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        byte[] byteArray7 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32(0, byteArray7, false);
        org.apache.commons.codec.binary.Base32 base32_11 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean13 = base32_11.isInAlphabet("");
        byte[] byteArray16 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_18 = new org.apache.commons.codec.binary.Base32(0, byteArray16, false);
        java.lang.String str19 = base32_11.encodeToString(byteArray16);
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean27 = base32_11.containsAlphabetOrPad(byteArray26);
        byte[] byteArray28 = base32_9.encode(byteArray26);
        java.lang.Object obj29 = base32_4.encode((java.lang.Object) byteArray28);
        java.lang.Class<?> wildcardClass30 = byteArray28.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CG======" + "'", str19, "CG======");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(false);
        org.apache.commons.codec.binary.Base32 base32_3 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray8);
        byte[] byteArray10 = base32_3.encode(byteArray8);
        boolean boolean11 = base32_1.containsAlphabetOrPad(byteArray10);
        byte[] byteArray14 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(0, byteArray14, false);
        int int17 = base32_16.lineLength;
        byte byte18 = base32_16.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context19 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean20 = base32_16.hasData(context19);
        context19.pos = 0;
        int int23 = context19.readPos;
        byte[] byteArray26 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_28 = new org.apache.commons.codec.binary.Base32(0, byteArray26, false);
        org.apache.commons.codec.binary.Base32 base32_30 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean32 = base32_30.isInAlphabet("");
        byte[] byteArray35 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_37 = new org.apache.commons.codec.binary.Base32(0, byteArray35, false);
        java.lang.String str38 = base32_30.encodeToString(byteArray35);
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean46 = base32_30.containsAlphabetOrPad(byteArray45);
        byte[] byteArray47 = base32_28.encode(byteArray45);
        byte[] byteArray53 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str54 = base32_28.encodeToString(byteArray53);
        context19.buffer = byteArray53;
        org.apache.commons.codec.binary.BaseNCodec.Context context58 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        long long59 = context58.lbitWorkArea;
        base32_1.decode(byteArray53, 0, (int) (byte) 0, context58);
        byte[] byteArray61 = context58.buffer;
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + byte18 + "' != '" + (byte) 61 + "'", byte18 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "CG======" + "'", str38, "CG======");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "MQ6QUCQB" + "'", str54, "MQ6QUCQB");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNull(byteArray61);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        context7.currentLinePos = (-1);
        context7.eof = false;
        int int16 = context7.currentLinePos;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet("CG======");
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        byte[] byteArray13 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_15 = new org.apache.commons.codec.binary.Base32(0, byteArray13, false);
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean19 = base32_17.isInAlphabet("");
        byte[] byteArray22 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32(0, byteArray22, false);
        java.lang.String str25 = base32_17.encodeToString(byteArray22);
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean33 = base32_17.containsAlphabetOrPad(byteArray32);
        byte[] byteArray34 = base32_15.encode(byteArray32);
        java.lang.Object obj35 = base32_10.encode((java.lang.Object) byteArray34);
        byte[] byteArray38 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_40 = new org.apache.commons.codec.binary.Base32(0, byteArray38, false);
        org.apache.commons.codec.binary.Base32 base32_42 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean44 = base32_42.isInAlphabet("");
        byte[] byteArray47 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_49 = new org.apache.commons.codec.binary.Base32(0, byteArray47, false);
        java.lang.String str50 = base32_42.encodeToString(byteArray47);
        byte[] byteArray57 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean58 = base32_42.containsAlphabetOrPad(byteArray57);
        byte[] byteArray59 = base32_40.encode(byteArray57);
        java.lang.String str60 = base32_10.encodeAsString(byteArray59);
        boolean boolean62 = base32_1.isInAlphabet(byteArray59, false);
        byte[] byteArray64 = base32_1.decode("");
        org.apache.commons.codec.binary.BaseNCodec.Context context65 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context65.ibitWorkArea = (byte) 61;
        long long68 = context65.lbitWorkArea;
        int int69 = context65.modulus;
        boolean boolean70 = base32_1.hasData(context65);
        context65.lbitWorkArea = '#';
        int int73 = context65.currentLinePos;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CG======" + "'", str25, "CG======");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "CG======" + "'", str50, "CG======");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "JVIUCUKBLJAUCTKRHU6T2PJ5HU======" + "'", str60, "JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) -1);
        org.apache.commons.codec.binary.Base32 base32_3 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean5 = base32_3.isInAlphabet("");
        byte[] byteArray7 = base32_3.decode("MQ6QUCQB");
        byte[] byteArray8 = base32_1.decode(byteArray7);
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        int int14 = base32_13.lineLength;
        byte byte15 = base32_13.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context16 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean17 = base32_13.hasData(context16);
        int int18 = context16.ibitWorkArea;
        byte[] byteArray19 = context16.buffer;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj20 = base32_1.decode((java.lang.Object) context16);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-74, -115, -81, 51, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-38]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 61 + "'", byte15 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(byteArray19);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(0, byteArray1);
        byte[] byteArray5 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32(0, byteArray5, false);
        int int8 = base32_7.lineLength;
        byte byte9 = base32_7.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context10 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean11 = base32_7.hasData(context10);
        context10.pos = 0;
        int int14 = context10.readPos;
        context10.currentLinePos = (-1);
        byte[] byteArray17 = context10.buffer;
        context10.ibitWorkArea = (-1);
        int int20 = context10.pos;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj21 = base32_2.encode((java.lang.Object) int20);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 61 + "'", byte9 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(false, (byte) 1);
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32(true, (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj6 = base32_2.decode((java.lang.Object) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(true, (byte) 61);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        context7.currentLinePos = (-1);
        context7.eof = false;
        int int16 = context7.readPos;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean12 = base32_10.isInAlphabet("");
        byte[] byteArray15 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(0, byteArray15, false);
        java.lang.String str18 = base32_10.encodeToString(byteArray15);
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean26 = base32_10.containsAlphabetOrPad(byteArray25);
        byte[] byteArray27 = base32_4.encode(byteArray25);
        org.apache.commons.codec.binary.Base32 base32_29 = new org.apache.commons.codec.binary.Base32(0);
        byte[] byteArray32 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_34 = new org.apache.commons.codec.binary.Base32(0, byteArray32, false);
        int int35 = base32_34.lineLength;
        byte byte36 = base32_34.PAD;
        byte[] byteArray39 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_41 = new org.apache.commons.codec.binary.Base32(0, byteArray39, false);
        int int42 = base32_41.lineLength;
        byte[] byteArray44 = base32_41.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str45 = base32_34.encodeToString(byteArray44);
        byte[] byteArray46 = base32_29.encode(byteArray44);
        byte[] byteArray47 = base32_4.decode(byteArray46);
        org.apache.commons.codec.EncoderException encoderException50 = new org.apache.commons.codec.EncoderException("");
        java.lang.Throwable[] throwableArray51 = encoderException50.getSuppressed();
        org.apache.commons.codec.EncoderException encoderException52 = new org.apache.commons.codec.EncoderException("", (java.lang.Throwable) encoderException50);
        org.apache.commons.codec.DecoderException decoderException53 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) encoderException52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj54 = base32_4.encode((java.lang.Object) encoderException52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CG======" + "'", str18, "CG======");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + byte36 + "' != '" + (byte) 61 + "'", byte36 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "EEEA====" + "'", str45, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[33, 8]");
        org.junit.Assert.assertNotNull(throwableArray51);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(false);
        byte[] byteArray5 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32(0, byteArray5, false);
        int int8 = base32_7.lineLength;
        byte byte9 = base32_7.PAD;
        byte[] byteArray12 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_14 = new org.apache.commons.codec.binary.Base32(0, byteArray12, false);
        int int15 = base32_14.lineLength;
        byte[] byteArray17 = base32_14.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str18 = base32_7.encodeToString(byteArray17);
        byte[] byteArray19 = base32_2.encode(byteArray17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base32 base32_22 = new org.apache.commons.codec.binary.Base32((int) (short) 100, byteArray19, false, (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain Base32 characters: [EEEA====]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 61 + "'", byte9 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "EEEA====" + "'", str18, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[69, 69, 69, 65, 61, 61, 61, 61]");
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet("CG======");
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        byte[] byteArray13 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_15 = new org.apache.commons.codec.binary.Base32(0, byteArray13, false);
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean19 = base32_17.isInAlphabet("");
        byte[] byteArray22 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32(0, byteArray22, false);
        java.lang.String str25 = base32_17.encodeToString(byteArray22);
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean33 = base32_17.containsAlphabetOrPad(byteArray32);
        byte[] byteArray34 = base32_15.encode(byteArray32);
        java.lang.Object obj35 = base32_10.encode((java.lang.Object) byteArray34);
        byte[] byteArray38 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_40 = new org.apache.commons.codec.binary.Base32(0, byteArray38, false);
        org.apache.commons.codec.binary.Base32 base32_42 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean44 = base32_42.isInAlphabet("");
        byte[] byteArray47 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_49 = new org.apache.commons.codec.binary.Base32(0, byteArray47, false);
        java.lang.String str50 = base32_42.encodeToString(byteArray47);
        byte[] byteArray57 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean58 = base32_42.containsAlphabetOrPad(byteArray57);
        byte[] byteArray59 = base32_40.encode(byteArray57);
        java.lang.String str60 = base32_10.encodeAsString(byteArray59);
        boolean boolean62 = base32_1.isInAlphabet(byteArray59, false);
        byte[] byteArray64 = base32_1.decode("");
        org.apache.commons.codec.binary.BaseNCodec.Context context65 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context65.ibitWorkArea = (byte) 61;
        long long68 = context65.lbitWorkArea;
        int int69 = context65.modulus;
        boolean boolean70 = base32_1.hasData(context65);
        context65.readPos = 8192;
        int int73 = context65.currentLinePos;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CG======" + "'", str25, "CG======");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "CG======" + "'", str50, "CG======");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "JVIUCUKBLJAUCTKRHU6T2PJ5HU======" + "'", str60, "JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(true, (byte) 1);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        byte[] byteArray14 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(0, byteArray14, false);
        org.apache.commons.codec.binary.Base32 base32_18 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean20 = base32_18.isInAlphabet("");
        byte[] byteArray23 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_25 = new org.apache.commons.codec.binary.Base32(0, byteArray23, false);
        java.lang.String str26 = base32_18.encodeToString(byteArray23);
        byte[] byteArray33 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean34 = base32_18.containsAlphabetOrPad(byteArray33);
        byte[] byteArray35 = base32_16.encode(byteArray33);
        byte[] byteArray41 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str42 = base32_16.encodeToString(byteArray41);
        context7.buffer = byteArray41;
        int int44 = context7.currentLinePos;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "CG======" + "'", str26, "CG======");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "MQ6QUCQB" + "'", str42, "MQ6QUCQB");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        int int12 = context7.modulus;
        int int13 = context7.ibitWorkArea;
        boolean boolean14 = context7.eof;
        long long15 = context7.lbitWorkArea;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(false);
        byte[] byteArray4 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32(0, byteArray4, false);
        int int7 = base32_6.lineLength;
        byte byte8 = base32_6.PAD;
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        int int14 = base32_13.lineLength;
        byte[] byteArray16 = base32_13.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str17 = base32_6.encodeToString(byteArray16);
        byte[] byteArray18 = base32_1.encode(byteArray16);
        org.apache.commons.codec.binary.Base32 base32_20 = new org.apache.commons.codec.binary.Base32((byte) 100);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_26 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray25);
        byte[] byteArray27 = base32_20.encode(byteArray25);
        org.apache.commons.codec.binary.BaseNCodec.Context context30 = null;
        // The following exception was thrown during execution in test generation
        try {
            base32_1.decode(byteArray27, (int) (short) 10, 10, context30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 61 + "'", byte8 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "EEEA====" + "'", str17, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[65, 69, 65, 65, 85, 100, 100, 100]");
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32((int) (short) -1, byteArray1);
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj5 = base32_2.decode((java.lang.Object) base32_4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet("CG======");
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        byte[] byteArray13 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_15 = new org.apache.commons.codec.binary.Base32(0, byteArray13, false);
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean19 = base32_17.isInAlphabet("");
        byte[] byteArray22 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32(0, byteArray22, false);
        java.lang.String str25 = base32_17.encodeToString(byteArray22);
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean33 = base32_17.containsAlphabetOrPad(byteArray32);
        byte[] byteArray34 = base32_15.encode(byteArray32);
        java.lang.Object obj35 = base32_10.encode((java.lang.Object) byteArray34);
        byte[] byteArray38 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_40 = new org.apache.commons.codec.binary.Base32(0, byteArray38, false);
        org.apache.commons.codec.binary.Base32 base32_42 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean44 = base32_42.isInAlphabet("");
        byte[] byteArray47 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_49 = new org.apache.commons.codec.binary.Base32(0, byteArray47, false);
        java.lang.String str50 = base32_42.encodeToString(byteArray47);
        byte[] byteArray57 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean58 = base32_42.containsAlphabetOrPad(byteArray57);
        byte[] byteArray59 = base32_40.encode(byteArray57);
        java.lang.String str60 = base32_10.encodeAsString(byteArray59);
        boolean boolean62 = base32_1.isInAlphabet(byteArray59, false);
        byte[] byteArray64 = base32_1.decode("");
        org.apache.commons.codec.binary.BaseNCodec.Context context65 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context65.ibitWorkArea = (byte) 61;
        long long68 = context65.lbitWorkArea;
        int int69 = context65.modulus;
        boolean boolean70 = base32_1.hasData(context65);
        context65.readPos = 8192;
        int int73 = context65.modulus;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CG======" + "'", str25, "CG======");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "CG======" + "'", str50, "CG======");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "JVIUCUKBLJAUCTKRHU6T2PJ5HU======" + "'", str60, "JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(true, (byte) -1);
        byte byte3 = base32_2.pad;
        byte byte4 = base32_2.PAD;
        byte[] byteArray7 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32(0, byteArray7, false);
        byte[] byteArray12 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_14 = new org.apache.commons.codec.binary.Base32(0, byteArray12, false);
        byte[] byteArray15 = base32_9.decode(byteArray12);
        java.lang.String str16 = base32_2.encodeAsString(byteArray15);
        byte[] byteArray18 = base32_2.decode("CGUGK2G1");
        byte[] byteArray19 = null;
        byte[] byteArray20 = base32_2.decode(byteArray19);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 61 + "'", byte4 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertNull(byteArray20);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        byte[] byteArray9 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_11 = new org.apache.commons.codec.binary.Base32(0, byteArray9, false);
        int int12 = base32_11.lineLength;
        byte[] byteArray14 = base32_11.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str15 = base32_4.encodeToString(byteArray14);
        int int16 = base32_4.getDefaultBufferSize();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "EEEA====" + "'", str15, "EEEA====");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8192 + "'", int16 == 8192);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        int int2 = base32_1.lineLength;
        byte[] byteArray5 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32(0, byteArray5, false);
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean11 = base32_9.isInAlphabet("");
        byte[] byteArray14 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(0, byteArray14, false);
        java.lang.String str17 = base32_9.encodeToString(byteArray14);
        byte[] byteArray24 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean25 = base32_9.containsAlphabetOrPad(byteArray24);
        byte[] byteArray26 = base32_7.encode(byteArray24);
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str33 = base32_7.encodeToString(byteArray32);
        byte[] byteArray38 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_40 = new org.apache.commons.codec.binary.Base32(0, byteArray38, false);
        int int41 = base32_40.lineLength;
        byte byte42 = base32_40.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context43 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean44 = base32_40.hasData(context43);
        context43.pos = 0;
        int int47 = context43.readPos;
        context43.currentLinePos = (-1);
        byte[] byteArray50 = context43.buffer;
        base32_1.encode(byteArray32, 64, 0, context43);
        org.apache.commons.codec.EncoderException encoderException53 = new org.apache.commons.codec.EncoderException("");
        org.apache.commons.codec.EncoderException encoderException54 = new org.apache.commons.codec.EncoderException((java.lang.Throwable) encoderException53);
        org.apache.commons.codec.EncoderException encoderException56 = new org.apache.commons.codec.EncoderException("");
        encoderException53.addSuppressed((java.lang.Throwable) encoderException56);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj58 = base32_1.encode((java.lang.Object) encoderException53);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CG======" + "'", str17, "CG======");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "MQ6QUCQB" + "'", str33, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + byte42 + "' != '" + (byte) 61 + "'", byte42 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(byteArray50);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        int int12 = context7.modulus;
        int int13 = context7.ibitWorkArea;
        context7.pos = 1;
        int int16 = context7.currentLinePos;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) 100);
        boolean boolean3 = base32_1.isInAlphabet("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray5 = base32_1.decode("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte byte6 = base32_1.PAD;
        org.apache.commons.codec.binary.Base32 base32_8 = new org.apache.commons.codec.binary.Base32(true);
        int int9 = base32_8.lineLength;
        byte[] byteArray12 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_14 = new org.apache.commons.codec.binary.Base32(0, byteArray12, false);
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean18 = base32_16.isInAlphabet("");
        byte[] byteArray21 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_23 = new org.apache.commons.codec.binary.Base32(0, byteArray21, false);
        java.lang.String str24 = base32_16.encodeToString(byteArray21);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean32 = base32_16.containsAlphabetOrPad(byteArray31);
        byte[] byteArray33 = base32_14.encode(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str40 = base32_14.encodeToString(byteArray39);
        byte[] byteArray45 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_47 = new org.apache.commons.codec.binary.Base32(0, byteArray45, false);
        int int48 = base32_47.lineLength;
        byte byte49 = base32_47.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context50 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean51 = base32_47.hasData(context50);
        context50.pos = 0;
        int int54 = context50.readPos;
        context50.currentLinePos = (-1);
        byte[] byteArray57 = context50.buffer;
        base32_8.encode(byteArray39, 64, 0, context50);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj59 = base32_1.encode((java.lang.Object) 64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "CG======" + "'", str24, "CG======");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "MQ6QUCQB" + "'", str40, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + byte49 + "' != '" + (byte) 61 + "'", byte49 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNull(byteArray57);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        long long9 = context7.lbitWorkArea;
        context7.modulus = 64;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(true, (byte) -1);
        byte byte3 = base32_2.pad;
        org.apache.commons.codec.binary.BaseNCodec.Context context4 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context4.ibitWorkArea = (byte) 61;
        context4.currentLinePos = 'a';
        context4.ibitWorkArea = '4';
        org.apache.commons.codec.binary.BaseNCodec.Context context11 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context11.ibitWorkArea = (byte) 61;
        context11.currentLinePos = 'a';
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_21 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray20);
        context11.buffer = byteArray20;
        context4.buffer = byteArray20;
        java.lang.String str24 = base32_2.encodeAsString(byteArray20);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 0, 10]");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ufffd\ufffd\ufffd" + "'", str24, "\ufffd\ufffd\ufffd");
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet("CG======");
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        byte[] byteArray13 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_15 = new org.apache.commons.codec.binary.Base32(0, byteArray13, false);
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean19 = base32_17.isInAlphabet("");
        byte[] byteArray22 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32(0, byteArray22, false);
        java.lang.String str25 = base32_17.encodeToString(byteArray22);
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean33 = base32_17.containsAlphabetOrPad(byteArray32);
        byte[] byteArray34 = base32_15.encode(byteArray32);
        java.lang.Object obj35 = base32_10.encode((java.lang.Object) byteArray34);
        byte[] byteArray38 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_40 = new org.apache.commons.codec.binary.Base32(0, byteArray38, false);
        org.apache.commons.codec.binary.Base32 base32_42 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean44 = base32_42.isInAlphabet("");
        byte[] byteArray47 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_49 = new org.apache.commons.codec.binary.Base32(0, byteArray47, false);
        java.lang.String str50 = base32_42.encodeToString(byteArray47);
        byte[] byteArray57 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean58 = base32_42.containsAlphabetOrPad(byteArray57);
        byte[] byteArray59 = base32_40.encode(byteArray57);
        java.lang.String str60 = base32_10.encodeAsString(byteArray59);
        boolean boolean62 = base32_1.isInAlphabet(byteArray59, false);
        byte[] byteArray64 = base32_1.decode("");
        org.apache.commons.codec.binary.BaseNCodec.Context context65 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context65.ibitWorkArea = (byte) 61;
        long long68 = context65.lbitWorkArea;
        int int69 = context65.modulus;
        boolean boolean70 = base32_1.hasData(context65);
        byte[] byteArray73 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_75 = new org.apache.commons.codec.binary.Base32(0, byteArray73, false);
        int int76 = base32_75.lineLength;
        byte byte77 = base32_75.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context78 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean79 = base32_75.hasData(context78);
        int int80 = context78.ibitWorkArea;
        context78.readPos = 0;
        context78.eof = true;
        org.apache.commons.codec.binary.Base32 base32_87 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean89 = base32_87.isInAlphabet("");
        byte[] byteArray92 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_94 = new org.apache.commons.codec.binary.Base32(0, byteArray92, false);
        java.lang.String str95 = base32_87.encodeToString(byteArray92);
        org.apache.commons.codec.binary.Base32 base32_97 = new org.apache.commons.codec.binary.Base32((int) (byte) 1, byteArray92, true);
        context78.buffer = byteArray92;
        byte[] byteArray99 = base32_1.encode(byteArray92);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CG======" + "'", str25, "CG======");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "CG======" + "'", str50, "CG======");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "JVIUCUKBLJAUCTKRHU6T2PJ5HU======" + "'", str60, "JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[100]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + byte77 + "' != '" + (byte) 61 + "'", byte77 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[100]");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "CG======" + "'", str95, "CG======");
        org.junit.Assert.assertNotNull(byteArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray99), "[67, 71, 61, 61, 61, 61, 61, 61]");
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean8 = base32_6.isInAlphabet("");
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        java.lang.String str14 = base32_6.encodeToString(byteArray11);
        byte[] byteArray21 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean22 = base32_6.containsAlphabetOrPad(byteArray21);
        byte[] byteArray23 = base32_4.encode(byteArray21);
        byte[] byteArray24 = null;
        byte[] byteArray25 = base32_4.decode(byteArray24);
        org.apache.commons.codec.binary.Base32 base32_27 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean29 = base32_27.isInAlphabet("");
        byte[] byteArray32 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_34 = new org.apache.commons.codec.binary.Base32(0, byteArray32, false);
        java.lang.String str35 = base32_27.encodeToString(byteArray32);
        byte[] byteArray40 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_42 = new org.apache.commons.codec.binary.Base32(0, byteArray40, false);
        int int43 = base32_42.lineLength;
        byte byte44 = base32_42.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context45 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean46 = base32_42.hasData(context45);
        int int47 = base32_4.readResults(byteArray32, (int) (short) 10, (int) (short) -1, context45);
        org.apache.commons.codec.EncoderException encoderException49 = new org.apache.commons.codec.EncoderException("hi!");
        java.lang.Throwable[] throwableArray50 = encoderException49.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj51 = base32_4.decode((java.lang.Object) throwableArray50);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CG======" + "'", str14, "CG======");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "CG======" + "'", str35, "CG======");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[100]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + byte44 + "' != '" + (byte) 61 + "'", byte44 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(throwableArray50);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(false);
        byte[] byteArray4 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32(0, byteArray4, false);
        int int7 = base32_6.lineLength;
        byte byte8 = base32_6.PAD;
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        int int14 = base32_13.lineLength;
        byte[] byteArray16 = base32_13.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str17 = base32_6.encodeToString(byteArray16);
        byte[] byteArray18 = base32_1.encode(byteArray16);
        byte[] byteArray21 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_23 = new org.apache.commons.codec.binary.Base32(0, byteArray21, false);
        org.apache.commons.codec.binary.Base32 base32_25 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean27 = base32_25.isInAlphabet("");
        byte[] byteArray30 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_32 = new org.apache.commons.codec.binary.Base32(0, byteArray30, false);
        java.lang.String str33 = base32_25.encodeToString(byteArray30);
        byte[] byteArray40 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean41 = base32_25.containsAlphabetOrPad(byteArray40);
        byte[] byteArray42 = base32_23.encode(byteArray40);
        byte[] byteArray43 = null;
        byte[] byteArray44 = base32_23.decode(byteArray43);
        org.apache.commons.codec.binary.Base32 base32_46 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean48 = base32_46.isInAlphabet("");
        byte[] byteArray51 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_53 = new org.apache.commons.codec.binary.Base32(0, byteArray51, false);
        java.lang.String str54 = base32_46.encodeToString(byteArray51);
        byte[] byteArray59 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_61 = new org.apache.commons.codec.binary.Base32(0, byteArray59, false);
        int int62 = base32_61.lineLength;
        byte byte63 = base32_61.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context64 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean65 = base32_61.hasData(context64);
        int int66 = base32_23.readResults(byteArray51, (int) (short) 10, (int) (short) -1, context64);
        byte[] byteArray71 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_73 = new org.apache.commons.codec.binary.Base32(0, byteArray71, false);
        int int74 = base32_73.lineLength;
        byte byte75 = base32_73.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context76 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean77 = base32_73.hasData(context76);
        int int78 = context76.ibitWorkArea;
        context76.readPos = 0;
        int int81 = base32_1.readResults(byteArray51, 100, (int) (byte) 1, context76);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 61 + "'", byte8 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "EEEA====" + "'", str17, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "CG======" + "'", str33, "CG======");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNull(byteArray44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "CG======" + "'", str54, "CG======");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[100]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + byte63 + "' != '" + (byte) 61 + "'", byte63 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[100]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + byte75 + "' != '" + (byte) 61 + "'", byte75 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        context7.currentLinePos = (-1);
        context7.eof = true;
        context7.modulus = (byte) 100;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(true, (byte) -1);
        org.apache.commons.codec.EncoderException encoderException4 = new org.apache.commons.codec.EncoderException("hi!");
        java.lang.Throwable[] throwableArray5 = encoderException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = encoderException4.getSuppressed();
        org.apache.commons.codec.EncoderException encoderException8 = new org.apache.commons.codec.EncoderException("");
        java.lang.Throwable[] throwableArray9 = encoderException8.getSuppressed();
        encoderException4.addSuppressed((java.lang.Throwable) encoderException8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj11 = base32_2.decode((java.lang.Object) encoderException4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) 100);
        boolean boolean3 = base32_1.isInAlphabet("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32(false);
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        int int11 = base32_10.lineLength;
        byte byte12 = base32_10.PAD;
        byte[] byteArray15 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(0, byteArray15, false);
        int int18 = base32_17.lineLength;
        byte[] byteArray20 = base32_17.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str21 = base32_10.encodeToString(byteArray20);
        byte[] byteArray22 = base32_5.encode(byteArray20);
        byte[] byteArray27 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_29 = new org.apache.commons.codec.binary.Base32(0, byteArray27, false);
        int int30 = base32_29.lineLength;
        byte byte31 = base32_29.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context32 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean33 = base32_29.hasData(context32);
        context32.pos = 0;
        int int36 = context32.readPos;
        byte[] byteArray39 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_41 = new org.apache.commons.codec.binary.Base32(0, byteArray39, false);
        org.apache.commons.codec.binary.Base32 base32_43 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean45 = base32_43.isInAlphabet("");
        byte[] byteArray48 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_50 = new org.apache.commons.codec.binary.Base32(0, byteArray48, false);
        java.lang.String str51 = base32_43.encodeToString(byteArray48);
        byte[] byteArray58 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean59 = base32_43.containsAlphabetOrPad(byteArray58);
        byte[] byteArray60 = base32_41.encode(byteArray58);
        byte[] byteArray66 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str67 = base32_41.encodeToString(byteArray66);
        context32.buffer = byteArray66;
        java.lang.String str69 = context32.toString();
        context32.eof = false;
        int int72 = context32.readPos;
        int int73 = base32_1.readResults(byteArray22, (int) (short) 1, (int) (byte) 100, context32);
        byte[] byteArray76 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_78 = new org.apache.commons.codec.binary.Base32(0, byteArray76, false);
        int int79 = base32_78.lineLength;
        byte[] byteArray81 = base32_78.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        byte[] byteArray86 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_88 = new org.apache.commons.codec.binary.Base32(0, byteArray86, false);
        int int89 = base32_88.lineLength;
        byte byte90 = base32_88.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context91 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean92 = base32_88.hasData(context91);
        context91.pos = 0;
        int int95 = context91.readPos;
        context91.currentLinePos = (-1);
        byte[] byteArray98 = context91.buffer;
        int int99 = base32_1.readResults(byteArray81, 0, (int) 'a', context91);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 61 + "'", byte12 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "EEEA====" + "'", str21, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + byte31 + "' != '" + (byte) 61 + "'", byte31 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "CG======" + "'", str51, "CG======");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "MQ6QUCQB" + "'", str67, "MQ6QUCQB");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str69, "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[100]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[33, 8]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[100]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + byte90 + "' != '" + (byte) 61 + "'", byte90 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNull(byteArray98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        byte[] byteArray9 = null;
        context7.buffer = byteArray9;
        context7.currentLinePos = (short) 100;
        long long13 = context7.lbitWorkArea;
        context7.readPos = (short) 100;
        context7.modulus = (byte) 10;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet("CG======");
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        byte[] byteArray13 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_15 = new org.apache.commons.codec.binary.Base32(0, byteArray13, false);
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean19 = base32_17.isInAlphabet("");
        byte[] byteArray22 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32(0, byteArray22, false);
        java.lang.String str25 = base32_17.encodeToString(byteArray22);
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean33 = base32_17.containsAlphabetOrPad(byteArray32);
        byte[] byteArray34 = base32_15.encode(byteArray32);
        java.lang.Object obj35 = base32_10.encode((java.lang.Object) byteArray34);
        byte[] byteArray38 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_40 = new org.apache.commons.codec.binary.Base32(0, byteArray38, false);
        org.apache.commons.codec.binary.Base32 base32_42 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean44 = base32_42.isInAlphabet("");
        byte[] byteArray47 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_49 = new org.apache.commons.codec.binary.Base32(0, byteArray47, false);
        java.lang.String str50 = base32_42.encodeToString(byteArray47);
        byte[] byteArray57 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean58 = base32_42.containsAlphabetOrPad(byteArray57);
        byte[] byteArray59 = base32_40.encode(byteArray57);
        java.lang.String str60 = base32_10.encodeAsString(byteArray59);
        boolean boolean62 = base32_1.isInAlphabet(byteArray59, false);
        byte byte63 = base32_1.PAD;
        java.lang.Object obj64 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj65 = base32_1.decode(obj64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CG======" + "'", str25, "CG======");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "CG======" + "'", str50, "CG======");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "JVIUCUKBLJAUCTKRHU6T2PJ5HU======" + "'", str60, "JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + byte63 + "' != '" + (byte) 61 + "'", byte63 == (byte) 61);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32((int) (short) -1, byteArray1);
        boolean boolean4 = base32_2.isInAlphabet((byte) 100);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet("CG======");
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        byte[] byteArray13 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_15 = new org.apache.commons.codec.binary.Base32(0, byteArray13, false);
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean19 = base32_17.isInAlphabet("");
        byte[] byteArray22 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32(0, byteArray22, false);
        java.lang.String str25 = base32_17.encodeToString(byteArray22);
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean33 = base32_17.containsAlphabetOrPad(byteArray32);
        byte[] byteArray34 = base32_15.encode(byteArray32);
        java.lang.Object obj35 = base32_10.encode((java.lang.Object) byteArray34);
        byte[] byteArray38 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_40 = new org.apache.commons.codec.binary.Base32(0, byteArray38, false);
        org.apache.commons.codec.binary.Base32 base32_42 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean44 = base32_42.isInAlphabet("");
        byte[] byteArray47 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_49 = new org.apache.commons.codec.binary.Base32(0, byteArray47, false);
        java.lang.String str50 = base32_42.encodeToString(byteArray47);
        byte[] byteArray57 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean58 = base32_42.containsAlphabetOrPad(byteArray57);
        byte[] byteArray59 = base32_40.encode(byteArray57);
        java.lang.String str60 = base32_10.encodeAsString(byteArray59);
        boolean boolean62 = base32_1.isInAlphabet(byteArray59, false);
        byte byte63 = base32_1.PAD;
        org.apache.commons.codec.binary.Base32 base32_65 = new org.apache.commons.codec.binary.Base32((byte) 100);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_71 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray70);
        byte[] byteArray72 = base32_65.encode(byteArray70);
        org.apache.commons.codec.binary.BaseNCodec.Context context75 = null;
        // The following exception was thrown during execution in test generation
        try {
            base32_1.decode(byteArray72, 64, (int) (byte) 61, context75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CG======" + "'", str25, "CG======");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "CG======" + "'", str50, "CG======");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "JVIUCUKBLJAUCTKRHU6T2PJ5HU======" + "'", str60, "JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + byte63 + "' != '" + (byte) 61 + "'", byte63 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[65, 69, 65, 65, 85, 100, 100, 100]");
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        org.apache.commons.codec.binary.Base32 base32_3 = new org.apache.commons.codec.binary.Base32(false);
        byte[] byteArray6 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_8 = new org.apache.commons.codec.binary.Base32(0, byteArray6, false);
        int int9 = base32_8.lineLength;
        byte byte10 = base32_8.PAD;
        byte[] byteArray13 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_15 = new org.apache.commons.codec.binary.Base32(0, byteArray13, false);
        int int16 = base32_15.lineLength;
        byte[] byteArray18 = base32_15.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str19 = base32_8.encodeToString(byteArray18);
        byte[] byteArray20 = base32_3.encode(byteArray18);
        org.apache.commons.codec.binary.Base32 base32_21 = new org.apache.commons.codec.binary.Base32((int) (short) -1, byteArray18);
        org.apache.commons.codec.binary.Base32 base32_23 = new org.apache.commons.codec.binary.Base32((int) ' ', byteArray18, false);
        org.apache.commons.codec.EncoderException encoderException26 = new org.apache.commons.codec.EncoderException("hi!");
        java.lang.Throwable[] throwableArray27 = encoderException26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = encoderException26.getSuppressed();
        org.apache.commons.codec.EncoderException encoderException30 = new org.apache.commons.codec.EncoderException("");
        java.lang.Throwable[] throwableArray31 = encoderException30.getSuppressed();
        encoderException26.addSuppressed((java.lang.Throwable) encoderException30);
        org.apache.commons.codec.DecoderException decoderException33 = new org.apache.commons.codec.DecoderException("Context[buffer=[1, 0, 10], currentLinePos=97, eof=false, ibitWorkArea=52, lbitWorkArea=0, modulus=0, pos=0, readPos=0]", (java.lang.Throwable) encoderException30);
        org.apache.commons.codec.DecoderException decoderException34 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) encoderException30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj35 = base32_23.decode((java.lang.Object) encoderException30);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 61 + "'", byte10 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "EEEA====" + "'", str19, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean9 = base32_7.isInAlphabet("");
        boolean boolean11 = base32_7.isInAlphabet((byte) 61);
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(true);
        int int14 = base32_13.lineLength;
        byte[] byteArray17 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_19 = new org.apache.commons.codec.binary.Base32(0, byteArray17, false);
        org.apache.commons.codec.binary.Base32 base32_21 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean23 = base32_21.isInAlphabet("");
        byte[] byteArray26 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_28 = new org.apache.commons.codec.binary.Base32(0, byteArray26, false);
        java.lang.String str29 = base32_21.encodeToString(byteArray26);
        byte[] byteArray36 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean37 = base32_21.containsAlphabetOrPad(byteArray36);
        byte[] byteArray38 = base32_19.encode(byteArray36);
        byte[] byteArray44 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str45 = base32_19.encodeToString(byteArray44);
        byte[] byteArray50 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_52 = new org.apache.commons.codec.binary.Base32(0, byteArray50, false);
        int int53 = base32_52.lineLength;
        byte byte54 = base32_52.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context55 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean56 = base32_52.hasData(context55);
        context55.pos = 0;
        int int59 = context55.readPos;
        context55.currentLinePos = (-1);
        byte[] byteArray62 = context55.buffer;
        base32_13.encode(byteArray44, 64, 0, context55);
        int int64 = base32_7.available(context55);
        org.apache.commons.codec.binary.Base32 base32_66 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean68 = base32_66.isInAlphabet("");
        boolean boolean70 = base32_66.isInAlphabet("");
        byte byte71 = base32_66.pad;
        byte[] byteArray77 = new byte[] { (byte) 0, (byte) 10, (byte) 61, (byte) 10, (byte) 0 };
        byte[] byteArray78 = base32_66.encode(byteArray77);
        java.lang.Object obj79 = base32_7.decode((java.lang.Object) byteArray77);
        byte[] byteArray80 = base32_4.encode(byteArray77);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "CG======" + "'", str29, "CG======");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "MQ6QUCQB" + "'", str45, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[100]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + byte54 + "' != '" + (byte) 61 + "'", byte54 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNull(byteArray62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + byte71 + "' != '" + (byte) 61 + "'", byte71 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[0, 10, 61, 10, 0]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[48, 48, 53, 51, 81, 50, 71, 48]");
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[65, 65, 70, 68, 50, 67, 81, 65]");
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        byte[] byteArray14 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(0, byteArray14, false);
        org.apache.commons.codec.binary.Base32 base32_18 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean20 = base32_18.isInAlphabet("");
        byte[] byteArray23 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_25 = new org.apache.commons.codec.binary.Base32(0, byteArray23, false);
        java.lang.String str26 = base32_18.encodeToString(byteArray23);
        byte[] byteArray33 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean34 = base32_18.containsAlphabetOrPad(byteArray33);
        byte[] byteArray35 = base32_16.encode(byteArray33);
        byte[] byteArray41 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str42 = base32_16.encodeToString(byteArray41);
        context7.buffer = byteArray41;
        java.lang.String str44 = context7.toString();
        context7.eof = false;
        int int47 = context7.currentLinePos;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "CG======" + "'", str26, "CG======");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "MQ6QUCQB" + "'", str42, "MQ6QUCQB");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str44, "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        int int12 = context7.modulus;
        int int13 = context7.ibitWorkArea;
        context7.modulus = 0;
        long long16 = context7.lbitWorkArea;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(0);
        byte[] byteArray4 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32(0, byteArray4, false);
        int int7 = base32_6.lineLength;
        byte byte8 = base32_6.PAD;
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        int int14 = base32_13.lineLength;
        byte[] byteArray16 = base32_13.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str17 = base32_6.encodeToString(byteArray16);
        byte[] byteArray18 = base32_1.encode(byteArray16);
        byte[] byteArray20 = base32_1.decode("hi!");
        org.apache.commons.codec.binary.Base32 base32_22 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean24 = base32_22.isInAlphabet("");
        boolean boolean26 = base32_22.isInAlphabet("");
        byte byte27 = base32_22.pad;
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 10, (byte) 61, (byte) 10, (byte) 0 };
        byte[] byteArray34 = base32_22.encode(byteArray33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj35 = base32_1.decode((java.lang.Object) base32_22);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 61 + "'", byte8 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "EEEA====" + "'", str17, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 61 + "'", byte27 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 10, 61, 10, 0]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[48, 48, 53, 51, 81, 50, 71, 48]");
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        byte[] byteArray9 = null;
        context7.buffer = byteArray9;
        context7.ibitWorkArea = '#';
        int int13 = context7.modulus;
        context7.readPos = 64;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        byte byte2 = base32_1.PAD;
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean6 = base32_4.isInAlphabet("");
        byte[] byteArray9 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_11 = new org.apache.commons.codec.binary.Base32(0, byteArray9, false);
        java.lang.String str12 = base32_4.encodeToString(byteArray9);
        byte[] byteArray19 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean20 = base32_4.containsAlphabetOrPad(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_27 = new org.apache.commons.codec.binary.Base32(0, byteArray25, false);
        int int28 = base32_27.lineLength;
        byte byte29 = base32_27.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context30 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean31 = base32_27.hasData(context30);
        int int32 = context30.ibitWorkArea;
        byte[] byteArray33 = context30.buffer;
        // The following exception was thrown during execution in test generation
        try {
            base32_1.decode(byteArray19, (int) (byte) 100, (int) 'a', context30);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 61 + "'", byte2 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CG======" + "'", str12, "CG======");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + byte29 + "' != '" + (byte) 61 + "'", byte29 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(byteArray33);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        byte[] byteArray4 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray4);
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        int int11 = base32_10.lineLength;
        byte[] byteArray13 = base32_10.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        boolean boolean15 = base32_5.isInAlphabet(byteArray13, true);
        org.apache.commons.codec.binary.Base32 base32_18 = new org.apache.commons.codec.binary.Base32(false);
        org.apache.commons.codec.binary.Base32 base32_20 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_26 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray25);
        byte[] byteArray27 = base32_20.encode(byteArray25);
        boolean boolean28 = base32_18.containsAlphabetOrPad(byteArray27);
        byte[] byteArray31 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_33 = new org.apache.commons.codec.binary.Base32(0, byteArray31, false);
        int int34 = base32_33.lineLength;
        byte byte35 = base32_33.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context36 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean37 = base32_33.hasData(context36);
        context36.pos = 0;
        int int40 = context36.readPos;
        byte[] byteArray43 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_45 = new org.apache.commons.codec.binary.Base32(0, byteArray43, false);
        org.apache.commons.codec.binary.Base32 base32_47 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean49 = base32_47.isInAlphabet("");
        byte[] byteArray52 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_54 = new org.apache.commons.codec.binary.Base32(0, byteArray52, false);
        java.lang.String str55 = base32_47.encodeToString(byteArray52);
        byte[] byteArray62 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean63 = base32_47.containsAlphabetOrPad(byteArray62);
        byte[] byteArray64 = base32_45.encode(byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str71 = base32_45.encodeToString(byteArray70);
        context36.buffer = byteArray70;
        org.apache.commons.codec.binary.BaseNCodec.Context context75 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        long long76 = context75.lbitWorkArea;
        base32_18.decode(byteArray70, 0, (int) (byte) 0, context75);
        org.apache.commons.codec.binary.BaseNCodec.Context context78 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context78.ibitWorkArea = (byte) 61;
        context78.currentLinePos = 'a';
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_88 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray87);
        context78.buffer = byteArray87;
        boolean boolean91 = base32_18.isInAlphabet(byteArray87, true);
        org.apache.commons.codec.binary.Base32 base32_92 = new org.apache.commons.codec.binary.Base32((int) (short) -1, byteArray87);
        long long93 = base32_5.getEncodedLength(byteArray87);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[33, 8]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + byte35 + "' != '" + (byte) 61 + "'", byte35 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[100]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "CG======" + "'", str55, "CG======");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "MQ6QUCQB" + "'", str71, "MQ6QUCQB");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[1, 0, 10]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 8L + "'", long93 == 8L);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean8 = base32_6.isInAlphabet("");
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        java.lang.String str14 = base32_6.encodeToString(byteArray11);
        byte[] byteArray21 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean22 = base32_6.containsAlphabetOrPad(byteArray21);
        byte[] byteArray23 = base32_4.encode(byteArray21);
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str30 = base32_4.encodeToString(byteArray29);
        byte[] byteArray32 = base32_4.decode("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray35 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_37 = new org.apache.commons.codec.binary.Base32(0, byteArray35, false);
        java.lang.String str38 = base32_4.encodeAsString(byteArray35);
        boolean boolean40 = base32_4.isInAlphabet((byte) 0);
        org.apache.commons.codec.EncoderException encoderException43 = new org.apache.commons.codec.EncoderException("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.apache.commons.codec.EncoderException encoderException44 = new org.apache.commons.codec.EncoderException("", (java.lang.Throwable) encoderException43);
        java.lang.Object obj45 = base32_4.decode((java.lang.Object) "");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CG======" + "'", str14, "CG======");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "MQ6QUCQB" + "'", str30, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "MQ======" + "'", str38, "MQ======");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(obj45);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean12 = base32_10.isInAlphabet("");
        byte[] byteArray15 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(0, byteArray15, false);
        java.lang.String str18 = base32_10.encodeToString(byteArray15);
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean26 = base32_10.containsAlphabetOrPad(byteArray25);
        byte[] byteArray27 = base32_4.encode(byteArray25);
        org.apache.commons.codec.binary.Base32 base32_29 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean31 = base32_29.isInAlphabet("");
        byte[] byteArray34 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_36 = new org.apache.commons.codec.binary.Base32(0, byteArray34, false);
        java.lang.String str37 = base32_29.encodeToString(byteArray34);
        byte[] byteArray42 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_44 = new org.apache.commons.codec.binary.Base32(0, byteArray42, false);
        int int45 = base32_44.lineLength;
        byte byte46 = base32_44.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context47 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean48 = base32_44.hasData(context47);
        context47.pos = 0;
        int int51 = context47.readPos;
        int int52 = base32_4.readResults(byteArray34, (int) (byte) 10, 0, context47);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CG======" + "'", str18, "CG======");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "CG======" + "'", str37, "CG======");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[100]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + byte46 + "' != '" + (byte) 61 + "'", byte46 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        int int12 = context7.modulus;
        java.lang.String str13 = context7.toString();
        byte[] byteArray14 = context7.buffer;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str13, "Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertNull(byteArray14);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        int int12 = context7.currentLinePos;
        org.apache.commons.codec.binary.Base32 base32_14 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean16 = base32_14.isInAlphabet("");
        byte[] byteArray18 = base32_14.decode("MQ6QUCQB");
        org.apache.commons.codec.binary.Base32 base32_21 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean23 = base32_21.isInAlphabet("");
        byte[] byteArray26 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_28 = new org.apache.commons.codec.binary.Base32(0, byteArray26, false);
        java.lang.String str29 = base32_21.encodeToString(byteArray26);
        byte[] byteArray36 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean37 = base32_21.containsAlphabetOrPad(byteArray36);
        org.apache.commons.codec.binary.Base32 base32_39 = new org.apache.commons.codec.binary.Base32((int) (byte) 0, byteArray36, false);
        boolean boolean40 = base32_14.containsAlphabetOrPad(byteArray36);
        context7.buffer = byteArray36;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-74, -115, -81, 51, 75]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "CG======" + "'", str29, "CG======");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean8 = base32_6.isInAlphabet("");
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        java.lang.String str14 = base32_6.encodeToString(byteArray11);
        byte[] byteArray21 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean22 = base32_6.containsAlphabetOrPad(byteArray21);
        byte[] byteArray23 = base32_4.encode(byteArray21);
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str30 = base32_4.encodeToString(byteArray29);
        byte[] byteArray32 = base32_4.decode("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray35 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_37 = new org.apache.commons.codec.binary.Base32(0, byteArray35, false);
        java.lang.String str38 = base32_4.encodeAsString(byteArray35);
        int int39 = base32_4.lineLength;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CG======" + "'", str14, "CG======");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "MQ6QUCQB" + "'", str30, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "MQ======" + "'", str38, "MQ======");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        org.apache.commons.codec.binary.Base32 base32_0 = new org.apache.commons.codec.binary.Base32();
        int int1 = base32_0.lineLength;
        org.apache.commons.codec.binary.Base32 base32_3 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean5 = base32_3.isInAlphabet("");
        byte[] byteArray7 = base32_3.decode("MQ6QUCQB");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = base32_0.decode((java.lang.Object) base32_3);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-74, -115, -81, 51, 75]");
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) 100);
        boolean boolean3 = base32_1.isInAlphabet("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32(false);
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        int int11 = base32_10.lineLength;
        byte byte12 = base32_10.PAD;
        byte[] byteArray15 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(0, byteArray15, false);
        int int18 = base32_17.lineLength;
        byte[] byteArray20 = base32_17.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str21 = base32_10.encodeToString(byteArray20);
        byte[] byteArray22 = base32_5.encode(byteArray20);
        byte[] byteArray27 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_29 = new org.apache.commons.codec.binary.Base32(0, byteArray27, false);
        int int30 = base32_29.lineLength;
        byte byte31 = base32_29.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context32 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean33 = base32_29.hasData(context32);
        context32.pos = 0;
        int int36 = context32.readPos;
        byte[] byteArray39 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_41 = new org.apache.commons.codec.binary.Base32(0, byteArray39, false);
        org.apache.commons.codec.binary.Base32 base32_43 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean45 = base32_43.isInAlphabet("");
        byte[] byteArray48 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_50 = new org.apache.commons.codec.binary.Base32(0, byteArray48, false);
        java.lang.String str51 = base32_43.encodeToString(byteArray48);
        byte[] byteArray58 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean59 = base32_43.containsAlphabetOrPad(byteArray58);
        byte[] byteArray60 = base32_41.encode(byteArray58);
        byte[] byteArray66 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str67 = base32_41.encodeToString(byteArray66);
        context32.buffer = byteArray66;
        java.lang.String str69 = context32.toString();
        context32.eof = false;
        int int72 = context32.readPos;
        int int73 = base32_1.readResults(byteArray22, (int) (short) 1, (int) (byte) 100, context32);
        context32.currentLinePos = (byte) 10;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 61 + "'", byte12 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "EEEA====" + "'", str21, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + byte31 + "' != '" + (byte) 61 + "'", byte31 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "CG======" + "'", str51, "CG======");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "MQ6QUCQB" + "'", str67, "MQ6QUCQB");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str69, "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        byte[] byteArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(76, byteArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineLength 76 > 0, but lineSeparator is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(false);
        byte[] byteArray4 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32(0, byteArray4, false);
        int int7 = base32_6.lineLength;
        byte byte8 = base32_6.PAD;
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        int int14 = base32_13.lineLength;
        byte[] byteArray16 = base32_13.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str17 = base32_6.encodeToString(byteArray16);
        byte[] byteArray18 = base32_1.encode(byteArray16);
        org.apache.commons.codec.binary.Base32 base32_21 = new org.apache.commons.codec.binary.Base32(false);
        byte[] byteArray24 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_26 = new org.apache.commons.codec.binary.Base32(0, byteArray24, false);
        int int27 = base32_26.lineLength;
        byte byte28 = base32_26.PAD;
        byte[] byteArray31 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_33 = new org.apache.commons.codec.binary.Base32(0, byteArray31, false);
        int int34 = base32_33.lineLength;
        byte[] byteArray36 = base32_33.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str37 = base32_26.encodeToString(byteArray36);
        byte[] byteArray38 = base32_21.encode(byteArray36);
        org.apache.commons.codec.binary.Base32 base32_39 = new org.apache.commons.codec.binary.Base32((int) (short) -1, byteArray36);
        java.lang.String str40 = base32_1.encodeAsString(byteArray36);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 61 + "'", byte8 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "EEEA====" + "'", str17, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + byte28 + "' != '" + (byte) 61 + "'", byte28 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "EEEA====" + "'", str37, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "EEEA====" + "'", str40, "EEEA====");
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet("CG======");
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        byte[] byteArray13 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_15 = new org.apache.commons.codec.binary.Base32(0, byteArray13, false);
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean19 = base32_17.isInAlphabet("");
        byte[] byteArray22 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32(0, byteArray22, false);
        java.lang.String str25 = base32_17.encodeToString(byteArray22);
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean33 = base32_17.containsAlphabetOrPad(byteArray32);
        byte[] byteArray34 = base32_15.encode(byteArray32);
        java.lang.Object obj35 = base32_10.encode((java.lang.Object) byteArray34);
        byte[] byteArray38 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_40 = new org.apache.commons.codec.binary.Base32(0, byteArray38, false);
        org.apache.commons.codec.binary.Base32 base32_42 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean44 = base32_42.isInAlphabet("");
        byte[] byteArray47 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_49 = new org.apache.commons.codec.binary.Base32(0, byteArray47, false);
        java.lang.String str50 = base32_42.encodeToString(byteArray47);
        byte[] byteArray57 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean58 = base32_42.containsAlphabetOrPad(byteArray57);
        byte[] byteArray59 = base32_40.encode(byteArray57);
        java.lang.String str60 = base32_10.encodeAsString(byteArray59);
        boolean boolean62 = base32_1.isInAlphabet(byteArray59, false);
        byte byte63 = base32_1.PAD;
        org.apache.commons.codec.binary.Base32 base32_65 = new org.apache.commons.codec.binary.Base32(false);
        byte[] byteArray68 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_70 = new org.apache.commons.codec.binary.Base32(0, byteArray68, false);
        int int71 = base32_70.lineLength;
        byte byte72 = base32_70.PAD;
        byte[] byteArray75 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_77 = new org.apache.commons.codec.binary.Base32(0, byteArray75, false);
        int int78 = base32_77.lineLength;
        byte[] byteArray80 = base32_77.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str81 = base32_70.encodeToString(byteArray80);
        byte[] byteArray82 = base32_65.encode(byteArray80);
        boolean boolean84 = base32_1.isInAlphabet(byteArray80, true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CG======" + "'", str25, "CG======");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "CG======" + "'", str50, "CG======");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "JVIUCUKBLJAUCTKRHU6T2PJ5HU======" + "'", str60, "JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + byte63 + "' != '" + (byte) 61 + "'", byte63 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[100]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + byte72 + "' != '" + (byte) 61 + "'", byte72 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[100]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "EEEA====" + "'", str81, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        byte[] byteArray9 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_11 = new org.apache.commons.codec.binary.Base32(0, byteArray9, false);
        int int12 = base32_11.lineLength;
        byte[] byteArray14 = base32_11.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str15 = base32_4.encodeToString(byteArray14);
        byte[] byteArray18 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_20 = new org.apache.commons.codec.binary.Base32(0, byteArray18, false);
        org.apache.commons.codec.binary.Base32 base32_22 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean24 = base32_22.isInAlphabet("");
        byte[] byteArray27 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_29 = new org.apache.commons.codec.binary.Base32(0, byteArray27, false);
        java.lang.String str30 = base32_22.encodeToString(byteArray27);
        byte[] byteArray37 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean38 = base32_22.containsAlphabetOrPad(byteArray37);
        byte[] byteArray39 = base32_20.encode(byteArray37);
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str46 = base32_20.encodeToString(byteArray45);
        java.lang.Object obj47 = base32_4.decode((java.lang.Object) byteArray45);
        org.apache.commons.codec.binary.Base32 base32_50 = new org.apache.commons.codec.binary.Base32((byte) 100);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_56 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray55);
        byte[] byteArray57 = base32_50.encode(byteArray55);
        org.apache.commons.codec.binary.Base32 base32_60 = new org.apache.commons.codec.binary.Base32((int) (byte) 0, byteArray55, false, (byte) 61);
        byte[] byteArray65 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_67 = new org.apache.commons.codec.binary.Base32(0, byteArray65, false);
        int int68 = base32_67.lineLength;
        byte byte69 = base32_67.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context70 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean71 = base32_67.hasData(context70);
        byte[] byteArray72 = null;
        context70.buffer = byteArray72;
        context70.ibitWorkArea = '#';
        context70.modulus = 8192;
        context70.modulus = (byte) 0;
        int int80 = base32_4.readResults(byteArray55, 76, (int) (short) 10, context70);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "EEEA====" + "'", str15, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "CG======" + "'", str30, "CG======");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "MQ6QUCQB" + "'", str46, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[65, 69, 65, 65, 85, 100, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[100]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + byte69 + "' != '" + (byte) 61 + "'", byte69 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        byte[] byteArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base32 base32_3 = new org.apache.commons.codec.binary.Base32(76, byteArray1, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineLength 76 > 0, but lineSeparator is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        byte[] byteArray9 = null;
        context7.buffer = byteArray9;
        context7.ibitWorkArea = '#';
        int int13 = context7.pos;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) 1);
        byte byte2 = base32_1.pad;
        byte byte3 = base32_1.pad;
        java.lang.Object obj4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj5 = base32_1.decode(obj4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 1 + "'", byte2 == (byte) 1);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 1 + "'", byte3 == (byte) 1);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(0);
        byte[] byteArray4 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32(0, byteArray4, false);
        int int7 = base32_6.lineLength;
        byte byte8 = base32_6.PAD;
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        int int14 = base32_13.lineLength;
        byte[] byteArray16 = base32_13.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str17 = base32_6.encodeToString(byteArray16);
        byte[] byteArray18 = base32_1.encode(byteArray16);
        byte[] byteArray20 = base32_1.decode("hi!");
        org.apache.commons.codec.binary.Base32 base32_23 = new org.apache.commons.codec.binary.Base32(false, (byte) 61);
        org.apache.commons.codec.binary.Base32 base32_25 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_31 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray30);
        byte[] byteArray32 = base32_25.encode(byteArray30);
        boolean boolean33 = base32_23.containsAlphabetOrPad(byteArray30);
        byte[] byteArray34 = base32_1.encode(byteArray30);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 61 + "'", byte8 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "EEEA====" + "'", str17, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[65, 69, 65, 65, 85, 61, 61, 61]");
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        context7.currentLinePos = (-1);
        byte[] byteArray14 = context7.buffer;
        context7.ibitWorkArea = (-1);
        context7.readPos = 100;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(byteArray14);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) (byte) 10);
        org.apache.commons.codec.binary.Base32 base32_3 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray8);
        byte[] byteArray10 = base32_3.encode(byteArray8);
        byte[] byteArray15 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(0, byteArray15, false);
        int int18 = base32_17.lineLength;
        byte byte19 = base32_17.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context20 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean21 = base32_17.hasData(context20);
        context20.pos = 0;
        int int24 = context20.readPos;
        byte[] byteArray27 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_29 = new org.apache.commons.codec.binary.Base32(0, byteArray27, false);
        org.apache.commons.codec.binary.Base32 base32_31 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean33 = base32_31.isInAlphabet("");
        byte[] byteArray36 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_38 = new org.apache.commons.codec.binary.Base32(0, byteArray36, false);
        java.lang.String str39 = base32_31.encodeToString(byteArray36);
        byte[] byteArray46 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean47 = base32_31.containsAlphabetOrPad(byteArray46);
        byte[] byteArray48 = base32_29.encode(byteArray46);
        byte[] byteArray54 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str55 = base32_29.encodeToString(byteArray54);
        context20.buffer = byteArray54;
        java.lang.String str57 = context20.toString();
        base32_1.encode(byteArray10, (int) (byte) 0, (int) (short) 1, context20);
        context20.ibitWorkArea = (byte) -1;
        byte[] byteArray61 = context20.buffer;
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) 61 + "'", byte19 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "CG======" + "'", str39, "CG======");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "MQ6QUCQB" + "'", str55, "MQ6QUCQB");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str57, "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[100, 61, 10, 10, 1, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        context7.currentLinePos = (-1);
        byte[] byteArray14 = context7.buffer;
        context7.ibitWorkArea = (-1);
        byte[] byteArray17 = null;
        context7.buffer = byteArray17;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(byteArray14);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) 100);
        boolean boolean3 = base32_1.isInAlphabet("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray6 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_8 = new org.apache.commons.codec.binary.Base32(0, byteArray6, false);
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean12 = base32_10.isInAlphabet("");
        byte[] byteArray15 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(0, byteArray15, false);
        java.lang.String str18 = base32_10.encodeToString(byteArray15);
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean26 = base32_10.containsAlphabetOrPad(byteArray25);
        byte[] byteArray27 = base32_8.encode(byteArray25);
        java.lang.String str28 = base32_1.encodeToString(byteArray25);
        boolean boolean30 = base32_1.isInAlphabet((byte) 10);
        int int31 = base32_1.lineLength;
        org.apache.commons.codec.EncoderException encoderException33 = new org.apache.commons.codec.EncoderException("Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.apache.commons.codec.EncoderException encoderException34 = new org.apache.commons.codec.EncoderException((java.lang.Throwable) encoderException33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj35 = base32_1.encode((java.lang.Object) encoderException34);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CG======" + "'", str18, "CG======");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "MQAQAZAAMQdddddd" + "'", str28, "MQAQAZAAMQdddddd");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        byte[] byteArray7 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32(0, byteArray7, false);
        org.apache.commons.codec.binary.Base32 base32_11 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean13 = base32_11.isInAlphabet("");
        byte[] byteArray16 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_18 = new org.apache.commons.codec.binary.Base32(0, byteArray16, false);
        java.lang.String str19 = base32_11.encodeToString(byteArray16);
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean27 = base32_11.containsAlphabetOrPad(byteArray26);
        byte[] byteArray28 = base32_9.encode(byteArray26);
        java.lang.Object obj29 = base32_4.encode((java.lang.Object) byteArray28);
        byte[] byteArray32 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_34 = new org.apache.commons.codec.binary.Base32(0, byteArray32, false);
        org.apache.commons.codec.binary.Base32 base32_36 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean38 = base32_36.isInAlphabet("");
        byte[] byteArray41 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_43 = new org.apache.commons.codec.binary.Base32(0, byteArray41, false);
        java.lang.String str44 = base32_36.encodeToString(byteArray41);
        byte[] byteArray51 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean52 = base32_36.containsAlphabetOrPad(byteArray51);
        byte[] byteArray53 = base32_34.encode(byteArray51);
        java.lang.String str54 = base32_4.encodeAsString(byteArray53);
        org.apache.commons.codec.binary.Base32 base32_56 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean58 = base32_56.isInAlphabet("");
        byte[] byteArray61 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_63 = new org.apache.commons.codec.binary.Base32(0, byteArray61, false);
        java.lang.String str64 = base32_56.encodeToString(byteArray61);
        byte[] byteArray71 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean72 = base32_56.containsAlphabetOrPad(byteArray71);
        java.lang.String str73 = base32_4.encodeAsString(byteArray71);
        byte byte74 = base32_4.pad;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CG======" + "'", str19, "CG======");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "CG======" + "'", str44, "CG======");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "JVIUCUKBLJAUCTKRHU6T2PJ5HU======" + "'", str54, "JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "CG======" + "'", str64, "CG======");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "MQAQAZAAMQ======" + "'", str73, "MQAQAZAAMQ======");
        org.junit.Assert.assertTrue("'" + byte74 + "' != '" + (byte) 61 + "'", byte74 == (byte) 61);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) 100);
        boolean boolean3 = base32_1.isInAlphabet("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32(false);
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        int int11 = base32_10.lineLength;
        byte byte12 = base32_10.PAD;
        byte[] byteArray15 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(0, byteArray15, false);
        int int18 = base32_17.lineLength;
        byte[] byteArray20 = base32_17.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str21 = base32_10.encodeToString(byteArray20);
        byte[] byteArray22 = base32_5.encode(byteArray20);
        byte[] byteArray27 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_29 = new org.apache.commons.codec.binary.Base32(0, byteArray27, false);
        int int30 = base32_29.lineLength;
        byte byte31 = base32_29.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context32 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean33 = base32_29.hasData(context32);
        context32.pos = 0;
        int int36 = context32.readPos;
        byte[] byteArray39 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_41 = new org.apache.commons.codec.binary.Base32(0, byteArray39, false);
        org.apache.commons.codec.binary.Base32 base32_43 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean45 = base32_43.isInAlphabet("");
        byte[] byteArray48 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_50 = new org.apache.commons.codec.binary.Base32(0, byteArray48, false);
        java.lang.String str51 = base32_43.encodeToString(byteArray48);
        byte[] byteArray58 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean59 = base32_43.containsAlphabetOrPad(byteArray58);
        byte[] byteArray60 = base32_41.encode(byteArray58);
        byte[] byteArray66 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str67 = base32_41.encodeToString(byteArray66);
        context32.buffer = byteArray66;
        java.lang.String str69 = context32.toString();
        context32.eof = false;
        int int72 = context32.readPos;
        int int73 = base32_1.readResults(byteArray22, (int) (short) 1, (int) (byte) 100, context32);
        int int74 = context32.modulus;
        int int75 = context32.modulus;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 61 + "'", byte12 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "EEEA====" + "'", str21, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + byte31 + "' != '" + (byte) 61 + "'", byte31 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "CG======" + "'", str51, "CG======");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "MQ6QUCQB" + "'", str67, "MQ6QUCQB");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str69, "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        byte[] byteArray9 = null;
        context7.buffer = byteArray9;
        context7.currentLinePos = (short) 100;
        long long13 = context7.lbitWorkArea;
        context7.pos = (byte) 10;
        context7.ibitWorkArea = (byte) 1;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet("");
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean9 = base32_7.isInAlphabet("");
        byte[] byteArray12 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_14 = new org.apache.commons.codec.binary.Base32(0, byteArray12, false);
        java.lang.String str15 = base32_7.encodeToString(byteArray12);
        long long16 = base32_1.getEncodedLength(byteArray12);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 61 };
        boolean boolean21 = base32_1.isInAlphabet(byteArray19, false);
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean26 = base32_24.isInAlphabet("");
        byte[] byteArray29 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_31 = new org.apache.commons.codec.binary.Base32(0, byteArray29, false);
        java.lang.String str32 = base32_24.encodeToString(byteArray29);
        byte[] byteArray39 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean40 = base32_24.containsAlphabetOrPad(byteArray39);
        org.apache.commons.codec.binary.Base32 base32_42 = new org.apache.commons.codec.binary.Base32((int) (byte) 0, byteArray39, false);
        int int43 = base32_42.lineLength;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj44 = base32_1.encode((java.lang.Object) int43);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CG======" + "'", str15, "CG======");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 8L + "'", long16 == 8L);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 61]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "CG======" + "'", str32, "CG======");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(false, (byte) 61);
        byte[] byteArray5 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32(0, byteArray5, false);
        byte[] byteArray10 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_12 = new org.apache.commons.codec.binary.Base32(0, byteArray10, false);
        int int13 = base32_12.lineLength;
        byte byte14 = base32_12.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context15 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean16 = base32_12.hasData(context15);
        org.apache.commons.codec.binary.Base32 base32_18 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean20 = base32_18.isInAlphabet("");
        byte[] byteArray23 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_25 = new org.apache.commons.codec.binary.Base32(0, byteArray23, false);
        java.lang.String str26 = base32_18.encodeToString(byteArray23);
        byte[] byteArray33 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean34 = base32_18.containsAlphabetOrPad(byteArray33);
        byte[] byteArray35 = base32_12.encode(byteArray33);
        byte[] byteArray36 = base32_7.encode(byteArray33);
        byte[] byteArray41 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_43 = new org.apache.commons.codec.binary.Base32(0, byteArray41, false);
        int int44 = base32_43.lineLength;
        byte byte45 = base32_43.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context46 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean47 = base32_43.hasData(context46);
        byte[] byteArray48 = null;
        context46.buffer = byteArray48;
        context46.ibitWorkArea = '#';
        context46.modulus = 8192;
        base32_2.decode(byteArray33, 0, 0, context46);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 61 + "'", byte14 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "CG======" + "'", str26, "CG======");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + byte45 + "' != '" + (byte) 61 + "'", byte45 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        byte[] byteArray6 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_8 = new org.apache.commons.codec.binary.Base32(0, byteArray6, false);
        java.lang.String str9 = base32_1.encodeToString(byteArray6);
        byte[] byteArray10 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = base32_1.getEncodedLength(byteArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CG======" + "'", str9, "CG======");
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.modulus = 100;
        int int11 = context7.modulus;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32((byte) 100);
        byte[] byteArray5 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32(0, byteArray5, false);
        byte[] byteArray10 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_12 = new org.apache.commons.codec.binary.Base32(0, byteArray10, false);
        org.apache.commons.codec.binary.Base32 base32_14 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean16 = base32_14.isInAlphabet("");
        byte[] byteArray19 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_21 = new org.apache.commons.codec.binary.Base32(0, byteArray19, false);
        java.lang.String str22 = base32_14.encodeToString(byteArray19);
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean30 = base32_14.containsAlphabetOrPad(byteArray29);
        byte[] byteArray31 = base32_12.encode(byteArray29);
        java.lang.Object obj32 = base32_7.encode((java.lang.Object) byteArray31);
        byte[] byteArray35 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_37 = new org.apache.commons.codec.binary.Base32(0, byteArray35, false);
        org.apache.commons.codec.binary.Base32 base32_39 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean41 = base32_39.isInAlphabet("");
        byte[] byteArray44 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_46 = new org.apache.commons.codec.binary.Base32(0, byteArray44, false);
        java.lang.String str47 = base32_39.encodeToString(byteArray44);
        byte[] byteArray54 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean55 = base32_39.containsAlphabetOrPad(byteArray54);
        byte[] byteArray56 = base32_37.encode(byteArray54);
        java.lang.String str57 = base32_7.encodeAsString(byteArray56);
        byte[] byteArray58 = base32_2.decode(byteArray56);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base32 base32_61 = new org.apache.commons.codec.binary.Base32(8192, byteArray58, true, (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain Base32 characters: [d??d?d]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "CG======" + "'", str22, "CG======");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "CG======" + "'", str47, "CG======");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "JVIUCUKBLJAUCTKRHU6T2PJ5HU======" + "'", str57, "JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[100, 1, 0, 100, 0, 100]");
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet("CG======");
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        int int11 = base32_10.lineLength;
        byte byte12 = base32_10.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context13 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean14 = base32_10.hasData(context13);
        byte[] byteArray15 = null;
        context13.buffer = byteArray15;
        context13.currentLinePos = (short) 100;
        int int19 = base32_1.available(context13);
        org.apache.commons.codec.binary.Base32 base32_21 = new org.apache.commons.codec.binary.Base32((byte) -1);
        org.apache.commons.codec.binary.Base32 base32_23 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean25 = base32_23.isInAlphabet("");
        byte[] byteArray27 = base32_23.decode("MQ6QUCQB");
        byte[] byteArray28 = base32_21.decode(byteArray27);
        byte[] byteArray29 = base32_1.decode(byteArray27);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 61 + "'", byte12 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-74, -115, -81, 51, 75]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-38]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[29]");
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        byte[] byteArray7 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32(0, byteArray7, false);
        org.apache.commons.codec.binary.Base32 base32_11 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean13 = base32_11.isInAlphabet("");
        byte[] byteArray16 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_18 = new org.apache.commons.codec.binary.Base32(0, byteArray16, false);
        java.lang.String str19 = base32_11.encodeToString(byteArray16);
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean27 = base32_11.containsAlphabetOrPad(byteArray26);
        byte[] byteArray28 = base32_9.encode(byteArray26);
        java.lang.Object obj29 = base32_4.encode((java.lang.Object) byteArray28);
        byte[] byteArray32 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_34 = new org.apache.commons.codec.binary.Base32(0, byteArray32, false);
        org.apache.commons.codec.binary.Base32 base32_36 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean38 = base32_36.isInAlphabet("");
        byte[] byteArray41 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_43 = new org.apache.commons.codec.binary.Base32(0, byteArray41, false);
        java.lang.String str44 = base32_36.encodeToString(byteArray41);
        byte[] byteArray51 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean52 = base32_36.containsAlphabetOrPad(byteArray51);
        byte[] byteArray53 = base32_34.encode(byteArray51);
        java.lang.String str54 = base32_4.encodeAsString(byteArray53);
        int int55 = base32_4.getDefaultBufferSize();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_60 = new org.apache.commons.codec.binary.Base32(0, byteArray58, false);
        org.apache.commons.codec.binary.Base32 base32_62 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean64 = base32_62.isInAlphabet("");
        byte[] byteArray67 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_69 = new org.apache.commons.codec.binary.Base32(0, byteArray67, false);
        java.lang.String str70 = base32_62.encodeToString(byteArray67);
        byte[] byteArray77 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean78 = base32_62.containsAlphabetOrPad(byteArray77);
        byte[] byteArray79 = base32_60.encode(byteArray77);
        byte[] byteArray80 = null;
        byte[] byteArray81 = base32_60.decode(byteArray80);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj82 = base32_4.decode((java.lang.Object) base32_60);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CG======" + "'", str19, "CG======");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "CG======" + "'", str44, "CG======");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "JVIUCUKBLJAUCTKRHU6T2PJ5HU======" + "'", str54, "JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8192 + "'", int55 == 8192);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[100]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[100]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "CG======" + "'", str70, "CG======");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNull(byteArray81);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        byte byte2 = base32_1.PAD;
        byte[] byteArray3 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long4 = base32_1.getEncodedLength(byteArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 61 + "'", byte2 == (byte) 61);
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        int int12 = context7.modulus;
        int int13 = context7.ibitWorkArea;
        context7.modulus = 0;
        byte[] byteArray16 = null;
        context7.buffer = byteArray16;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32((byte) 100);
        boolean boolean4 = base32_2.isInAlphabet("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray6 = base32_2.decode("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_12 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray11);
        java.lang.String str13 = base32_2.encodeAsString(byteArray11);
        org.apache.commons.codec.binary.Base32 base32_15 = new org.apache.commons.codec.binary.Base32((int) '#', byteArray11, false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1, 0, 10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "AEAAUddd" + "'", str13, "AEAAUddd");
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        org.apache.commons.codec.binary.BaseNCodec.Context context0 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context0.ibitWorkArea = 0;
        byte[] byteArray5 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32(0, byteArray5, false);
        byte[] byteArray10 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_12 = new org.apache.commons.codec.binary.Base32(0, byteArray10, false);
        org.apache.commons.codec.binary.Base32 base32_14 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean16 = base32_14.isInAlphabet("");
        byte[] byteArray19 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_21 = new org.apache.commons.codec.binary.Base32(0, byteArray19, false);
        java.lang.String str22 = base32_14.encodeToString(byteArray19);
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean30 = base32_14.containsAlphabetOrPad(byteArray29);
        byte[] byteArray31 = base32_12.encode(byteArray29);
        java.lang.Object obj32 = base32_7.encode((java.lang.Object) byteArray31);
        context0.buffer = byteArray31;
        boolean boolean34 = context0.eof;
        java.lang.String str35 = context0.toString();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "CG======" + "'", str22, "CG======");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Context[buffer=[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str35, "Context[buffer=[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) '4');
        int int2 = base32_1.getDefaultBufferSize();
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean6 = base32_4.isInAlphabet("");
        byte[] byteArray9 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_11 = new org.apache.commons.codec.binary.Base32(0, byteArray9, false);
        java.lang.String str12 = base32_4.encodeToString(byteArray9);
        byte[] byteArray19 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean20 = base32_4.containsAlphabetOrPad(byteArray19);
        boolean boolean21 = base32_1.containsAlphabetOrPad(byteArray19);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CG======" + "'", str12, "CG======");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        byte[] byteArray9 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_11 = new org.apache.commons.codec.binary.Base32(0, byteArray9, false);
        int int12 = base32_11.lineLength;
        byte[] byteArray14 = base32_11.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str15 = base32_4.encodeToString(byteArray14);
        boolean boolean17 = base32_4.isInAlphabet((byte) 0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "EEEA====" + "'", str15, "EEEA====");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        context7.lbitWorkArea = (byte) 61;
        int int14 = context7.readPos;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(false);
        org.apache.commons.codec.binary.Base32 base32_3 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray8);
        byte[] byteArray10 = base32_3.encode(byteArray8);
        boolean boolean11 = base32_1.containsAlphabetOrPad(byteArray10);
        byte[] byteArray14 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(0, byteArray14, false);
        int int17 = base32_16.lineLength;
        byte byte18 = base32_16.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context19 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean20 = base32_16.hasData(context19);
        context19.pos = 0;
        int int23 = context19.readPos;
        byte[] byteArray26 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_28 = new org.apache.commons.codec.binary.Base32(0, byteArray26, false);
        org.apache.commons.codec.binary.Base32 base32_30 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean32 = base32_30.isInAlphabet("");
        byte[] byteArray35 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_37 = new org.apache.commons.codec.binary.Base32(0, byteArray35, false);
        java.lang.String str38 = base32_30.encodeToString(byteArray35);
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean46 = base32_30.containsAlphabetOrPad(byteArray45);
        byte[] byteArray47 = base32_28.encode(byteArray45);
        byte[] byteArray53 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str54 = base32_28.encodeToString(byteArray53);
        context19.buffer = byteArray53;
        org.apache.commons.codec.binary.BaseNCodec.Context context58 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        long long59 = context58.lbitWorkArea;
        base32_1.decode(byteArray53, 0, (int) (byte) 0, context58);
        byte byte61 = base32_1.pad;
        org.apache.commons.codec.binary.Base32 base32_63 = new org.apache.commons.codec.binary.Base32(0);
        byte[] byteArray66 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_68 = new org.apache.commons.codec.binary.Base32(0, byteArray66, false);
        int int69 = base32_68.lineLength;
        byte byte70 = base32_68.PAD;
        byte[] byteArray73 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_75 = new org.apache.commons.codec.binary.Base32(0, byteArray73, false);
        int int76 = base32_75.lineLength;
        byte[] byteArray78 = base32_75.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str79 = base32_68.encodeToString(byteArray78);
        byte[] byteArray80 = base32_63.encode(byteArray78);
        byte[] byteArray81 = base32_1.decode(byteArray78);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + byte18 + "' != '" + (byte) 61 + "'", byte18 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "CG======" + "'", str38, "CG======");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "MQ6QUCQB" + "'", str54, "MQ6QUCQB");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + byte61 + "' != '" + (byte) 61 + "'", byte61 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[100]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + byte70 + "' != '" + (byte) 61 + "'", byte70 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[100]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "EEEA====" + "'", str79, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(true, (byte) -1);
        byte byte3 = base32_2.pad;
        byte byte4 = base32_2.PAD;
        byte[] byteArray7 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32(0, byteArray7, false);
        byte[] byteArray12 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_14 = new org.apache.commons.codec.binary.Base32(0, byteArray12, false);
        byte[] byteArray15 = base32_9.decode(byteArray12);
        java.lang.String str16 = base32_2.encodeAsString(byteArray15);
        byte[] byteArray18 = base32_2.decode("CGUGK2G1");
        int int19 = base32_2.getDefaultBufferSize();
        org.apache.commons.codec.binary.BaseNCodec.Context context21 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray22 = base32_2.ensureBufferSize((int) (short) -1, context21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 61 + "'", byte4 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8192 + "'", int19 == 8192);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        byte[] byteArray6 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_8 = new org.apache.commons.codec.binary.Base32(0, byteArray6, false);
        java.lang.String str9 = base32_1.encodeToString(byteArray6);
        byte[] byteArray16 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean17 = base32_1.containsAlphabetOrPad(byteArray16);
        boolean boolean19 = base32_1.isInAlphabet((byte) 1);
        boolean boolean21 = base32_1.isInAlphabet((byte) 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CG======" + "'", str9, "CG======");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) (byte) 100);
        byte byte2 = base32_1.PAD;
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 61 + "'", byte2 == (byte) 61);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        byte[] byteArray5 = base32_1.decode("MQ6QUCQB");
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        int int11 = base32_10.lineLength;
        byte byte12 = base32_10.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context13 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean14 = base32_10.hasData(context13);
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean18 = base32_16.isInAlphabet("");
        byte[] byteArray21 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_23 = new org.apache.commons.codec.binary.Base32(0, byteArray21, false);
        java.lang.String str24 = base32_16.encodeToString(byteArray21);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean32 = base32_16.containsAlphabetOrPad(byteArray31);
        byte[] byteArray33 = base32_10.encode(byteArray31);
        byte[] byteArray34 = base32_1.encode(byteArray33);
        byte[] byteArray36 = base32_1.decode("hi!");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-74, -115, -81, 51, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 61 + "'", byte12 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "CG======" + "'", str24, "CG======");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[57, 76, 56, 75, 50, 75, 65, 49, 66, 57, 48, 75, 50, 74, 65, 72, 55, 75, 85, 74, 81, 70, 57, 84, 55, 75, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        byte[] byteArray3 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32(0, byteArray3, false);
        int int6 = base32_5.lineLength;
        byte byte7 = base32_5.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context8 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean9 = base32_5.hasData(context8);
        org.apache.commons.codec.binary.Base32 base32_11 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray16);
        byte[] byteArray18 = base32_11.encode(byteArray16);
        boolean boolean19 = base32_5.containsAlphabetOrPad(byteArray18);
        org.apache.commons.codec.binary.Base32 base32_21 = new org.apache.commons.codec.binary.Base32((int) (short) 0, byteArray18, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 61 + "'", byte7 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        byte[] byteArray4 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray4);
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        int int11 = base32_10.lineLength;
        byte[] byteArray13 = base32_10.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        boolean boolean15 = base32_5.isInAlphabet(byteArray13, true);
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(false);
        byte[] byteArray20 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_22 = new org.apache.commons.codec.binary.Base32(0, byteArray20, false);
        int int23 = base32_22.lineLength;
        byte byte24 = base32_22.PAD;
        byte[] byteArray27 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_29 = new org.apache.commons.codec.binary.Base32(0, byteArray27, false);
        int int30 = base32_29.lineLength;
        byte[] byteArray32 = base32_29.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str33 = base32_22.encodeToString(byteArray32);
        byte[] byteArray34 = base32_17.encode(byteArray32);
        java.lang.String str35 = base32_5.encodeToString(byteArray32);
        org.apache.commons.codec.binary.BaseNCodec.Context context36 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context36.ibitWorkArea = (byte) 61;
        context36.currentLinePos = 'a';
        boolean boolean41 = base32_5.hasData(context36);
        boolean boolean43 = base32_5.isInAlphabet((byte) 10);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[33, 8]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + byte24 + "' != '" + (byte) 61 + "'", byte24 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "EEEA====" + "'", str33, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "EEEA====" + "'", str35, "EEEA====");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        org.apache.commons.codec.binary.BaseNCodec.Context context0 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context0.ibitWorkArea = (byte) 61;
        context0.currentLinePos = 'a';
        context0.ibitWorkArea = '4';
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context7.ibitWorkArea = (byte) 61;
        context7.currentLinePos = 'a';
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray16);
        context7.buffer = byteArray16;
        context0.buffer = byteArray16;
        context0.ibitWorkArea = 76;
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 0, 10]");
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(true, (byte) 100);
        boolean boolean4 = base32_2.isInAlphabet("Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        boolean boolean6 = base32_2.isInAlphabet((byte) -1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) 100);
        boolean boolean3 = base32_1.isInAlphabet("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32(false);
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        int int11 = base32_10.lineLength;
        byte byte12 = base32_10.PAD;
        byte[] byteArray15 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(0, byteArray15, false);
        int int18 = base32_17.lineLength;
        byte[] byteArray20 = base32_17.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str21 = base32_10.encodeToString(byteArray20);
        byte[] byteArray22 = base32_5.encode(byteArray20);
        byte[] byteArray27 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_29 = new org.apache.commons.codec.binary.Base32(0, byteArray27, false);
        int int30 = base32_29.lineLength;
        byte byte31 = base32_29.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context32 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean33 = base32_29.hasData(context32);
        context32.pos = 0;
        int int36 = context32.readPos;
        byte[] byteArray39 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_41 = new org.apache.commons.codec.binary.Base32(0, byteArray39, false);
        org.apache.commons.codec.binary.Base32 base32_43 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean45 = base32_43.isInAlphabet("");
        byte[] byteArray48 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_50 = new org.apache.commons.codec.binary.Base32(0, byteArray48, false);
        java.lang.String str51 = base32_43.encodeToString(byteArray48);
        byte[] byteArray58 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean59 = base32_43.containsAlphabetOrPad(byteArray58);
        byte[] byteArray60 = base32_41.encode(byteArray58);
        byte[] byteArray66 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str67 = base32_41.encodeToString(byteArray66);
        context32.buffer = byteArray66;
        java.lang.String str69 = context32.toString();
        context32.eof = false;
        int int72 = context32.readPos;
        int int73 = base32_1.readResults(byteArray22, (int) (short) 1, (int) (byte) 100, context32);
        org.apache.commons.codec.binary.Base32 base32_75 = new org.apache.commons.codec.binary.Base32(true);
        int int76 = base32_75.getDefaultBufferSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj77 = base32_1.encode((java.lang.Object) base32_75);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 61 + "'", byte12 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "EEEA====" + "'", str21, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + byte31 + "' != '" + (byte) 61 + "'", byte31 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "CG======" + "'", str51, "CG======");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "MQ6QUCQB" + "'", str67, "MQ6QUCQB");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str69, "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 8192 + "'", int76 == 8192);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        byte[] byteArray5 = base32_1.decode("MQ6QUCQB");
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        int int11 = base32_10.lineLength;
        byte byte12 = base32_10.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context13 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean14 = base32_10.hasData(context13);
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean18 = base32_16.isInAlphabet("");
        byte[] byteArray21 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_23 = new org.apache.commons.codec.binary.Base32(0, byteArray21, false);
        java.lang.String str24 = base32_16.encodeToString(byteArray21);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean32 = base32_16.containsAlphabetOrPad(byteArray31);
        byte[] byteArray33 = base32_10.encode(byteArray31);
        byte[] byteArray34 = base32_1.encode(byteArray33);
        byte[] byteArray37 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_39 = new org.apache.commons.codec.binary.Base32(0, byteArray37, false);
        byte[] byteArray42 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_44 = new org.apache.commons.codec.binary.Base32(0, byteArray42, false);
        org.apache.commons.codec.binary.Base32 base32_46 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean48 = base32_46.isInAlphabet("");
        byte[] byteArray51 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_53 = new org.apache.commons.codec.binary.Base32(0, byteArray51, false);
        java.lang.String str54 = base32_46.encodeToString(byteArray51);
        byte[] byteArray61 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean62 = base32_46.containsAlphabetOrPad(byteArray61);
        byte[] byteArray63 = base32_44.encode(byteArray61);
        java.lang.Object obj64 = base32_39.encode((java.lang.Object) byteArray63);
        byte[] byteArray69 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_71 = new org.apache.commons.codec.binary.Base32(0, byteArray69, false);
        org.apache.commons.codec.binary.Base32 base32_73 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean75 = base32_73.isInAlphabet("");
        byte[] byteArray78 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_80 = new org.apache.commons.codec.binary.Base32(0, byteArray78, false);
        java.lang.String str81 = base32_73.encodeToString(byteArray78);
        byte[] byteArray88 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean89 = base32_73.containsAlphabetOrPad(byteArray88);
        byte[] byteArray90 = base32_71.encode(byteArray88);
        byte[] byteArray91 = null;
        byte[] byteArray92 = base32_71.decode(byteArray91);
        org.apache.commons.codec.binary.BaseNCodec.Context context93 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context93.ibitWorkArea = 0;
        int int96 = base32_71.available(context93);
        // The following exception was thrown during execution in test generation
        try {
            base32_1.encode(byteArray63, 97, 10, context93);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-74, -115, -81, 51, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 61 + "'", byte12 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "CG======" + "'", str24, "CG======");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[57, 76, 56, 75, 50, 75, 65, 49, 66, 57, 48, 75, 50, 74, 65, 72, 55, 75, 85, 74, 81, 70, 57, 84, 55, 75, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[100]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "CG======" + "'", str54, "CG======");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[100]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[100]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "CG======" + "'", str81, "CG======");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNull(byteArray92);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        byte[] byteArray4 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray4);
        byte[] byteArray7 = base32_5.decode("");
        int int8 = base32_5.getDefaultBufferSize();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray3 = base32_1.decode("");
        org.apache.commons.codec.binary.BaseNCodec.Context context4 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int5 = base32_1.available(context4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray6);
        byte[] byteArray8 = base32_1.encode(byteArray6);
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray12 = base32_10.decode("");
        java.lang.String str13 = base32_1.encodeToString(byteArray12);
        byte[] byteArray14 = null;
        org.apache.commons.codec.binary.BaseNCodec.Context context17 = null;
        // The following exception was thrown during execution in test generation
        try {
            base32_1.decode(byteArray14, 64, 64, context17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(0);
        byte[] byteArray5 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32(0, byteArray5, false);
        int int8 = base32_7.lineLength;
        byte byte9 = base32_7.PAD;
        byte[] byteArray12 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_14 = new org.apache.commons.codec.binary.Base32(0, byteArray12, false);
        int int15 = base32_14.lineLength;
        byte[] byteArray17 = base32_14.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str18 = base32_7.encodeToString(byteArray17);
        byte[] byteArray19 = base32_2.encode(byteArray17);
        byte[] byteArray21 = base32_2.decode("hi!");
        org.apache.commons.codec.binary.Base32 base32_23 = new org.apache.commons.codec.binary.Base32(false);
        org.apache.commons.codec.binary.Base32 base32_25 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_31 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray30);
        byte[] byteArray32 = base32_25.encode(byteArray30);
        boolean boolean33 = base32_23.containsAlphabetOrPad(byteArray32);
        byte[] byteArray36 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_38 = new org.apache.commons.codec.binary.Base32(0, byteArray36, false);
        int int39 = base32_38.lineLength;
        byte byte40 = base32_38.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context41 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean42 = base32_38.hasData(context41);
        context41.pos = 0;
        int int45 = context41.readPos;
        byte[] byteArray48 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_50 = new org.apache.commons.codec.binary.Base32(0, byteArray48, false);
        org.apache.commons.codec.binary.Base32 base32_52 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean54 = base32_52.isInAlphabet("");
        byte[] byteArray57 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_59 = new org.apache.commons.codec.binary.Base32(0, byteArray57, false);
        java.lang.String str60 = base32_52.encodeToString(byteArray57);
        byte[] byteArray67 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean68 = base32_52.containsAlphabetOrPad(byteArray67);
        byte[] byteArray69 = base32_50.encode(byteArray67);
        byte[] byteArray75 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str76 = base32_50.encodeToString(byteArray75);
        context41.buffer = byteArray75;
        org.apache.commons.codec.binary.BaseNCodec.Context context80 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        long long81 = context80.lbitWorkArea;
        base32_23.decode(byteArray75, 0, (int) (byte) 0, context80);
        org.apache.commons.codec.binary.BaseNCodec.Context context83 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context83.ibitWorkArea = (byte) 61;
        context83.currentLinePos = 'a';
        byte[] byteArray92 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_93 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray92);
        context83.buffer = byteArray92;
        boolean boolean96 = base32_23.isInAlphabet(byteArray92, true);
        java.lang.String str97 = base32_2.encodeToString(byteArray92);
        org.apache.commons.codec.binary.Base32 base32_99 = new org.apache.commons.codec.binary.Base32(64, byteArray92, false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 61 + "'", byte9 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "EEEA====" + "'", str18, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + byte40 + "' != '" + (byte) 61 + "'", byte40 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "CG======" + "'", str60, "CG======");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "MQ6QUCQB" + "'", str76, "MQ6QUCQB");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[1, 0, 10]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "AEAAU===" + "'", str97, "AEAAU===");
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(0);
        byte[] byteArray4 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32(0, byteArray4, false);
        int int7 = base32_6.lineLength;
        byte byte8 = base32_6.PAD;
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        int int14 = base32_13.lineLength;
        byte[] byteArray16 = base32_13.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str17 = base32_6.encodeToString(byteArray16);
        byte[] byteArray18 = base32_1.encode(byteArray16);
        byte[] byteArray21 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_23 = new org.apache.commons.codec.binary.Base32(0, byteArray21, false);
        long long24 = base32_1.getEncodedLength(byteArray21);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 61 + "'", byte8 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "EEEA====" + "'", str17, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 8L + "'", long24 == 8L);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        byte[] byteArray9 = null;
        context7.buffer = byteArray9;
        context7.ibitWorkArea = '#';
        int int13 = context7.modulus;
        context7.modulus = (byte) 0;
        int int16 = context7.ibitWorkArea;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        byte[] byteArray9 = null;
        context7.buffer = byteArray9;
        context7.currentLinePos = (short) 100;
        context7.pos = (byte) 1;
        boolean boolean15 = context7.eof;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean8 = base32_6.isInAlphabet("");
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        java.lang.String str14 = base32_6.encodeToString(byteArray11);
        byte[] byteArray21 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean22 = base32_6.containsAlphabetOrPad(byteArray21);
        byte[] byteArray23 = base32_4.encode(byteArray21);
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str30 = base32_4.encodeToString(byteArray29);
        byte[] byteArray32 = base32_4.decode("hi!");
        org.apache.commons.codec.binary.Base32 base32_35 = new org.apache.commons.codec.binary.Base32(false, (byte) 1);
        byte[] byteArray38 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_40 = new org.apache.commons.codec.binary.Base32(0, byteArray38, false);
        int int41 = base32_40.lineLength;
        byte byte42 = base32_40.PAD;
        byte byte43 = base32_40.pad;
        byte[] byteArray46 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_48 = new org.apache.commons.codec.binary.Base32(0, byteArray46, false);
        int int49 = base32_48.lineLength;
        byte byte50 = base32_48.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context51 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean52 = base32_48.hasData(context51);
        org.apache.commons.codec.binary.Base32 base32_54 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean56 = base32_54.isInAlphabet("");
        byte[] byteArray59 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_61 = new org.apache.commons.codec.binary.Base32(0, byteArray59, false);
        java.lang.String str62 = base32_54.encodeToString(byteArray59);
        byte[] byteArray69 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean70 = base32_54.containsAlphabetOrPad(byteArray69);
        byte[] byteArray71 = base32_48.encode(byteArray69);
        org.apache.commons.codec.binary.Base32 base32_73 = new org.apache.commons.codec.binary.Base32(0);
        byte[] byteArray76 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_78 = new org.apache.commons.codec.binary.Base32(0, byteArray76, false);
        int int79 = base32_78.lineLength;
        byte byte80 = base32_78.PAD;
        byte[] byteArray83 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_85 = new org.apache.commons.codec.binary.Base32(0, byteArray83, false);
        int int86 = base32_85.lineLength;
        byte[] byteArray88 = base32_85.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str89 = base32_78.encodeToString(byteArray88);
        byte[] byteArray90 = base32_73.encode(byteArray88);
        byte[] byteArray91 = base32_48.decode(byteArray90);
        boolean boolean93 = base32_40.isInAlphabet(byteArray91, false);
        byte[] byteArray94 = base32_35.encode(byteArray91);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj95 = base32_4.decode((java.lang.Object) base32_35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CG======" + "'", str14, "CG======");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "MQ6QUCQB" + "'", str30, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + byte42 + "' != '" + (byte) 61 + "'", byte42 == (byte) 61);
        org.junit.Assert.assertTrue("'" + byte43 + "' != '" + (byte) 61 + "'", byte43 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[100]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + byte50 + "' != '" + (byte) 61 + "'", byte50 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[100]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "CG======" + "'", str62, "CG======");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[100]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + byte80 + "' != '" + (byte) 61 + "'", byte80 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[100]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "EEEA====" + "'", str89, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[33, 8]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[69, 69, 69, 65, 1, 1, 1, 1]");
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean8 = base32_6.isInAlphabet("");
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        java.lang.String str14 = base32_6.encodeToString(byteArray11);
        byte[] byteArray21 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean22 = base32_6.containsAlphabetOrPad(byteArray21);
        byte[] byteArray23 = base32_4.encode(byteArray21);
        byte[] byteArray26 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_28 = new org.apache.commons.codec.binary.Base32(0, byteArray26, false);
        int int29 = base32_28.lineLength;
        byte byte30 = base32_28.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context31 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean32 = base32_28.hasData(context31);
        context31.pos = 0;
        int int35 = context31.readPos;
        context31.currentLinePos = (-1);
        byte[] byteArray38 = context31.buffer;
        context31.ibitWorkArea = (-1);
        context31.lbitWorkArea = 64;
        int int43 = base32_4.available(context31);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CG======" + "'", str14, "CG======");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + byte30 + "' != '" + (byte) 61 + "'", byte30 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(byteArray38);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray6);
        byte[] byteArray8 = base32_1.encode(byteArray6);
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray12 = base32_10.decode("");
        java.lang.String str13 = base32_1.encodeToString(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_19 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray18);
        byte[] byteArray22 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32(0, byteArray22, false);
        int int25 = base32_24.lineLength;
        byte[] byteArray27 = base32_24.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        boolean boolean29 = base32_19.isInAlphabet(byteArray27, true);
        byte[] byteArray34 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_36 = new org.apache.commons.codec.binary.Base32(0, byteArray34, false);
        int int37 = base32_36.lineLength;
        byte byte38 = base32_36.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context39 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean40 = base32_36.hasData(context39);
        context39.pos = 0;
        int int43 = context39.readPos;
        byte[] byteArray46 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_48 = new org.apache.commons.codec.binary.Base32(0, byteArray46, false);
        org.apache.commons.codec.binary.Base32 base32_50 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean52 = base32_50.isInAlphabet("");
        byte[] byteArray55 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_57 = new org.apache.commons.codec.binary.Base32(0, byteArray55, false);
        java.lang.String str58 = base32_50.encodeToString(byteArray55);
        byte[] byteArray65 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean66 = base32_50.containsAlphabetOrPad(byteArray65);
        byte[] byteArray67 = base32_48.encode(byteArray65);
        byte[] byteArray73 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str74 = base32_48.encodeToString(byteArray73);
        context39.buffer = byteArray73;
        java.lang.String str76 = context39.toString();
        context39.eof = false;
        // The following exception was thrown during execution in test generation
        try {
            base32_1.decode(byteArray27, (int) (byte) 61, (int) ' ', context39);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 61");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[33, 8]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + byte38 + "' != '" + (byte) 61 + "'", byte38 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[100]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[100]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "CG======" + "'", str58, "CG======");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "MQ6QUCQB" + "'", str74, "MQ6QUCQB");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str76, "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32((byte) 100);
        boolean boolean4 = base32_2.isInAlphabet("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray7 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32(0, byteArray7, false);
        org.apache.commons.codec.binary.Base32 base32_11 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean13 = base32_11.isInAlphabet("");
        byte[] byteArray16 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_18 = new org.apache.commons.codec.binary.Base32(0, byteArray16, false);
        java.lang.String str19 = base32_11.encodeToString(byteArray16);
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean27 = base32_11.containsAlphabetOrPad(byteArray26);
        byte[] byteArray28 = base32_9.encode(byteArray26);
        java.lang.String str29 = base32_2.encodeToString(byteArray26);
        org.apache.commons.codec.binary.Base32 base32_31 = new org.apache.commons.codec.binary.Base32((int) (byte) 10, byteArray26, true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CG======" + "'", str19, "CG======");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "MQAQAZAAMQdddddd" + "'", str29, "MQAQAZAAMQdddddd");
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32((byte) 100);
        boolean boolean4 = base32_2.isInAlphabet("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean8 = base32_6.isInAlphabet("");
        boolean boolean10 = base32_6.isInAlphabet("");
        byte byte11 = base32_6.pad;
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 10, (byte) 61, (byte) 10, (byte) 0 };
        byte[] byteArray18 = base32_6.encode(byteArray17);
        byte[] byteArray19 = base32_2.encode(byteArray18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base32 base32_20 = new org.apache.commons.codec.binary.Base32((int) (short) 10, byteArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain Base32 characters: [GAYDKM2RGJDTAddd]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 61 + "'", byte11 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 10, 61, 10, 0]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[48, 48, 53, 51, 81, 50, 71, 48]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[71, 65, 89, 68, 75, 77, 50, 82, 71, 74, 68, 84, 65, 100, 100, 100]");
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        context7.lbitWorkArea = (byte) 61;
        context7.ibitWorkArea = (byte) 100;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(false);
        org.apache.commons.codec.binary.Base32 base32_3 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray8);
        byte[] byteArray10 = base32_3.encode(byteArray8);
        boolean boolean11 = base32_1.containsAlphabetOrPad(byteArray10);
        byte[] byteArray14 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(0, byteArray14, false);
        int int17 = base32_16.lineLength;
        byte byte18 = base32_16.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context19 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean20 = base32_16.hasData(context19);
        context19.pos = 0;
        int int23 = context19.readPos;
        byte[] byteArray26 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_28 = new org.apache.commons.codec.binary.Base32(0, byteArray26, false);
        org.apache.commons.codec.binary.Base32 base32_30 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean32 = base32_30.isInAlphabet("");
        byte[] byteArray35 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_37 = new org.apache.commons.codec.binary.Base32(0, byteArray35, false);
        java.lang.String str38 = base32_30.encodeToString(byteArray35);
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean46 = base32_30.containsAlphabetOrPad(byteArray45);
        byte[] byteArray47 = base32_28.encode(byteArray45);
        byte[] byteArray53 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str54 = base32_28.encodeToString(byteArray53);
        context19.buffer = byteArray53;
        org.apache.commons.codec.binary.BaseNCodec.Context context58 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        long long59 = context58.lbitWorkArea;
        base32_1.decode(byteArray53, 0, (int) (byte) 0, context58);
        int int61 = base32_1.lineLength;
        byte[] byteArray62 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long63 = base32_1.getEncodedLength(byteArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + byte18 + "' != '" + (byte) 61 + "'", byte18 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "CG======" + "'", str38, "CG======");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "MQ6QUCQB" + "'", str54, "MQ6QUCQB");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        byte[] byteArray6 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_8 = new org.apache.commons.codec.binary.Base32(0, byteArray6, false);
        java.lang.String str9 = base32_1.encodeToString(byteArray6);
        byte[] byteArray16 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean17 = base32_1.containsAlphabetOrPad(byteArray16);
        boolean boolean19 = base32_1.isInAlphabet((byte) 1);
        boolean boolean21 = base32_1.isInAlphabet((byte) 1);
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32(true, (byte) 0);
        org.apache.commons.codec.binary.Base32 base32_26 = new org.apache.commons.codec.binary.Base32((byte) 100);
        byte[] byteArray29 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_31 = new org.apache.commons.codec.binary.Base32(0, byteArray29, false);
        byte[] byteArray34 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_36 = new org.apache.commons.codec.binary.Base32(0, byteArray34, false);
        org.apache.commons.codec.binary.Base32 base32_38 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean40 = base32_38.isInAlphabet("");
        byte[] byteArray43 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_45 = new org.apache.commons.codec.binary.Base32(0, byteArray43, false);
        java.lang.String str46 = base32_38.encodeToString(byteArray43);
        byte[] byteArray53 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean54 = base32_38.containsAlphabetOrPad(byteArray53);
        byte[] byteArray55 = base32_36.encode(byteArray53);
        java.lang.Object obj56 = base32_31.encode((java.lang.Object) byteArray55);
        byte[] byteArray59 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_61 = new org.apache.commons.codec.binary.Base32(0, byteArray59, false);
        org.apache.commons.codec.binary.Base32 base32_63 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean65 = base32_63.isInAlphabet("");
        byte[] byteArray68 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_70 = new org.apache.commons.codec.binary.Base32(0, byteArray68, false);
        java.lang.String str71 = base32_63.encodeToString(byteArray68);
        byte[] byteArray78 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean79 = base32_63.containsAlphabetOrPad(byteArray78);
        byte[] byteArray80 = base32_61.encode(byteArray78);
        java.lang.String str81 = base32_31.encodeAsString(byteArray80);
        byte[] byteArray82 = base32_26.decode(byteArray80);
        boolean boolean83 = base32_24.containsAlphabetOrPad(byteArray82);
        java.lang.Object obj84 = base32_1.encode((java.lang.Object) byteArray82);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CG======" + "'", str9, "CG======");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "CG======" + "'", str46, "CG======");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[100]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[100]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "CG======" + "'", str71, "CG======");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "JVIUCUKBLJAUCTKRHU6T2PJ5HU======" + "'", str81, "JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(obj84);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) 1);
        byte[] byteArray4 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32(0, byteArray4, false);
        int int7 = base32_6.lineLength;
        byte byte8 = base32_6.PAD;
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        int int14 = base32_13.lineLength;
        byte[] byteArray16 = base32_13.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str17 = base32_6.encodeToString(byteArray16);
        java.lang.String str18 = base32_1.encodeAsString(byteArray16);
        org.apache.commons.codec.binary.Base32 base32_20 = new org.apache.commons.codec.binary.Base32((int) (short) -1);
        org.apache.commons.codec.binary.Base32 base32_23 = new org.apache.commons.codec.binary.Base32(false, (byte) 61);
        org.apache.commons.codec.binary.Base32 base32_25 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_31 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray30);
        byte[] byteArray32 = base32_25.encode(byteArray30);
        boolean boolean33 = base32_23.containsAlphabetOrPad(byteArray30);
        boolean boolean35 = base32_20.isInAlphabet(byteArray30, true);
        long long36 = base32_1.getEncodedLength(byteArray30);
        boolean boolean38 = base32_1.isInAlphabet("org.apache.commons.codec.DecoderException: hi!");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 61 + "'", byte8 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "EEEA====" + "'", str17, "EEEA====");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "EEEA\001\001\001\001" + "'", str18, "EEEA\001\001\001\001");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 8L + "'", long36 == 8L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        byte[] byteArray9 = null;
        context7.buffer = byteArray9;
        context7.ibitWorkArea = '#';
        context7.modulus = 8192;
        boolean boolean15 = context7.eof;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        int int12 = context7.currentLinePos;
        boolean boolean13 = context7.eof;
        context7.ibitWorkArea = (short) 100;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        org.apache.commons.codec.binary.BaseNCodec.Context context1 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context1.ibitWorkArea = (byte) 61;
        context1.currentLinePos = 'a';
        context1.ibitWorkArea = '4';
        org.apache.commons.codec.binary.BaseNCodec.Context context8 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context8.ibitWorkArea = (byte) 61;
        context8.currentLinePos = 'a';
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_18 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray17);
        context8.buffer = byteArray17;
        context1.buffer = byteArray17;
        java.lang.String str21 = context1.toString();
        java.lang.String str22 = context1.toString();
        byte[] byteArray23 = context1.buffer;
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32((int) (byte) 0, byteArray23);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 0, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Context[buffer=[1, 0, 10], currentLinePos=97, eof=false, ibitWorkArea=52, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str21, "Context[buffer=[1, 0, 10], currentLinePos=97, eof=false, ibitWorkArea=52, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Context[buffer=[1, 0, 10], currentLinePos=97, eof=false, ibitWorkArea=52, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str22, "Context[buffer=[1, 0, 10], currentLinePos=97, eof=false, ibitWorkArea=52, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 0, 10]");
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        byte[] byteArray6 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_8 = new org.apache.commons.codec.binary.Base32(0, byteArray6, false);
        java.lang.String str9 = base32_1.encodeToString(byteArray6);
        byte[] byteArray16 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean17 = base32_1.containsAlphabetOrPad(byteArray16);
        boolean boolean19 = base32_1.isInAlphabet((byte) 1);
        org.apache.commons.codec.binary.Base32 base32_22 = new org.apache.commons.codec.binary.Base32(false);
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_30 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray29);
        byte[] byteArray31 = base32_24.encode(byteArray29);
        boolean boolean32 = base32_22.containsAlphabetOrPad(byteArray31);
        byte[] byteArray35 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_37 = new org.apache.commons.codec.binary.Base32(0, byteArray35, false);
        int int38 = base32_37.lineLength;
        byte byte39 = base32_37.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context40 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean41 = base32_37.hasData(context40);
        context40.pos = 0;
        int int44 = context40.readPos;
        byte[] byteArray47 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_49 = new org.apache.commons.codec.binary.Base32(0, byteArray47, false);
        org.apache.commons.codec.binary.Base32 base32_51 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean53 = base32_51.isInAlphabet("");
        byte[] byteArray56 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_58 = new org.apache.commons.codec.binary.Base32(0, byteArray56, false);
        java.lang.String str59 = base32_51.encodeToString(byteArray56);
        byte[] byteArray66 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean67 = base32_51.containsAlphabetOrPad(byteArray66);
        byte[] byteArray68 = base32_49.encode(byteArray66);
        byte[] byteArray74 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str75 = base32_49.encodeToString(byteArray74);
        context40.buffer = byteArray74;
        org.apache.commons.codec.binary.BaseNCodec.Context context79 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        long long80 = context79.lbitWorkArea;
        base32_22.decode(byteArray74, 0, (int) (byte) 0, context79);
        org.apache.commons.codec.binary.BaseNCodec.Context context82 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context82.ibitWorkArea = (byte) 61;
        context82.currentLinePos = 'a';
        byte[] byteArray91 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_92 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray91);
        context82.buffer = byteArray91;
        boolean boolean95 = base32_22.isInAlphabet(byteArray91, true);
        org.apache.commons.codec.binary.Base32 base32_96 = new org.apache.commons.codec.binary.Base32((int) (short) -1, byteArray91);
        long long97 = base32_1.getEncodedLength(byteArray91);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CG======" + "'", str9, "CG======");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + byte39 + "' != '" + (byte) 61 + "'", byte39 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[100]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "CG======" + "'", str59, "CG======");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "MQ6QUCQB" + "'", str75, "MQ6QUCQB");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[1, 0, 10]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 8L + "'", long97 == 8L);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(true, (byte) -1);
        byte[] byteArray5 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32(0, byteArray5, false);
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean11 = base32_9.isInAlphabet("");
        byte[] byteArray14 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(0, byteArray14, false);
        java.lang.String str17 = base32_9.encodeToString(byteArray14);
        byte[] byteArray24 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean25 = base32_9.containsAlphabetOrPad(byteArray24);
        byte[] byteArray26 = base32_7.encode(byteArray24);
        byte[] byteArray27 = null;
        byte[] byteArray28 = base32_7.decode(byteArray27);
        org.apache.commons.codec.binary.Base32 base32_30 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean32 = base32_30.isInAlphabet("");
        byte[] byteArray35 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_37 = new org.apache.commons.codec.binary.Base32(0, byteArray35, false);
        java.lang.String str38 = base32_30.encodeToString(byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_45 = new org.apache.commons.codec.binary.Base32(0, byteArray43, false);
        int int46 = base32_45.lineLength;
        byte byte47 = base32_45.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context48 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean49 = base32_45.hasData(context48);
        int int50 = base32_7.readResults(byteArray35, (int) (short) 10, (int) (short) -1, context48);
        java.lang.String str51 = base32_2.encodeToString(byteArray35);
        byte[] byteArray53 = base32_2.decode("Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=8192, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CG======" + "'", str17, "CG======");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNull(byteArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "CG======" + "'", str38, "CG======");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + byte47 + "' != '" + (byte) 61 + "'", byte47 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str51, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[101, 114, 5, 32, 41, 18, -128, 0, 100]");
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        int int12 = context7.modulus;
        int int13 = context7.ibitWorkArea;
        boolean boolean14 = context7.eof;
        context7.pos = (short) 100;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray6);
        byte[] byteArray8 = base32_1.encode(byteArray6);
        org.apache.commons.codec.binary.Base32 base32_11 = new org.apache.commons.codec.binary.Base32(true, (byte) -1);
        byte byte12 = base32_11.pad;
        boolean boolean14 = base32_11.isInAlphabet((byte) 0);
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(false);
        org.apache.commons.codec.binary.Base32 base32_18 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray23);
        byte[] byteArray25 = base32_18.encode(byteArray23);
        boolean boolean26 = base32_16.containsAlphabetOrPad(byteArray25);
        byte[] byteArray29 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_31 = new org.apache.commons.codec.binary.Base32(0, byteArray29, false);
        int int32 = base32_31.lineLength;
        byte byte33 = base32_31.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context34 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean35 = base32_31.hasData(context34);
        context34.pos = 0;
        int int38 = context34.readPos;
        byte[] byteArray41 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_43 = new org.apache.commons.codec.binary.Base32(0, byteArray41, false);
        org.apache.commons.codec.binary.Base32 base32_45 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean47 = base32_45.isInAlphabet("");
        byte[] byteArray50 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_52 = new org.apache.commons.codec.binary.Base32(0, byteArray50, false);
        java.lang.String str53 = base32_45.encodeToString(byteArray50);
        byte[] byteArray60 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean61 = base32_45.containsAlphabetOrPad(byteArray60);
        byte[] byteArray62 = base32_43.encode(byteArray60);
        byte[] byteArray68 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str69 = base32_43.encodeToString(byteArray68);
        context34.buffer = byteArray68;
        org.apache.commons.codec.binary.BaseNCodec.Context context73 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        long long74 = context73.lbitWorkArea;
        base32_16.decode(byteArray68, 0, (int) (byte) 0, context73);
        java.lang.String str76 = base32_11.encodeToString(byteArray68);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj77 = base32_1.decode((java.lang.Object) base32_11);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) -1 + "'", byte12 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + byte33 + "' != '" + (byte) 61 + "'", byte33 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[100]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "CG======" + "'", str53, "CG======");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "MQ6QUCQB" + "'", str69, "MQ6QUCQB");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "CGUGK2G1" + "'", str76, "CGUGK2G1");
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean12 = base32_10.isInAlphabet("");
        byte[] byteArray15 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(0, byteArray15, false);
        java.lang.String str18 = base32_10.encodeToString(byteArray15);
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean26 = base32_10.containsAlphabetOrPad(byteArray25);
        byte[] byteArray27 = base32_4.encode(byteArray25);
        org.apache.commons.codec.binary.Base32 base32_29 = new org.apache.commons.codec.binary.Base32(0);
        byte[] byteArray32 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_34 = new org.apache.commons.codec.binary.Base32(0, byteArray32, false);
        int int35 = base32_34.lineLength;
        byte byte36 = base32_34.PAD;
        byte[] byteArray39 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_41 = new org.apache.commons.codec.binary.Base32(0, byteArray39, false);
        int int42 = base32_41.lineLength;
        byte[] byteArray44 = base32_41.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str45 = base32_34.encodeToString(byteArray44);
        byte[] byteArray46 = base32_29.encode(byteArray44);
        byte[] byteArray47 = base32_4.decode(byteArray46);
        byte byte48 = base32_4.pad;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CG======" + "'", str18, "CG======");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + byte36 + "' != '" + (byte) 61 + "'", byte36 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "EEEA====" + "'", str45, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[33, 8]");
        org.junit.Assert.assertTrue("'" + byte48 + "' != '" + (byte) 61 + "'", byte48 == (byte) 61);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        int int9 = context7.ibitWorkArea;
        context7.readPos = 0;
        context7.eof = true;
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean18 = base32_16.isInAlphabet("");
        byte[] byteArray21 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_23 = new org.apache.commons.codec.binary.Base32(0, byteArray21, false);
        java.lang.String str24 = base32_16.encodeToString(byteArray21);
        org.apache.commons.codec.binary.Base32 base32_26 = new org.apache.commons.codec.binary.Base32((int) (byte) 1, byteArray21, true);
        context7.buffer = byteArray21;
        context7.readPos = (short) -1;
        int int30 = context7.currentLinePos;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "CG======" + "'", str24, "CG======");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        byte[] byteArray7 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32(0, byteArray7, false);
        org.apache.commons.codec.binary.Base32 base32_11 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean13 = base32_11.isInAlphabet("");
        byte[] byteArray16 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_18 = new org.apache.commons.codec.binary.Base32(0, byteArray16, false);
        java.lang.String str19 = base32_11.encodeToString(byteArray16);
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean27 = base32_11.containsAlphabetOrPad(byteArray26);
        byte[] byteArray28 = base32_9.encode(byteArray26);
        java.lang.Object obj29 = base32_4.encode((java.lang.Object) byteArray28);
        byte[] byteArray30 = null;
        byte[] byteArray31 = base32_4.encode(byteArray30);
        byte byte32 = base32_4.PAD;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CG======" + "'", str19, "CG======");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertTrue("'" + byte32 + "' != '" + (byte) 61 + "'", byte32 == (byte) 61);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        byte[] byteArray6 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_8 = new org.apache.commons.codec.binary.Base32(0, byteArray6, false);
        java.lang.String str9 = base32_1.encodeToString(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_14 = new org.apache.commons.codec.binary.Base32(0, byteArray12, false);
        int int15 = base32_14.lineLength;
        byte byte16 = base32_14.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context17 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean18 = base32_14.hasData(context17);
        context17.pos = 0;
        int int21 = context17.readPos;
        byte[] byteArray24 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_26 = new org.apache.commons.codec.binary.Base32(0, byteArray24, false);
        org.apache.commons.codec.binary.Base32 base32_28 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean30 = base32_28.isInAlphabet("");
        byte[] byteArray33 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_35 = new org.apache.commons.codec.binary.Base32(0, byteArray33, false);
        java.lang.String str36 = base32_28.encodeToString(byteArray33);
        byte[] byteArray43 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean44 = base32_28.containsAlphabetOrPad(byteArray43);
        byte[] byteArray45 = base32_26.encode(byteArray43);
        context17.buffer = byteArray43;
        byte[] byteArray51 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_53 = new org.apache.commons.codec.binary.Base32(0, byteArray51, false);
        int int54 = base32_53.lineLength;
        byte byte55 = base32_53.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context56 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean57 = base32_53.hasData(context56);
        context56.pos = 0;
        int int60 = context56.readPos;
        context56.currentLinePos = (-1);
        context56.eof = true;
        int int65 = context56.currentLinePos;
        base32_1.encode(byteArray43, 64, (int) (short) 1, context56);
        org.apache.commons.codec.binary.Base32 base32_68 = new org.apache.commons.codec.binary.Base32(0);
        byte[] byteArray71 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_73 = new org.apache.commons.codec.binary.Base32(0, byteArray71, false);
        int int74 = base32_73.lineLength;
        byte byte75 = base32_73.PAD;
        byte[] byteArray78 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_80 = new org.apache.commons.codec.binary.Base32(0, byteArray78, false);
        int int81 = base32_80.lineLength;
        byte[] byteArray83 = base32_80.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str84 = base32_73.encodeToString(byteArray83);
        byte[] byteArray85 = base32_68.encode(byteArray83);
        byte[] byteArray86 = base32_1.encode(byteArray83);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CG======" + "'", str9, "CG======");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 61 + "'", byte16 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "CG======" + "'", str36, "CG======");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + byte55 + "' != '" + (byte) 61 + "'", byte55 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[100]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + byte75 + "' != '" + (byte) 61 + "'", byte75 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[100]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "EEEA====" + "'", str84, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[52, 52, 52, 48, 61, 61, 61, 61]");
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        byte[] byteArray7 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32(0, byteArray7, false);
        org.apache.commons.codec.binary.Base32 base32_11 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean13 = base32_11.isInAlphabet("");
        byte[] byteArray16 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_18 = new org.apache.commons.codec.binary.Base32(0, byteArray16, false);
        java.lang.String str19 = base32_11.encodeToString(byteArray16);
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean27 = base32_11.containsAlphabetOrPad(byteArray26);
        byte[] byteArray28 = base32_9.encode(byteArray26);
        java.lang.Object obj29 = base32_4.encode((java.lang.Object) byteArray28);
        org.apache.commons.codec.binary.Base32 base32_31 = new org.apache.commons.codec.binary.Base32((byte) 100);
        boolean boolean33 = base32_31.isInAlphabet("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray35 = base32_31.decode("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        java.lang.Object obj36 = base32_4.decode((java.lang.Object) "JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        int int37 = base32_4.lineLength;
        java.lang.Class<?> wildcardClass38 = base32_4.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CG======" + "'", str19, "CG======");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) 100);
        boolean boolean3 = base32_1.isInAlphabet("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray6 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_8 = new org.apache.commons.codec.binary.Base32(0, byteArray6, false);
        int int9 = base32_8.lineLength;
        byte[] byteArray11 = base32_8.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        byte[] byteArray12 = base32_1.encode(byteArray11);
        org.apache.commons.codec.binary.Base32 base32_14 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean16 = base32_14.isInAlphabet("");
        byte[] byteArray18 = base32_14.decode("MQ6QUCQB");
        byte[] byteArray21 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_23 = new org.apache.commons.codec.binary.Base32(0, byteArray21, false);
        int int24 = base32_23.lineLength;
        byte byte25 = base32_23.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context26 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean27 = base32_23.hasData(context26);
        org.apache.commons.codec.binary.Base32 base32_29 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean31 = base32_29.isInAlphabet("");
        byte[] byteArray34 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_36 = new org.apache.commons.codec.binary.Base32(0, byteArray34, false);
        java.lang.String str37 = base32_29.encodeToString(byteArray34);
        byte[] byteArray44 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean45 = base32_29.containsAlphabetOrPad(byteArray44);
        byte[] byteArray46 = base32_23.encode(byteArray44);
        byte[] byteArray47 = base32_14.encode(byteArray46);
        org.apache.commons.codec.binary.Base32 base32_49 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean51 = base32_49.isInAlphabet("");
        byte[] byteArray53 = base32_49.decode("MQ6QUCQB");
        org.apache.commons.codec.binary.Base32 base32_56 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean58 = base32_56.isInAlphabet("");
        byte[] byteArray61 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_63 = new org.apache.commons.codec.binary.Base32(0, byteArray61, false);
        java.lang.String str64 = base32_56.encodeToString(byteArray61);
        byte[] byteArray71 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean72 = base32_56.containsAlphabetOrPad(byteArray71);
        org.apache.commons.codec.binary.Base32 base32_74 = new org.apache.commons.codec.binary.Base32((int) (byte) 0, byteArray71, false);
        boolean boolean75 = base32_49.containsAlphabetOrPad(byteArray71);
        byte[] byteArray76 = base32_14.encode(byteArray71);
        org.apache.commons.codec.binary.BaseNCodec.Context context79 = null;
        // The following exception was thrown during execution in test generation
        try {
            base32_1.encode(byteArray71, 1, (int) (short) -1, context79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[33, 8]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[69, 69, 69, 65, 100, 100, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-74, -115, -81, 51, 75]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 61 + "'", byte25 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "CG======" + "'", str37, "CG======");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[57, 76, 56, 75, 50, 75, 65, 49, 66, 57, 48, 75, 50, 74, 65, 72, 55, 75, 85, 74, 81, 70, 57, 84, 55, 75, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-74, -115, -81, 51, 75]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "CG======" + "'", str64, "CG======");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[67, 71, 48, 71, 48, 80, 48, 48, 67, 71, 61, 61, 61, 61, 61, 61]");
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) 1);
        byte byte2 = base32_1.pad;
        org.apache.commons.codec.binary.BaseNCodec.Context context3 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context3.ibitWorkArea = (byte) 61;
        context3.currentLinePos = 'a';
        context3.ibitWorkArea = '4';
        org.apache.commons.codec.binary.BaseNCodec.Context context10 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context10.ibitWorkArea = (byte) 61;
        context10.currentLinePos = 'a';
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_20 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray19);
        context10.buffer = byteArray19;
        context3.buffer = byteArray19;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj23 = base32_1.decode((java.lang.Object) context3);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 1 + "'", byte2 == (byte) 1);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 0, 10]");
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32((byte) 100);
        boolean boolean4 = base32_2.isInAlphabet("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray7 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32(0, byteArray7, false);
        int int10 = base32_9.lineLength;
        byte[] byteArray12 = base32_9.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        byte[] byteArray13 = base32_2.encode(byteArray12);
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32((int) (short) 100, byteArray12, true, (byte) -1);
        int int17 = base32_16.getDefaultBufferSize();
        byte[] byteArray19 = base32_16.decode("Context[buffer=[1, 0, 10], currentLinePos=97, eof=false, ibitWorkArea=52, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[33, 8]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[69, 69, 69, 65, 100, 100, 100, 100]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8192 + "'", int17 == 8192);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[96, 64, 16, 87, 41, 58, -118, 37, 0, 0, -56]");
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        byte[] byteArray3 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32(0, byteArray3, false);
        int int6 = base32_5.lineLength;
        byte byte7 = base32_5.PAD;
        byte[] byteArray10 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_12 = new org.apache.commons.codec.binary.Base32(0, byteArray10, false);
        int int13 = base32_12.lineLength;
        byte[] byteArray15 = base32_12.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str16 = base32_5.encodeToString(byteArray15);
        org.apache.commons.codec.binary.Base32 base32_19 = new org.apache.commons.codec.binary.Base32((-1), byteArray15, false, (byte) 0);
        int int20 = base32_19.getDefaultBufferSize();
        byte[] byteArray21 = null;
        byte[] byteArray26 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_28 = new org.apache.commons.codec.binary.Base32(0, byteArray26, false);
        int int29 = base32_28.lineLength;
        byte byte30 = base32_28.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context31 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean32 = base32_28.hasData(context31);
        int int33 = context31.ibitWorkArea;
        context31.readPos = 0;
        context31.eof = true;
        org.apache.commons.codec.binary.Base32 base32_40 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean42 = base32_40.isInAlphabet("");
        byte[] byteArray45 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_47 = new org.apache.commons.codec.binary.Base32(0, byteArray45, false);
        java.lang.String str48 = base32_40.encodeToString(byteArray45);
        org.apache.commons.codec.binary.Base32 base32_50 = new org.apache.commons.codec.binary.Base32((int) (byte) 1, byteArray45, true);
        context31.buffer = byteArray45;
        base32_19.decode(byteArray21, 61, (int) (short) 100, context31);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 61 + "'", byte7 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "EEEA====" + "'", str16, "EEEA====");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8192 + "'", int20 == 8192);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + byte30 + "' != '" + (byte) 61 + "'", byte30 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "CG======" + "'", str48, "CG======");
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet("CG======");
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        byte[] byteArray13 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_15 = new org.apache.commons.codec.binary.Base32(0, byteArray13, false);
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean19 = base32_17.isInAlphabet("");
        byte[] byteArray22 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32(0, byteArray22, false);
        java.lang.String str25 = base32_17.encodeToString(byteArray22);
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean33 = base32_17.containsAlphabetOrPad(byteArray32);
        byte[] byteArray34 = base32_15.encode(byteArray32);
        java.lang.Object obj35 = base32_10.encode((java.lang.Object) byteArray34);
        byte[] byteArray38 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_40 = new org.apache.commons.codec.binary.Base32(0, byteArray38, false);
        org.apache.commons.codec.binary.Base32 base32_42 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean44 = base32_42.isInAlphabet("");
        byte[] byteArray47 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_49 = new org.apache.commons.codec.binary.Base32(0, byteArray47, false);
        java.lang.String str50 = base32_42.encodeToString(byteArray47);
        byte[] byteArray57 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean58 = base32_42.containsAlphabetOrPad(byteArray57);
        byte[] byteArray59 = base32_40.encode(byteArray57);
        java.lang.String str60 = base32_10.encodeAsString(byteArray59);
        boolean boolean62 = base32_1.isInAlphabet(byteArray59, false);
        byte[] byteArray64 = base32_1.decode("");
        boolean boolean66 = base32_1.isInAlphabet((byte) 10);
        byte[] byteArray69 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_71 = new org.apache.commons.codec.binary.Base32(0, byteArray69, false);
        org.apache.commons.codec.binary.Base32 base32_73 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean75 = base32_73.isInAlphabet("");
        byte[] byteArray78 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_80 = new org.apache.commons.codec.binary.Base32(0, byteArray78, false);
        java.lang.String str81 = base32_73.encodeToString(byteArray78);
        byte[] byteArray88 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean89 = base32_73.containsAlphabetOrPad(byteArray88);
        byte[] byteArray90 = base32_71.encode(byteArray88);
        byte[] byteArray91 = null;
        byte[] byteArray92 = base32_71.decode(byteArray91);
        org.apache.commons.codec.binary.BaseNCodec.Context context93 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context93.ibitWorkArea = 0;
        int int96 = base32_71.available(context93);
        int int97 = base32_1.available(context93);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CG======" + "'", str25, "CG======");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "CG======" + "'", str50, "CG======");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "JVIUCUKBLJAUCTKRHU6T2PJ5HU======" + "'", str60, "JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[100]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[100]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "CG======" + "'", str81, "CG======");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNull(byteArray92);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        int int2 = base32_1.lineLength;
        boolean boolean4 = base32_1.isInAlphabet((byte) 10);
        byte byte5 = base32_1.PAD;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 61 + "'", byte5 == (byte) 61);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) -1);
        org.apache.commons.codec.binary.Base32 base32_3 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean5 = base32_3.isInAlphabet("");
        byte[] byteArray7 = base32_3.decode("MQ6QUCQB");
        byte[] byteArray8 = base32_1.decode(byteArray7);
        byte byte9 = base32_1.pad;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-74, -115, -81, 51, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-38]");
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) -1 + "'", byte9 == (byte) -1);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        org.apache.commons.codec.binary.BaseNCodec.Context context0 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context0.ibitWorkArea = (byte) 61;
        context0.currentLinePos = 'a';
        context0.ibitWorkArea = '4';
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context7.ibitWorkArea = (byte) 61;
        context7.currentLinePos = 'a';
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray16);
        context7.buffer = byteArray16;
        context0.buffer = byteArray16;
        java.lang.String str20 = context0.toString();
        context0.eof = true;
        int int23 = context0.modulus;
        context0.pos = 100;
        context0.eof = false;
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 0, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Context[buffer=[1, 0, 10], currentLinePos=97, eof=false, ibitWorkArea=52, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str20, "Context[buffer=[1, 0, 10], currentLinePos=97, eof=false, ibitWorkArea=52, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        context7.currentLinePos = (-1);
        byte[] byteArray14 = context7.buffer;
        context7.ibitWorkArea = (-1);
        context7.lbitWorkArea = 64;
        long long19 = context7.lbitWorkArea;
        context7.readPos = (byte) 1;
        context7.lbitWorkArea = (byte) 100;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 64L + "'", long19 == 64L);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte[] byteArray7 = base32_4.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        int int8 = base32_4.getDefaultBufferSize();
        org.apache.commons.codec.binary.BaseNCodec.Context context9 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        byte[] byteArray10 = context9.buffer;
        boolean boolean11 = base32_4.hasData(context9);
        long long12 = context9.lbitWorkArea;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[33, 8]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(255);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) 100);
        int int2 = base32_1.getDefaultBufferSize();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        int int9 = context7.ibitWorkArea;
        context7.readPos = 0;
        context7.currentLinePos = (byte) -1;
        int int14 = context7.pos;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        org.apache.commons.codec.binary.Base32 base32_0 = new org.apache.commons.codec.binary.Base32();
        org.apache.commons.codec.binary.BaseNCodec.Context context1 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context1.ibitWorkArea = (byte) 61;
        context1.currentLinePos = 'a';
        boolean boolean6 = base32_0.hasData(context1);
        org.apache.commons.codec.binary.Base32 base32_8 = new org.apache.commons.codec.binary.Base32((byte) 100);
        boolean boolean10 = base32_8.isInAlphabet("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray12 = base32_8.decode("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_18 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray17);
        java.lang.String str19 = base32_8.encodeAsString(byteArray17);
        boolean boolean21 = base32_8.isInAlphabet((byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj22 = base32_0.decode((java.lang.Object) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 0, 10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "AEAAUddd" + "'", str19, "AEAAUddd");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) (short) 0);
        int int2 = base32_1.getDefaultBufferSize();
        org.apache.commons.codec.EncoderException encoderException4 = new org.apache.commons.codec.EncoderException("Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj5 = base32_1.decode((java.lang.Object) encoderException4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(false, (byte) 100);
        byte[] byteArray6 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_8 = new org.apache.commons.codec.binary.Base32(0, byteArray6, false);
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        byte[] byteArray14 = base32_8.decode(byteArray11);
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32((int) (byte) 100, byteArray14, false, (byte) 1);
        java.lang.String str18 = base32_2.encodeToString(byteArray14);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        byte[] byteArray3 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32(0, byteArray3, false);
        int int6 = base32_5.lineLength;
        byte byte7 = base32_5.PAD;
        byte[] byteArray10 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_12 = new org.apache.commons.codec.binary.Base32(0, byteArray10, false);
        int int13 = base32_12.lineLength;
        byte[] byteArray15 = base32_12.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str16 = base32_5.encodeToString(byteArray15);
        byte[] byteArray19 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_21 = new org.apache.commons.codec.binary.Base32(0, byteArray19, false);
        org.apache.commons.codec.binary.Base32 base32_23 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean25 = base32_23.isInAlphabet("");
        byte[] byteArray28 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_30 = new org.apache.commons.codec.binary.Base32(0, byteArray28, false);
        java.lang.String str31 = base32_23.encodeToString(byteArray28);
        byte[] byteArray38 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean39 = base32_23.containsAlphabetOrPad(byteArray38);
        byte[] byteArray40 = base32_21.encode(byteArray38);
        byte[] byteArray46 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str47 = base32_21.encodeToString(byteArray46);
        java.lang.Object obj48 = base32_5.decode((java.lang.Object) byteArray46);
        byte byte49 = base32_5.pad;
        boolean boolean51 = base32_5.isInAlphabet("MQ======");
        org.apache.commons.codec.binary.Base32 base32_53 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean55 = base32_53.isInAlphabet("");
        byte[] byteArray57 = base32_53.decode("MQ6QUCQB");
        org.apache.commons.codec.binary.Base32 base32_60 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean62 = base32_60.isInAlphabet("");
        byte[] byteArray65 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_67 = new org.apache.commons.codec.binary.Base32(0, byteArray65, false);
        java.lang.String str68 = base32_60.encodeToString(byteArray65);
        byte[] byteArray75 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean76 = base32_60.containsAlphabetOrPad(byteArray75);
        org.apache.commons.codec.binary.Base32 base32_78 = new org.apache.commons.codec.binary.Base32((int) (byte) 0, byteArray75, false);
        boolean boolean79 = base32_53.containsAlphabetOrPad(byteArray75);
        org.apache.commons.codec.binary.BaseNCodec.Context context80 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context80.ibitWorkArea = (byte) 61;
        context80.currentLinePos = 'a';
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_90 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray89);
        context80.buffer = byteArray89;
        byte[] byteArray92 = base32_53.encode(byteArray89);
        java.lang.String str93 = base32_5.encodeAsString(byteArray92);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base32 base32_95 = new org.apache.commons.codec.binary.Base32((int) '4', byteArray92, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain Base32 characters: [0400K===]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 61 + "'", byte7 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "EEEA====" + "'", str16, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "CG======" + "'", str31, "CG======");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "MQ6QUCQB" + "'", str47, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertTrue("'" + byte49 + "' != '" + (byte) 61 + "'", byte49 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-74, -115, -81, 51, 75]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[100]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "CG======" + "'", str68, "CG======");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "GA2DAMCLHU6T2===" + "'", str93, "GA2DAMCLHU6T2===");
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte[] byteArray7 = base32_4.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        int int8 = base32_4.getDefaultBufferSize();
        byte byte9 = base32_4.PAD;
        byte[] byteArray12 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_14 = new org.apache.commons.codec.binary.Base32(0, byteArray12, false);
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean18 = base32_16.isInAlphabet("");
        byte[] byteArray21 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_23 = new org.apache.commons.codec.binary.Base32(0, byteArray21, false);
        java.lang.String str24 = base32_16.encodeToString(byteArray21);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean32 = base32_16.containsAlphabetOrPad(byteArray31);
        byte[] byteArray33 = base32_14.encode(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str40 = base32_14.encodeToString(byteArray39);
        byte[] byteArray42 = base32_14.decode("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray45 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_47 = new org.apache.commons.codec.binary.Base32(0, byteArray45, false);
        java.lang.String str48 = base32_14.encodeAsString(byteArray45);
        byte[] byteArray53 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_55 = new org.apache.commons.codec.binary.Base32(0, byteArray53, false);
        int int56 = base32_55.lineLength;
        byte byte57 = base32_55.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context58 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean59 = base32_55.hasData(context58);
        byte[] byteArray60 = null;
        context58.buffer = byteArray60;
        context58.currentLinePos = (short) 100;
        long long64 = context58.lbitWorkArea;
        base32_4.encode(byteArray45, (int) (byte) 10, (-1), context58);
        context58.readPos = 'a';
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[33, 8]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 61 + "'", byte9 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "CG======" + "'", str24, "CG======");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "MQ6QUCQB" + "'", str40, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "MQ======" + "'", str48, "MQ======");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[100]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + byte57 + "' != '" + (byte) 61 + "'", byte57 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        byte[] byteArray14 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(0, byteArray14, false);
        org.apache.commons.codec.binary.Base32 base32_18 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean20 = base32_18.isInAlphabet("");
        byte[] byteArray23 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_25 = new org.apache.commons.codec.binary.Base32(0, byteArray23, false);
        java.lang.String str26 = base32_18.encodeToString(byteArray23);
        byte[] byteArray33 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean34 = base32_18.containsAlphabetOrPad(byteArray33);
        byte[] byteArray35 = base32_16.encode(byteArray33);
        byte[] byteArray41 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str42 = base32_16.encodeToString(byteArray41);
        context7.buffer = byteArray41;
        java.lang.String str44 = context7.toString();
        context7.pos = 'a';
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "CG======" + "'", str26, "CG======");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "MQ6QUCQB" + "'", str42, "MQ6QUCQB");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str44, "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        org.apache.commons.codec.binary.Base32 base32_3 = new org.apache.commons.codec.binary.Base32(false, (byte) 61);
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean7 = base32_5.isInAlphabet("");
        byte[] byteArray9 = base32_5.decode("MQ6QUCQB");
        byte[] byteArray12 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_14 = new org.apache.commons.codec.binary.Base32(0, byteArray12, false);
        int int15 = base32_14.lineLength;
        byte byte16 = base32_14.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context17 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean18 = base32_14.hasData(context17);
        org.apache.commons.codec.binary.Base32 base32_20 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean22 = base32_20.isInAlphabet("");
        byte[] byteArray25 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_27 = new org.apache.commons.codec.binary.Base32(0, byteArray25, false);
        java.lang.String str28 = base32_20.encodeToString(byteArray25);
        byte[] byteArray35 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean36 = base32_20.containsAlphabetOrPad(byteArray35);
        byte[] byteArray37 = base32_14.encode(byteArray35);
        byte[] byteArray38 = base32_5.encode(byteArray37);
        boolean boolean40 = base32_3.isInAlphabet(byteArray37, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base32 base32_41 = new org.apache.commons.codec.binary.Base32((int) '4', byteArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain Base32 characters: [MQAQAZAAMQ======]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-74, -115, -81, 51, 75]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 61 + "'", byte16 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "CG======" + "'", str28, "CG======");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[57, 76, 56, 75, 50, 75, 65, 49, 66, 57, 48, 75, 50, 74, 65, 72, 55, 75, 85, 74, 81, 70, 57, 84, 55, 75, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(true, (byte) -1);
        byte[] byteArray4 = base32_2.decode("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-97, -27, -26, 122, -117, -84, -43, -26, 118, -101, -113, -115, -47, 102, 101, -113]");
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet("CG======");
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        byte[] byteArray13 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_15 = new org.apache.commons.codec.binary.Base32(0, byteArray13, false);
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean19 = base32_17.isInAlphabet("");
        byte[] byteArray22 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32(0, byteArray22, false);
        java.lang.String str25 = base32_17.encodeToString(byteArray22);
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean33 = base32_17.containsAlphabetOrPad(byteArray32);
        byte[] byteArray34 = base32_15.encode(byteArray32);
        java.lang.Object obj35 = base32_10.encode((java.lang.Object) byteArray34);
        byte[] byteArray38 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_40 = new org.apache.commons.codec.binary.Base32(0, byteArray38, false);
        org.apache.commons.codec.binary.Base32 base32_42 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean44 = base32_42.isInAlphabet("");
        byte[] byteArray47 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_49 = new org.apache.commons.codec.binary.Base32(0, byteArray47, false);
        java.lang.String str50 = base32_42.encodeToString(byteArray47);
        byte[] byteArray57 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean58 = base32_42.containsAlphabetOrPad(byteArray57);
        byte[] byteArray59 = base32_40.encode(byteArray57);
        java.lang.String str60 = base32_10.encodeAsString(byteArray59);
        boolean boolean62 = base32_1.isInAlphabet(byteArray59, false);
        byte[] byteArray64 = base32_1.decode("");
        org.apache.commons.codec.binary.BaseNCodec.Context context65 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context65.ibitWorkArea = (byte) 61;
        long long68 = context65.lbitWorkArea;
        int int69 = context65.modulus;
        boolean boolean70 = base32_1.hasData(context65);
        context65.eof = true;
        context65.eof = true;
        int int75 = context65.pos;
        int int76 = context65.modulus;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CG======" + "'", str25, "CG======");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "CG======" + "'", str50, "CG======");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "JVIUCUKBLJAUCTKRHU6T2PJ5HU======" + "'", str60, "JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        byte[] byteArray9 = null;
        context7.buffer = byteArray9;
        context7.currentLinePos = (short) 100;
        long long13 = context7.lbitWorkArea;
        context7.eof = true;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean8 = base32_6.isInAlphabet("");
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        java.lang.String str14 = base32_6.encodeToString(byteArray11);
        byte[] byteArray21 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean22 = base32_6.containsAlphabetOrPad(byteArray21);
        byte[] byteArray23 = base32_4.encode(byteArray21);
        byte[] byteArray24 = null;
        byte[] byteArray25 = base32_4.decode(byteArray24);
        org.apache.commons.codec.binary.Base32 base32_27 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean29 = base32_27.isInAlphabet("");
        byte[] byteArray32 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_34 = new org.apache.commons.codec.binary.Base32(0, byteArray32, false);
        java.lang.String str35 = base32_27.encodeToString(byteArray32);
        byte[] byteArray40 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_42 = new org.apache.commons.codec.binary.Base32(0, byteArray40, false);
        int int43 = base32_42.lineLength;
        byte byte44 = base32_42.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context45 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean46 = base32_42.hasData(context45);
        int int47 = base32_4.readResults(byteArray32, (int) (short) 10, (int) (short) -1, context45);
        org.apache.commons.codec.binary.Base32 base32_49 = new org.apache.commons.codec.binary.Base32((byte) 100);
        boolean boolean51 = base32_49.isInAlphabet("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray53 = base32_49.decode("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray54 = base32_4.decode(byteArray53);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CG======" + "'", str14, "CG======");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "CG======" + "'", str35, "CG======");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[100]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + byte44 + "' != '" + (byte) 61 + "'", byte44 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[100, 1, 0, 100, 0, 100]");
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        byte[] byteArray5 = base32_1.decode("MQ6QUCQB");
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        int int11 = base32_10.lineLength;
        byte byte12 = base32_10.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context13 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean14 = base32_10.hasData(context13);
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean18 = base32_16.isInAlphabet("");
        byte[] byteArray21 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_23 = new org.apache.commons.codec.binary.Base32(0, byteArray21, false);
        java.lang.String str24 = base32_16.encodeToString(byteArray21);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean32 = base32_16.containsAlphabetOrPad(byteArray31);
        byte[] byteArray33 = base32_10.encode(byteArray31);
        byte[] byteArray34 = base32_1.encode(byteArray33);
        byte[] byteArray37 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_39 = new org.apache.commons.codec.binary.Base32(0, byteArray37, false);
        org.apache.commons.codec.binary.Base32 base32_41 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean43 = base32_41.isInAlphabet("");
        byte[] byteArray46 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_48 = new org.apache.commons.codec.binary.Base32(0, byteArray46, false);
        java.lang.String str49 = base32_41.encodeToString(byteArray46);
        byte[] byteArray56 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean57 = base32_41.containsAlphabetOrPad(byteArray56);
        byte[] byteArray58 = base32_39.encode(byteArray56);
        byte[] byteArray64 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str65 = base32_39.encodeToString(byteArray64);
        byte[] byteArray67 = base32_39.decode("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        long long68 = base32_1.getEncodedLength(byteArray67);
        byte[] byteArray69 = null;
        boolean boolean70 = base32_1.containsAlphabetOrPad(byteArray69);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-74, -115, -81, 51, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 61 + "'", byte12 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "CG======" + "'", str24, "CG======");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[57, 76, 56, 75, 50, 75, 65, 49, 66, 57, 48, 75, 50, 74, 65, 72, 55, 75, 85, 74, 81, 70, 57, 84, 55, 75, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[100]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "CG======" + "'", str49, "CG======");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "MQ6QUCQB" + "'", str65, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 32L + "'", long68 == 32L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        int int12 = context7.modulus;
        int int13 = context7.modulus;
        int int14 = context7.modulus;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte[] byteArray7 = base32_4.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        int int8 = base32_4.getDefaultBufferSize();
        boolean boolean10 = base32_4.isInAlphabet((byte) 1);
        org.apache.commons.codec.binary.BaseNCodec.Context context11 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean12 = base32_4.hasData(context11);
        context11.modulus = 1;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[33, 8]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        org.apache.commons.codec.binary.BaseNCodec.Context context0 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context0.ibitWorkArea = 0;
        int int3 = context0.currentLinePos;
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean7 = base32_5.isInAlphabet("");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_12 = new org.apache.commons.codec.binary.Base32(0, byteArray10, false);
        java.lang.String str13 = base32_5.encodeToString(byteArray10);
        byte[] byteArray20 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean21 = base32_5.containsAlphabetOrPad(byteArray20);
        org.apache.commons.codec.binary.Base32 base32_23 = new org.apache.commons.codec.binary.Base32(false);
        org.apache.commons.codec.binary.Base32 base32_25 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_31 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray30);
        byte[] byteArray32 = base32_25.encode(byteArray30);
        boolean boolean33 = base32_23.containsAlphabetOrPad(byteArray32);
        byte[] byteArray36 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_38 = new org.apache.commons.codec.binary.Base32(0, byteArray36, false);
        int int39 = base32_38.lineLength;
        byte byte40 = base32_38.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context41 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean42 = base32_38.hasData(context41);
        context41.pos = 0;
        int int45 = context41.readPos;
        byte[] byteArray48 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_50 = new org.apache.commons.codec.binary.Base32(0, byteArray48, false);
        org.apache.commons.codec.binary.Base32 base32_52 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean54 = base32_52.isInAlphabet("");
        byte[] byteArray57 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_59 = new org.apache.commons.codec.binary.Base32(0, byteArray57, false);
        java.lang.String str60 = base32_52.encodeToString(byteArray57);
        byte[] byteArray67 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean68 = base32_52.containsAlphabetOrPad(byteArray67);
        byte[] byteArray69 = base32_50.encode(byteArray67);
        byte[] byteArray75 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str76 = base32_50.encodeToString(byteArray75);
        context41.buffer = byteArray75;
        org.apache.commons.codec.binary.BaseNCodec.Context context80 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        long long81 = context80.lbitWorkArea;
        base32_23.decode(byteArray75, 0, (int) (byte) 0, context80);
        org.apache.commons.codec.binary.BaseNCodec.Context context83 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context83.ibitWorkArea = (byte) 61;
        context83.currentLinePos = 'a';
        byte[] byteArray92 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_93 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray92);
        context83.buffer = byteArray92;
        boolean boolean96 = base32_23.isInAlphabet(byteArray92, true);
        byte[] byteArray97 = base32_5.encode(byteArray92);
        context0.buffer = byteArray97;
        long long99 = context0.lbitWorkArea;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CG======" + "'", str13, "CG======");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + byte40 + "' != '" + (byte) 61 + "'", byte40 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "CG======" + "'", str60, "CG======");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "MQ6QUCQB" + "'", str76, "MQ6QUCQB");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[1, 0, 10]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(byteArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray97), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 0L + "'", long99 == 0L);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        int int9 = context7.ibitWorkArea;
        context7.readPos = 0;
        context7.eof = true;
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean18 = base32_16.isInAlphabet("");
        byte[] byteArray21 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_23 = new org.apache.commons.codec.binary.Base32(0, byteArray21, false);
        java.lang.String str24 = base32_16.encodeToString(byteArray21);
        org.apache.commons.codec.binary.Base32 base32_26 = new org.apache.commons.codec.binary.Base32((int) (byte) 1, byteArray21, true);
        context7.buffer = byteArray21;
        int int28 = context7.readPos;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "CG======" + "'", str24, "CG======");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) (byte) 10);
        byte byte2 = base32_1.pad;
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0);
        byte[] byteArray7 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32(0, byteArray7, false);
        int int10 = base32_9.lineLength;
        byte byte11 = base32_9.PAD;
        byte[] byteArray14 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(0, byteArray14, false);
        int int17 = base32_16.lineLength;
        byte[] byteArray19 = base32_16.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str20 = base32_9.encodeToString(byteArray19);
        byte[] byteArray21 = base32_4.encode(byteArray19);
        org.apache.commons.codec.binary.BaseNCodec.Context context24 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        byte[] byteArray25 = context24.buffer;
        context24.ibitWorkArea = 8192;
        int int28 = context24.readPos;
        base32_1.decode(byteArray19, (int) (short) 100, (int) (short) 0, context24);
        byte byte30 = base32_1.PAD;
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 61 + "'", byte2 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 61 + "'", byte11 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "EEEA====" + "'", str20, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + byte30 + "' != '" + (byte) 61 + "'", byte30 == (byte) 61);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        byte[] byteArray4 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray4);
        boolean boolean7 = base32_5.isInAlphabet((byte) -1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1, 0, 10]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        int int12 = context7.modulus;
        byte[] byteArray13 = context7.buffer;
        int int14 = context7.pos;
        int int15 = context7.readPos;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(byteArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        byte[] byteArray4 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray4);
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        byte[] byteArray13 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_15 = new org.apache.commons.codec.binary.Base32(0, byteArray13, false);
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean19 = base32_17.isInAlphabet("");
        byte[] byteArray22 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32(0, byteArray22, false);
        java.lang.String str25 = base32_17.encodeToString(byteArray22);
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean33 = base32_17.containsAlphabetOrPad(byteArray32);
        byte[] byteArray34 = base32_15.encode(byteArray32);
        java.lang.Object obj35 = base32_10.encode((java.lang.Object) byteArray34);
        byte[] byteArray38 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_40 = new org.apache.commons.codec.binary.Base32(0, byteArray38, false);
        org.apache.commons.codec.binary.Base32 base32_42 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean44 = base32_42.isInAlphabet("");
        byte[] byteArray47 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_49 = new org.apache.commons.codec.binary.Base32(0, byteArray47, false);
        java.lang.String str50 = base32_42.encodeToString(byteArray47);
        byte[] byteArray57 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean58 = base32_42.containsAlphabetOrPad(byteArray57);
        byte[] byteArray59 = base32_40.encode(byteArray57);
        java.lang.String str60 = base32_10.encodeAsString(byteArray59);
        byte[] byteArray63 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_65 = new org.apache.commons.codec.binary.Base32(0, byteArray63, false);
        org.apache.commons.codec.binary.Base32 base32_67 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean69 = base32_67.isInAlphabet("");
        byte[] byteArray72 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_74 = new org.apache.commons.codec.binary.Base32(0, byteArray72, false);
        java.lang.String str75 = base32_67.encodeToString(byteArray72);
        byte[] byteArray82 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean83 = base32_67.containsAlphabetOrPad(byteArray82);
        byte[] byteArray84 = base32_65.encode(byteArray82);
        byte[] byteArray90 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str91 = base32_65.encodeToString(byteArray90);
        byte[] byteArray92 = base32_10.decode(byteArray90);
        java.lang.String str93 = base32_5.encodeToString(byteArray90);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CG======" + "'", str25, "CG======");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "CG======" + "'", str50, "CG======");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "JVIUCUKBLJAUCTKRHU6T2PJ5HU======" + "'", str60, "JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[100]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[100]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "CG======" + "'", str75, "CG======");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "MQ6QUCQB" + "'", str91, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "MQ6QUCQB" + "'", str93, "MQ6QUCQB");
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) (byte) 10);
        org.apache.commons.codec.binary.Base32 base32_3 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray8);
        byte[] byteArray10 = base32_3.encode(byteArray8);
        byte[] byteArray15 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(0, byteArray15, false);
        int int18 = base32_17.lineLength;
        byte byte19 = base32_17.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context20 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean21 = base32_17.hasData(context20);
        context20.pos = 0;
        int int24 = context20.readPos;
        byte[] byteArray27 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_29 = new org.apache.commons.codec.binary.Base32(0, byteArray27, false);
        org.apache.commons.codec.binary.Base32 base32_31 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean33 = base32_31.isInAlphabet("");
        byte[] byteArray36 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_38 = new org.apache.commons.codec.binary.Base32(0, byteArray36, false);
        java.lang.String str39 = base32_31.encodeToString(byteArray36);
        byte[] byteArray46 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean47 = base32_31.containsAlphabetOrPad(byteArray46);
        byte[] byteArray48 = base32_29.encode(byteArray46);
        byte[] byteArray54 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str55 = base32_29.encodeToString(byteArray54);
        context20.buffer = byteArray54;
        java.lang.String str57 = context20.toString();
        base32_1.encode(byteArray10, (int) (byte) 0, (int) (short) 1, context20);
        org.apache.commons.codec.binary.Base32 base32_61 = new org.apache.commons.codec.binary.Base32(true, (byte) -1);
        byte byte62 = base32_61.pad;
        boolean boolean64 = base32_61.isInAlphabet((byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj65 = base32_1.encode((java.lang.Object) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) 61 + "'", byte19 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "CG======" + "'", str39, "CG======");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "MQ6QUCQB" + "'", str55, "MQ6QUCQB");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str57, "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertTrue("'" + byte62 + "' != '" + (byte) -1 + "'", byte62 == (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        byte byte2 = base32_1.pad;
        boolean boolean4 = base32_1.isInAlphabet("EEEA\001\001\001\001");
        boolean boolean6 = base32_1.isInAlphabet((byte) 1);
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 61 + "'", byte2 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean4 = base32_2.isInAlphabet("");
        byte[] byteArray7 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32(0, byteArray7, false);
        java.lang.String str10 = base32_2.encodeToString(byteArray7);
        org.apache.commons.codec.binary.Base32 base32_12 = new org.apache.commons.codec.binary.Base32((int) (byte) 1, byteArray7, true);
        boolean boolean14 = base32_12.isInAlphabet((byte) 61);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CG======" + "'", str10, "CG======");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        int int12 = context7.modulus;
        java.lang.String str13 = context7.toString();
        context7.eof = false;
        int int16 = context7.modulus;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str13, "Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean8 = base32_6.isInAlphabet("");
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        java.lang.String str14 = base32_6.encodeToString(byteArray11);
        byte[] byteArray21 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean22 = base32_6.containsAlphabetOrPad(byteArray21);
        byte[] byteArray23 = base32_4.encode(byteArray21);
        org.apache.commons.codec.binary.Base32 base32_25 = new org.apache.commons.codec.binary.Base32(0);
        byte[] byteArray28 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_30 = new org.apache.commons.codec.binary.Base32(0, byteArray28, false);
        int int31 = base32_30.lineLength;
        byte byte32 = base32_30.PAD;
        byte[] byteArray35 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_37 = new org.apache.commons.codec.binary.Base32(0, byteArray35, false);
        int int38 = base32_37.lineLength;
        byte[] byteArray40 = base32_37.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str41 = base32_30.encodeToString(byteArray40);
        byte[] byteArray42 = base32_25.encode(byteArray40);
        byte[] byteArray44 = base32_25.decode("hi!");
        java.lang.String str45 = base32_4.encodeAsString(byteArray44);
        int int46 = base32_4.lineLength;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CG======" + "'", str14, "CG======");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + byte32 + "' != '" + (byte) 61 + "'", byte32 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "EEEA====" + "'", str41, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet("CG======");
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        int int11 = base32_10.lineLength;
        byte byte12 = base32_10.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context13 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean14 = base32_10.hasData(context13);
        byte[] byteArray15 = null;
        context13.buffer = byteArray15;
        context13.currentLinePos = (short) 100;
        int int19 = base32_1.available(context13);
        int int20 = base32_1.getDefaultBufferSize();
        org.apache.commons.codec.binary.BaseNCodec.Context context21 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context21.ibitWorkArea = (byte) 61;
        int int24 = context21.ibitWorkArea;
        boolean boolean25 = base32_1.hasData(context21);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 61 + "'", byte12 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8192 + "'", int20 == 8192);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 61 + "'", int24 == 61);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        byte[] byteArray6 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_8 = new org.apache.commons.codec.binary.Base32(0, byteArray6, false);
        java.lang.String str9 = base32_1.encodeToString(byteArray6);
        byte[] byteArray10 = null;
        byte[] byteArray11 = base32_1.encode(byteArray10);
        byte[] byteArray14 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(0, byteArray14, false);
        org.apache.commons.codec.binary.Base32 base32_18 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean20 = base32_18.isInAlphabet("");
        byte[] byteArray23 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_25 = new org.apache.commons.codec.binary.Base32(0, byteArray23, false);
        java.lang.String str26 = base32_18.encodeToString(byteArray23);
        byte[] byteArray33 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean34 = base32_18.containsAlphabetOrPad(byteArray33);
        byte[] byteArray35 = base32_16.encode(byteArray33);
        byte[] byteArray41 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str42 = base32_16.encodeToString(byteArray41);
        byte[] byteArray44 = base32_16.decode("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray47 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_49 = new org.apache.commons.codec.binary.Base32(0, byteArray47, false);
        java.lang.String str50 = base32_16.encodeAsString(byteArray47);
        long long51 = base32_1.getEncodedLength(byteArray47);
        boolean boolean53 = base32_1.isInAlphabet("org.apache.commons.codec.EncoderException: Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CG======" + "'", str9, "CG======");
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "CG======" + "'", str26, "CG======");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "MQ6QUCQB" + "'", str42, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MQ======" + "'", str50, "MQ======");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 8L + "'", long51 == 8L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        byte[] byteArray3 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32(0, byteArray3, false);
        int int6 = base32_5.lineLength;
        byte byte7 = base32_5.PAD;
        byte byte8 = base32_5.pad;
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        int int14 = base32_13.lineLength;
        byte byte15 = base32_13.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context16 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean17 = base32_13.hasData(context16);
        org.apache.commons.codec.binary.Base32 base32_19 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean21 = base32_19.isInAlphabet("");
        byte[] byteArray24 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_26 = new org.apache.commons.codec.binary.Base32(0, byteArray24, false);
        java.lang.String str27 = base32_19.encodeToString(byteArray24);
        byte[] byteArray34 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean35 = base32_19.containsAlphabetOrPad(byteArray34);
        byte[] byteArray36 = base32_13.encode(byteArray34);
        org.apache.commons.codec.binary.Base32 base32_38 = new org.apache.commons.codec.binary.Base32(0);
        byte[] byteArray41 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_43 = new org.apache.commons.codec.binary.Base32(0, byteArray41, false);
        int int44 = base32_43.lineLength;
        byte byte45 = base32_43.PAD;
        byte[] byteArray48 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_50 = new org.apache.commons.codec.binary.Base32(0, byteArray48, false);
        int int51 = base32_50.lineLength;
        byte[] byteArray53 = base32_50.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str54 = base32_43.encodeToString(byteArray53);
        byte[] byteArray55 = base32_38.encode(byteArray53);
        byte[] byteArray56 = base32_13.decode(byteArray55);
        boolean boolean58 = base32_5.isInAlphabet(byteArray56, false);
        org.apache.commons.codec.binary.Base32 base32_59 = new org.apache.commons.codec.binary.Base32((int) (byte) 0, byteArray56);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 61 + "'", byte7 == (byte) 61);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 61 + "'", byte8 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 61 + "'", byte15 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "CG======" + "'", str27, "CG======");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + byte45 + "' != '" + (byte) 61 + "'", byte45 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "EEEA====" + "'", str54, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[33, 8]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean4 = base32_2.isInAlphabet("");
        byte[] byteArray7 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32(0, byteArray7, false);
        java.lang.String str10 = base32_2.encodeToString(byteArray7);
        byte[] byteArray17 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean18 = base32_2.containsAlphabetOrPad(byteArray17);
        org.apache.commons.codec.binary.Base32 base32_20 = new org.apache.commons.codec.binary.Base32((int) (byte) 0, byteArray17, false);
        byte byte21 = base32_20.pad;
        org.apache.commons.codec.binary.Base32 base32_23 = new org.apache.commons.codec.binary.Base32(false);
        byte[] byteArray26 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_28 = new org.apache.commons.codec.binary.Base32(0, byteArray26, false);
        int int29 = base32_28.lineLength;
        byte byte30 = base32_28.PAD;
        byte[] byteArray33 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_35 = new org.apache.commons.codec.binary.Base32(0, byteArray33, false);
        int int36 = base32_35.lineLength;
        byte[] byteArray38 = base32_35.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str39 = base32_28.encodeToString(byteArray38);
        byte[] byteArray40 = base32_23.encode(byteArray38);
        byte[] byteArray41 = base32_20.decode(byteArray40);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CG======" + "'", str10, "CG======");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + byte21 + "' != '" + (byte) 61 + "'", byte21 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + byte30 + "' != '" + (byte) 61 + "'", byte30 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "EEEA====" + "'", str39, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[33, 8]");
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        byte[] byteArray9 = null;
        context7.buffer = byteArray9;
        context7.ibitWorkArea = '#';
        int int13 = context7.modulus;
        context7.ibitWorkArea = 1;
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean19 = base32_17.isInAlphabet("");
        boolean boolean21 = base32_17.isInAlphabet((byte) 61);
        org.apache.commons.codec.binary.Base32 base32_23 = new org.apache.commons.codec.binary.Base32(true);
        int int24 = base32_23.lineLength;
        byte[] byteArray27 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_29 = new org.apache.commons.codec.binary.Base32(0, byteArray27, false);
        org.apache.commons.codec.binary.Base32 base32_31 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean33 = base32_31.isInAlphabet("");
        byte[] byteArray36 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_38 = new org.apache.commons.codec.binary.Base32(0, byteArray36, false);
        java.lang.String str39 = base32_31.encodeToString(byteArray36);
        byte[] byteArray46 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean47 = base32_31.containsAlphabetOrPad(byteArray46);
        byte[] byteArray48 = base32_29.encode(byteArray46);
        byte[] byteArray54 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str55 = base32_29.encodeToString(byteArray54);
        byte[] byteArray60 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_62 = new org.apache.commons.codec.binary.Base32(0, byteArray60, false);
        int int63 = base32_62.lineLength;
        byte byte64 = base32_62.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context65 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean66 = base32_62.hasData(context65);
        context65.pos = 0;
        int int69 = context65.readPos;
        context65.currentLinePos = (-1);
        byte[] byteArray72 = context65.buffer;
        base32_23.encode(byteArray54, 64, 0, context65);
        int int74 = base32_17.available(context65);
        org.apache.commons.codec.binary.Base32 base32_76 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean78 = base32_76.isInAlphabet("");
        boolean boolean80 = base32_76.isInAlphabet("");
        byte byte81 = base32_76.pad;
        byte[] byteArray87 = new byte[] { (byte) 0, (byte) 10, (byte) 61, (byte) 10, (byte) 0 };
        byte[] byteArray88 = base32_76.encode(byteArray87);
        java.lang.Object obj89 = base32_17.decode((java.lang.Object) byteArray87);
        context7.buffer = byteArray87;
        java.lang.String str91 = context7.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "CG======" + "'", str39, "CG======");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "MQ6QUCQB" + "'", str55, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[100]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + byte64 + "' != '" + (byte) 61 + "'", byte64 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNull(byteArray72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + byte81 + "' != '" + (byte) 61 + "'", byte81 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[0, 10, 61, 10, 0]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[48, 48, 53, 51, 81, 50, 71, 48]");
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Context[buffer=[0, 10, 61, 10, 0], currentLinePos=0, eof=false, ibitWorkArea=1, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str91, "Context[buffer=[0, 10, 61, 10, 0], currentLinePos=0, eof=false, ibitWorkArea=1, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        org.apache.commons.codec.binary.BaseNCodec.Context context0 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context0.ibitWorkArea = (byte) 61;
        context0.currentLinePos = 'a';
        context0.ibitWorkArea = '4';
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context7.ibitWorkArea = (byte) 61;
        context7.currentLinePos = 'a';
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray16);
        context7.buffer = byteArray16;
        context0.buffer = byteArray16;
        java.lang.String str20 = context0.toString();
        context0.eof = true;
        context0.modulus = 97;
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 0, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Context[buffer=[1, 0, 10], currentLinePos=97, eof=false, ibitWorkArea=52, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str20, "Context[buffer=[1, 0, 10], currentLinePos=97, eof=false, ibitWorkArea=52, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        byte[] byteArray14 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(0, byteArray14, false);
        org.apache.commons.codec.binary.Base32 base32_18 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean20 = base32_18.isInAlphabet("");
        byte[] byteArray23 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_25 = new org.apache.commons.codec.binary.Base32(0, byteArray23, false);
        java.lang.String str26 = base32_18.encodeToString(byteArray23);
        byte[] byteArray33 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean34 = base32_18.containsAlphabetOrPad(byteArray33);
        byte[] byteArray35 = base32_16.encode(byteArray33);
        byte[] byteArray41 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str42 = base32_16.encodeToString(byteArray41);
        context7.buffer = byteArray41;
        context7.currentLinePos = 0;
        context7.modulus = ' ';
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "CG======" + "'", str26, "CG======");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "MQ6QUCQB" + "'", str42, "MQ6QUCQB");
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet("");
        byte byte6 = base32_1.pad;
        boolean boolean8 = base32_1.isInAlphabet((byte) 100);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte[] byteArray6 = null;
        java.lang.String str7 = base32_4.encodeAsString(byteArray6);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) '4');
        org.apache.commons.codec.binary.Base32 base32_3 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean5 = base32_3.isInAlphabet("");
        boolean boolean7 = base32_3.isInAlphabet((byte) 61);
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32(true);
        int int10 = base32_9.lineLength;
        byte[] byteArray13 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_15 = new org.apache.commons.codec.binary.Base32(0, byteArray13, false);
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean19 = base32_17.isInAlphabet("");
        byte[] byteArray22 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32(0, byteArray22, false);
        java.lang.String str25 = base32_17.encodeToString(byteArray22);
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean33 = base32_17.containsAlphabetOrPad(byteArray32);
        byte[] byteArray34 = base32_15.encode(byteArray32);
        byte[] byteArray40 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str41 = base32_15.encodeToString(byteArray40);
        byte[] byteArray46 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_48 = new org.apache.commons.codec.binary.Base32(0, byteArray46, false);
        int int49 = base32_48.lineLength;
        byte byte50 = base32_48.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context51 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean52 = base32_48.hasData(context51);
        context51.pos = 0;
        int int55 = context51.readPos;
        context51.currentLinePos = (-1);
        byte[] byteArray58 = context51.buffer;
        base32_9.encode(byteArray40, 64, 0, context51);
        int int60 = base32_3.available(context51);
        org.apache.commons.codec.binary.Base32 base32_62 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean64 = base32_62.isInAlphabet("");
        boolean boolean66 = base32_62.isInAlphabet("");
        byte byte67 = base32_62.pad;
        byte[] byteArray73 = new byte[] { (byte) 0, (byte) 10, (byte) 61, (byte) 10, (byte) 0 };
        byte[] byteArray74 = base32_62.encode(byteArray73);
        java.lang.Object obj75 = base32_3.decode((java.lang.Object) byteArray73);
        org.apache.commons.codec.binary.BaseNCodec.Context context76 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context76.ibitWorkArea = (byte) 61;
        context76.currentLinePos = 'a';
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_86 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray85);
        context76.buffer = byteArray85;
        boolean boolean88 = base32_3.containsAlphabetOrPad(byteArray85);
        byte[] byteArray89 = base32_1.encode(byteArray85);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CG======" + "'", str25, "CG======");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "MQ6QUCQB" + "'", str41, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[100]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + byte50 + "' != '" + (byte) 61 + "'", byte50 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNull(byteArray58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + byte67 + "' != '" + (byte) 61 + "'", byte67 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0, 10, 61, 10, 0]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[48, 48, 53, 51, 81, 50, 71, 48]");
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 0, 10]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[65, 69, 65, 65, 85, 61, 61, 61, 13, 10]");
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        byte[] byteArray9 = null;
        context7.buffer = byteArray9;
        context7.currentLinePos = (short) 100;
        long long13 = context7.lbitWorkArea;
        context7.readPos = (short) 100;
        context7.currentLinePos = (short) 10;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        byte[] byteArray9 = null;
        context7.buffer = byteArray9;
        context7.ibitWorkArea = '#';
        int int13 = context7.modulus;
        context7.ibitWorkArea = 1;
        java.lang.String str16 = context7.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=1, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str16, "Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=1, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        context7.currentLinePos = (-1);
        byte[] byteArray14 = context7.buffer;
        context7.ibitWorkArea = (-1);
        context7.lbitWorkArea = 64;
        long long19 = context7.lbitWorkArea;
        int int20 = context7.modulus;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 64L + "'", long19 == 64L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean8 = base32_6.isInAlphabet("");
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        java.lang.String str14 = base32_6.encodeToString(byteArray11);
        byte[] byteArray21 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean22 = base32_6.containsAlphabetOrPad(byteArray21);
        byte[] byteArray23 = base32_4.encode(byteArray21);
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str30 = base32_4.encodeToString(byteArray29);
        byte[] byteArray32 = base32_4.decode("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray35 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_37 = new org.apache.commons.codec.binary.Base32(0, byteArray35, false);
        java.lang.String str38 = base32_4.encodeAsString(byteArray35);
        org.apache.commons.codec.EncoderException encoderException42 = new org.apache.commons.codec.EncoderException("hi!");
        org.apache.commons.codec.EncoderException encoderException44 = new org.apache.commons.codec.EncoderException("");
        org.apache.commons.codec.EncoderException encoderException45 = new org.apache.commons.codec.EncoderException((java.lang.Throwable) encoderException44);
        encoderException42.addSuppressed((java.lang.Throwable) encoderException45);
        org.apache.commons.codec.EncoderException encoderException47 = new org.apache.commons.codec.EncoderException("JVIUCUKBLJAUCTKRHU6T2PJ5HU======", (java.lang.Throwable) encoderException42);
        org.apache.commons.codec.DecoderException decoderException48 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) encoderException47);
        org.apache.commons.codec.EncoderException encoderException49 = new org.apache.commons.codec.EncoderException((java.lang.Throwable) encoderException47);
        org.apache.commons.codec.DecoderException decoderException50 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException: ", (java.lang.Throwable) encoderException49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj51 = base32_4.decode((java.lang.Object) encoderException49);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CG======" + "'", str14, "CG======");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "MQ6QUCQB" + "'", str30, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "MQ======" + "'", str38, "MQ======");
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(false);
        org.apache.commons.codec.binary.Base32 base32_3 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray8);
        byte[] byteArray10 = base32_3.encode(byteArray8);
        boolean boolean11 = base32_1.containsAlphabetOrPad(byteArray10);
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean15 = base32_13.isInAlphabet("");
        byte[] byteArray18 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_20 = new org.apache.commons.codec.binary.Base32(0, byteArray18, false);
        java.lang.String str21 = base32_13.encodeToString(byteArray18);
        byte[] byteArray24 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_26 = new org.apache.commons.codec.binary.Base32(0, byteArray24, false);
        int int27 = base32_26.lineLength;
        byte byte28 = base32_26.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context29 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean30 = base32_26.hasData(context29);
        context29.pos = 0;
        int int33 = context29.readPos;
        byte[] byteArray36 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_38 = new org.apache.commons.codec.binary.Base32(0, byteArray36, false);
        org.apache.commons.codec.binary.Base32 base32_40 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean42 = base32_40.isInAlphabet("");
        byte[] byteArray45 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_47 = new org.apache.commons.codec.binary.Base32(0, byteArray45, false);
        java.lang.String str48 = base32_40.encodeToString(byteArray45);
        byte[] byteArray55 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean56 = base32_40.containsAlphabetOrPad(byteArray55);
        byte[] byteArray57 = base32_38.encode(byteArray55);
        context29.buffer = byteArray55;
        byte[] byteArray63 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_65 = new org.apache.commons.codec.binary.Base32(0, byteArray63, false);
        int int66 = base32_65.lineLength;
        byte byte67 = base32_65.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context68 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean69 = base32_65.hasData(context68);
        context68.pos = 0;
        int int72 = context68.readPos;
        context68.currentLinePos = (-1);
        context68.eof = true;
        int int77 = context68.currentLinePos;
        base32_13.encode(byteArray55, 64, (int) (short) 1, context68);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj79 = base32_1.encode((java.lang.Object) context68);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "CG======" + "'", str21, "CG======");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + byte28 + "' != '" + (byte) 61 + "'", byte28 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "CG======" + "'", str48, "CG======");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[100]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + byte67 + "' != '" + (byte) 61 + "'", byte67 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) 1);
        byte byte2 = base32_1.pad;
        int int3 = base32_1.lineLength;
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 1 + "'", byte2 == (byte) 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean4 = base32_2.isInAlphabet("");
        byte[] byteArray6 = base32_2.decode("MQ6QUCQB");
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean11 = base32_9.isInAlphabet("");
        byte[] byteArray14 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(0, byteArray14, false);
        java.lang.String str17 = base32_9.encodeToString(byteArray14);
        byte[] byteArray24 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean25 = base32_9.containsAlphabetOrPad(byteArray24);
        org.apache.commons.codec.binary.Base32 base32_27 = new org.apache.commons.codec.binary.Base32((int) (byte) 0, byteArray24, false);
        boolean boolean28 = base32_2.containsAlphabetOrPad(byteArray24);
        byte[] byteArray31 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_33 = new org.apache.commons.codec.binary.Base32(0, byteArray31, false);
        int int34 = base32_33.lineLength;
        byte byte35 = base32_33.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context36 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean37 = base32_33.hasData(context36);
        org.apache.commons.codec.binary.Base32 base32_39 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean41 = base32_39.isInAlphabet("");
        byte[] byteArray44 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_46 = new org.apache.commons.codec.binary.Base32(0, byteArray44, false);
        java.lang.String str47 = base32_39.encodeToString(byteArray44);
        byte[] byteArray54 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean55 = base32_39.containsAlphabetOrPad(byteArray54);
        byte[] byteArray56 = base32_33.encode(byteArray54);
        byte[] byteArray57 = base32_2.decode(byteArray54);
        org.apache.commons.codec.binary.Base32 base32_58 = new org.apache.commons.codec.binary.Base32(0, byteArray57);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-74, -115, -81, 51, 75]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CG======" + "'", str17, "CG======");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + byte35 + "' != '" + (byte) 61 + "'", byte35 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "CG======" + "'", str47, "CG======");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        int int2 = base32_1.lineLength;
        byte[] byteArray5 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32(0, byteArray5, false);
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean11 = base32_9.isInAlphabet("");
        byte[] byteArray14 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(0, byteArray14, false);
        java.lang.String str17 = base32_9.encodeToString(byteArray14);
        byte[] byteArray24 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean25 = base32_9.containsAlphabetOrPad(byteArray24);
        byte[] byteArray26 = base32_7.encode(byteArray24);
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str33 = base32_7.encodeToString(byteArray32);
        byte[] byteArray38 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_40 = new org.apache.commons.codec.binary.Base32(0, byteArray38, false);
        int int41 = base32_40.lineLength;
        byte byte42 = base32_40.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context43 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean44 = base32_40.hasData(context43);
        context43.pos = 0;
        int int47 = context43.readPos;
        context43.currentLinePos = (-1);
        byte[] byteArray50 = context43.buffer;
        base32_1.encode(byteArray32, 64, 0, context43);
        context43.eof = false;
        byte[] byteArray54 = context43.buffer;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CG======" + "'", str17, "CG======");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "MQ6QUCQB" + "'", str33, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + byte42 + "' != '" + (byte) 61 + "'", byte42 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNull(byteArray54);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean4 = base32_2.isInAlphabet("");
        byte[] byteArray6 = base32_2.decode("MQ6QUCQB");
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean11 = base32_9.isInAlphabet("");
        byte[] byteArray14 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(0, byteArray14, false);
        java.lang.String str17 = base32_9.encodeToString(byteArray14);
        byte[] byteArray24 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean25 = base32_9.containsAlphabetOrPad(byteArray24);
        org.apache.commons.codec.binary.Base32 base32_27 = new org.apache.commons.codec.binary.Base32((int) (byte) 0, byteArray24, false);
        boolean boolean28 = base32_2.containsAlphabetOrPad(byteArray24);
        org.apache.commons.codec.binary.BaseNCodec.Context context29 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context29.ibitWorkArea = (byte) 61;
        context29.currentLinePos = 'a';
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_39 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray38);
        context29.buffer = byteArray38;
        byte[] byteArray41 = base32_2.encode(byteArray38);
        org.apache.commons.codec.binary.Base32 base32_43 = new org.apache.commons.codec.binary.Base32(0, byteArray41, false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-74, -115, -81, 51, 75]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CG======" + "'", str17, "CG======");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[48, 52, 48, 48, 75, 61, 61, 61]");
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean8 = base32_6.isInAlphabet("");
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        java.lang.String str14 = base32_6.encodeToString(byteArray11);
        byte[] byteArray21 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean22 = base32_6.containsAlphabetOrPad(byteArray21);
        byte[] byteArray23 = base32_4.encode(byteArray21);
        byte[] byteArray24 = null;
        byte[] byteArray25 = base32_4.decode(byteArray24);
        org.apache.commons.codec.binary.Base32 base32_27 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean29 = base32_27.isInAlphabet("");
        byte[] byteArray32 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_34 = new org.apache.commons.codec.binary.Base32(0, byteArray32, false);
        java.lang.String str35 = base32_27.encodeToString(byteArray32);
        byte[] byteArray40 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_42 = new org.apache.commons.codec.binary.Base32(0, byteArray40, false);
        int int43 = base32_42.lineLength;
        byte byte44 = base32_42.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context45 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean46 = base32_42.hasData(context45);
        int int47 = base32_4.readResults(byteArray32, (int) (short) 10, (int) (short) -1, context45);
        boolean boolean49 = base32_4.isInAlphabet("org.apache.commons.codec.EncoderException: Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CG======" + "'", str14, "CG======");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "CG======" + "'", str35, "CG======");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[100]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + byte44 + "' != '" + (byte) 61 + "'", byte44 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(true, (byte) 100);
        byte byte3 = base32_2.PAD;
        boolean boolean5 = base32_2.isInAlphabet("org.apache.commons.codec.DecoderException: EEEA====");
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 61 + "'", byte3 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(true, (byte) -1);
        byte byte3 = base32_2.pad;
        org.apache.commons.codec.binary.BaseNCodec.Context context4 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context4.ibitWorkArea = (byte) 61;
        context4.currentLinePos = 'a';
        int int9 = base32_2.available(context4);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet("CG======");
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        int int11 = base32_10.lineLength;
        byte byte12 = base32_10.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context13 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean14 = base32_10.hasData(context13);
        byte[] byteArray15 = null;
        context13.buffer = byteArray15;
        context13.currentLinePos = (short) 100;
        int int19 = base32_1.available(context13);
        context13.modulus = '4';
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 61 + "'", byte12 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) 100);
        boolean boolean3 = base32_1.isInAlphabet("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray5 = base32_1.decode("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_11 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray10);
        java.lang.String str12 = base32_1.encodeAsString(byteArray10);
        org.apache.commons.codec.binary.BaseNCodec.Context context14 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context14.ibitWorkArea = (byte) 61;
        context14.currentLinePos = 'a';
        context14.ibitWorkArea = '4';
        org.apache.commons.codec.binary.BaseNCodec.Context context21 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context21.ibitWorkArea = (byte) 61;
        context21.currentLinePos = 'a';
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_31 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray30);
        context21.buffer = byteArray30;
        context14.buffer = byteArray30;
        java.lang.String str34 = context14.toString();
        context14.eof = true;
        byte[] byteArray39 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_41 = new org.apache.commons.codec.binary.Base32(0, byteArray39, false);
        byte[] byteArray44 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_46 = new org.apache.commons.codec.binary.Base32(0, byteArray44, false);
        byte[] byteArray47 = base32_41.decode(byteArray44);
        context14.buffer = byteArray44;
        byte[] byteArray49 = base32_1.ensureBufferSize(64, context14);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 0, 10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AEAAUddd" + "'", str12, "AEAAUddd");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 0, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Context[buffer=[1, 0, 10], currentLinePos=97, eof=false, ibitWorkArea=52, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str34, "Context[buffer=[1, 0, 10], currentLinePos=97, eof=false, ibitWorkArea=52, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[100, 0]");
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        byte[] byteArray7 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32(0, byteArray7, false);
        org.apache.commons.codec.binary.Base32 base32_11 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean13 = base32_11.isInAlphabet("");
        byte[] byteArray16 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_18 = new org.apache.commons.codec.binary.Base32(0, byteArray16, false);
        java.lang.String str19 = base32_11.encodeToString(byteArray16);
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean27 = base32_11.containsAlphabetOrPad(byteArray26);
        byte[] byteArray28 = base32_9.encode(byteArray26);
        java.lang.Object obj29 = base32_4.encode((java.lang.Object) byteArray28);
        byte[] byteArray30 = null;
        byte[] byteArray31 = base32_4.encode(byteArray30);
        byte[] byteArray34 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_36 = new org.apache.commons.codec.binary.Base32(0, byteArray34, false);
        int int37 = base32_36.lineLength;
        byte byte38 = base32_36.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context39 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean40 = base32_36.hasData(context39);
        byte[] byteArray41 = null;
        context39.buffer = byteArray41;
        context39.ibitWorkArea = '#';
        context39.modulus = 8192;
        int int47 = context39.pos;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj48 = base32_4.decode((java.lang.Object) int47);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CG======" + "'", str19, "CG======");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + byte38 + "' != '" + (byte) 61 + "'", byte38 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        byte[] byteArray9 = null;
        context7.buffer = byteArray9;
        context7.ibitWorkArea = '#';
        long long13 = context7.lbitWorkArea;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        byte[] byteArray3 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32(0, byteArray3, false);
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        byte[] byteArray11 = base32_5.decode(byteArray8);
        org.apache.commons.codec.binary.Base32 base32_14 = new org.apache.commons.codec.binary.Base32((int) (byte) 100, byteArray11, false, (byte) 1);
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32((byte) 0);
        boolean boolean18 = base32_16.isInAlphabet((byte) 0);
        byte[] byteArray20 = new byte[] { (byte) 0 };
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean26 = base32_24.isInAlphabet("");
        boolean boolean28 = base32_24.isInAlphabet((byte) 61);
        org.apache.commons.codec.binary.Base32 base32_30 = new org.apache.commons.codec.binary.Base32(true);
        int int31 = base32_30.lineLength;
        byte[] byteArray34 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_36 = new org.apache.commons.codec.binary.Base32(0, byteArray34, false);
        org.apache.commons.codec.binary.Base32 base32_38 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean40 = base32_38.isInAlphabet("");
        byte[] byteArray43 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_45 = new org.apache.commons.codec.binary.Base32(0, byteArray43, false);
        java.lang.String str46 = base32_38.encodeToString(byteArray43);
        byte[] byteArray53 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean54 = base32_38.containsAlphabetOrPad(byteArray53);
        byte[] byteArray55 = base32_36.encode(byteArray53);
        byte[] byteArray61 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str62 = base32_36.encodeToString(byteArray61);
        byte[] byteArray67 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_69 = new org.apache.commons.codec.binary.Base32(0, byteArray67, false);
        int int70 = base32_69.lineLength;
        byte byte71 = base32_69.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context72 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean73 = base32_69.hasData(context72);
        context72.pos = 0;
        int int76 = context72.readPos;
        context72.currentLinePos = (-1);
        byte[] byteArray79 = context72.buffer;
        base32_30.encode(byteArray61, 64, 0, context72);
        int int81 = base32_24.available(context72);
        int int82 = base32_16.readResults(byteArray20, 0, (int) 'a', context72);
        boolean boolean84 = base32_14.isInAlphabet(byteArray20, true);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "CG======" + "'", str46, "CG======");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "MQ6QUCQB" + "'", str62, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[100]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + byte71 + "' != '" + (byte) 61 + "'", byte71 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNull(byteArray79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        context7.currentLinePos = (-1);
        context7.eof = false;
        byte[] byteArray16 = context7.buffer;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(byteArray16);
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        byte[] byteArray9 = null;
        context7.buffer = byteArray9;
        context7.ibitWorkArea = '#';
        int int13 = context7.modulus;
        context7.ibitWorkArea = 1;
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean19 = base32_17.isInAlphabet("");
        boolean boolean21 = base32_17.isInAlphabet((byte) 61);
        org.apache.commons.codec.binary.Base32 base32_23 = new org.apache.commons.codec.binary.Base32(true);
        int int24 = base32_23.lineLength;
        byte[] byteArray27 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_29 = new org.apache.commons.codec.binary.Base32(0, byteArray27, false);
        org.apache.commons.codec.binary.Base32 base32_31 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean33 = base32_31.isInAlphabet("");
        byte[] byteArray36 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_38 = new org.apache.commons.codec.binary.Base32(0, byteArray36, false);
        java.lang.String str39 = base32_31.encodeToString(byteArray36);
        byte[] byteArray46 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean47 = base32_31.containsAlphabetOrPad(byteArray46);
        byte[] byteArray48 = base32_29.encode(byteArray46);
        byte[] byteArray54 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str55 = base32_29.encodeToString(byteArray54);
        byte[] byteArray60 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_62 = new org.apache.commons.codec.binary.Base32(0, byteArray60, false);
        int int63 = base32_62.lineLength;
        byte byte64 = base32_62.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context65 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean66 = base32_62.hasData(context65);
        context65.pos = 0;
        int int69 = context65.readPos;
        context65.currentLinePos = (-1);
        byte[] byteArray72 = context65.buffer;
        base32_23.encode(byteArray54, 64, 0, context65);
        int int74 = base32_17.available(context65);
        org.apache.commons.codec.binary.Base32 base32_76 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean78 = base32_76.isInAlphabet("");
        boolean boolean80 = base32_76.isInAlphabet("");
        byte byte81 = base32_76.pad;
        byte[] byteArray87 = new byte[] { (byte) 0, (byte) 10, (byte) 61, (byte) 10, (byte) 0 };
        byte[] byteArray88 = base32_76.encode(byteArray87);
        java.lang.Object obj89 = base32_17.decode((java.lang.Object) byteArray87);
        context7.buffer = byteArray87;
        context7.readPos = 8192;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "CG======" + "'", str39, "CG======");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "MQ6QUCQB" + "'", str55, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[100]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + byte64 + "' != '" + (byte) 61 + "'", byte64 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNull(byteArray72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + byte81 + "' != '" + (byte) 61 + "'", byte81 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[0, 10, 61, 10, 0]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[48, 48, 53, 51, 81, 50, 71, 48]");
        org.junit.Assert.assertNotNull(obj89);
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        byte[] byteArray4 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray4);
        org.apache.commons.codec.binary.BaseNCodec.Context context6 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context6.ibitWorkArea = (byte) 61;
        context6.currentLinePos = 'a';
        int int11 = context6.modulus;
        context6.readPos = 255;
        boolean boolean14 = base32_5.hasData(context6);
        context6.ibitWorkArea = 35;
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1, 0, 10]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(false, (byte) 100);
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32(false, (byte) 61);
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray12);
        byte[] byteArray14 = base32_7.encode(byteArray12);
        boolean boolean15 = base32_5.containsAlphabetOrPad(byteArray12);
        long long16 = base32_2.getEncodedLength(byteArray12);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 8L + "'", long16 == 8L);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean12 = base32_10.isInAlphabet("");
        byte[] byteArray15 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(0, byteArray15, false);
        java.lang.String str18 = base32_10.encodeToString(byteArray15);
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean26 = base32_10.containsAlphabetOrPad(byteArray25);
        byte[] byteArray27 = base32_4.encode(byteArray25);
        org.apache.commons.codec.binary.Base32 base32_29 = new org.apache.commons.codec.binary.Base32(0);
        byte[] byteArray32 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_34 = new org.apache.commons.codec.binary.Base32(0, byteArray32, false);
        int int35 = base32_34.lineLength;
        byte byte36 = base32_34.PAD;
        byte[] byteArray39 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_41 = new org.apache.commons.codec.binary.Base32(0, byteArray39, false);
        int int42 = base32_41.lineLength;
        byte[] byteArray44 = base32_41.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str45 = base32_34.encodeToString(byteArray44);
        byte[] byteArray46 = base32_29.encode(byteArray44);
        byte[] byteArray47 = base32_4.decode(byteArray46);
        boolean boolean49 = base32_4.isInAlphabet((byte) 1);
        org.apache.commons.codec.binary.Base32 base32_51 = new org.apache.commons.codec.binary.Base32((byte) 1);
        byte[] byteArray54 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_56 = new org.apache.commons.codec.binary.Base32(0, byteArray54, false);
        int int57 = base32_56.lineLength;
        byte byte58 = base32_56.PAD;
        byte[] byteArray61 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_63 = new org.apache.commons.codec.binary.Base32(0, byteArray61, false);
        int int64 = base32_63.lineLength;
        byte[] byteArray66 = base32_63.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str67 = base32_56.encodeToString(byteArray66);
        java.lang.String str68 = base32_51.encodeAsString(byteArray66);
        byte[] byteArray73 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_75 = new org.apache.commons.codec.binary.Base32(0, byteArray73, false);
        int int76 = base32_75.lineLength;
        byte byte77 = base32_75.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context78 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean79 = base32_75.hasData(context78);
        byte[] byteArray80 = null;
        context78.buffer = byteArray80;
        context78.ibitWorkArea = '#';
        context78.modulus = 8192;
        context78.modulus = (byte) 0;
        // The following exception was thrown during execution in test generation
        try {
            base32_4.encode(byteArray66, (int) '#', (int) (byte) 1, context78);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CG======" + "'", str18, "CG======");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + byte36 + "' != '" + (byte) 61 + "'", byte36 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "EEEA====" + "'", str45, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[33, 8]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[100]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + byte58 + "' != '" + (byte) 61 + "'", byte58 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[100]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "EEEA====" + "'", str67, "EEEA====");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "EEEA\001\001\001\001" + "'", str68, "EEEA\001\001\001\001");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[100]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + byte77 + "' != '" + (byte) 61 + "'", byte77 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test261");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        byte[] byteArray6 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_8 = new org.apache.commons.codec.binary.Base32(0, byteArray6, false);
        java.lang.String str9 = base32_1.encodeToString(byteArray6);
        byte[] byteArray16 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean17 = base32_1.containsAlphabetOrPad(byteArray16);
        boolean boolean19 = base32_1.isInAlphabet((byte) 1);
        org.apache.commons.codec.binary.Base32 base32_21 = new org.apache.commons.codec.binary.Base32((int) (byte) 10);
        org.apache.commons.codec.binary.Base32 base32_23 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_29 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray28);
        byte[] byteArray30 = base32_23.encode(byteArray28);
        byte[] byteArray35 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_37 = new org.apache.commons.codec.binary.Base32(0, byteArray35, false);
        int int38 = base32_37.lineLength;
        byte byte39 = base32_37.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context40 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean41 = base32_37.hasData(context40);
        context40.pos = 0;
        int int44 = context40.readPos;
        byte[] byteArray47 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_49 = new org.apache.commons.codec.binary.Base32(0, byteArray47, false);
        org.apache.commons.codec.binary.Base32 base32_51 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean53 = base32_51.isInAlphabet("");
        byte[] byteArray56 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_58 = new org.apache.commons.codec.binary.Base32(0, byteArray56, false);
        java.lang.String str59 = base32_51.encodeToString(byteArray56);
        byte[] byteArray66 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean67 = base32_51.containsAlphabetOrPad(byteArray66);
        byte[] byteArray68 = base32_49.encode(byteArray66);
        byte[] byteArray74 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str75 = base32_49.encodeToString(byteArray74);
        context40.buffer = byteArray74;
        java.lang.String str77 = context40.toString();
        base32_21.encode(byteArray30, (int) (byte) 0, (int) (short) 1, context40);
        context40.ibitWorkArea = (byte) -1;
        boolean boolean81 = base32_1.hasData(context40);
        int int82 = context40.modulus;
        context40.pos = (byte) 1;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CG======" + "'", str9, "CG======");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + byte39 + "' != '" + (byte) 61 + "'", byte39 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[100]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "CG======" + "'", str59, "CG======");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "MQ6QUCQB" + "'", str75, "MQ6QUCQB");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str77, "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test262");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        int int12 = context7.modulus;
        int int13 = context7.modulus;
        java.lang.String str14 = context7.toString();
        long long15 = context7.lbitWorkArea;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str14, "Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test263");
        org.apache.commons.codec.binary.Base32 base32_0 = new org.apache.commons.codec.binary.Base32();
        org.apache.commons.codec.binary.BaseNCodec.Context context1 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context1.ibitWorkArea = (byte) 61;
        context1.currentLinePos = 'a';
        boolean boolean6 = base32_0.hasData(context1);
        byte[] byteArray7 = context1.buffer;
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(byteArray7);
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test264");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        context7.currentLinePos = (-1);
        context7.currentLinePos = (-1);
        int int16 = context7.currentLinePos;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test265");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        byte byte2 = base32_1.pad;
        org.apache.commons.codec.binary.BaseNCodec.Context context3 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context3.ibitWorkArea = (byte) 61;
        context3.currentLinePos = 'a';
        context3.ibitWorkArea = '4';
        org.apache.commons.codec.binary.BaseNCodec.Context context10 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context10.ibitWorkArea = (byte) 61;
        context10.currentLinePos = 'a';
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_20 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray19);
        context10.buffer = byteArray19;
        context3.buffer = byteArray19;
        java.lang.String str23 = base32_1.encodeAsString(byteArray19);
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 61 + "'", byte2 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 0, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0400K===" + "'", str23, "0400K===");
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test266");
        org.apache.commons.codec.binary.BaseNCodec.Context context0 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context0.ibitWorkArea = (byte) 61;
        context0.currentLinePos = 'a';
        context0.ibitWorkArea = '4';
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context7.ibitWorkArea = (byte) 61;
        context7.currentLinePos = 'a';
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray16);
        context7.buffer = byteArray16;
        context0.buffer = byteArray16;
        java.lang.String str20 = context0.toString();
        context0.eof = true;
        int int23 = context0.modulus;
        context0.pos = 100;
        int int26 = context0.readPos;
        int int27 = context0.currentLinePos;
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 0, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Context[buffer=[1, 0, 10], currentLinePos=97, eof=false, ibitWorkArea=52, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str20, "Context[buffer=[1, 0, 10], currentLinePos=97, eof=false, ibitWorkArea=52, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test267");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        int int12 = context7.modulus;
        int int13 = context7.ibitWorkArea;
        context7.pos = 1;
        byte[] byteArray16 = context7.buffer;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(byteArray16);
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test268");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(0);
        byte[] byteArray4 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32(0, byteArray4, false);
        int int7 = base32_6.lineLength;
        byte byte8 = base32_6.PAD;
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        int int14 = base32_13.lineLength;
        byte[] byteArray16 = base32_13.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str17 = base32_6.encodeToString(byteArray16);
        byte[] byteArray18 = base32_1.encode(byteArray16);
        byte[] byteArray20 = base32_1.decode("hi!");
        org.apache.commons.codec.binary.Base32 base32_21 = new org.apache.commons.codec.binary.Base32();
        org.apache.commons.codec.binary.BaseNCodec.Context context22 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context22.ibitWorkArea = (byte) 61;
        context22.currentLinePos = 'a';
        boolean boolean27 = base32_21.hasData(context22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj28 = base32_1.decode((java.lang.Object) boolean27);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 61 + "'", byte8 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "EEEA====" + "'", str17, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test269");
        byte[] byteArray3 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32(0, byteArray3, false);
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean9 = base32_7.isInAlphabet("");
        byte[] byteArray12 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_14 = new org.apache.commons.codec.binary.Base32(0, byteArray12, false);
        java.lang.String str15 = base32_7.encodeToString(byteArray12);
        byte[] byteArray22 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean23 = base32_7.containsAlphabetOrPad(byteArray22);
        byte[] byteArray24 = base32_5.encode(byteArray22);
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str31 = base32_5.encodeToString(byteArray30);
        byte[] byteArray33 = base32_5.decode("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray36 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_38 = new org.apache.commons.codec.binary.Base32(0, byteArray36, false);
        java.lang.String str39 = base32_5.encodeAsString(byteArray36);
        org.apache.commons.codec.binary.Base32 base32_41 = new org.apache.commons.codec.binary.Base32((int) (byte) -1, byteArray36, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CG======" + "'", str15, "CG======");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "MQ6QUCQB" + "'", str31, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "MQ======" + "'", str39, "MQ======");
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test270");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) 100);
        boolean boolean3 = base32_1.isInAlphabet("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray6 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_8 = new org.apache.commons.codec.binary.Base32(0, byteArray6, false);
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean12 = base32_10.isInAlphabet("");
        byte[] byteArray15 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(0, byteArray15, false);
        java.lang.String str18 = base32_10.encodeToString(byteArray15);
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean26 = base32_10.containsAlphabetOrPad(byteArray25);
        byte[] byteArray27 = base32_8.encode(byteArray25);
        java.lang.String str28 = base32_1.encodeToString(byteArray25);
        boolean boolean30 = base32_1.isInAlphabet((byte) 10);
        byte[] byteArray31 = null;
        byte[] byteArray32 = base32_1.decode(byteArray31);
        byte[] byteArray35 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_37 = new org.apache.commons.codec.binary.Base32(0, byteArray35, false);
        byte[] byteArray42 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_44 = new org.apache.commons.codec.binary.Base32(0, byteArray42, false);
        int int45 = base32_44.lineLength;
        byte byte46 = base32_44.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context47 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean48 = base32_44.hasData(context47);
        context47.pos = 0;
        int int51 = context47.readPos;
        int int52 = context47.modulus;
        byte[] byteArray53 = context47.buffer;
        int int54 = context47.pos;
        int int55 = context47.pos;
        int int56 = context47.pos;
        base32_1.decode(byteArray35, 1, (int) (byte) -1, context47);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CG======" + "'", str18, "CG======");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "MQAQAZAAMQdddddd" + "'", str28, "MQAQAZAAMQdddddd");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(byteArray32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[100]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + byte46 + "' != '" + (byte) 61 + "'", byte46 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNull(byteArray53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test271");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(true, (byte) -1);
        byte byte3 = base32_2.pad;
        byte byte4 = base32_2.pad;
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) -1 + "'", byte3 == (byte) -1);
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) -1 + "'", byte4 == (byte) -1);
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test272");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(8192);
        byte[] byteArray5 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32(0, byteArray5, false);
        int int8 = base32_7.lineLength;
        byte byte9 = base32_7.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context10 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean11 = base32_7.hasData(context10);
        context10.pos = 0;
        int int14 = context10.readPos;
        byte[] byteArray17 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_19 = new org.apache.commons.codec.binary.Base32(0, byteArray17, false);
        org.apache.commons.codec.binary.Base32 base32_21 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean23 = base32_21.isInAlphabet("");
        byte[] byteArray26 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_28 = new org.apache.commons.codec.binary.Base32(0, byteArray26, false);
        java.lang.String str29 = base32_21.encodeToString(byteArray26);
        byte[] byteArray36 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean37 = base32_21.containsAlphabetOrPad(byteArray36);
        byte[] byteArray38 = base32_19.encode(byteArray36);
        byte[] byteArray44 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str45 = base32_19.encodeToString(byteArray44);
        context10.buffer = byteArray44;
        java.lang.String str47 = context10.toString();
        context10.eof = false;
        int int50 = context10.readPos;
        byte[] byteArray51 = base32_1.ensureBufferSize(61, context10);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 61 + "'", byte9 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "CG======" + "'", str29, "CG======");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "MQ6QUCQB" + "'", str45, "MQ6QUCQB");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str47, "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100, 61, 10, 10, 1, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test273");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean4 = base32_2.isInAlphabet("");
        byte[] byteArray7 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32(0, byteArray7, false);
        java.lang.String str10 = base32_2.encodeToString(byteArray7);
        byte[] byteArray17 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean18 = base32_2.containsAlphabetOrPad(byteArray17);
        org.apache.commons.codec.binary.Base32 base32_20 = new org.apache.commons.codec.binary.Base32((int) (byte) 0, byteArray17, false);
        byte[] byteArray23 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_25 = new org.apache.commons.codec.binary.Base32(0, byteArray23, false);
        int int26 = base32_25.lineLength;
        byte byte27 = base32_25.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context28 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean29 = base32_25.hasData(context28);
        context28.pos = 0;
        int int32 = context28.readPos;
        byte[] byteArray35 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_37 = new org.apache.commons.codec.binary.Base32(0, byteArray35, false);
        org.apache.commons.codec.binary.Base32 base32_39 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean41 = base32_39.isInAlphabet("");
        byte[] byteArray44 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_46 = new org.apache.commons.codec.binary.Base32(0, byteArray44, false);
        java.lang.String str47 = base32_39.encodeToString(byteArray44);
        byte[] byteArray54 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean55 = base32_39.containsAlphabetOrPad(byteArray54);
        byte[] byteArray56 = base32_37.encode(byteArray54);
        byte[] byteArray62 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str63 = base32_37.encodeToString(byteArray62);
        context28.buffer = byteArray62;
        java.lang.String str65 = context28.toString();
        context28.eof = false;
        int int68 = context28.readPos;
        int int69 = context28.currentLinePos;
        boolean boolean70 = base32_20.hasData(context28);
        context28.currentLinePos = 10;
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CG======" + "'", str10, "CG======");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 61 + "'", byte27 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "CG======" + "'", str47, "CG======");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "MQ6QUCQB" + "'", str63, "MQ6QUCQB");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str65, "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test274");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet("");
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean9 = base32_7.isInAlphabet("");
        byte[] byteArray12 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_14 = new org.apache.commons.codec.binary.Base32(0, byteArray12, false);
        java.lang.String str15 = base32_7.encodeToString(byteArray12);
        long long16 = base32_1.getEncodedLength(byteArray12);
        java.lang.Class<?> wildcardClass17 = byteArray12.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CG======" + "'", str15, "CG======");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 8L + "'", long16 == 8L);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test275");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) -1);
        org.apache.commons.codec.binary.Base32 base32_3 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean5 = base32_3.isInAlphabet("");
        byte[] byteArray7 = base32_3.decode("MQ6QUCQB");
        byte[] byteArray8 = base32_1.decode(byteArray7);
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(false);
        org.apache.commons.codec.binary.Base32 base32_12 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_18 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray17);
        byte[] byteArray19 = base32_12.encode(byteArray17);
        boolean boolean20 = base32_10.containsAlphabetOrPad(byteArray19);
        byte[] byteArray23 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_25 = new org.apache.commons.codec.binary.Base32(0, byteArray23, false);
        int int26 = base32_25.lineLength;
        byte byte27 = base32_25.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context28 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean29 = base32_25.hasData(context28);
        context28.pos = 0;
        int int32 = context28.readPos;
        byte[] byteArray35 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_37 = new org.apache.commons.codec.binary.Base32(0, byteArray35, false);
        org.apache.commons.codec.binary.Base32 base32_39 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean41 = base32_39.isInAlphabet("");
        byte[] byteArray44 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_46 = new org.apache.commons.codec.binary.Base32(0, byteArray44, false);
        java.lang.String str47 = base32_39.encodeToString(byteArray44);
        byte[] byteArray54 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean55 = base32_39.containsAlphabetOrPad(byteArray54);
        byte[] byteArray56 = base32_37.encode(byteArray54);
        byte[] byteArray62 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str63 = base32_37.encodeToString(byteArray62);
        context28.buffer = byteArray62;
        org.apache.commons.codec.binary.BaseNCodec.Context context67 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        long long68 = context67.lbitWorkArea;
        base32_10.decode(byteArray62, 0, (int) (byte) 0, context67);
        byte[] byteArray71 = base32_10.decode("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.apache.commons.codec.binary.Base32 base32_74 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean76 = base32_74.isInAlphabet("");
        byte[] byteArray79 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_81 = new org.apache.commons.codec.binary.Base32(0, byteArray79, false);
        java.lang.String str82 = base32_74.encodeToString(byteArray79);
        byte[] byteArray89 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean90 = base32_74.containsAlphabetOrPad(byteArray89);
        org.apache.commons.codec.binary.Base32 base32_92 = new org.apache.commons.codec.binary.Base32((int) (byte) 0, byteArray89, false);
        org.apache.commons.codec.binary.BaseNCodec.Context context95 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        long long96 = context95.lbitWorkArea;
        base32_10.decode(byteArray89, (int) (short) 0, (int) (byte) 1, context95);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj98 = base32_1.encode((java.lang.Object) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-74, -115, -81, 51, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-38]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 61 + "'", byte27 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "CG======" + "'", str47, "CG======");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "MQ6QUCQB" + "'", str63, "MQ6QUCQB");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[17]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[100]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "CG======" + "'", str82, "CG======");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 0L + "'", long96 == 0L);
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test276");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        byte[] byteArray6 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_8 = new org.apache.commons.codec.binary.Base32(0, byteArray6, false);
        java.lang.String str9 = base32_1.encodeToString(byteArray6);
        byte[] byteArray16 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean17 = base32_1.containsAlphabetOrPad(byteArray16);
        boolean boolean19 = base32_1.isInAlphabet((byte) 1);
        org.apache.commons.codec.binary.Base32 base32_21 = new org.apache.commons.codec.binary.Base32((int) (byte) 10);
        org.apache.commons.codec.binary.Base32 base32_23 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_29 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray28);
        byte[] byteArray30 = base32_23.encode(byteArray28);
        byte[] byteArray35 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_37 = new org.apache.commons.codec.binary.Base32(0, byteArray35, false);
        int int38 = base32_37.lineLength;
        byte byte39 = base32_37.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context40 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean41 = base32_37.hasData(context40);
        context40.pos = 0;
        int int44 = context40.readPos;
        byte[] byteArray47 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_49 = new org.apache.commons.codec.binary.Base32(0, byteArray47, false);
        org.apache.commons.codec.binary.Base32 base32_51 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean53 = base32_51.isInAlphabet("");
        byte[] byteArray56 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_58 = new org.apache.commons.codec.binary.Base32(0, byteArray56, false);
        java.lang.String str59 = base32_51.encodeToString(byteArray56);
        byte[] byteArray66 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean67 = base32_51.containsAlphabetOrPad(byteArray66);
        byte[] byteArray68 = base32_49.encode(byteArray66);
        byte[] byteArray74 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str75 = base32_49.encodeToString(byteArray74);
        context40.buffer = byteArray74;
        java.lang.String str77 = context40.toString();
        base32_21.encode(byteArray30, (int) (byte) 0, (int) (short) 1, context40);
        context40.ibitWorkArea = (byte) -1;
        boolean boolean81 = base32_1.hasData(context40);
        int int82 = context40.modulus;
        byte[] byteArray83 = context40.buffer;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CG======" + "'", str9, "CG======");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + byte39 + "' != '" + (byte) 61 + "'", byte39 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[100]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "CG======" + "'", str59, "CG======");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "MQ6QUCQB" + "'", str75, "MQ6QUCQB");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str77, "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[100, 61, 10, 10, 1, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test277");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(false);
        org.apache.commons.codec.binary.Base32 base32_3 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray8);
        byte[] byteArray10 = base32_3.encode(byteArray8);
        boolean boolean11 = base32_1.containsAlphabetOrPad(byteArray10);
        byte[] byteArray14 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(0, byteArray14, false);
        int int17 = base32_16.lineLength;
        byte byte18 = base32_16.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context19 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean20 = base32_16.hasData(context19);
        context19.pos = 0;
        int int23 = context19.readPos;
        byte[] byteArray26 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_28 = new org.apache.commons.codec.binary.Base32(0, byteArray26, false);
        org.apache.commons.codec.binary.Base32 base32_30 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean32 = base32_30.isInAlphabet("");
        byte[] byteArray35 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_37 = new org.apache.commons.codec.binary.Base32(0, byteArray35, false);
        java.lang.String str38 = base32_30.encodeToString(byteArray35);
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean46 = base32_30.containsAlphabetOrPad(byteArray45);
        byte[] byteArray47 = base32_28.encode(byteArray45);
        byte[] byteArray53 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str54 = base32_28.encodeToString(byteArray53);
        context19.buffer = byteArray53;
        org.apache.commons.codec.binary.BaseNCodec.Context context58 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        long long59 = context58.lbitWorkArea;
        base32_1.decode(byteArray53, 0, (int) (byte) 0, context58);
        byte[] byteArray63 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_65 = new org.apache.commons.codec.binary.Base32(0, byteArray63, false);
        int int66 = base32_65.lineLength;
        byte byte67 = base32_65.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context68 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean69 = base32_65.hasData(context68);
        int int70 = context68.ibitWorkArea;
        context68.readPos = 0;
        context68.currentLinePos = (byte) -1;
        boolean boolean75 = base32_1.hasData(context68);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + byte18 + "' != '" + (byte) 61 + "'", byte18 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "CG======" + "'", str38, "CG======");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "MQ6QUCQB" + "'", str54, "MQ6QUCQB");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[100]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + byte67 + "' != '" + (byte) 61 + "'", byte67 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test278");
        org.apache.commons.codec.binary.BaseNCodec.Context context0 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context0.ibitWorkArea = (byte) 61;
        context0.currentLinePos = 'a';
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray9);
        context0.buffer = byteArray9;
        int int12 = context0.currentLinePos;
        int int13 = context0.modulus;
        context0.lbitWorkArea = 0L;
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 0, 10]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test279");
        org.apache.commons.codec.binary.BaseNCodec.Context context0 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context0.ibitWorkArea = (byte) 61;
        context0.currentLinePos = 'a';
        int int5 = context0.modulus;
        context0.pos = 76;
        context0.eof = false;
        byte[] byteArray10 = context0.buffer;
        context0.ibitWorkArea = (short) 100;
        byte[] byteArray15 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(0, byteArray15, false);
        int int18 = base32_17.lineLength;
        byte byte19 = base32_17.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context20 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean21 = base32_17.hasData(context20);
        context20.pos = 0;
        int int24 = context20.readPos;
        int int25 = context20.modulus;
        java.lang.String str26 = context20.toString();
        int int27 = context20.currentLinePos;
        org.apache.commons.codec.binary.Base32 base32_29 = new org.apache.commons.codec.binary.Base32(false);
        byte[] byteArray32 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_34 = new org.apache.commons.codec.binary.Base32(0, byteArray32, false);
        int int35 = base32_34.lineLength;
        byte byte36 = base32_34.PAD;
        byte[] byteArray39 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_41 = new org.apache.commons.codec.binary.Base32(0, byteArray39, false);
        int int42 = base32_41.lineLength;
        byte[] byteArray44 = base32_41.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str45 = base32_34.encodeToString(byteArray44);
        byte[] byteArray46 = base32_29.encode(byteArray44);
        context20.buffer = byteArray44;
        context0.buffer = byteArray44;
        byte[] byteArray49 = context0.buffer;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) 61 + "'", byte19 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str26, "Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + byte36 + "' != '" + (byte) 61 + "'", byte36 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "EEEA====" + "'", str45, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[33, 8]");
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test280");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        byte[] byteArray9 = null;
        context7.buffer = byteArray9;
        context7.ibitWorkArea = '#';
        int int13 = context7.modulus;
        context7.modulus = (byte) 0;
        int int16 = context7.pos;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test281");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet("");
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean9 = base32_7.isInAlphabet("");
        byte[] byteArray12 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_14 = new org.apache.commons.codec.binary.Base32(0, byteArray12, false);
        java.lang.String str15 = base32_7.encodeToString(byteArray12);
        long long16 = base32_1.getEncodedLength(byteArray12);
        org.apache.commons.codec.binary.Base32 base32_19 = new org.apache.commons.codec.binary.Base32(false, (byte) 61);
        org.apache.commons.codec.binary.Base32 base32_21 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_27 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray26);
        byte[] byteArray28 = base32_21.encode(byteArray26);
        boolean boolean29 = base32_19.containsAlphabetOrPad(byteArray26);
        java.lang.Object obj30 = base32_1.encode((java.lang.Object) byteArray26);
        org.apache.commons.codec.binary.Base32 base32_33 = new org.apache.commons.codec.binary.Base32(false, (byte) 1);
        byte[] byteArray36 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_38 = new org.apache.commons.codec.binary.Base32(0, byteArray36, false);
        int int39 = base32_38.lineLength;
        byte byte40 = base32_38.PAD;
        byte byte41 = base32_38.pad;
        byte[] byteArray44 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_46 = new org.apache.commons.codec.binary.Base32(0, byteArray44, false);
        int int47 = base32_46.lineLength;
        byte byte48 = base32_46.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context49 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean50 = base32_46.hasData(context49);
        org.apache.commons.codec.binary.Base32 base32_52 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean54 = base32_52.isInAlphabet("");
        byte[] byteArray57 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_59 = new org.apache.commons.codec.binary.Base32(0, byteArray57, false);
        java.lang.String str60 = base32_52.encodeToString(byteArray57);
        byte[] byteArray67 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean68 = base32_52.containsAlphabetOrPad(byteArray67);
        byte[] byteArray69 = base32_46.encode(byteArray67);
        org.apache.commons.codec.binary.Base32 base32_71 = new org.apache.commons.codec.binary.Base32(0);
        byte[] byteArray74 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_76 = new org.apache.commons.codec.binary.Base32(0, byteArray74, false);
        int int77 = base32_76.lineLength;
        byte byte78 = base32_76.PAD;
        byte[] byteArray81 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_83 = new org.apache.commons.codec.binary.Base32(0, byteArray81, false);
        int int84 = base32_83.lineLength;
        byte[] byteArray86 = base32_83.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str87 = base32_76.encodeToString(byteArray86);
        byte[] byteArray88 = base32_71.encode(byteArray86);
        byte[] byteArray89 = base32_46.decode(byteArray88);
        boolean boolean91 = base32_38.isInAlphabet(byteArray89, false);
        byte[] byteArray92 = base32_33.encode(byteArray89);
        boolean boolean94 = base32_1.isInAlphabet(byteArray92, false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CG======" + "'", str15, "CG======");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 8L + "'", long16 == 8L);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + byte40 + "' != '" + (byte) 61 + "'", byte40 == (byte) 61);
        org.junit.Assert.assertTrue("'" + byte41 + "' != '" + (byte) 61 + "'", byte41 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + byte48 + "' != '" + (byte) 61 + "'", byte48 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "CG======" + "'", str60, "CG======");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[100]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + byte78 + "' != '" + (byte) 61 + "'", byte78 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[100]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "EEEA====" + "'", str87, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[33, 8]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[69, 69, 69, 65, 1, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test282");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        int int9 = context7.ibitWorkArea;
        java.lang.String str10 = context7.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str10, "Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test283");
        org.apache.commons.codec.binary.BaseNCodec.Context context0 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context0.ibitWorkArea = (byte) 61;
        context0.currentLinePos = 'a';
        context0.ibitWorkArea = '4';
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context7.ibitWorkArea = (byte) 61;
        context7.currentLinePos = 'a';
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray16);
        context7.buffer = byteArray16;
        context0.buffer = byteArray16;
        context0.pos = (-1);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 0, 10]");
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test284");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) 100);
        boolean boolean3 = base32_1.isInAlphabet("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray6 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_8 = new org.apache.commons.codec.binary.Base32(0, byteArray6, false);
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean12 = base32_10.isInAlphabet("");
        byte[] byteArray15 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(0, byteArray15, false);
        java.lang.String str18 = base32_10.encodeToString(byteArray15);
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean26 = base32_10.containsAlphabetOrPad(byteArray25);
        byte[] byteArray27 = base32_8.encode(byteArray25);
        java.lang.String str28 = base32_1.encodeToString(byteArray25);
        boolean boolean30 = base32_1.isInAlphabet((byte) 10);
        byte[] byteArray33 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_35 = new org.apache.commons.codec.binary.Base32(0, byteArray33, false);
        int int36 = base32_35.lineLength;
        byte byte37 = base32_35.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context38 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean39 = base32_35.hasData(context38);
        context38.pos = 0;
        int int42 = context38.readPos;
        context38.currentLinePos = (-1);
        byte[] byteArray45 = context38.buffer;
        int int46 = context38.pos;
        int int47 = base32_1.available(context38);
        byte[] byteArray48 = null;
        byte[] byteArray49 = base32_1.decode(byteArray48);
        java.lang.Object obj50 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj51 = base32_1.decode(obj50);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CG======" + "'", str18, "CG======");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "MQAQAZAAMQdddddd" + "'", str28, "MQAQAZAAMQdddddd");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + byte37 + "' != '" + (byte) 61 + "'", byte37 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(byteArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(byteArray49);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test285");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(false);
        byte[] byteArray4 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32(0, byteArray4, false);
        int int7 = base32_6.lineLength;
        byte byte8 = base32_6.PAD;
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        int int14 = base32_13.lineLength;
        byte[] byteArray16 = base32_13.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str17 = base32_6.encodeToString(byteArray16);
        byte[] byteArray18 = base32_1.encode(byteArray16);
        boolean boolean20 = base32_1.isInAlphabet((byte) -1);
        org.apache.commons.codec.binary.Base32 base32_22 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean24 = base32_22.isInAlphabet("");
        byte[] byteArray26 = base32_22.decode("MQ6QUCQB");
        long long27 = base32_1.getEncodedLength(byteArray26);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_33 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray32);
        byte[] byteArray35 = base32_33.decode("");
        byte[] byteArray40 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_42 = new org.apache.commons.codec.binary.Base32(0, byteArray40, false);
        int int43 = base32_42.lineLength;
        byte byte44 = base32_42.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context45 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean46 = base32_42.hasData(context45);
        context45.pos = 0;
        int int49 = context45.readPos;
        int int50 = context45.modulus;
        context45.lbitWorkArea = 100L;
        int int53 = base32_1.readResults(byteArray35, (int) (byte) 100, 0, context45);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 61 + "'", byte8 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "EEEA====" + "'", str17, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-74, -115, -81, 51, 75]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 8L + "'", long27 == 8L);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[100]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + byte44 + "' != '" + (byte) 61 + "'", byte44 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test286");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(0);
        byte[] byteArray4 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32(0, byteArray4, false);
        int int7 = base32_6.lineLength;
        byte byte8 = base32_6.PAD;
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        int int14 = base32_13.lineLength;
        byte[] byteArray16 = base32_13.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str17 = base32_6.encodeToString(byteArray16);
        byte[] byteArray18 = base32_1.encode(byteArray16);
        org.apache.commons.codec.binary.BaseNCodec.Context context19 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        int int20 = context19.modulus;
        byte[] byteArray21 = context19.buffer;
        java.lang.String str22 = context19.toString();
        context19.ibitWorkArea = (byte) -1;
        boolean boolean25 = base32_1.hasData(context19);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 61 + "'", byte8 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "EEEA====" + "'", str17, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str22, "Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test287");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(false);
        org.apache.commons.codec.binary.Base32 base32_3 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray8);
        byte[] byteArray10 = base32_3.encode(byteArray8);
        boolean boolean11 = base32_1.containsAlphabetOrPad(byteArray10);
        int int12 = base32_1.getDefaultBufferSize();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8192 + "'", int12 == 8192);
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test288");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet("");
        java.lang.Object obj7 = base32_1.decode((java.lang.Object) "MQ6QUCQB");
        int int8 = base32_1.lineLength;
        byte byte9 = base32_1.PAD;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 61 + "'", byte9 == (byte) 61);
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test289");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        byte[] byteArray6 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_8 = new org.apache.commons.codec.binary.Base32(0, byteArray6, false);
        java.lang.String str9 = base32_1.encodeToString(byteArray6);
        byte[] byteArray10 = null;
        byte[] byteArray11 = base32_1.encode(byteArray10);
        org.apache.commons.codec.binary.Base32 base32_14 = new org.apache.commons.codec.binary.Base32(false, (byte) 61);
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_22 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray21);
        byte[] byteArray23 = base32_16.encode(byteArray21);
        boolean boolean24 = base32_14.containsAlphabetOrPad(byteArray21);
        org.apache.commons.codec.binary.Base32 base32_28 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean30 = base32_28.isInAlphabet("");
        byte[] byteArray32 = base32_28.decode("MQ6QUCQB");
        byte[] byteArray35 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_37 = new org.apache.commons.codec.binary.Base32(0, byteArray35, false);
        int int38 = base32_37.lineLength;
        byte byte39 = base32_37.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context40 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean41 = base32_37.hasData(context40);
        org.apache.commons.codec.binary.Base32 base32_43 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean45 = base32_43.isInAlphabet("");
        byte[] byteArray48 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_50 = new org.apache.commons.codec.binary.Base32(0, byteArray48, false);
        java.lang.String str51 = base32_43.encodeToString(byteArray48);
        byte[] byteArray58 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean59 = base32_43.containsAlphabetOrPad(byteArray58);
        byte[] byteArray60 = base32_37.encode(byteArray58);
        byte[] byteArray61 = base32_28.encode(byteArray60);
        org.apache.commons.codec.binary.Base32 base32_63 = new org.apache.commons.codec.binary.Base32((byte) -1);
        org.apache.commons.codec.binary.Base32 base32_65 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean67 = base32_65.isInAlphabet("");
        byte[] byteArray69 = base32_65.decode("MQ6QUCQB");
        byte[] byteArray70 = base32_63.decode(byteArray69);
        org.apache.commons.codec.binary.BaseNCodec.Context context73 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context73.ibitWorkArea = (byte) 61;
        context73.currentLinePos = 'a';
        context73.ibitWorkArea = '4';
        org.apache.commons.codec.binary.BaseNCodec.Context context80 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context80.ibitWorkArea = (byte) 61;
        context80.currentLinePos = 'a';
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_90 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray89);
        context80.buffer = byteArray89;
        context73.buffer = byteArray89;
        java.lang.String str93 = context73.toString();
        context73.eof = true;
        int int96 = context73.modulus;
        base32_28.encode(byteArray70, 100, 61, context73);
        base32_1.decode(byteArray21, (int) (short) 100, (-1), context73);
        byte byte99 = base32_1.pad;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CG======" + "'", str9, "CG======");
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-74, -115, -81, 51, 75]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + byte39 + "' != '" + (byte) 61 + "'", byte39 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "CG======" + "'", str51, "CG======");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[57, 76, 56, 75, 50, 75, 65, 49, 66, 57, 48, 75, 50, 74, 65, 72, 55, 75, 85, 74, 81, 70, 57, 84, 55, 75, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-74, -115, -81, 51, 75]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-38]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[1, 0, 10]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Context[buffer=[1, 0, 10], currentLinePos=97, eof=false, ibitWorkArea=52, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str93, "Context[buffer=[1, 0, 10], currentLinePos=97, eof=false, ibitWorkArea=52, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + byte99 + "' != '" + (byte) 61 + "'", byte99 == (byte) 61);
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test290");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) (byte) 10);
        byte byte2 = base32_1.pad;
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0);
        byte[] byteArray7 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32(0, byteArray7, false);
        int int10 = base32_9.lineLength;
        byte byte11 = base32_9.PAD;
        byte[] byteArray14 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(0, byteArray14, false);
        int int17 = base32_16.lineLength;
        byte[] byteArray19 = base32_16.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str20 = base32_9.encodeToString(byteArray19);
        byte[] byteArray21 = base32_4.encode(byteArray19);
        org.apache.commons.codec.binary.BaseNCodec.Context context24 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        byte[] byteArray25 = context24.buffer;
        context24.ibitWorkArea = 8192;
        int int28 = context24.readPos;
        base32_1.decode(byteArray19, (int) (short) 100, (int) (short) 0, context24);
        byte[] byteArray31 = base32_1.decode("GA2DAMCLHU6T2===");
        org.apache.commons.codec.binary.Base32 base32_33 = new org.apache.commons.codec.binary.Base32((byte) 100);
        boolean boolean35 = base32_33.isInAlphabet("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray38 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_40 = new org.apache.commons.codec.binary.Base32(0, byteArray38, false);
        org.apache.commons.codec.binary.Base32 base32_42 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean44 = base32_42.isInAlphabet("");
        byte[] byteArray47 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_49 = new org.apache.commons.codec.binary.Base32(0, byteArray47, false);
        java.lang.String str50 = base32_42.encodeToString(byteArray47);
        byte[] byteArray57 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean58 = base32_42.containsAlphabetOrPad(byteArray57);
        byte[] byteArray59 = base32_40.encode(byteArray57);
        java.lang.String str60 = base32_33.encodeToString(byteArray57);
        byte[] byteArray61 = base32_1.decode(byteArray57);
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 61 + "'", byte2 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 61 + "'", byte11 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "EEEA====" + "'", str20, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "CG======" + "'", str50, "CG======");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "MQAQAZAAMQdddddd" + "'", str60, "MQAQAZAAMQdddddd");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test291");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        byte[] byteArray14 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(0, byteArray14, false);
        org.apache.commons.codec.binary.Base32 base32_18 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean20 = base32_18.isInAlphabet("");
        byte[] byteArray23 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_25 = new org.apache.commons.codec.binary.Base32(0, byteArray23, false);
        java.lang.String str26 = base32_18.encodeToString(byteArray23);
        byte[] byteArray33 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean34 = base32_18.containsAlphabetOrPad(byteArray33);
        byte[] byteArray35 = base32_16.encode(byteArray33);
        byte[] byteArray41 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str42 = base32_16.encodeToString(byteArray41);
        context7.buffer = byteArray41;
        java.lang.String str44 = context7.toString();
        context7.eof = false;
        int int47 = context7.readPos;
        context7.readPos = '#';
        context7.ibitWorkArea = 97;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "CG======" + "'", str26, "CG======");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "MQ6QUCQB" + "'", str42, "MQ6QUCQB");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str44, "Context[buffer=[100, 61, 10, 10, 1], currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test292");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(false, (byte) 0);
        boolean boolean4 = base32_2.isInAlphabet((byte) 61);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test293");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) ' ');
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test294");
        byte[] byteArray4 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray4);
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        int int11 = base32_10.lineLength;
        byte[] byteArray13 = base32_10.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        boolean boolean15 = base32_5.isInAlphabet(byteArray13, true);
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(false);
        byte[] byteArray20 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_22 = new org.apache.commons.codec.binary.Base32(0, byteArray20, false);
        int int23 = base32_22.lineLength;
        byte byte24 = base32_22.PAD;
        byte[] byteArray27 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_29 = new org.apache.commons.codec.binary.Base32(0, byteArray27, false);
        int int30 = base32_29.lineLength;
        byte[] byteArray32 = base32_29.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str33 = base32_22.encodeToString(byteArray32);
        byte[] byteArray34 = base32_17.encode(byteArray32);
        java.lang.String str35 = base32_5.encodeToString(byteArray32);
        boolean boolean37 = base32_5.isInAlphabet("MQ======");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[33, 8]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + byte24 + "' != '" + (byte) 61 + "'", byte24 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "EEEA====" + "'", str33, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "EEEA====" + "'", str35, "EEEA====");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test295");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        byte[] byteArray7 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32(0, byteArray7, false);
        byte[] byteArray10 = base32_4.decode(byteArray7);
        byte[] byteArray11 = null;
        org.apache.commons.codec.binary.Base32 base32_15 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean17 = base32_15.isInAlphabet("");
        boolean boolean19 = base32_15.isInAlphabet("CG======");
        byte[] byteArray22 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32(0, byteArray22, false);
        byte[] byteArray27 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_29 = new org.apache.commons.codec.binary.Base32(0, byteArray27, false);
        org.apache.commons.codec.binary.Base32 base32_31 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean33 = base32_31.isInAlphabet("");
        byte[] byteArray36 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_38 = new org.apache.commons.codec.binary.Base32(0, byteArray36, false);
        java.lang.String str39 = base32_31.encodeToString(byteArray36);
        byte[] byteArray46 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean47 = base32_31.containsAlphabetOrPad(byteArray46);
        byte[] byteArray48 = base32_29.encode(byteArray46);
        java.lang.Object obj49 = base32_24.encode((java.lang.Object) byteArray48);
        byte[] byteArray52 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_54 = new org.apache.commons.codec.binary.Base32(0, byteArray52, false);
        org.apache.commons.codec.binary.Base32 base32_56 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean58 = base32_56.isInAlphabet("");
        byte[] byteArray61 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_63 = new org.apache.commons.codec.binary.Base32(0, byteArray61, false);
        java.lang.String str64 = base32_56.encodeToString(byteArray61);
        byte[] byteArray71 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean72 = base32_56.containsAlphabetOrPad(byteArray71);
        byte[] byteArray73 = base32_54.encode(byteArray71);
        java.lang.String str74 = base32_24.encodeAsString(byteArray73);
        boolean boolean76 = base32_15.isInAlphabet(byteArray73, false);
        byte[] byteArray78 = base32_15.decode("");
        org.apache.commons.codec.binary.BaseNCodec.Context context79 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context79.ibitWorkArea = (byte) 61;
        long long82 = context79.lbitWorkArea;
        int int83 = context79.modulus;
        boolean boolean84 = base32_15.hasData(context79);
        // The following exception was thrown during execution in test generation
        try {
            base32_4.decode(byteArray11, 0, 100, context79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "CG======" + "'", str39, "CG======");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[100]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[100]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "CG======" + "'", str64, "CG======");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "JVIUCUKBLJAUCTKRHU6T2PJ5HU======" + "'", str74, "JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test296");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) 61);
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test297");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        byte[] byteArray6 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_8 = new org.apache.commons.codec.binary.Base32(0, byteArray6, false);
        java.lang.String str9 = base32_1.encodeToString(byteArray6);
        byte[] byteArray16 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean17 = base32_1.containsAlphabetOrPad(byteArray16);
        byte[] byteArray20 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_22 = new org.apache.commons.codec.binary.Base32(0, byteArray20, false);
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean26 = base32_24.isInAlphabet("");
        byte[] byteArray29 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_31 = new org.apache.commons.codec.binary.Base32(0, byteArray29, false);
        java.lang.String str32 = base32_24.encodeToString(byteArray29);
        byte[] byteArray39 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean40 = base32_24.containsAlphabetOrPad(byteArray39);
        byte[] byteArray41 = base32_22.encode(byteArray39);
        byte[] byteArray47 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str48 = base32_22.encodeToString(byteArray47);
        byte[] byteArray50 = base32_22.decode("hi!");
        long long51 = base32_1.getEncodedLength(byteArray50);
        org.apache.commons.codec.binary.Base32 base32_54 = new org.apache.commons.codec.binary.Base32(false, (byte) 61);
        org.apache.commons.codec.binary.Base32 base32_56 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean58 = base32_56.isInAlphabet("");
        byte[] byteArray60 = base32_56.decode("MQ6QUCQB");
        byte[] byteArray63 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_65 = new org.apache.commons.codec.binary.Base32(0, byteArray63, false);
        int int66 = base32_65.lineLength;
        byte byte67 = base32_65.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context68 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean69 = base32_65.hasData(context68);
        org.apache.commons.codec.binary.Base32 base32_71 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean73 = base32_71.isInAlphabet("");
        byte[] byteArray76 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_78 = new org.apache.commons.codec.binary.Base32(0, byteArray76, false);
        java.lang.String str79 = base32_71.encodeToString(byteArray76);
        byte[] byteArray86 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean87 = base32_71.containsAlphabetOrPad(byteArray86);
        byte[] byteArray88 = base32_65.encode(byteArray86);
        byte[] byteArray89 = base32_56.encode(byteArray88);
        boolean boolean91 = base32_54.isInAlphabet(byteArray88, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj92 = base32_1.encode((java.lang.Object) base32_54);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CG======" + "'", str9, "CG======");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "CG======" + "'", str32, "CG======");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "MQ6QUCQB" + "'", str48, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-74, -115, -81, 51, 75]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[100]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + byte67 + "' != '" + (byte) 61 + "'", byte67 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[100]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "CG======" + "'", str79, "CG======");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[57, 76, 56, 75, 50, 75, 65, 49, 66, 57, 48, 75, 50, 74, 65, 72, 55, 75, 85, 74, 81, 70, 57, 84, 55, 75, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test298");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        byte[] byteArray9 = null;
        context7.buffer = byteArray9;
        context7.ibitWorkArea = '#';
        int int13 = context7.modulus;
        context7.ibitWorkArea = 1;
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean19 = base32_17.isInAlphabet("");
        boolean boolean21 = base32_17.isInAlphabet((byte) 61);
        org.apache.commons.codec.binary.Base32 base32_23 = new org.apache.commons.codec.binary.Base32(true);
        int int24 = base32_23.lineLength;
        byte[] byteArray27 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_29 = new org.apache.commons.codec.binary.Base32(0, byteArray27, false);
        org.apache.commons.codec.binary.Base32 base32_31 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean33 = base32_31.isInAlphabet("");
        byte[] byteArray36 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_38 = new org.apache.commons.codec.binary.Base32(0, byteArray36, false);
        java.lang.String str39 = base32_31.encodeToString(byteArray36);
        byte[] byteArray46 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean47 = base32_31.containsAlphabetOrPad(byteArray46);
        byte[] byteArray48 = base32_29.encode(byteArray46);
        byte[] byteArray54 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str55 = base32_29.encodeToString(byteArray54);
        byte[] byteArray60 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_62 = new org.apache.commons.codec.binary.Base32(0, byteArray60, false);
        int int63 = base32_62.lineLength;
        byte byte64 = base32_62.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context65 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean66 = base32_62.hasData(context65);
        context65.pos = 0;
        int int69 = context65.readPos;
        context65.currentLinePos = (-1);
        byte[] byteArray72 = context65.buffer;
        base32_23.encode(byteArray54, 64, 0, context65);
        int int74 = base32_17.available(context65);
        org.apache.commons.codec.binary.Base32 base32_76 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean78 = base32_76.isInAlphabet("");
        boolean boolean80 = base32_76.isInAlphabet("");
        byte byte81 = base32_76.pad;
        byte[] byteArray87 = new byte[] { (byte) 0, (byte) 10, (byte) 61, (byte) 10, (byte) 0 };
        byte[] byteArray88 = base32_76.encode(byteArray87);
        java.lang.Object obj89 = base32_17.decode((java.lang.Object) byteArray87);
        context7.buffer = byteArray87;
        context7.readPos = 0;
        context7.lbitWorkArea = (short) 10;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "CG======" + "'", str39, "CG======");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "MQ6QUCQB" + "'", str55, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[100]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + byte64 + "' != '" + (byte) 61 + "'", byte64 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNull(byteArray72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + byte81 + "' != '" + (byte) 61 + "'", byte81 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[0, 10, 61, 10, 0]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[48, 48, 53, 51, 81, 50, 71, 48]");
        org.junit.Assert.assertNotNull(obj89);
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test299");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(false, (byte) -1);
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test300");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) (short) 0);
        int int2 = base32_1.getDefaultBufferSize();
        boolean boolean4 = base32_1.isInAlphabet((byte) -1);
        byte byte5 = base32_1.PAD;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 61 + "'", byte5 == (byte) 61);
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test301");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte[] byteArray7 = base32_4.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        int int8 = base32_4.getDefaultBufferSize();
        org.apache.commons.codec.binary.BaseNCodec.Context context9 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        byte[] byteArray10 = context9.buffer;
        boolean boolean11 = base32_4.hasData(context9);
        byte[] byteArray14 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(0, byteArray14, false);
        int int17 = base32_16.lineLength;
        byte[] byteArray19 = base32_16.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        int int20 = base32_16.getDefaultBufferSize();
        byte byte21 = base32_16.PAD;
        byte[] byteArray24 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_26 = new org.apache.commons.codec.binary.Base32(0, byteArray24, false);
        org.apache.commons.codec.binary.Base32 base32_28 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean30 = base32_28.isInAlphabet("");
        byte[] byteArray33 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_35 = new org.apache.commons.codec.binary.Base32(0, byteArray33, false);
        java.lang.String str36 = base32_28.encodeToString(byteArray33);
        byte[] byteArray43 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean44 = base32_28.containsAlphabetOrPad(byteArray43);
        byte[] byteArray45 = base32_26.encode(byteArray43);
        byte[] byteArray51 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str52 = base32_26.encodeToString(byteArray51);
        byte[] byteArray54 = base32_26.decode("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray57 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_59 = new org.apache.commons.codec.binary.Base32(0, byteArray57, false);
        java.lang.String str60 = base32_26.encodeAsString(byteArray57);
        byte[] byteArray65 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_67 = new org.apache.commons.codec.binary.Base32(0, byteArray65, false);
        int int68 = base32_67.lineLength;
        byte byte69 = base32_67.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context70 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean71 = base32_67.hasData(context70);
        byte[] byteArray72 = null;
        context70.buffer = byteArray72;
        context70.currentLinePos = (short) 100;
        long long76 = context70.lbitWorkArea;
        base32_16.encode(byteArray57, (int) (byte) 10, (-1), context70);
        byte[] byteArray78 = base32_4.encode(byteArray57);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[33, 8]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[33, 8]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8192 + "'", int20 == 8192);
        org.junit.Assert.assertTrue("'" + byte21 + "' != '" + (byte) 61 + "'", byte21 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "CG======" + "'", str36, "CG======");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "MQ6QUCQB" + "'", str52, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "MQ======" + "'", str60, "MQ======");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[100]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + byte69 + "' != '" + (byte) 61 + "'", byte69 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[77, 81, 61, 61, 61, 61, 61, 61]");
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test302");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        context7.currentLinePos = (-1);
        context7.currentLinePos = (-1);
        long long16 = context7.lbitWorkArea;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test303");
        org.apache.commons.codec.binary.Base32 base32_0 = new org.apache.commons.codec.binary.Base32();
        int int1 = base32_0.lineLength;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj3 = base32_0.decode((java.lang.Object) false);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test304");
        byte[] byteArray3 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32(0, byteArray3, false);
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        int int11 = base32_10.lineLength;
        byte byte12 = base32_10.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context13 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean14 = base32_10.hasData(context13);
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean18 = base32_16.isInAlphabet("");
        byte[] byteArray21 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_23 = new org.apache.commons.codec.binary.Base32(0, byteArray21, false);
        java.lang.String str24 = base32_16.encodeToString(byteArray21);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean32 = base32_16.containsAlphabetOrPad(byteArray31);
        byte[] byteArray33 = base32_10.encode(byteArray31);
        byte[] byteArray34 = base32_5.encode(byteArray31);
        org.apache.commons.codec.binary.Base32 base32_35 = new org.apache.commons.codec.binary.Base32((int) (short) -1, byteArray34);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 61 + "'", byte12 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "CG======" + "'", str24, "CG======");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test305");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        byte[] byteArray6 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_8 = new org.apache.commons.codec.binary.Base32(0, byteArray6, false);
        java.lang.String str9 = base32_1.encodeToString(byteArray6);
        byte[] byteArray10 = null;
        byte[] byteArray11 = base32_1.encode(byteArray10);
        byte byte12 = base32_1.pad;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CG======" + "'", str9, "CG======");
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 61 + "'", byte12 == (byte) 61);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test306");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte[] byteArray9 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_11 = new org.apache.commons.codec.binary.Base32(0, byteArray9, false);
        int int12 = base32_11.lineLength;
        byte byte13 = base32_11.PAD;
        byte[] byteArray16 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_18 = new org.apache.commons.codec.binary.Base32(0, byteArray16, false);
        int int19 = base32_18.lineLength;
        byte[] byteArray21 = base32_18.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str22 = base32_11.encodeToString(byteArray21);
        org.apache.commons.codec.binary.Base32 base32_25 = new org.apache.commons.codec.binary.Base32((-1), byteArray21, false, (byte) 0);
        byte[] byteArray26 = base32_4.decode(byteArray21);
        org.apache.commons.codec.binary.Base32 base32_28 = new org.apache.commons.codec.binary.Base32((byte) 100);
        boolean boolean30 = base32_28.isInAlphabet("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.apache.commons.codec.binary.Base32 base32_33 = new org.apache.commons.codec.binary.Base32((byte) 100);
        boolean boolean35 = base32_33.isInAlphabet("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray38 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_40 = new org.apache.commons.codec.binary.Base32(0, byteArray38, false);
        int int41 = base32_40.lineLength;
        byte[] byteArray43 = base32_40.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        byte[] byteArray44 = base32_33.encode(byteArray43);
        org.apache.commons.codec.binary.Base32 base32_47 = new org.apache.commons.codec.binary.Base32((int) (short) 100, byteArray43, true, (byte) -1);
        byte[] byteArray48 = base32_28.encode(byteArray43);
        java.lang.String str49 = base32_4.encodeAsString(byteArray43);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + byte13 + "' != '" + (byte) 61 + "'", byte13 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "EEEA====" + "'", str22, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[33, 8]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[69, 69, 69, 65, 100, 100, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[69, 69, 69, 65, 100, 100, 100, 100]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "EEEA====" + "'", str49, "EEEA====");
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test307");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        byte[] byteArray9 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_11 = new org.apache.commons.codec.binary.Base32(0, byteArray9, false);
        int int12 = base32_11.lineLength;
        byte byte13 = base32_11.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context14 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean15 = base32_11.hasData(context14);
        context14.pos = 0;
        int int18 = context14.readPos;
        int int19 = context14.modulus;
        java.lang.String str20 = context14.toString();
        int int21 = context14.currentLinePos;
        org.apache.commons.codec.binary.Base32 base32_23 = new org.apache.commons.codec.binary.Base32(false);
        byte[] byteArray26 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_28 = new org.apache.commons.codec.binary.Base32(0, byteArray26, false);
        int int29 = base32_28.lineLength;
        byte byte30 = base32_28.PAD;
        byte[] byteArray33 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_35 = new org.apache.commons.codec.binary.Base32(0, byteArray33, false);
        int int36 = base32_35.lineLength;
        byte[] byteArray38 = base32_35.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str39 = base32_28.encodeToString(byteArray38);
        byte[] byteArray40 = base32_23.encode(byteArray38);
        context14.buffer = byteArray38;
        byte[] byteArray42 = base32_4.decode(byteArray38);
        org.apache.commons.codec.binary.Base32 base32_44 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean46 = base32_44.isInAlphabet("");
        boolean boolean48 = base32_44.isInAlphabet("CG======");
        byte[] byteArray51 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_53 = new org.apache.commons.codec.binary.Base32(0, byteArray51, false);
        int int54 = base32_53.lineLength;
        byte byte55 = base32_53.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context56 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean57 = base32_53.hasData(context56);
        byte[] byteArray58 = null;
        context56.buffer = byteArray58;
        context56.currentLinePos = (short) 100;
        int int62 = base32_44.available(context56);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj63 = base32_4.encode((java.lang.Object) base32_44);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + byte13 + "' != '" + (byte) 61 + "'", byte13 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str20, "Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + byte30 + "' != '" + (byte) 61 + "'", byte30 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "EEEA====" + "'", str39, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + byte55 + "' != '" + (byte) 61 + "'", byte55 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test308");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        int int2 = base32_1.lineLength;
        byte[] byteArray5 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32(0, byteArray5, false);
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean11 = base32_9.isInAlphabet("");
        byte[] byteArray14 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(0, byteArray14, false);
        java.lang.String str17 = base32_9.encodeToString(byteArray14);
        byte[] byteArray24 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean25 = base32_9.containsAlphabetOrPad(byteArray24);
        byte[] byteArray26 = base32_7.encode(byteArray24);
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str33 = base32_7.encodeToString(byteArray32);
        byte[] byteArray38 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_40 = new org.apache.commons.codec.binary.Base32(0, byteArray38, false);
        int int41 = base32_40.lineLength;
        byte byte42 = base32_40.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context43 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean44 = base32_40.hasData(context43);
        context43.pos = 0;
        int int47 = context43.readPos;
        context43.currentLinePos = (-1);
        byte[] byteArray50 = context43.buffer;
        base32_1.encode(byteArray32, 64, 0, context43);
        context43.eof = false;
        context43.ibitWorkArea = 97;
        org.apache.commons.codec.binary.Base32 base32_58 = new org.apache.commons.codec.binary.Base32((byte) 100);
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_64 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray63);
        byte[] byteArray65 = base32_58.encode(byteArray63);
        org.apache.commons.codec.binary.Base32 base32_68 = new org.apache.commons.codec.binary.Base32((int) (byte) 0, byteArray63, false, (byte) 61);
        context43.buffer = byteArray63;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CG======" + "'", str17, "CG======");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "MQ6QUCQB" + "'", str33, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + byte42 + "' != '" + (byte) 61 + "'", byte42 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[65, 69, 65, 65, 85, 100, 100, 100]");
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test309");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        context7.lbitWorkArea = (byte) 61;
        context7.modulus = 1;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test310");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) 100);
        boolean boolean3 = base32_1.isInAlphabet("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray6 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_8 = new org.apache.commons.codec.binary.Base32(0, byteArray6, false);
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean12 = base32_10.isInAlphabet("");
        byte[] byteArray15 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(0, byteArray15, false);
        java.lang.String str18 = base32_10.encodeToString(byteArray15);
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean26 = base32_10.containsAlphabetOrPad(byteArray25);
        byte[] byteArray27 = base32_8.encode(byteArray25);
        java.lang.String str28 = base32_1.encodeToString(byteArray25);
        boolean boolean30 = base32_1.isInAlphabet((byte) 10);
        byte[] byteArray31 = null;
        byte[] byteArray32 = base32_1.decode(byteArray31);
        byte byte33 = base32_1.PAD;
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_39 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray38);
        org.apache.commons.codec.binary.BaseNCodec.Context context42 = null;
        // The following exception was thrown during execution in test generation
        try {
            base32_1.encode(byteArray38, (int) ' ', 0, context42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CG======" + "'", str18, "CG======");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "MQAQAZAAMQdddddd" + "'", str28, "MQAQAZAAMQdddddd");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(byteArray32);
        org.junit.Assert.assertTrue("'" + byte33 + "' != '" + (byte) 61 + "'", byte33 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 0, 10]");
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test311");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean4 = base32_2.isInAlphabet("");
        boolean boolean6 = base32_2.isInAlphabet("CG======");
        byte[] byteArray9 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_11 = new org.apache.commons.codec.binary.Base32(0, byteArray9, false);
        byte[] byteArray14 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(0, byteArray14, false);
        org.apache.commons.codec.binary.Base32 base32_18 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean20 = base32_18.isInAlphabet("");
        byte[] byteArray23 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_25 = new org.apache.commons.codec.binary.Base32(0, byteArray23, false);
        java.lang.String str26 = base32_18.encodeToString(byteArray23);
        byte[] byteArray33 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean34 = base32_18.containsAlphabetOrPad(byteArray33);
        byte[] byteArray35 = base32_16.encode(byteArray33);
        java.lang.Object obj36 = base32_11.encode((java.lang.Object) byteArray35);
        byte[] byteArray39 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_41 = new org.apache.commons.codec.binary.Base32(0, byteArray39, false);
        org.apache.commons.codec.binary.Base32 base32_43 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean45 = base32_43.isInAlphabet("");
        byte[] byteArray48 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_50 = new org.apache.commons.codec.binary.Base32(0, byteArray48, false);
        java.lang.String str51 = base32_43.encodeToString(byteArray48);
        byte[] byteArray58 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean59 = base32_43.containsAlphabetOrPad(byteArray58);
        byte[] byteArray60 = base32_41.encode(byteArray58);
        java.lang.String str61 = base32_11.encodeAsString(byteArray60);
        boolean boolean63 = base32_2.isInAlphabet(byteArray60, false);
        byte[] byteArray65 = base32_2.decode("");
        org.apache.commons.codec.binary.Base32 base32_67 = new org.apache.commons.codec.binary.Base32((int) 'a', byteArray65, false);
        byte byte68 = base32_67.PAD;
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "CG======" + "'", str26, "CG======");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "CG======" + "'", str51, "CG======");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "JVIUCUKBLJAUCTKRHU6T2PJ5HU======" + "'", str61, "JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertTrue("'" + byte68 + "' != '" + (byte) 61 + "'", byte68 == (byte) 61);
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test312");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) (byte) 100);
        byte[] byteArray4 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32(0, byteArray4, false);
        int int7 = base32_6.lineLength;
        byte byte8 = base32_6.PAD;
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        int int14 = base32_13.lineLength;
        byte byte15 = base32_13.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context16 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean17 = base32_13.hasData(context16);
        context16.pos = 0;
        int int20 = context16.readPos;
        int int21 = context16.modulus;
        java.lang.String str22 = context16.toString();
        int int23 = context16.currentLinePos;
        org.apache.commons.codec.binary.Base32 base32_25 = new org.apache.commons.codec.binary.Base32(false);
        byte[] byteArray28 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_30 = new org.apache.commons.codec.binary.Base32(0, byteArray28, false);
        int int31 = base32_30.lineLength;
        byte byte32 = base32_30.PAD;
        byte[] byteArray35 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_37 = new org.apache.commons.codec.binary.Base32(0, byteArray35, false);
        int int38 = base32_37.lineLength;
        byte[] byteArray40 = base32_37.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str41 = base32_30.encodeToString(byteArray40);
        byte[] byteArray42 = base32_25.encode(byteArray40);
        context16.buffer = byteArray40;
        byte[] byteArray44 = base32_6.decode(byteArray40);
        byte[] byteArray49 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_51 = new org.apache.commons.codec.binary.Base32(0, byteArray49, false);
        int int52 = base32_51.lineLength;
        byte byte53 = base32_51.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context54 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean55 = base32_51.hasData(context54);
        context54.pos = 0;
        int int58 = context54.readPos;
        int int59 = context54.modulus;
        int int60 = context54.ibitWorkArea;
        context54.pos = 1;
        // The following exception was thrown during execution in test generation
        try {
            base32_1.decode(byteArray44, (int) (byte) 100, 10, context54);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 61 + "'", byte8 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 61 + "'", byte15 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str22, "Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + byte32 + "' != '" + (byte) 61 + "'", byte32 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "EEEA====" + "'", str41, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[100]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + byte53 + "' != '" + (byte) 61 + "'", byte53 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test313");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet((byte) 61);
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32(true);
        int int8 = base32_7.lineLength;
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        org.apache.commons.codec.binary.Base32 base32_15 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean17 = base32_15.isInAlphabet("");
        byte[] byteArray20 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_22 = new org.apache.commons.codec.binary.Base32(0, byteArray20, false);
        java.lang.String str23 = base32_15.encodeToString(byteArray20);
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean31 = base32_15.containsAlphabetOrPad(byteArray30);
        byte[] byteArray32 = base32_13.encode(byteArray30);
        byte[] byteArray38 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str39 = base32_13.encodeToString(byteArray38);
        byte[] byteArray44 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_46 = new org.apache.commons.codec.binary.Base32(0, byteArray44, false);
        int int47 = base32_46.lineLength;
        byte byte48 = base32_46.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context49 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean50 = base32_46.hasData(context49);
        context49.pos = 0;
        int int53 = context49.readPos;
        context49.currentLinePos = (-1);
        byte[] byteArray56 = context49.buffer;
        base32_7.encode(byteArray38, 64, 0, context49);
        int int58 = base32_1.available(context49);
        byte byte59 = base32_1.PAD;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "CG======" + "'", str23, "CG======");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "MQ6QUCQB" + "'", str39, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + byte48 + "' != '" + (byte) 61 + "'", byte48 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNull(byteArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + byte59 + "' != '" + (byte) 61 + "'", byte59 == (byte) 61);
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test314");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) 1);
        byte byte2 = base32_1.pad;
        byte byte3 = base32_1.PAD;
        byte byte4 = base32_1.pad;
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 1 + "'", byte2 == (byte) 1);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 61 + "'", byte3 == (byte) 61);
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 1 + "'", byte4 == (byte) 1);
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test315");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        byte[] byteArray6 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_8 = new org.apache.commons.codec.binary.Base32(0, byteArray6, false);
        java.lang.String str9 = base32_1.encodeToString(byteArray6);
        byte[] byteArray10 = null;
        byte[] byteArray15 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(0, byteArray15, false);
        int int18 = base32_17.lineLength;
        byte byte19 = base32_17.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context20 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean21 = base32_17.hasData(context20);
        long long22 = context20.lbitWorkArea;
        base32_1.encode(byteArray10, (int) (short) 1, 0, context20);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CG======" + "'", str9, "CG======");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) 61 + "'", byte19 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test316");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) -1);
        boolean boolean3 = base32_1.isInAlphabet("org.apache.commons.codec.EncoderException: CGUGK2G1");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test317");
        byte[] byteArray5 = new byte[] { (byte) 100, (byte) 10, (byte) 10, (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32((int) (short) 0, byteArray5, false);
        byte[] byteArray10 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_12 = new org.apache.commons.codec.binary.Base32(0, byteArray10, false);
        int int13 = base32_12.lineLength;
        byte[] byteArray15 = base32_12.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        byte[] byteArray16 = base32_7.decode(byteArray15);
        java.lang.Object obj17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = base32_7.encode(obj17);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100, 10, 10, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[33, 8]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test318");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) 1);
        byte[] byteArray4 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32(0, byteArray4, false);
        int int7 = base32_6.lineLength;
        byte byte8 = base32_6.PAD;
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        int int14 = base32_13.lineLength;
        byte[] byteArray16 = base32_13.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str17 = base32_6.encodeToString(byteArray16);
        java.lang.String str18 = base32_1.encodeAsString(byteArray16);
        byte[] byteArray21 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_23 = new org.apache.commons.codec.binary.Base32(0, byteArray21, false);
        int int24 = base32_23.lineLength;
        byte byte25 = base32_23.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context26 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean27 = base32_23.hasData(context26);
        byte[] byteArray28 = null;
        context26.buffer = byteArray28;
        context26.ibitWorkArea = '#';
        context26.modulus = 8192;
        int int34 = base32_1.available(context26);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 61 + "'", byte8 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "EEEA====" + "'", str17, "EEEA====");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "EEEA\001\001\001\001" + "'", str18, "EEEA\001\001\001\001");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 61 + "'", byte25 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test319");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        byte[] byteArray9 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_11 = new org.apache.commons.codec.binary.Base32(0, byteArray9, false);
        int int12 = base32_11.lineLength;
        byte byte13 = base32_11.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context14 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean15 = base32_11.hasData(context14);
        context14.pos = 0;
        int int18 = context14.readPos;
        int int19 = context14.modulus;
        java.lang.String str20 = context14.toString();
        int int21 = context14.currentLinePos;
        org.apache.commons.codec.binary.Base32 base32_23 = new org.apache.commons.codec.binary.Base32(false);
        byte[] byteArray26 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_28 = new org.apache.commons.codec.binary.Base32(0, byteArray26, false);
        int int29 = base32_28.lineLength;
        byte byte30 = base32_28.PAD;
        byte[] byteArray33 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_35 = new org.apache.commons.codec.binary.Base32(0, byteArray33, false);
        int int36 = base32_35.lineLength;
        byte[] byteArray38 = base32_35.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str39 = base32_28.encodeToString(byteArray38);
        byte[] byteArray40 = base32_23.encode(byteArray38);
        context14.buffer = byteArray38;
        byte[] byteArray42 = base32_4.decode(byteArray38);
        byte[] byteArray45 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_47 = new org.apache.commons.codec.binary.Base32(0, byteArray45, false);
        int int48 = base32_47.lineLength;
        byte byte49 = base32_47.PAD;
        byte[] byteArray52 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_54 = new org.apache.commons.codec.binary.Base32(0, byteArray52, false);
        int int55 = base32_54.lineLength;
        byte[] byteArray57 = base32_54.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str58 = base32_47.encodeToString(byteArray57);
        byte[] byteArray61 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_63 = new org.apache.commons.codec.binary.Base32(0, byteArray61, false);
        org.apache.commons.codec.binary.Base32 base32_65 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean67 = base32_65.isInAlphabet("");
        byte[] byteArray70 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_72 = new org.apache.commons.codec.binary.Base32(0, byteArray70, false);
        java.lang.String str73 = base32_65.encodeToString(byteArray70);
        byte[] byteArray80 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean81 = base32_65.containsAlphabetOrPad(byteArray80);
        byte[] byteArray82 = base32_63.encode(byteArray80);
        byte[] byteArray88 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str89 = base32_63.encodeToString(byteArray88);
        java.lang.Object obj90 = base32_47.decode((java.lang.Object) byteArray88);
        java.lang.String str91 = base32_4.encodeAsString(byteArray88);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + byte13 + "' != '" + (byte) 61 + "'", byte13 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str20, "Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=0, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + byte30 + "' != '" + (byte) 61 + "'", byte30 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "EEEA====" + "'", str39, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + byte49 + "' != '" + (byte) 61 + "'", byte49 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[100]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "EEEA====" + "'", str58, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[100]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[100]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "CG======" + "'", str73, "CG======");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "MQ6QUCQB" + "'", str89, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(obj90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "MQ6QUCQB" + "'", str91, "MQ6QUCQB");
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test320");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) 1);
        byte[] byteArray4 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32(0, byteArray4, false);
        int int7 = base32_6.lineLength;
        byte byte8 = base32_6.PAD;
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        int int14 = base32_13.lineLength;
        byte[] byteArray16 = base32_13.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str17 = base32_6.encodeToString(byteArray16);
        java.lang.String str18 = base32_1.encodeAsString(byteArray16);
        boolean boolean20 = base32_1.isInAlphabet("");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 61 + "'", byte8 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "EEEA====" + "'", str17, "EEEA====");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "EEEA\001\001\001\001" + "'", str18, "EEEA\001\001\001\001");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test321");
        org.apache.commons.codec.binary.BaseNCodec.Context context0 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context0.ibitWorkArea = (byte) 61;
        context0.currentLinePos = 'a';
        context0.ibitWorkArea = '4';
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context7.ibitWorkArea = (byte) 61;
        context7.currentLinePos = 'a';
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray16);
        context7.buffer = byteArray16;
        context0.buffer = byteArray16;
        context0.lbitWorkArea = (byte) 10;
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 0, 10]");
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test322");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        byte[] byteArray9 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_11 = new org.apache.commons.codec.binary.Base32(0, byteArray9, false);
        int int12 = base32_11.lineLength;
        byte[] byteArray14 = base32_11.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str15 = base32_4.encodeToString(byteArray14);
        byte[] byteArray18 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_20 = new org.apache.commons.codec.binary.Base32(0, byteArray18, false);
        org.apache.commons.codec.binary.Base32 base32_22 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean24 = base32_22.isInAlphabet("");
        byte[] byteArray27 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_29 = new org.apache.commons.codec.binary.Base32(0, byteArray27, false);
        java.lang.String str30 = base32_22.encodeToString(byteArray27);
        byte[] byteArray37 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean38 = base32_22.containsAlphabetOrPad(byteArray37);
        byte[] byteArray39 = base32_20.encode(byteArray37);
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str46 = base32_20.encodeToString(byteArray45);
        java.lang.Object obj47 = base32_4.decode((java.lang.Object) byteArray45);
        byte byte48 = base32_4.pad;
        boolean boolean50 = base32_4.isInAlphabet("MQ======");
        byte[] byteArray53 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_55 = new org.apache.commons.codec.binary.Base32(0, byteArray53, false);
        int int56 = base32_55.lineLength;
        byte byte57 = base32_55.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context58 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean59 = base32_55.hasData(context58);
        context58.pos = 0;
        int int62 = context58.readPos;
        byte[] byteArray65 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_67 = new org.apache.commons.codec.binary.Base32(0, byteArray65, false);
        org.apache.commons.codec.binary.Base32 base32_69 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean71 = base32_69.isInAlphabet("");
        byte[] byteArray74 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_76 = new org.apache.commons.codec.binary.Base32(0, byteArray74, false);
        java.lang.String str77 = base32_69.encodeToString(byteArray74);
        byte[] byteArray84 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean85 = base32_69.containsAlphabetOrPad(byteArray84);
        byte[] byteArray86 = base32_67.encode(byteArray84);
        context58.buffer = byteArray84;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj88 = base32_4.encode((java.lang.Object) context58);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "EEEA====" + "'", str15, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "CG======" + "'", str30, "CG======");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "MQ6QUCQB" + "'", str46, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertTrue("'" + byte48 + "' != '" + (byte) 61 + "'", byte48 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[100]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + byte57 + "' != '" + (byte) 61 + "'", byte57 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[100]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[100]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "CG======" + "'", str77, "CG======");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test323");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.modulus = 100;
        context7.pos = 'a';
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test324");
        byte[] byteArray4 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray4);
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        int int11 = base32_10.lineLength;
        byte[] byteArray13 = base32_10.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        boolean boolean15 = base32_5.isInAlphabet(byteArray13, true);
        byte[] byteArray18 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_20 = new org.apache.commons.codec.binary.Base32(0, byteArray18, false);
        int int21 = base32_20.lineLength;
        byte[] byteArray25 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_27 = new org.apache.commons.codec.binary.Base32(0, byteArray25, false);
        int int28 = base32_27.lineLength;
        byte byte29 = base32_27.PAD;
        byte[] byteArray32 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_34 = new org.apache.commons.codec.binary.Base32(0, byteArray32, false);
        int int35 = base32_34.lineLength;
        byte[] byteArray37 = base32_34.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str38 = base32_27.encodeToString(byteArray37);
        org.apache.commons.codec.binary.Base32 base32_41 = new org.apache.commons.codec.binary.Base32((-1), byteArray37, false, (byte) 0);
        byte[] byteArray42 = base32_20.decode(byteArray37);
        boolean boolean44 = base32_5.isInAlphabet(byteArray37, true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[33, 8]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + byte29 + "' != '" + (byte) 61 + "'", byte29 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "EEEA====" + "'", str38, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test325");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        byte[] byteArray6 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_8 = new org.apache.commons.codec.binary.Base32(0, byteArray6, false);
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        org.apache.commons.codec.binary.Base32 base32_15 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean17 = base32_15.isInAlphabet("");
        byte[] byteArray20 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_22 = new org.apache.commons.codec.binary.Base32(0, byteArray20, false);
        java.lang.String str23 = base32_15.encodeToString(byteArray20);
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean31 = base32_15.containsAlphabetOrPad(byteArray30);
        byte[] byteArray32 = base32_13.encode(byteArray30);
        java.lang.Object obj33 = base32_8.encode((java.lang.Object) byteArray32);
        org.apache.commons.codec.binary.Base32 base32_35 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean37 = base32_35.isInAlphabet("");
        boolean boolean39 = base32_35.isInAlphabet((byte) 61);
        org.apache.commons.codec.binary.Base32 base32_40 = new org.apache.commons.codec.binary.Base32();
        org.apache.commons.codec.binary.Base32 base32_42 = new org.apache.commons.codec.binary.Base32(false);
        byte[] byteArray45 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_47 = new org.apache.commons.codec.binary.Base32(0, byteArray45, false);
        int int48 = base32_47.lineLength;
        byte byte49 = base32_47.PAD;
        byte[] byteArray52 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_54 = new org.apache.commons.codec.binary.Base32(0, byteArray52, false);
        int int55 = base32_54.lineLength;
        byte[] byteArray57 = base32_54.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str58 = base32_47.encodeToString(byteArray57);
        byte[] byteArray59 = base32_42.encode(byteArray57);
        java.lang.Object obj60 = base32_40.decode((java.lang.Object) byteArray59);
        byte[] byteArray61 = base32_35.decode(byteArray59);
        byte[] byteArray66 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_68 = new org.apache.commons.codec.binary.Base32(0, byteArray66, false);
        int int69 = base32_68.lineLength;
        byte byte70 = base32_68.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context71 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean72 = base32_68.hasData(context71);
        byte[] byteArray73 = null;
        context71.buffer = byteArray73;
        context71.ibitWorkArea = '#';
        context71.modulus = 8192;
        context71.modulus = (byte) 0;
        base32_8.decode(byteArray59, 0, 35, context71);
        byte[] byteArray82 = base32_1.encode(byteArray59);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "CG======" + "'", str23, "CG======");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + byte49 + "' != '" + (byte) 61 + "'", byte49 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[100]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "EEEA====" + "'", str58, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[115, -100]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[100]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + byte70 + "' != '" + (byte) 61 + "'", byte70 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[56, 76, 50, 75, 65, 71, 57, 84, 55, 75, 85, 74, 81, 61, 61, 61]");
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test326");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte[] byteArray7 = base32_4.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        int int8 = base32_4.getDefaultBufferSize();
        org.apache.commons.codec.binary.Base32 base32_12 = new org.apache.commons.codec.binary.Base32(false);
        byte[] byteArray15 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(0, byteArray15, false);
        int int18 = base32_17.lineLength;
        byte byte19 = base32_17.PAD;
        byte[] byteArray22 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32(0, byteArray22, false);
        int int25 = base32_24.lineLength;
        byte[] byteArray27 = base32_24.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str28 = base32_17.encodeToString(byteArray27);
        byte[] byteArray29 = base32_12.encode(byteArray27);
        org.apache.commons.codec.binary.Base32 base32_30 = new org.apache.commons.codec.binary.Base32((int) (short) -1, byteArray27);
        org.apache.commons.codec.binary.Base32 base32_32 = new org.apache.commons.codec.binary.Base32((int) ' ', byteArray27, false);
        byte[] byteArray33 = base32_4.decode(byteArray27);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[33, 8]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) 61 + "'", byte19 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "EEEA====" + "'", str28, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test327");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean12 = base32_10.isInAlphabet("");
        byte[] byteArray15 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(0, byteArray15, false);
        java.lang.String str18 = base32_10.encodeToString(byteArray15);
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean26 = base32_10.containsAlphabetOrPad(byteArray25);
        byte[] byteArray27 = base32_4.encode(byteArray25);
        byte[] byteArray28 = null;
        byte[] byteArray29 = base32_4.decode(byteArray28);
        byte byte30 = base32_4.pad;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CG======" + "'", str18, "CG======");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertTrue("'" + byte30 + "' != '" + (byte) 61 + "'", byte30 == (byte) 61);
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test328");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean8 = base32_6.isInAlphabet("");
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        java.lang.String str14 = base32_6.encodeToString(byteArray11);
        byte[] byteArray21 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean22 = base32_6.containsAlphabetOrPad(byteArray21);
        byte[] byteArray23 = base32_4.encode(byteArray21);
        byte[] byteArray24 = null;
        byte[] byteArray25 = base32_4.decode(byteArray24);
        org.apache.commons.codec.binary.Base32 base32_27 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean29 = base32_27.isInAlphabet("");
        byte[] byteArray32 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_34 = new org.apache.commons.codec.binary.Base32(0, byteArray32, false);
        java.lang.String str35 = base32_27.encodeToString(byteArray32);
        byte[] byteArray40 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_42 = new org.apache.commons.codec.binary.Base32(0, byteArray40, false);
        int int43 = base32_42.lineLength;
        byte byte44 = base32_42.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context45 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean46 = base32_42.hasData(context45);
        int int47 = base32_4.readResults(byteArray32, (int) (short) 10, (int) (short) -1, context45);
        org.apache.commons.codec.binary.BaseNCodec.Context context48 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context48.ibitWorkArea = (byte) 61;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj51 = base32_4.decode((java.lang.Object) context48);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CG======" + "'", str14, "CG======");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "CG======" + "'", str35, "CG======");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[100]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + byte44 + "' != '" + (byte) 61 + "'", byte44 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test329");
        org.apache.commons.codec.binary.Base32 base32_0 = new org.apache.commons.codec.binary.Base32();
        int int1 = base32_0.lineLength;
        org.apache.commons.codec.binary.BaseNCodec.Context context2 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context2.ibitWorkArea = (byte) 61;
        context2.currentLinePos = 'a';
        context2.ibitWorkArea = '4';
        org.apache.commons.codec.binary.BaseNCodec.Context context9 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context9.ibitWorkArea = (byte) 61;
        context9.currentLinePos = 'a';
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_19 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray18);
        context9.buffer = byteArray18;
        context2.buffer = byteArray18;
        byte[] byteArray22 = base32_0.decode(byteArray18);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test330");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        int int12 = context7.modulus;
        byte[] byteArray13 = context7.buffer;
        int int14 = context7.pos;
        int int15 = context7.pos;
        context7.modulus = (short) 1;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(byteArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test331");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean3 = base32_1.isInAlphabet("");
        boolean boolean5 = base32_1.isInAlphabet("");
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean9 = base32_7.isInAlphabet("");
        byte[] byteArray12 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_14 = new org.apache.commons.codec.binary.Base32(0, byteArray12, false);
        java.lang.String str15 = base32_7.encodeToString(byteArray12);
        long long16 = base32_1.getEncodedLength(byteArray12);
        byte[] byteArray19 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_21 = new org.apache.commons.codec.binary.Base32(0, byteArray19, false);
        int int22 = base32_21.lineLength;
        byte byte23 = base32_21.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context24 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean25 = base32_21.hasData(context24);
        context24.pos = 0;
        int int28 = context24.readPos;
        int int29 = context24.currentLinePos;
        int int30 = base32_1.available(context24);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CG======" + "'", str15, "CG======");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 8L + "'", long16 == 8L);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + byte23 + "' != '" + (byte) 61 + "'", byte23 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test332");
        byte[] byteArray3 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32(0, byteArray3, false);
        int int6 = base32_5.lineLength;
        byte byte7 = base32_5.PAD;
        byte byte8 = base32_5.pad;
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        int int14 = base32_13.lineLength;
        byte byte15 = base32_13.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context16 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean17 = base32_13.hasData(context16);
        org.apache.commons.codec.binary.Base32 base32_19 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean21 = base32_19.isInAlphabet("");
        byte[] byteArray24 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_26 = new org.apache.commons.codec.binary.Base32(0, byteArray24, false);
        java.lang.String str27 = base32_19.encodeToString(byteArray24);
        byte[] byteArray34 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean35 = base32_19.containsAlphabetOrPad(byteArray34);
        byte[] byteArray36 = base32_13.encode(byteArray34);
        org.apache.commons.codec.binary.Base32 base32_38 = new org.apache.commons.codec.binary.Base32(0);
        byte[] byteArray41 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_43 = new org.apache.commons.codec.binary.Base32(0, byteArray41, false);
        int int44 = base32_43.lineLength;
        byte byte45 = base32_43.PAD;
        byte[] byteArray48 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_50 = new org.apache.commons.codec.binary.Base32(0, byteArray48, false);
        int int51 = base32_50.lineLength;
        byte[] byteArray53 = base32_50.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str54 = base32_43.encodeToString(byteArray53);
        byte[] byteArray55 = base32_38.encode(byteArray53);
        byte[] byteArray56 = base32_13.decode(byteArray55);
        boolean boolean58 = base32_5.isInAlphabet(byteArray56, false);
        org.apache.commons.codec.binary.Base32 base32_61 = new org.apache.commons.codec.binary.Base32((int) '#', byteArray56, true, (byte) -1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 61 + "'", byte7 == (byte) 61);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 61 + "'", byte8 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 61 + "'", byte15 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "CG======" + "'", str27, "CG======");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + byte45 + "' != '" + (byte) 61 + "'", byte45 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "EEEA====" + "'", str54, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[69, 69, 69, 65, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[33, 8]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test333");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        byte[] byteArray9 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_11 = new org.apache.commons.codec.binary.Base32(0, byteArray9, false);
        int int12 = base32_11.lineLength;
        byte byte13 = base32_11.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context14 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean15 = base32_11.hasData(context14);
        byte[] byteArray16 = null;
        context14.buffer = byteArray16;
        context14.currentLinePos = (short) 100;
        int int20 = base32_4.available(context14);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + byte13 + "' != '" + (byte) 61 + "'", byte13 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test334");
        byte[] byteArray3 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32(0, byteArray3, false);
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        org.apache.commons.codec.binary.Base32 base32_12 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean14 = base32_12.isInAlphabet("");
        byte[] byteArray17 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_19 = new org.apache.commons.codec.binary.Base32(0, byteArray17, false);
        java.lang.String str20 = base32_12.encodeToString(byteArray17);
        byte[] byteArray27 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean28 = base32_12.containsAlphabetOrPad(byteArray27);
        byte[] byteArray29 = base32_10.encode(byteArray27);
        java.lang.Object obj30 = base32_5.encode((java.lang.Object) byteArray29);
        byte[] byteArray33 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_35 = new org.apache.commons.codec.binary.Base32(0, byteArray33, false);
        org.apache.commons.codec.binary.Base32 base32_37 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean39 = base32_37.isInAlphabet("");
        byte[] byteArray42 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_44 = new org.apache.commons.codec.binary.Base32(0, byteArray42, false);
        java.lang.String str45 = base32_37.encodeToString(byteArray42);
        byte[] byteArray52 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean53 = base32_37.containsAlphabetOrPad(byteArray52);
        byte[] byteArray54 = base32_35.encode(byteArray52);
        java.lang.String str55 = base32_5.encodeAsString(byteArray54);
        byte[] byteArray58 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_60 = new org.apache.commons.codec.binary.Base32(0, byteArray58, false);
        org.apache.commons.codec.binary.Base32 base32_62 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean64 = base32_62.isInAlphabet("");
        byte[] byteArray67 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_69 = new org.apache.commons.codec.binary.Base32(0, byteArray67, false);
        java.lang.String str70 = base32_62.encodeToString(byteArray67);
        byte[] byteArray77 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean78 = base32_62.containsAlphabetOrPad(byteArray77);
        byte[] byteArray79 = base32_60.encode(byteArray77);
        byte[] byteArray85 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str86 = base32_60.encodeToString(byteArray85);
        byte[] byteArray87 = base32_5.decode(byteArray85);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base32 base32_90 = new org.apache.commons.codec.binary.Base32((int) (byte) -1, byteArray87, false, (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: pad must not be in alphabet or whitespace");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "CG======" + "'", str20, "CG======");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[100]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "CG======" + "'", str45, "CG======");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "JVIUCUKBLJAUCTKRHU6T2PJ5HU======" + "'", str55, "JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[100]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[100]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "CG======" + "'", str70, "CG======");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "MQ6QUCQB" + "'", str86, "MQ6QUCQB");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test335");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(false);
        org.apache.commons.codec.binary.Base32 base32_3 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray8);
        byte[] byteArray10 = base32_3.encode(byteArray8);
        boolean boolean11 = base32_1.containsAlphabetOrPad(byteArray10);
        byte[] byteArray14 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(0, byteArray14, false);
        int int17 = base32_16.lineLength;
        byte byte18 = base32_16.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context19 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean20 = base32_16.hasData(context19);
        context19.pos = 0;
        int int23 = context19.readPos;
        byte[] byteArray26 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_28 = new org.apache.commons.codec.binary.Base32(0, byteArray26, false);
        org.apache.commons.codec.binary.Base32 base32_30 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean32 = base32_30.isInAlphabet("");
        byte[] byteArray35 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_37 = new org.apache.commons.codec.binary.Base32(0, byteArray35, false);
        java.lang.String str38 = base32_30.encodeToString(byteArray35);
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean46 = base32_30.containsAlphabetOrPad(byteArray45);
        byte[] byteArray47 = base32_28.encode(byteArray45);
        byte[] byteArray53 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str54 = base32_28.encodeToString(byteArray53);
        context19.buffer = byteArray53;
        org.apache.commons.codec.binary.BaseNCodec.Context context58 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        long long59 = context58.lbitWorkArea;
        base32_1.decode(byteArray53, 0, (int) (byte) 0, context58);
        byte[] byteArray62 = base32_1.decode("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.apache.commons.codec.binary.Base32 base32_65 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean67 = base32_65.isInAlphabet("");
        byte[] byteArray70 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_72 = new org.apache.commons.codec.binary.Base32(0, byteArray70, false);
        java.lang.String str73 = base32_65.encodeToString(byteArray70);
        byte[] byteArray80 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean81 = base32_65.containsAlphabetOrPad(byteArray80);
        org.apache.commons.codec.binary.Base32 base32_83 = new org.apache.commons.codec.binary.Base32((int) (byte) 0, byteArray80, false);
        org.apache.commons.codec.binary.BaseNCodec.Context context86 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        long long87 = context86.lbitWorkArea;
        base32_1.decode(byteArray80, (int) (short) 0, (int) (byte) 1, context86);
        byte byte89 = base32_1.pad;
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + byte18 + "' != '" + (byte) 61 + "'", byte18 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "CG======" + "'", str38, "CG======");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "MQ6QUCQB" + "'", str54, "MQ6QUCQB");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[17]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[100]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "CG======" + "'", str73, "CG======");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertTrue("'" + byte89 + "' != '" + (byte) 61 + "'", byte89 == (byte) 61);
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test336");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        byte byte2 = base32_1.PAD;
        boolean boolean4 = base32_1.isInAlphabet((byte) 0);
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 61 + "'", byte2 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test337");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        int int5 = base32_4.lineLength;
        byte byte6 = base32_4.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context7 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean8 = base32_4.hasData(context7);
        context7.pos = 0;
        int int11 = context7.readPos;
        int int12 = context7.modulus;
        byte[] byteArray13 = context7.buffer;
        int int14 = context7.pos;
        context7.ibitWorkArea = (short) -1;
        byte[] byteArray17 = null;
        context7.buffer = byteArray17;
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 61 + "'", byte6 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(byteArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test338");
        byte[] byteArray3 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32(0, byteArray3, false);
        int int6 = base32_5.lineLength;
        byte byte7 = base32_5.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context8 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean9 = base32_5.hasData(context8);
        int int10 = context8.ibitWorkArea;
        context8.modulus = (byte) -1;
        org.apache.commons.codec.binary.Base32 base32_14 = new org.apache.commons.codec.binary.Base32((byte) 100);
        boolean boolean16 = base32_14.isInAlphabet("JVIUCUKBLJAUCTKRHU6T2PJ5HU======");
        byte[] byteArray19 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_21 = new org.apache.commons.codec.binary.Base32(0, byteArray19, false);
        int int22 = base32_21.lineLength;
        byte[] byteArray24 = base32_21.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        byte[] byteArray25 = base32_14.encode(byteArray24);
        context8.buffer = byteArray25;
        org.apache.commons.codec.binary.Base32 base32_28 = new org.apache.commons.codec.binary.Base32((int) (byte) -1, byteArray25, false);
        org.apache.commons.codec.binary.Base32 base32_30 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean32 = base32_30.isInAlphabet("");
        byte[] byteArray35 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_37 = new org.apache.commons.codec.binary.Base32(0, byteArray35, false);
        java.lang.String str38 = base32_30.encodeToString(byteArray35);
        org.apache.commons.codec.binary.BaseNCodec.Context context41 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        byte[] byteArray42 = context41.buffer;
        context41.ibitWorkArea = 8192;
        int int45 = context41.readPos;
        context41.modulus = (byte) 0;
        java.lang.String str48 = context41.toString();
        context41.readPos = (byte) -1;
        // The following exception was thrown during execution in test generation
        try {
            base32_28.decode(byteArray35, 10, (int) (byte) 100, context41);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 61 + "'", byte7 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[33, 8]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[69, 69, 69, 65, 100, 100, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "CG======" + "'", str38, "CG======");
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=8192, lbitWorkArea=0, modulus=0, pos=0, readPos=0]" + "'", str48, "Context[buffer=null, currentLinePos=0, eof=false, ibitWorkArea=8192, lbitWorkArea=0, modulus=0, pos=0, readPos=0]");
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test339");
        byte[] byteArray4 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray4);
        byte[] byteArray8 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(0, byteArray8, false);
        int int11 = base32_10.lineLength;
        byte[] byteArray15 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32(0, byteArray15, false);
        int int18 = base32_17.lineLength;
        byte byte19 = base32_17.PAD;
        byte[] byteArray22 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32(0, byteArray22, false);
        int int25 = base32_24.lineLength;
        byte[] byteArray27 = base32_24.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.EncoderException: ");
        java.lang.String str28 = base32_17.encodeToString(byteArray27);
        org.apache.commons.codec.binary.Base32 base32_31 = new org.apache.commons.codec.binary.Base32((-1), byteArray27, false, (byte) 0);
        byte[] byteArray32 = base32_10.decode(byteArray27);
        java.lang.String str33 = base32_5.encodeAsString(byteArray32);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) 61 + "'", byte19 == (byte) 61);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[33, 8]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "EEEA====" + "'", str28, "EEEA====");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test340");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32(0, byteArray2, false);
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean8 = base32_6.isInAlphabet("");
        byte[] byteArray11 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(0, byteArray11, false);
        java.lang.String str14 = base32_6.encodeToString(byteArray11);
        byte[] byteArray21 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean22 = base32_6.containsAlphabetOrPad(byteArray21);
        byte[] byteArray23 = base32_4.encode(byteArray21);
        byte[] byteArray24 = null;
        byte[] byteArray25 = base32_4.decode(byteArray24);
        org.apache.commons.codec.binary.BaseNCodec.Context context26 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        context26.ibitWorkArea = 0;
        int int29 = base32_4.available(context26);
        byte[] byteArray30 = null;
        byte[] byteArray31 = base32_4.encode(byteArray30);
        byte[] byteArray32 = null;
        byte[] byteArray33 = base32_4.decode(byteArray32);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CG======" + "'", str14, "CG======");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNull(byteArray33);
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test341");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(false);
        org.apache.commons.codec.binary.Base32 base32_3 = new org.apache.commons.codec.binary.Base32(true);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 0, (byte) 10 };
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32((int) (short) 1, byteArray8);
        byte[] byteArray10 = base32_3.encode(byteArray8);
        boolean boolean11 = base32_1.containsAlphabetOrPad(byteArray10);
        byte[] byteArray14 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32(0, byteArray14, false);
        int int17 = base32_16.lineLength;
        byte byte18 = base32_16.PAD;
        org.apache.commons.codec.binary.BaseNCodec.Context context19 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        boolean boolean20 = base32_16.hasData(context19);
        context19.pos = 0;
        int int23 = context19.readPos;
        byte[] byteArray26 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_28 = new org.apache.commons.codec.binary.Base32(0, byteArray26, false);
        org.apache.commons.codec.binary.Base32 base32_30 = new org.apache.commons.codec.binary.Base32(true);
        boolean boolean32 = base32_30.isInAlphabet("");
        byte[] byteArray35 = new byte[] { (byte) 100 };
        org.apache.commons.codec.binary.Base32 base32_37 = new org.apache.commons.codec.binary.Base32(0, byteArray35, false);
        java.lang.String str38 = base32_30.encodeToString(byteArray35);
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 1, (byte) 0, (byte) 100, (byte) 0, (byte) 100 };
        boolean boolean46 = base32_30.containsAlphabetOrPad(byteArray45);
        byte[] byteArray47 = base32_28.encode(byteArray45);
        byte[] byteArray53 = new byte[] { (byte) 100, (byte) 61, (byte) 10, (byte) 10, (byte) 1 };
        java.lang.String str54 = base32_28.encodeToString(byteArray53);
        context19.buffer = byteArray53;
        org.apache.commons.codec.binary.BaseNCodec.Context context58 = new org.apache.commons.codec.binary.BaseNCodec.Context();
        long long59 = context58.lbitWorkArea;
        base32_1.decode(byteArray53, 0, (int) (byte) 0, context58);
        int int61 = context58.currentLinePos;
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[48, 52, 48, 48, 75, 61, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + byte18 + "' != '" + (byte) 61 + "'", byte18 == (byte) 61);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "CG======" + "'", str38, "CG======");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100, 1, 0, 100, 0, 100]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[77, 81, 65, 81, 65, 90, 65, 65, 77, 81, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[100, 61, 10, 10, 1]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "MQ6QUCQB" + "'", str54, "MQ6QUCQB");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }
}
