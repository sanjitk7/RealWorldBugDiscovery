package com.fasterxml.jackson.core.json;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        com.fasterxml.jackson.core.io.IOContext iOContext0 = null;
        java.io.InputStream inputStream2 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec3 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer4 = null;
        byte[] byteArray9 = new byte[] { (byte) -69, (byte) 0, (byte) -1, (byte) -69 };
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser13 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext0, 0, inputStream2, objectCodec3, byteQuadsCanonicalizer4, byteArray9, (int) (short) 1, (int) (short) -1, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-69, 0, -1, -69]");
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        com.fasterxml.jackson.core.io.IOContext iOContext0 = null;
        java.io.Reader reader2 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec3 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer4 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int5 = charsToNameCanonicalizer4.bucketCount();
        charsToNameCanonicalizer4.release();
        char[] charArray13 = new char[] { 'a', ' ', 'a', 'a', '#', ' ' };
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser17 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext0, (int) (byte) -69, reader2, objectCodec3, charsToNameCanonicalizer4, charArray13, (int) (byte) 100, (int) (byte) -69, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 64 + "'", int5 == 64);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a aa# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a aa# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , a, a, #,  ]");
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        int[] intArray0 = new int[] {};
        int[] intArray2 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray0, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        java.io.Writer writer1 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator2 = jsonFactory0.createJsonGenerator(writer1);
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray9 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonFactory3.createJsonParser(byteArray9, (int) (short) 100, 1);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator2.copyCurrentEvent(jsonParser12);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: No current event to copy");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonGenerator2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser12);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        // The following exception was thrown during execution in test generation
        try {
            long long10 = jsonParser9.getLongValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: [B@57e6d56a; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonParser9.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = jsonParser9.nextTextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertNotNull(jsonParser12);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = jsonParser9.nextFieldName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonParser9.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder13 = new com.fasterxml.jackson.core.util.ByteArrayBuilder();
        byteArrayBuilder13.close();
        byte[] byteArray16 = byteArrayBuilder13.completeAndCoalesce((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = jsonParser12.readBinaryValue((java.io.OutputStream) byteArrayBuilder13);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: [B@5862a07b; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertNotNull(jsonParser12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonParser9.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        boolean boolean14 = jsonParser9.hasTokenId((int) (byte) -69);
        java.lang.String str15 = jsonParser9.getText();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = jsonParser9.nextTextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertNotNull(jsonParser12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken10 = jsonParser9.nextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonParser9.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        boolean boolean14 = jsonParser9.hasTokenId((int) (byte) -69);
        jsonParser9.clearCurrentToken();
        com.fasterxml.jackson.core.JsonParser jsonParser16 = jsonParser9.skipChildren();
        com.fasterxml.jackson.core.Version version17 = jsonParser16.version();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertNotNull(jsonParser12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jsonParser16);
        org.junit.Assert.assertNotNull(version17);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonParser9.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        com.fasterxml.jackson.core.JsonParser.Feature feature13 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        com.fasterxml.jackson.core.JsonParser jsonParser14 = jsonParser12.disable(feature13);
        // The following exception was thrown during execution in test generation
        try {
            short short15 = jsonParser12.getShortValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: [B@1231a800; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertNotNull(jsonParser12);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature13.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertNotNull(jsonParser14);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonParser9.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        com.fasterxml.jackson.core.JsonParser jsonParser14 = jsonParser12.setFeatureMask(64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean15 = jsonParser14.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertNotNull(jsonParser12);
        org.junit.Assert.assertNotNull(jsonParser14);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken17 = readerBasedJsonParser13._parsePosNumber(1807141545);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1929183597 + "'", int12 == 1929183597);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        // The following exception was thrown during execution in test generation
        try {
            float float15 = readerBasedJsonParser13.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1931052321 + "'", int12 == 1931052321);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray15 = readerBasedJsonParser13.getBinaryValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1941186555 + "'", int12 == 1941186555);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature16.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = readerBasedJsonParser13.enable(feature16);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str22 = serializedString21.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str25 = serializedString24.toString();
        char[] charArray27 = new char[] { ' ' };
        int int29 = serializedString24.appendQuoted(charArray27, 1);
        int int31 = serializedString21.appendQuoted(charArray27, (int) (short) 0);
        byte[] byteArray32 = serializedString21.asUnquotedUTF8();
        boolean boolean33 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number34 = readerBasedJsonParser13.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1952183277 + "'", int12 == 1952183277);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.JsonToken jsonToken1 = com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonToken1, true);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer4 = iOContext3.constructTextBuffer();
        boolean boolean5 = iOContext3.isResourceManaged();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj7 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext9 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, obj7, false);
        char[] charArray11 = iOContext9.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream23 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray20, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper26 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext9, byteArray20, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext27 = byteSourceJsonBootstrapper26._context;
        java.io.Reader reader29 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec30 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer31 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int33 = charsToNameCanonicalizer31.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString38 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str39 = serializedString38.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString41 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str42 = serializedString41.toString();
        char[] charArray44 = new char[] { ' ' };
        int int46 = serializedString41.appendQuoted(charArray44, 1);
        int int48 = serializedString38.appendQuoted(charArray44, (int) (short) 0);
        int int50 = serializedString35.appendUnquoted(charArray44, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser54 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext27, 100, reader29, objectCodec30, charsToNameCanonicalizer31, charArray44, 2, (int) (byte) 0, true);
        // The following exception was thrown during execution in test generation
        try {
            iOContext3.releaseNameCopyBuffer(charArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + jsonToken1 + "' != '" + com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT + "'", jsonToken1.equals(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT));
        org.junit.Assert.assertNotNull(textBuffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext27);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer31);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1979567271 + "'", int33 == 1979567271);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ ]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature16.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = readerBasedJsonParser13.enable(feature16);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str22 = serializedString21.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str25 = serializedString24.toString();
        char[] charArray27 = new char[] { ' ' };
        int int29 = serializedString24.appendQuoted(charArray27, 1);
        int int31 = serializedString21.appendQuoted(charArray27, (int) (short) 0);
        byte[] byteArray32 = serializedString21.asUnquotedUTF8();
        boolean boolean33 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString21);
        int int34 = readerBasedJsonParser13.getTokenColumnNr();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number35 = readerBasedJsonParser13.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1983304719 + "'", int12 == 1983304719);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser10 = jsonParser9.skipChildren();
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonParser9.setFeatureMask((int) (short) 1);
        com.fasterxml.jackson.core.ObjectCodec objectCodec13 = jsonParser12.getCodec();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertNotNull(jsonParser10);
        org.junit.Assert.assertNotNull(jsonParser12);
        org.junit.Assert.assertNull(objectCodec13);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        readerBasedJsonParser13._tokenIncomplete = true;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = readerBasedJsonParser13.nextTextValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected end-of-input: was expecting closing quote for a string value? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2001057597 + "'", int12 == 2001057597);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonParser9.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        boolean boolean14 = jsonParser9.hasTokenId((int) (byte) -69);
        jsonParser9.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec16 = jsonParser9.getCodec();
        java.lang.String str17 = jsonParser9.getText();
        // The following exception was thrown during execution in test generation
        try {
            byte byte18 = jsonParser9.getByteValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: [B@584c2768; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertNotNull(jsonParser12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(objectCodec16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.JsonFactory jsonFactory49 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser58 = jsonFactory49.createJsonParser(byteArray55, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser61 = jsonParser58.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        boolean boolean63 = jsonParser58.hasTokenId((int) (byte) -69);
        jsonParser58.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec65 = jsonParser58.getCodec();
        readerBasedJsonParser48.setCurrentValue((java.lang.Object) jsonParser58);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken67 = readerBasedJsonParser48._handleApos();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected end-of-input: was expecting closing quote for a string value? at [Source: UNKNOWN; line: 1, column: 3]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2013707421 + "'", int27 == 2013707421);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser58);
        org.junit.Assert.assertNotNull(jsonParser61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(objectCodec65);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonParser9.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        boolean boolean14 = jsonParser9.hasTokenId((int) (byte) -69);
        com.fasterxml.jackson.core.Base64Variant base64Variant15 = null;
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder17 = new com.fasterxml.jackson.core.util.ByteArrayBuilder(1807141545);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = jsonParser9.readBinaryValue(base64Variant15, (java.io.OutputStream) byteArrayBuilder17);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: [B@68b16289; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertNotNull(jsonParser12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        readerBasedJsonParser13._tokenIncomplete = true;
        java.lang.String str17 = readerBasedJsonParser13.getValueAsString("");
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str20 = serializedString19.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str23 = serializedString22.toString();
        char[] charArray25 = new char[] { ' ' };
        int int27 = serializedString22.appendQuoted(charArray25, 1);
        int int29 = serializedString19.appendQuoted(charArray25, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString19);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected end-of-input: was expecting closing quote for a string value? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2082706461 + "'", int12 == 2082706461);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ ]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonParser9.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        boolean boolean14 = jsonParser9.hasTokenId((int) (byte) -69);
        java.lang.String str15 = jsonParser9.getText();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken16 = jsonParser9.nextValue();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertNotNull(jsonParser12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        readerBasedJsonParser13._tokenIncomplete = true;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken16 = readerBasedJsonParser13.nextToken();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected end-of-input: was expecting closing quote for a string value? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2096218773 + "'", int12 == 2096218773);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        java.io.Writer writer1 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator2 = jsonFactory0.createJsonGenerator(writer1);
        com.fasterxml.jackson.core.io.SerializedString serializedString4 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str5 = serializedString4.toString();
        char[] charArray7 = new char[] { ' ' };
        int int9 = serializedString4.appendQuoted(charArray7, 1);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonGenerator2.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString4);
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser20 = jsonFactory11.createJsonParser(byteArray17, (int) (short) 100, 1);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator2.writeUTF8String(byteArray17, 0, 2118284091);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Operation not supported by generator of type com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonGenerator2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ ]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser20);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonParser9.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        java.lang.Object obj13 = jsonParser12.getEmbeddedObject();
        long long15 = jsonParser12.getValueAsLong((long) 1807141545);
        int int17 = jsonParser12.getValueAsInt((int) ' ');
        com.fasterxml.jackson.core.FormatSchema formatSchema18 = jsonParser12.getSchema();
        // The following exception was thrown during execution in test generation
        try {
            short short19 = jsonParser12.getShortValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: [B@40ac933f; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertNotNull(jsonParser12);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1807141545L + "'", long15 == 1807141545L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 32 + "'", int17 == 32);
        org.junit.Assert.assertNull(formatSchema18);
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        readerBasedJsonParser13._tokenIncomplete = true;
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        com.fasterxml.jackson.core.JsonParser jsonParser17 = readerBasedJsonParser13.disable(feature16);
        readerBasedJsonParser13.overrideCurrentName("JSON");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = readerBasedJsonParser13.nextTextValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected end-of-input: was expecting closing quote for a string value? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2099562403) + "'", int12 == (-2099562403));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertNotNull(jsonParser17);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        // The following exception was thrown during execution in test generation
        try {
            char char17 = readerBasedJsonParser13.getNextChar("");
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected end-of-input? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2086193839) + "'", int12 == (-2086193839));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken16 = readerBasedJsonParser13._handleInvalidNumberStart(2015791767, false);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected character ('?' (code 2015791767 / 0x78268a97)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2082240769) + "'", int12 == (-2082240769));
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.Base64Variant base64Variant49 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray50 = readerBasedJsonParser48.getBinaryValue(base64Variant49);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: UNKNOWN; line: 1, column: 3]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-2077856455) + "'", int27 == (-2077856455));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        com.fasterxml.jackson.core.JsonToken jsonToken14 = readerBasedJsonParser13.getCurrentToken();
        boolean boolean15 = readerBasedJsonParser13.isExpectedStartObjectToken();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2076203353) + "'", int12 == (-2076203353));
        org.junit.Assert.assertNull(jsonToken14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature16.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = readerBasedJsonParser13.enable(feature16);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str22 = serializedString21.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str25 = serializedString24.toString();
        char[] charArray27 = new char[] { ' ' };
        int int29 = serializedString24.appendQuoted(charArray27, 1);
        int int31 = serializedString21.appendQuoted(charArray27, (int) (short) 0);
        byte[] byteArray32 = serializedString21.asUnquotedUTF8();
        boolean boolean33 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString21);
        int int34 = readerBasedJsonParser13.getTokenColumnNr();
        char[] charArray35 = readerBasedJsonParser13.getTextCharacters();
        boolean boolean36 = readerBasedJsonParser13.requiresCustomCodec();
        boolean boolean37 = readerBasedJsonParser13.isExpectedStartObjectToken();
        // The following exception was thrown during execution in test generation
        try {
            int int38 = readerBasedJsonParser13.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2060894191) + "'", int12 == (-2060894191));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNull(charArray35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        readerBasedJsonParser13._tokenIncomplete = true;
        java.lang.String str17 = readerBasedJsonParser13.getValueAsString("");
        readerBasedJsonParser13.close();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken19 = readerBasedJsonParser13.nextToken();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected end-of-input: was expecting closing quote for a string value? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2030275867) + "'", int12 == (-2030275867));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonParser9.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        java.lang.Object obj13 = jsonParser12.getEmbeddedObject();
        long long15 = jsonParser12.getValueAsLong((long) 1807141545);
        int int17 = jsonParser12.getValueAsInt((int) ' ');
        java.lang.Object obj18 = jsonParser12.getObjectId();
        char[] charArray19 = jsonParser12.getTextCharacters();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger20 = jsonParser12.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: [B@771ffb0e; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertNotNull(jsonParser12);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1807141545L + "'", long15 == 1807141545L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 32 + "'", int17 == 32);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(charArray19);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        int int13 = charsToNameCanonicalizer10.collisionCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1), reader8, objectCodec9, charsToNameCanonicalizer10);
        com.fasterxml.jackson.core.JsonLocation jsonLocation15 = readerBasedJsonParser14.getTokenLocation();
        boolean boolean17 = readerBasedJsonParser14.hasTokenId(0);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2000520031) + "'", int12 == (-2000520031));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(jsonLocation15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        com.fasterxml.jackson.core.json.DupDetector dupDetector2 = null;
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext3 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext(64, (-1), dupDetector2);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler4 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler4, obj5, false);
        char[] charArray9 = iOContext7.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean10 = iOContext7.isResourceManaged();
        java.io.Reader reader12 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec13 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer14 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int16 = charsToNameCanonicalizer14.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser17 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, 3, reader12, objectCodec13, charsToNameCanonicalizer14);
        readerBasedJsonParser17._tokenIncomplete = true;
        com.fasterxml.jackson.core.JsonParser.Feature feature20 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        com.fasterxml.jackson.core.JsonParser jsonParser21 = readerBasedJsonParser17.disable(feature20);
        jsonReadContext3.setCurrentValue((java.lang.Object) feature20);
        org.junit.Assert.assertNotNull(jsonReadContext3);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1997070079) + "'", int16 == (-1997070079));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature20.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertNotNull(jsonParser21);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        java.io.Writer writer1 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator2 = jsonFactory0.createJsonGenerator(writer1);
        jsonGenerator2.writeNumber(0L);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes5 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator6 = jsonGenerator2.setCharacterEscapes(characterEscapes5);
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory();
        java.io.Writer writer8 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator9 = jsonFactory7.createJsonGenerator(writer8);
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str12 = serializedString11.toString();
        char[] charArray14 = new char[] { ' ' };
        int int16 = serializedString11.appendQuoted(charArray14, 1);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator17 = jsonGenerator9.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString11);
        jsonGenerator2.writeRaw((com.fasterxml.jackson.core.SerializableString) serializedString11);
        jsonGenerator2.writeStartArray(34);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler21 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj22 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext24 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler21, obj22, false);
        char[] charArray26 = iOContext24.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean27 = iOContext24.isResourceManaged();
        java.io.Reader reader29 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec30 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer31 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int33 = charsToNameCanonicalizer31.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser34 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext24, 3, reader29, objectCodec30, charsToNameCanonicalizer31);
        int int35 = readerBasedJsonParser34.getValueAsInt();
        int int36 = readerBasedJsonParser34.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature37 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean39 = feature37.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser40 = readerBasedJsonParser34.enable(feature37);
        com.fasterxml.jackson.core.io.SerializedString serializedString42 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str43 = serializedString42.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString45 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str46 = serializedString45.toString();
        char[] charArray48 = new char[] { ' ' };
        int int50 = serializedString45.appendQuoted(charArray48, 1);
        int int52 = serializedString42.appendQuoted(charArray48, (int) (short) 0);
        byte[] byteArray53 = serializedString42.asUnquotedUTF8();
        boolean boolean54 = readerBasedJsonParser34.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString42);
        com.fasterxml.jackson.core.ObjectCodec objectCodec55 = null;
        readerBasedJsonParser34._objectCodec = objectCodec55;
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator2.copyCurrentStructure((com.fasterxml.jackson.core.JsonParser) readerBasedJsonParser34);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: No current event to copy");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonGenerator2);
        org.junit.Assert.assertNotNull(jsonGenerator6);
        org.junit.Assert.assertNotNull(jsonGenerator9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[ ]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(jsonGenerator17);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer31);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1978957831) + "'", int33 == (-1978957831));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature37.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jsonParser40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[ ]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator2 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = jsonFactory0.setInputDecorator(inputDecorator2);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler4 = null;
        com.fasterxml.jackson.core.JsonToken jsonToken5 = com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT;
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler4, (java.lang.Object) jsonToken5, true);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer8 = iOContext7.constructTextBuffer();
        textBuffer8.ensureNotShared();
        char[] charArray10 = textBuffer8.contentsAsArray();
        textBuffer8.setCurrentLength(1);
        char[] charArray13 = textBuffer8.emptyAndGetCurrentSegment();
        com.fasterxml.jackson.core.JsonParser jsonParser14 = jsonFactory0.createParser(charArray13);
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(jsonFactory3);
        org.junit.Assert.assertTrue("'" + jsonToken5 + "' != '" + com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT + "'", jsonToken5.equals(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT));
        org.junit.Assert.assertNotNull(textBuffer8);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertNotNull(jsonParser14);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonParser9.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        boolean boolean14 = jsonParser9.hasTokenId((int) (byte) -69);
        jsonParser9.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec16 = jsonParser9.getCodec();
        java.lang.String str17 = jsonParser9.getText();
        java.lang.Object obj18 = jsonParser9.getCurrentValue();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertNotNull(jsonParser12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(objectCodec16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        readerBasedJsonParser13._tokenIncomplete = true;
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        com.fasterxml.jackson.core.JsonParser jsonParser17 = readerBasedJsonParser13.disable(feature16);
        boolean boolean18 = jsonParser17.hasTextCharacters();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1959479977) + "'", int12 == (-1959479977));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertNotNull(jsonParser17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        int int13 = charsToNameCanonicalizer10.collisionCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1), reader8, objectCodec9, charsToNameCanonicalizer10);
        com.fasterxml.jackson.core.JsonLocation jsonLocation15 = readerBasedJsonParser14.getTokenLocation();
        boolean boolean16 = readerBasedJsonParser14.isExpectedStartArrayToken();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal17 = readerBasedJsonParser14.getDecimalValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1953658183) + "'", int12 == (-1953658183));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(jsonLocation15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature16.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = readerBasedJsonParser13.enable(feature16);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str22 = serializedString21.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str25 = serializedString24.toString();
        char[] charArray27 = new char[] { ' ' };
        int int29 = serializedString24.appendQuoted(charArray27, 1);
        int int31 = serializedString21.appendQuoted(charArray27, (int) (short) 0);
        byte[] byteArray32 = serializedString21.asUnquotedUTF8();
        boolean boolean33 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString21);
        boolean boolean34 = readerBasedJsonParser13.isClosed();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1941798973) + "'", int12 == (-1941798973));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonFactory jsonFactory10 = new com.fasterxml.jackson.core.JsonFactory();
        boolean boolean11 = jsonFactory10.canHandleBinaryNatively();
        com.fasterxml.jackson.core.JsonFactory.Feature feature12 = com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean14 = feature12.enabledIn((int) (short) 10);
        com.fasterxml.jackson.core.JsonFactory jsonFactory15 = jsonFactory10.disable(feature12);
        com.fasterxml.jackson.core.io.SerializedString serializedString17 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str18 = serializedString17.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString20 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str21 = serializedString20.toString();
        char[] charArray23 = new char[] { ' ' };
        int int25 = serializedString20.appendQuoted(charArray23, 1);
        int int27 = serializedString17.appendQuoted(charArray23, (int) (short) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory15.createParser(charArray23, 14, 0);
        boolean boolean31 = jsonFactory15.canUseCharArrays();
        com.fasterxml.jackson.core.JsonFactory jsonFactory32 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.JsonFactory.Feature feature33 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory35 = jsonFactory32.configure(feature33, true);
        com.fasterxml.jackson.core.JsonFactory jsonFactory36 = jsonFactory15.enable(feature33);
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = jsonFactory0.configure(feature33, false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES + "'", feature12.equals(com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(jsonFactory15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[ ]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature33.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory35);
        org.junit.Assert.assertNotNull(jsonFactory36);
        org.junit.Assert.assertNotNull(jsonFactory38);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        int int13 = charsToNameCanonicalizer10.collisionCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1), reader8, objectCodec9, charsToNameCanonicalizer10);
        com.fasterxml.jackson.core.Base64Variant base64Variant15 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray16 = readerBasedJsonParser14._decodeBase64(base64Variant15);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected end-of-input in null? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1926417937) + "'", int12 == (-1926417937));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        int int13 = charsToNameCanonicalizer10.collisionCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1), reader8, objectCodec9, charsToNameCanonicalizer10);
        com.fasterxml.jackson.core.JsonLocation jsonLocation15 = readerBasedJsonParser14.getCurrentLocation();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken18 = readerBasedJsonParser14._handleInvalidNumberStart(0, false);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected character ((CTRL-CHAR, code 0)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1925483575) + "'", int12 == (-1925483575));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(jsonLocation15);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder49 = new com.fasterxml.jackson.core.util.ByteArrayBuilder();
        byteArrayBuilder49.close();
        byte[] byteArray52 = byteArrayBuilder49.completeAndCoalesce((int) (short) 10);
        byte[] byteArray53 = byteArrayBuilder49.resetAndGetFirstSegment();
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer54 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext21, (java.io.OutputStream) byteArrayBuilder49);
        java.lang.CharSequence charSequence55 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.Writer writer58 = uTF8Writer54.append(charSequence55, (-2102796733), (-2042494447));
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -2102796733");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1924621087) + "'", int27 == (-1924621087));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.JsonFactory.Feature feature1 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = jsonFactory0.configure(feature1, true);
        com.fasterxml.jackson.core.JsonParser jsonParser5 = jsonFactory3.createParser("[0]");
        java.lang.String str6 = jsonParser5.getValueAsString();
        int int7 = jsonParser5.getTextOffset();
        jsonParser5.overrideCurrentName("hi!");
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature1.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory3);
        org.junit.Assert.assertNotNull(jsonParser5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonParser9.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        boolean boolean14 = jsonParser9.hasTokenId((int) (byte) -69);
        jsonParser9.clearCurrentToken();
        com.fasterxml.jackson.core.JsonParser jsonParser16 = jsonParser9.skipChildren();
        com.fasterxml.jackson.core.FormatSchema formatSchema17 = null;
        boolean boolean18 = jsonParser16.canUseSchema(formatSchema17);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertNotNull(jsonParser12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jsonParser16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature16.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = readerBasedJsonParser13.enable(feature16);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str22 = serializedString21.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str25 = serializedString24.toString();
        char[] charArray27 = new char[] { ' ' };
        int int29 = serializedString24.appendQuoted(charArray27, 1);
        int int31 = serializedString21.appendQuoted(charArray27, (int) (short) 0);
        byte[] byteArray32 = serializedString21.asUnquotedUTF8();
        boolean boolean33 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString21);
        int int34 = readerBasedJsonParser13.getTextLength();
        boolean boolean35 = readerBasedJsonParser13.isExpectedStartArrayToken();
        com.fasterxml.jackson.core.io.SerializedString serializedString37 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str38 = serializedString37.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString40 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str41 = serializedString40.toString();
        char[] charArray43 = new char[] { ' ' };
        int int45 = serializedString40.appendQuoted(charArray43, 1);
        int int47 = serializedString37.appendQuoted(charArray43, (int) (short) 0);
        byte[] byteArray48 = serializedString37.asUnquotedUTF8();
        byte[] byteArray49 = serializedString37.asUnquotedUTF8();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler50 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj51 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext53 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler50, obj51, false);
        char[] charArray55 = iOContext53.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext56 = null;
        java.io.InputStream inputStream57 = null;
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext56, inputStream57, byteArray64, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper70 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext53, byteArray64, (int) ' ', 64);
        int int72 = serializedString37.appendQuotedUTF8(byteArray64, 549305411);
        boolean boolean73 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString37);
        com.fasterxml.jackson.core.ObjectCodec objectCodec74 = readerBasedJsonParser13._objectCodec;
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1897596463) + "'", int12 == (-1897596463));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[ ]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(objectCodec74);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonParser9.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        java.lang.String str13 = jsonParser9.getText();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertNotNull(jsonParser12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonParser9.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        boolean boolean14 = jsonParser9.hasTokenId((int) (byte) -69);
        jsonParser9.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec16 = jsonParser9.getCodec();
        java.lang.Throwable throwable18 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException19 = new com.fasterxml.jackson.core.JsonParseException(jsonParser9, "JSON", throwable18);
        double double20 = jsonParser9.getValueAsDouble();
        com.fasterxml.jackson.core.ObjectCodec objectCodec21 = null;
        jsonParser9.setCodec(objectCodec21);
        java.lang.Object obj23 = jsonParser9.getTypeId();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertNotNull(jsonParser12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(objectCodec16);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNull(obj23);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        java.io.Writer writer1 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator2 = jsonFactory0.createJsonGenerator(writer1);
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = jsonFactory0.setRootValueSeparator("hi!");
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version6 = jsonFactory5.version();
        com.fasterxml.jackson.core.JsonParser.Feature feature7 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        boolean boolean8 = feature7.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory9 = jsonFactory5.enable(feature7);
        com.fasterxml.jackson.core.JsonFactory jsonFactory10 = jsonFactory0.disable(feature7);
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = new com.fasterxml.jackson.core.JsonFactory();
        boolean boolean12 = jsonFactory11.canHandleBinaryNatively();
        com.fasterxml.jackson.core.JsonFactory.Feature feature13 = com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean15 = feature13.enabledIn((int) (short) 10);
        com.fasterxml.jackson.core.JsonFactory jsonFactory16 = jsonFactory11.disable(feature13);
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = jsonFactory0.disable(feature13);
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str20 = serializedString19.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str23 = serializedString22.toString();
        char[] charArray25 = new char[] { ' ' };
        int int27 = serializedString22.appendQuoted(charArray25, 1);
        int int29 = serializedString19.appendQuoted(charArray25, (int) (short) 0);
        byte[] byteArray30 = serializedString19.asUnquotedUTF8();
        byte[] byteArray31 = serializedString19.asUnquotedUTF8();
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory0.createParser(byteArray31, (int) '#', (int) (byte) -69);
        com.fasterxml.jackson.core.ObjectCodec objectCodec35 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory36 = jsonFactory0.setCodec(objectCodec35);
        org.junit.Assert.assertNotNull(jsonGenerator2);
        org.junit.Assert.assertNotNull(jsonFactory4);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature7.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jsonFactory9);
        org.junit.Assert.assertNotNull(jsonFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES + "'", feature13.equals(com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(jsonFactory16);
        org.junit.Assert.assertNotNull(jsonFactory17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ ]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertNotNull(jsonFactory36);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        readerBasedJsonParser13._tokenIncomplete = true;
        int int16 = readerBasedJsonParser13.getTokenLineNr();
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = new com.fasterxml.jackson.core.JsonFactory();
        java.io.Writer writer18 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator19 = jsonFactory17.createJsonGenerator(writer18);
        com.fasterxml.jackson.core.JsonFactory jsonFactory21 = jsonFactory17.setRootValueSeparator("hi!");
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version23 = jsonFactory22.version();
        com.fasterxml.jackson.core.JsonParser.Feature feature24 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        boolean boolean25 = feature24.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory26 = jsonFactory22.enable(feature24);
        com.fasterxml.jackson.core.JsonFactory jsonFactory27 = jsonFactory17.disable(feature24);
        com.fasterxml.jackson.core.JsonParser jsonParser28 = readerBasedJsonParser13.enable(feature24);
        boolean boolean29 = readerBasedJsonParser13.loadMore();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1876106137) + "'", int12 == (-1876106137));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(jsonGenerator19);
        org.junit.Assert.assertNotNull(jsonFactory21);
        org.junit.Assert.assertNotNull(version23);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature24.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jsonFactory26);
        org.junit.Assert.assertNotNull(jsonFactory27);
        org.junit.Assert.assertNotNull(jsonParser28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        boolean boolean14 = iOContext3.isResourceManaged();
        byte[] byteArray15 = com.fasterxml.jackson.core.io.CharTypes.copyHexBytes();
        // The following exception was thrown during execution in test generation
        try {
            iOContext3.releaseBase64Buffer(byteArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1874093665) + "'", int12 == (-1874093665));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70]");
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        int int16 = readerBasedJsonParser13.getTextOffset();
        // The following exception was thrown during execution in test generation
        try {
            char char17 = readerBasedJsonParser13._decodeEscaped();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected end-of-input in character escape sequence? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1873015555) + "'", int12 == (-1873015555));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        com.fasterxml.jackson.core.Base64Variant base64Variant81 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray82 = uTF8StreamJsonParser80._decodeBase64(base64Variant81);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1857634519) + "'", int27 == (-1857634519));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 865572798 + "'", int69 == 865572798);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        java.io.Writer writer1 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator2 = jsonFactory0.createJsonGenerator(writer1);
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = jsonFactory0.setRootValueSeparator("hi!");
        java.io.Reader reader5 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser6 = jsonFactory0.createJsonParser(reader5);
        org.junit.Assert.assertNotNull(jsonGenerator2);
        org.junit.Assert.assertNotNull(jsonFactory4);
        org.junit.Assert.assertNotNull(jsonParser6);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        int int13 = charsToNameCanonicalizer10.collisionCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1), reader8, objectCodec9, charsToNameCanonicalizer10);
        int int15 = charsToNameCanonicalizer10.hashSeed();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1847859655) + "'", int12 == (-1847859655));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1699776633) + "'", int15 == (-1699776633));
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature16.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = readerBasedJsonParser13.enable(feature16);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str22 = serializedString21.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str25 = serializedString24.toString();
        char[] charArray27 = new char[] { ' ' };
        int int29 = serializedString24.appendQuoted(charArray27, 1);
        int int31 = serializedString21.appendQuoted(charArray27, (int) (short) 0);
        byte[] byteArray32 = serializedString21.asUnquotedUTF8();
        boolean boolean33 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString21);
        int int34 = readerBasedJsonParser13.getTokenColumnNr();
        char[] charArray35 = readerBasedJsonParser13.getTextCharacters();
        boolean boolean36 = readerBasedJsonParser13.requiresCustomCodec();
        com.fasterxml.jackson.core.io.SerializedString serializedString38 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str39 = serializedString38.toString();
        boolean boolean40 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString38);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1846278427) + "'", int12 == (-1846278427));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNull(charArray35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        readerBasedJsonParser13._tokenIncomplete = true;
        double double16 = readerBasedJsonParser13.getValueAsDouble();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken19 = readerBasedJsonParser13._handleInvalidNumberStart(2006951265, false);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected character ('?' (code 2006951265 / 0x779fa561)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1843331593) + "'", int12 == (-1843331593));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser10 = jsonParser9.skipChildren();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger11 = jsonParser10.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: [B@197b3405; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertNotNull(jsonParser10);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser jsonParser18 = readerBasedJsonParser13.overrideStdFeatures(100, 1912580703);
        com.fasterxml.jackson.core.Base64Variant base64Variant19 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray20 = jsonParser18.getBinaryValue(base64Variant19);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1824428731) + "'", int12 == (-1824428731));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(jsonParser18);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        int int13 = charsToNameCanonicalizer10.collisionCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1), reader8, objectCodec9, charsToNameCanonicalizer10);
        com.fasterxml.jackson.core.JsonLocation jsonLocation15 = readerBasedJsonParser14.getTokenLocation();
        boolean boolean16 = readerBasedJsonParser14.isExpectedStartArrayToken();
        boolean boolean17 = readerBasedJsonParser14.loadMore();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1820763157) + "'", int12 == (-1820763157));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(jsonLocation15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int81 = uTF8StreamJsonParser80.getValueAsInt();
        int int82 = uTF8StreamJsonParser80.getTextOffset();
        com.fasterxml.jackson.core.Base64Variant base64Variant83 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString85 = new com.fasterxml.jackson.core.io.SerializedString("hi!");
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder86 = new com.fasterxml.jackson.core.util.ByteArrayBuilder();
        byteArrayBuilder86.close();
        byte[] byteArray89 = byteArrayBuilder86.completeAndCoalesce((int) (short) 10);
        byteArrayBuilder86.flush();
        int int91 = serializedString85.writeUnquotedUTF8((java.io.OutputStream) byteArrayBuilder86);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder92 = new com.fasterxml.jackson.core.util.ByteArrayBuilder();
        byteArrayBuilder92.close();
        byte[] byteArray95 = byteArrayBuilder92.completeAndCoalesce((int) (short) 10);
        byte[] byteArray96 = byteArrayBuilder92.resetAndGetFirstSegment();
        // The following exception was thrown during execution in test generation
        try {
            int int97 = uTF8StreamJsonParser80._readBinary(base64Variant83, (java.io.OutputStream) byteArrayBuilder86, byteArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1780657465) + "'", int27 == (-1780657465));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1999352684) + "'", int69 == (-1999352684));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 3 + "'", int91 == 3);
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonParser9.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        boolean boolean14 = jsonParser9.hasTokenId((int) (byte) -69);
        jsonParser9.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec16 = jsonParser9.getCodec();
        java.lang.String str17 = jsonParser9.getText();
        int int18 = jsonParser9.getCurrentTokenId();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertNotNull(jsonParser12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(objectCodec16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        readerBasedJsonParser13._tokenIncomplete = true;
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        com.fasterxml.jackson.core.JsonParser jsonParser17 = readerBasedJsonParser13.disable(feature16);
        java.lang.Object obj18 = readerBasedJsonParser13.getCurrentValue();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1755717187) + "'", int12 == (-1755717187));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertNotNull(jsonParser17);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature16.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = readerBasedJsonParser13.enable(feature16);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str22 = serializedString21.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str25 = serializedString24.toString();
        char[] charArray27 = new char[] { ' ' };
        int int29 = serializedString24.appendQuoted(charArray27, 1);
        int int31 = serializedString21.appendQuoted(charArray27, (int) (short) 0);
        byte[] byteArray32 = serializedString21.asUnquotedUTF8();
        boolean boolean33 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString21);
        int int34 = readerBasedJsonParser13.getTokenColumnNr();
        char[] charArray35 = readerBasedJsonParser13.getTextCharacters();
        boolean boolean36 = readerBasedJsonParser13.requiresCustomCodec();
        java.lang.Object obj37 = readerBasedJsonParser13.getTypeId();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1751189125) + "'", int12 == (-1751189125));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNull(charArray35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj37);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonParser9.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        java.lang.Object obj13 = jsonParser12.getEmbeddedObject();
        java.lang.Object obj14 = jsonParser12.getInputSource();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertNotNull(jsonParser12);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        readerBasedJsonParser13._tokenIncomplete = true;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger16 = readerBasedJsonParser13.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1742923615) + "'", int12 == (-1742923615));
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonParser9.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        java.lang.Object obj13 = jsonParser12.getEmbeddedObject();
        long long15 = jsonParser12.getValueAsLong((long) 1807141545);
        int int17 = jsonParser12.getValueAsInt((int) ' ');
        com.fasterxml.jackson.core.JsonToken jsonToken18 = jsonParser12.getLastClearedToken();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertNotNull(jsonParser12);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1807141545L + "'", long15 == 1807141545L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 32 + "'", int17 == 32);
        org.junit.Assert.assertNull(jsonToken18);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        java.io.Writer writer1 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator2 = jsonFactory0.createJsonGenerator(writer1);
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = jsonFactory0.setRootValueSeparator("hi!");
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version6 = jsonFactory5.version();
        com.fasterxml.jackson.core.JsonParser.Feature feature7 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        boolean boolean8 = feature7.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory9 = jsonFactory5.enable(feature7);
        com.fasterxml.jackson.core.JsonFactory jsonFactory10 = jsonFactory0.disable(feature7);
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = new com.fasterxml.jackson.core.JsonFactory();
        boolean boolean12 = jsonFactory11.canHandleBinaryNatively();
        com.fasterxml.jackson.core.JsonFactory.Feature feature13 = com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean15 = feature13.enabledIn((int) (short) 10);
        com.fasterxml.jackson.core.JsonFactory jsonFactory16 = jsonFactory11.disable(feature13);
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = jsonFactory0.disable(feature13);
        com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str20 = serializedString19.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str23 = serializedString22.toString();
        char[] charArray25 = new char[] { ' ' };
        int int27 = serializedString22.appendQuoted(charArray25, 1);
        int int29 = serializedString19.appendQuoted(charArray25, (int) (short) 0);
        byte[] byteArray30 = serializedString19.asUnquotedUTF8();
        byte[] byteArray31 = serializedString19.asUnquotedUTF8();
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory0.createParser(byteArray31, (int) '#', (int) (byte) -69);
        boolean boolean36 = jsonParser34.getValueAsBoolean(true);
        org.junit.Assert.assertNotNull(jsonGenerator2);
        org.junit.Assert.assertNotNull(jsonFactory4);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature7.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jsonFactory9);
        org.junit.Assert.assertNotNull(jsonFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES + "'", feature13.equals(com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(jsonFactory16);
        org.junit.Assert.assertNotNull(jsonFactory17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ ]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.JsonFactory jsonFactory49 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser58 = jsonFactory49.createJsonParser(byteArray55, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser61 = jsonParser58.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        boolean boolean63 = jsonParser58.hasTokenId((int) (byte) -69);
        jsonParser58.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec65 = jsonParser58.getCodec();
        readerBasedJsonParser48.setCurrentValue((java.lang.Object) jsonParser58);
        long long68 = readerBasedJsonParser48.getValueAsLong((long) (-1961061205));
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1736886199) + "'", int27 == (-1736886199));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser58);
        org.junit.Assert.assertNotNull(jsonParser61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(objectCodec65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1961061205L) + "'", long68 == (-1961061205L));
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int81 = uTF8StreamJsonParser80.getValueAsInt();
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser80._skipString();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1728189445) + "'", int27 == (-1728189445));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1203492219) + "'", int69 == (-1203492219));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int81 = uTF8StreamJsonParser80._nameStartRow;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str82 = uTF8StreamJsonParser80._parseAposName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1726751965) + "'", int27 == (-1726751965));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1159123795) + "'", int69 == (-1159123795));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature16.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = readerBasedJsonParser13.enable(feature16);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str22 = serializedString21.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str25 = serializedString24.toString();
        char[] charArray27 = new char[] { ' ' };
        int int29 = serializedString24.appendQuoted(charArray27, 1);
        int int31 = serializedString21.appendQuoted(charArray27, (int) (short) 0);
        byte[] byteArray32 = serializedString21.asUnquotedUTF8();
        boolean boolean33 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString21);
        int int34 = readerBasedJsonParser13.getTokenColumnNr();
        char[] charArray35 = readerBasedJsonParser13.getTextCharacters();
        com.fasterxml.jackson.core.Version version36 = readerBasedJsonParser13.version();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1724523871) + "'", int12 == (-1724523871));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNull(charArray35);
        org.junit.Assert.assertNotNull(version36);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int82 = uTF8StreamJsonParser80.getValueAsInt(1926668007);
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser80._closeInput();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1710292819) + "'", int27 == (-1710292819));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1215150777 + "'", int69 == 1215150777);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1926668007 + "'", int82 == 1926668007);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str2 = serializedString1.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString4 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str5 = serializedString4.toString();
        char[] charArray7 = new char[] { ' ' };
        int int9 = serializedString4.appendQuoted(charArray7, 1);
        int int11 = serializedString1.appendQuoted(charArray7, (int) (short) 0);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler12 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj13 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext15 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler12, obj13, false);
        char[] charArray17 = iOContext15.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext18 = null;
        java.io.InputStream inputStream19 = null;
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream29 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, inputStream19, byteArray26, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper32 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext15, byteArray26, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = byteSourceJsonBootstrapper32._context;
        java.io.Reader reader35 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec36 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer37 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int39 = charsToNameCanonicalizer37.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString41 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str42 = serializedString41.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString44 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str45 = serializedString44.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString47 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str48 = serializedString47.toString();
        char[] charArray50 = new char[] { ' ' };
        int int52 = serializedString47.appendQuoted(charArray50, 1);
        int int54 = serializedString44.appendQuoted(charArray50, (int) (short) 0);
        int int56 = serializedString41.appendUnquoted(charArray50, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser60 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext33, 100, reader35, objectCodec36, charsToNameCanonicalizer37, charArray50, 2, (int) (byte) 0, true);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = serializedString1.appendUnquoted(charArray50, (-1981473421));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ ]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext33);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer37);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1687077517) + "'", int39 == (-1687077517));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ ]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature16.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = readerBasedJsonParser13.enable(feature16);
        boolean boolean21 = jsonParser19.getValueAsBoolean(true);
        double double23 = jsonParser19.getValueAsDouble((double) (-433075001));
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1683915061) + "'", int12 == (-1683915061));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-4.33075001E8d) + "'", double23 == (-4.33075001E8d));
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature16.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = readerBasedJsonParser13.enable(feature16);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str22 = serializedString21.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str25 = serializedString24.toString();
        char[] charArray27 = new char[] { ' ' };
        int int29 = serializedString24.appendQuoted(charArray27, 1);
        int int31 = serializedString21.appendQuoted(charArray27, (int) (short) 0);
        byte[] byteArray32 = serializedString21.asUnquotedUTF8();
        boolean boolean33 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString21);
        int int34 = readerBasedJsonParser13.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation35 = readerBasedJsonParser13.getCurrentLocation();
        com.fasterxml.jackson.core.Base64Variant base64Variant36 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray37 = readerBasedJsonParser13.getBinaryValue(base64Variant36);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1682549455) + "'", int12 == (-1682549455));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(jsonLocation35);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonParser9.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = jsonParser12.getTokenLocation();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertNotNull(jsonParser12);
        org.junit.Assert.assertNotNull(jsonLocation13);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        com.fasterxml.jackson.core.Base64Variant base64Variant15 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray16 = readerBasedJsonParser13.getBinaryValue(base64Variant15);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1680896353) + "'", int12 == (-1680896353));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        int int16 = readerBasedJsonParser13.getTextOffset();
        int int17 = readerBasedJsonParser13._hashSeed;
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1672055851) + "'", int12 == (-1672055851));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1699771741) + "'", int17 == (-1699771741));
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature16.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = readerBasedJsonParser13.enable(feature16);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str22 = serializedString21.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str25 = serializedString24.toString();
        char[] charArray27 = new char[] { ' ' };
        int int29 = serializedString24.appendQuoted(charArray27, 1);
        int int31 = serializedString21.appendQuoted(charArray27, (int) (short) 0);
        byte[] byteArray32 = serializedString21.asUnquotedUTF8();
        boolean boolean33 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString21);
        int int34 = readerBasedJsonParser13.getTextLength();
        boolean boolean35 = readerBasedJsonParser13.isExpectedStartArrayToken();
        java.lang.String str37 = readerBasedJsonParser13.getValueAsString("}");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1671193363) + "'", int12 == (-1671193363));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "}" + "'", str37, "}");
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int81 = uTF8StreamJsonParser80.getValueAsInt();
        int int82 = uTF8StreamJsonParser80.getTextOffset();
        java.lang.String str83 = uTF8StreamJsonParser80.getValueAsString();
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser80._skipString();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1668174655) + "'", int27 == (-1668174655));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1664869702 + "'", int69 == 1664869702);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNull(str83);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        int int13 = charsToNameCanonicalizer10.collisionCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1), reader8, objectCodec9, charsToNameCanonicalizer10);
        com.fasterxml.jackson.core.Version version15 = readerBasedJsonParser14.version();
        boolean boolean16 = readerBasedJsonParser14.hasTextCharacters();
        java.lang.String str17 = readerBasedJsonParser14.nextTextValue();
        java.lang.String str18 = readerBasedJsonParser14.getText();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1626990853) + "'", int12 == (-1626990853));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        readerBasedJsonParser13._tokenIncomplete = true;
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        com.fasterxml.jackson.core.JsonParser jsonParser17 = readerBasedJsonParser13.disable(feature16);
        readerBasedJsonParser13.overrideCurrentName("JSON");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler20 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj21 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext23 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler20, obj21, false);
        char[] charArray25 = iOContext23.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext26 = null;
        java.io.InputStream inputStream27 = null;
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream37 = new com.fasterxml.jackson.core.io.MergedStream(iOContext26, inputStream27, byteArray34, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper40 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext23, byteArray34, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext41 = byteSourceJsonBootstrapper40._context;
        java.io.Reader reader43 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec44 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer45 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int47 = charsToNameCanonicalizer45.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString49 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str50 = serializedString49.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str53 = serializedString52.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString55 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str56 = serializedString55.toString();
        char[] charArray58 = new char[] { ' ' };
        int int60 = serializedString55.appendQuoted(charArray58, 1);
        int int62 = serializedString52.appendQuoted(charArray58, (int) (short) 0);
        int int64 = serializedString49.appendUnquoted(charArray58, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser68 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext41, 100, reader43, objectCodec44, charsToNameCanonicalizer45, charArray58, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder69 = new com.fasterxml.jackson.core.util.ByteArrayBuilder();
        byteArrayBuilder69.close();
        byte[] byteArray72 = byteArrayBuilder69.completeAndCoalesce((int) (short) 10);
        byte[] byteArray73 = byteArrayBuilder69.resetAndGetFirstSegment();
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer74 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext41, (java.io.OutputStream) byteArrayBuilder69);
        int int75 = readerBasedJsonParser13.releaseBuffered((java.io.Writer) uTF8Writer74);
        boolean boolean77 = readerBasedJsonParser13.hasTokenId(3);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray78 = readerBasedJsonParser13.getBinaryValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1625840869) + "'", int12 == (-1625840869));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertNotNull(jsonParser17);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext41);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer45);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1625840869) + "'", int47 == (-1625840869));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[ ]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        readerBasedJsonParser13._tokenIncomplete = true;
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        com.fasterxml.jackson.core.JsonParser jsonParser17 = readerBasedJsonParser13.disable(feature16);
        readerBasedJsonParser13.overrideCurrentName("JSON");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler20 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj21 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext23 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler20, obj21, false);
        char[] charArray25 = iOContext23.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext26 = null;
        java.io.InputStream inputStream27 = null;
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream37 = new com.fasterxml.jackson.core.io.MergedStream(iOContext26, inputStream27, byteArray34, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper40 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext23, byteArray34, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext41 = byteSourceJsonBootstrapper40._context;
        java.io.Reader reader43 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec44 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer45 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int47 = charsToNameCanonicalizer45.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString49 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str50 = serializedString49.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str53 = serializedString52.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString55 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str56 = serializedString55.toString();
        char[] charArray58 = new char[] { ' ' };
        int int60 = serializedString55.appendQuoted(charArray58, 1);
        int int62 = serializedString52.appendQuoted(charArray58, (int) (short) 0);
        int int64 = serializedString49.appendUnquoted(charArray58, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser68 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext41, 100, reader43, objectCodec44, charsToNameCanonicalizer45, charArray58, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder69 = new com.fasterxml.jackson.core.util.ByteArrayBuilder();
        byteArrayBuilder69.close();
        byte[] byteArray72 = byteArrayBuilder69.completeAndCoalesce((int) (short) 10);
        byte[] byteArray73 = byteArrayBuilder69.resetAndGetFirstSegment();
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer74 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext41, (java.io.OutputStream) byteArrayBuilder69);
        int int75 = readerBasedJsonParser13.releaseBuffered((java.io.Writer) uTF8Writer74);
        boolean boolean77 = readerBasedJsonParser13.hasTokenId(3);
        java.lang.Object obj78 = readerBasedJsonParser13.getCurrentValue();
        // The following exception was thrown during execution in test generation
        try {
            readerBasedJsonParser13._finishString2();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected end-of-input: was expecting closing quote for a string value? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1622965909) + "'", int12 == (-1622965909));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertNotNull(jsonParser17);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext41);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer45);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1622894035) + "'", int47 == (-1622894035));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[ ]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(obj78);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature16.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = readerBasedJsonParser13.enable(feature16);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str22 = serializedString21.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str25 = serializedString24.toString();
        char[] charArray27 = new char[] { ' ' };
        int int29 = serializedString24.appendQuoted(charArray27, 1);
        int int31 = serializedString21.appendQuoted(charArray27, (int) (short) 0);
        byte[] byteArray32 = serializedString21.asUnquotedUTF8();
        boolean boolean33 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString21);
        java.lang.String str34 = readerBasedJsonParser13.nextFieldName();
        com.fasterxml.jackson.core.JsonLocation jsonLocation35 = readerBasedJsonParser13.getTokenLocation();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1621744051) + "'", int12 == (-1621744051));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(jsonLocation35);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        readerBasedJsonParser13._tokenIncomplete = true;
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        com.fasterxml.jackson.core.JsonParser jsonParser17 = readerBasedJsonParser13.disable(feature16);
        readerBasedJsonParser13.overrideCurrentName("JSON");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler20 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj21 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext23 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler20, obj21, false);
        char[] charArray25 = iOContext23.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext26 = null;
        java.io.InputStream inputStream27 = null;
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream37 = new com.fasterxml.jackson.core.io.MergedStream(iOContext26, inputStream27, byteArray34, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper40 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext23, byteArray34, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext41 = byteSourceJsonBootstrapper40._context;
        java.io.Reader reader43 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec44 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer45 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int47 = charsToNameCanonicalizer45.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString49 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str50 = serializedString49.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str53 = serializedString52.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString55 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str56 = serializedString55.toString();
        char[] charArray58 = new char[] { ' ' };
        int int60 = serializedString55.appendQuoted(charArray58, 1);
        int int62 = serializedString52.appendQuoted(charArray58, (int) (short) 0);
        int int64 = serializedString49.appendUnquoted(charArray58, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser68 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext41, 100, reader43, objectCodec44, charsToNameCanonicalizer45, charArray58, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder69 = new com.fasterxml.jackson.core.util.ByteArrayBuilder();
        byteArrayBuilder69.close();
        byte[] byteArray72 = byteArrayBuilder69.completeAndCoalesce((int) (short) 10);
        byte[] byteArray73 = byteArrayBuilder69.resetAndGetFirstSegment();
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer74 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext41, (java.io.OutputStream) byteArrayBuilder69);
        int int75 = readerBasedJsonParser13.releaseBuffered((java.io.Writer) uTF8Writer74);
        uTF8Writer74.write("ROOT");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1618078477) + "'", int12 == (-1618078477));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertNotNull(jsonParser17);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext41);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer45);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1618078477) + "'", int47 == (-1618078477));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[ ]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int82 = uTF8StreamJsonParser80.getValueAsInt(1926668007);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str86 = uTF8StreamJsonParser80.parseLongName((-433075001), (-1736886199), (-1861587589));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -433075001");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1609237975) + "'", int27 == (-1609237975));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 707140086 + "'", int69 == 707140086);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1926668007 + "'", int82 == 1926668007);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        boolean boolean1 = jsonFactory0.canHandleBinaryNatively();
        com.fasterxml.jackson.core.JsonFactory.Feature feature2 = com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean4 = feature2.enabledIn((int) (short) 10);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory0.disable(feature2);
        com.fasterxml.jackson.core.io.SerializedString serializedString7 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str8 = serializedString7.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str11 = serializedString10.toString();
        char[] charArray13 = new char[] { ' ' };
        int int15 = serializedString10.appendQuoted(charArray13, 1);
        int int17 = serializedString7.appendQuoted(charArray13, (int) (short) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser20 = jsonFactory5.createParser(charArray13, 14, 0);
        boolean boolean21 = jsonFactory5.canUseCharArrays();
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.JsonFactory.Feature feature23 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory25 = jsonFactory22.configure(feature23, true);
        com.fasterxml.jackson.core.JsonFactory jsonFactory26 = jsonFactory5.enable(feature23);
        java.io.File file27 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser28 = jsonFactory5.createJsonParser(file27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES + "'", feature2.equals(com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ ]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(jsonParser20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature23.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory25);
        org.junit.Assert.assertNotNull(jsonFactory26);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser80._skipCR();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1599031867) + "'", int27 == (-1599031867));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 588570823 + "'", int69 == 588570823);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        java.io.Writer writer1 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator2 = jsonFactory0.createJsonGenerator(writer1);
        jsonGenerator2.writeNumber(0L);
        jsonGenerator2.writeNull();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj7 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext9 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, obj7, false);
        char[] charArray11 = iOContext9.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean12 = iOContext9.isResourceManaged();
        java.io.Reader reader14 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec15 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer16 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int18 = charsToNameCanonicalizer16.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser19 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext9, 3, reader14, objectCodec15, charsToNameCanonicalizer16);
        readerBasedJsonParser19._tokenIncomplete = true;
        com.fasterxml.jackson.core.JsonParser.Feature feature22 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        com.fasterxml.jackson.core.JsonParser jsonParser23 = readerBasedJsonParser19.disable(feature22);
        readerBasedJsonParser19._closeInput();
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator2.copyCurrentStructure((com.fasterxml.jackson.core.JsonParser) readerBasedJsonParser19);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: No current event to copy");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonGenerator2);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1597378765) + "'", int18 == (-1597378765));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature22.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertNotNull(jsonParser23);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder49 = new com.fasterxml.jackson.core.util.ByteArrayBuilder();
        byteArrayBuilder49.close();
        byte[] byteArray52 = byteArrayBuilder49.completeAndCoalesce((int) (short) 10);
        byte[] byteArray53 = byteArrayBuilder49.resetAndGetFirstSegment();
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer54 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext21, (java.io.OutputStream) byteArrayBuilder49);
        java.io.Writer writer56 = uTF8Writer54.append(' ');
        java.io.Writer writer58 = uTF8Writer54.append((java.lang.CharSequence) "[0]");
        com.fasterxml.jackson.core.io.SerializedString serializedString60 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str61 = serializedString60.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString63 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str64 = serializedString63.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString66 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str67 = serializedString66.toString();
        char[] charArray69 = new char[] { ' ' };
        int int71 = serializedString66.appendQuoted(charArray69, 1);
        int int73 = serializedString63.appendQuoted(charArray69, (int) (short) 0);
        int int75 = serializedString60.appendUnquoted(charArray69, 0);
        uTF8Writer54.write(charArray69);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1596085033) + "'", int27 == (-1596085033));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(writer56);
        org.junit.Assert.assertNotNull(writer58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[ ]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        // The following exception was thrown during execution in test generation
        try {
            long long82 = uTF8StreamJsonParser80.nextLongValue((long) (-1653656107));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1585016437) + "'", int27 == (-1585016437));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 873918477 + "'", int69 == 873918477);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature16.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = readerBasedJsonParser13.enable(feature16);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str22 = serializedString21.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str25 = serializedString24.toString();
        char[] charArray27 = new char[] { ' ' };
        int int29 = serializedString24.appendQuoted(charArray27, 1);
        int int31 = serializedString21.appendQuoted(charArray27, (int) (short) 0);
        byte[] byteArray32 = serializedString21.asUnquotedUTF8();
        boolean boolean33 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString21);
        int int34 = readerBasedJsonParser13.getTokenColumnNr();
        char[] charArray35 = readerBasedJsonParser13.getTextCharacters();
        boolean boolean36 = readerBasedJsonParser13.requiresCustomCodec();
        boolean boolean37 = readerBasedJsonParser13.isExpectedStartObjectToken();
        boolean boolean38 = readerBasedJsonParser13.isClosed();
        java.io.Reader reader39 = readerBasedJsonParser13._reader;
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1575816565) + "'", int12 == (-1575816565));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNull(charArray35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(reader39);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.JsonFactory jsonFactory6 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser15 = jsonFactory6.createJsonParser(byteArray12, (int) (short) 100, 1);
        // The following exception was thrown during execution in test generation
        try {
            iOContext3.releaseWriteEncodingBuffer(byteArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser15);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        boolean boolean14 = iOContext3.isResourceManaged();
        boolean boolean15 = iOContext3.isResourceManaged();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1560794899) + "'", int12 == (-1560794899));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        java.io.Writer writer1 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator2 = jsonFactory0.createJsonGenerator(writer1);
        jsonGenerator2.writeNumber(0L);
        java.lang.Object obj5 = jsonGenerator2.getOutputTarget();
        jsonGenerator2.writeStringField("JSON", "hi!");
        com.fasterxml.jackson.core.PrettyPrinter prettyPrinter9 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonGenerator2.setPrettyPrinter(prettyPrinter9);
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser20 = jsonFactory11.createJsonParser(byteArray17, (int) (short) 100, 1);
        jsonGenerator2.writeBinary(byteArray17);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator2.writeRawValue("}", (-2102796733), (-1961061205));
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -2102796733");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonGenerator2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser20);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        // The following exception was thrown during execution in test generation
        try {
            int int81 = uTF8StreamJsonParser80.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1541676415) + "'", int27 == (-1541676415));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-319474228) + "'", int69 == (-319474228));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int82 = uTF8StreamJsonParser80.getValueAsInt(1926668007);
        uTF8StreamJsonParser80._nameStartCol = 2006951265;
        // The following exception was thrown during execution in test generation
        try {
            long long86 = uTF8StreamJsonParser80.nextLongValue((long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1539520195) + "'", int27 == (-1539520195));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-365113725) + "'", int69 == (-365113725));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1926668007 + "'", int82 == 1926668007);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature16.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = readerBasedJsonParser13.enable(feature16);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str22 = serializedString21.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str25 = serializedString24.toString();
        char[] charArray27 = new char[] { ' ' };
        int int29 = serializedString24.appendQuoted(charArray27, 1);
        int int31 = serializedString21.appendQuoted(charArray27, (int) (short) 0);
        byte[] byteArray32 = serializedString21.asUnquotedUTF8();
        boolean boolean33 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString21);
        int int34 = readerBasedJsonParser13.getTextLength();
        boolean boolean35 = readerBasedJsonParser13.isExpectedStartArrayToken();
        com.fasterxml.jackson.core.io.SerializedString serializedString37 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str38 = serializedString37.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString40 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str41 = serializedString40.toString();
        char[] charArray43 = new char[] { ' ' };
        int int45 = serializedString40.appendQuoted(charArray43, 1);
        int int47 = serializedString37.appendQuoted(charArray43, (int) (short) 0);
        byte[] byteArray48 = serializedString37.asUnquotedUTF8();
        byte[] byteArray49 = serializedString37.asUnquotedUTF8();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler50 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj51 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext53 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler50, obj51, false);
        char[] charArray55 = iOContext53.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext56 = null;
        java.io.InputStream inputStream57 = null;
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext56, inputStream57, byteArray64, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper70 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext53, byteArray64, (int) ' ', 64);
        int int72 = serializedString37.appendQuotedUTF8(byteArray64, 549305411);
        boolean boolean73 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString37);
        com.fasterxml.jackson.core.ObjectCodec objectCodec74 = readerBasedJsonParser13.getCodec();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1531182811) + "'", int12 == (-1531182811));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[ ]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(objectCodec74);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.JsonFactory jsonFactory49 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser58 = jsonFactory49.createJsonParser(byteArray55, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser61 = jsonParser58.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        boolean boolean63 = jsonParser58.hasTokenId((int) (byte) -69);
        jsonParser58.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec65 = jsonParser58.getCodec();
        readerBasedJsonParser48.setCurrentValue((java.lang.Object) jsonParser58);
        long long67 = readerBasedJsonParser48.getValueAsLong();
        boolean boolean68 = readerBasedJsonParser48.isExpectedStartObjectToken();
        java.lang.String str69 = readerBasedJsonParser48.getText();
        com.fasterxml.jackson.core.ObjectCodec objectCodec70 = readerBasedJsonParser48.getCodec();
        com.fasterxml.jackson.core.Base64Variant base64Variant71 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray72 = readerBasedJsonParser48.getBinaryValue(base64Variant71);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: UNKNOWN; line: 1, column: 3]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1523779789) + "'", int27 == (-1523779789));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser58);
        org.junit.Assert.assertNotNull(jsonParser61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(objectCodec65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(objectCodec70);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        int int13 = charsToNameCanonicalizer10.collisionCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1), reader8, objectCodec9, charsToNameCanonicalizer10);
        com.fasterxml.jackson.core.Version version15 = readerBasedJsonParser14.version();
        boolean boolean16 = readerBasedJsonParser14.hasTextCharacters();
        readerBasedJsonParser14._skipCR();
        int int19 = readerBasedJsonParser14.getValueAsInt(64);
        com.fasterxml.jackson.core.Base64Variant base64Variant20 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray21 = readerBasedJsonParser14.getBinaryValue(base64Variant20);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: UNKNOWN; line: 2, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1521336073) + "'", int12 == (-1521336073));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 64 + "'", int19 == 64);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        com.fasterxml.jackson.core.io.SerializedString serializedString15 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str16 = serializedString15.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString18 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str19 = serializedString18.toString();
        char[] charArray21 = new char[] { ' ' };
        int int23 = serializedString18.appendQuoted(charArray21, 1);
        int int25 = serializedString15.appendQuoted(charArray21, (int) (short) 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString27 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str28 = serializedString27.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString30 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str31 = serializedString30.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString33 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str34 = serializedString33.toString();
        char[] charArray36 = new char[] { ' ' };
        int int38 = serializedString33.appendQuoted(charArray36, 1);
        int int40 = serializedString30.appendQuoted(charArray36, (int) (short) 0);
        int int42 = serializedString27.appendUnquoted(charArray36, 0);
        int int44 = serializedString15.appendQuoted(charArray36, 2036994597);
        // The following exception was thrown during execution in test generation
        try {
            iOContext3.releaseNameCopyBuffer(charArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1520689207) + "'", int12 == (-1520689207));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ ]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[ ]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int82 = uTF8StreamJsonParser80.getValueAsInt(1926668007);
        boolean boolean83 = uTF8StreamJsonParser80._tokenIncomplete;
        // The following exception was thrown during execution in test generation
        try {
            long long84 = uTF8StreamJsonParser80.getLongValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1488417781) + "'", int27 == (-1488417781));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1649623728) + "'", int69 == (-1649623728));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1926668007 + "'", int82 == 1926668007);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        java.io.Writer writer1 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator2 = jsonFactory0.createJsonGenerator(writer1);
        com.fasterxml.jackson.core.io.SerializedString serializedString4 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str5 = serializedString4.toString();
        char[] charArray7 = new char[] { ' ' };
        int int9 = serializedString4.appendQuoted(charArray7, 1);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonGenerator2.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString4);
        boolean boolean11 = jsonGenerator10.isClosed();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler12 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj13 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext15 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler12, obj13, false);
        char[] charArray17 = iOContext15.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean18 = iOContext15.isResourceManaged();
        java.io.Reader reader20 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec21 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer22 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int24 = charsToNameCanonicalizer22.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser25 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext15, 3, reader20, objectCodec21, charsToNameCanonicalizer22);
        int int26 = readerBasedJsonParser25.getValueAsInt();
        int int27 = readerBasedJsonParser25.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature28 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean30 = feature28.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser31 = readerBasedJsonParser25.enable(feature28);
        com.fasterxml.jackson.core.io.SerializedString serializedString33 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str34 = serializedString33.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString36 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str37 = serializedString36.toString();
        char[] charArray39 = new char[] { ' ' };
        int int41 = serializedString36.appendQuoted(charArray39, 1);
        int int43 = serializedString33.appendQuoted(charArray39, (int) (short) 0);
        byte[] byteArray44 = serializedString33.asUnquotedUTF8();
        boolean boolean45 = readerBasedJsonParser25.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString33);
        int int46 = readerBasedJsonParser25.getTokenColumnNr();
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator10.copyCurrentEvent((com.fasterxml.jackson.core.JsonParser) readerBasedJsonParser25);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: No current event to copy");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonGenerator2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ ]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer22);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1482524113) + "'", int24 == (-1482524113));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature28.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jsonParser31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[ ]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int82 = uTF8StreamJsonParser80.getValueAsInt(1926668007);
        boolean boolean83 = uTF8StreamJsonParser80._tokenIncomplete;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal84 = uTF8StreamJsonParser80.getDecimalValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1452193285) + "'", int27 == (-1452193285));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1151460421) + "'", int69 == (-1151460421));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1926668007 + "'", int82 == 1926668007);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        readerBasedJsonParser13._tokenIncomplete = true;
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        com.fasterxml.jackson.core.JsonParser jsonParser17 = readerBasedJsonParser13.disable(feature16);
        readerBasedJsonParser13._closeInput();
        // The following exception was thrown during execution in test generation
        try {
            int int19 = readerBasedJsonParser13.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1420137481) + "'", int12 == (-1420137481));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertNotNull(jsonParser17);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int81 = uTF8StreamJsonParser80.getValueAsInt();
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser80._reportInvalidInitial(1820926920);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Invalid UTF-8 start byte 0x6c8923c8? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1409140759) + "'", int27 == (-1409140759));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1404680302 + "'", int69 == 1404680302);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str82 = byteQuadsCanonicalizer65.findName((-1602841189));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1375072483) + "'", int27 == (-1375072483));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1927867031 + "'", int69 == 1927867031);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        int int13 = charsToNameCanonicalizer10.collisionCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1), reader8, objectCodec9, charsToNameCanonicalizer10);
        com.fasterxml.jackson.core.Version version15 = readerBasedJsonParser14.version();
        char[] charArray16 = readerBasedJsonParser14.getTextCharacters();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1371910027) + "'", int12 == (-1371910027));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertNull(charArray16);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        readerBasedJsonParser13._skipCR();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1369969429) + "'", int12 == (-1369969429));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature16.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = readerBasedJsonParser13.enable(feature16);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str22 = serializedString21.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str25 = serializedString24.toString();
        char[] charArray27 = new char[] { ' ' };
        int int29 = serializedString24.appendQuoted(charArray27, 1);
        int int31 = serializedString21.appendQuoted(charArray27, (int) (short) 0);
        byte[] byteArray32 = serializedString21.asUnquotedUTF8();
        boolean boolean33 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString21);
        int int34 = readerBasedJsonParser13.getTokenColumnNr();
        char[] charArray35 = readerBasedJsonParser13.getTextCharacters();
        int int37 = readerBasedJsonParser13.nextIntValue((-911975288));
        int int38 = readerBasedJsonParser13.getTextLength();
        boolean boolean39 = readerBasedJsonParser13.hasTextCharacters();
        com.fasterxml.jackson.core.Base64Variant base64Variant40 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray41 = readerBasedJsonParser13.getBinaryValue(base64Variant40);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1367453839) + "'", int12 == (-1367453839));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNull(charArray35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-911975288) + "'", int37 == (-911975288));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonParser9.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        boolean boolean14 = jsonParser9.hasTokenId((int) (byte) -69);
        jsonParser9.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec16 = jsonParser9.getCodec();
        java.lang.Throwable throwable18 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException19 = new com.fasterxml.jackson.core.JsonParseException(jsonParser9, "JSON", throwable18);
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser29 = jsonFactory20.createJsonParser(byteArray26, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser32 = jsonParser29.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        boolean boolean34 = jsonParser29.hasTokenId((int) (byte) -69);
        jsonParser29.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec36 = jsonParser29.getCodec();
        java.lang.Throwable throwable38 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException39 = new com.fasterxml.jackson.core.JsonParseException(jsonParser29, "JSON", throwable38);
        jsonParseException19.addSuppressed((java.lang.Throwable) jsonParseException39);
        java.lang.String str41 = jsonParseException19.toString();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertNotNull(jsonParser12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(objectCodec16);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser29);
        org.junit.Assert.assertNotNull(jsonParser32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(objectCodec36);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        com.fasterxml.jackson.core.JsonLocation jsonLocation1 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler3 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj4 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler3, obj4, false);
        char[] charArray8 = iOContext6.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean9 = iOContext6.isResourceManaged();
        java.io.Reader reader11 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec12 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer13 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int15 = charsToNameCanonicalizer13.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser16 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext6, 3, reader11, objectCodec12, charsToNameCanonicalizer13);
        int int17 = readerBasedJsonParser16.getValueAsInt();
        int int18 = readerBasedJsonParser16.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature19 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean21 = feature19.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser22 = readerBasedJsonParser16.enable(feature19);
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str25 = serializedString24.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString27 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str28 = serializedString27.toString();
        char[] charArray30 = new char[] { ' ' };
        int int32 = serializedString27.appendQuoted(charArray30, 1);
        int int34 = serializedString24.appendQuoted(charArray30, (int) (short) 0);
        byte[] byteArray35 = serializedString24.asUnquotedUTF8();
        boolean boolean36 = readerBasedJsonParser16.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString24);
        int int37 = readerBasedJsonParser16.getTokenColumnNr();
        char[] charArray38 = readerBasedJsonParser16.getTextCharacters();
        boolean boolean39 = readerBasedJsonParser16.requiresCustomCodec();
        com.fasterxml.jackson.core.JsonLocation jsonLocation40 = readerBasedJsonParser16.getCurrentLocation();
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory41.createJsonParser(byteArray47, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser53 = jsonParser50.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        boolean boolean55 = jsonParser50.hasTokenId((int) (byte) -69);
        jsonParser50.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec57 = jsonParser50.getCodec();
        java.lang.Throwable throwable59 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException60 = new com.fasterxml.jackson.core.JsonParseException(jsonParser50, "JSON", throwable59);
        com.fasterxml.jackson.core.JsonFactory jsonFactory61 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser70 = jsonFactory61.createJsonParser(byteArray67, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser73 = jsonParser70.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        boolean boolean75 = jsonParser70.hasTokenId((int) (byte) -69);
        jsonParser70.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec77 = jsonParser70.getCodec();
        java.lang.Throwable throwable79 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException80 = new com.fasterxml.jackson.core.JsonParseException(jsonParser70, "JSON", throwable79);
        jsonParseException60.addSuppressed((java.lang.Throwable) jsonParseException80);
        com.fasterxml.jackson.core.JsonParseException jsonParseException82 = new com.fasterxml.jackson.core.JsonParseException("ARRAY", jsonLocation40, (java.lang.Throwable) jsonParseException60);
        com.fasterxml.jackson.core.JsonParseException jsonParseException83 = new com.fasterxml.jackson.core.JsonParseException("ARRAY", jsonLocation1, (java.lang.Throwable) jsonParseException60);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1360050817) + "'", int15 == (-1360050817));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature19.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jsonParser22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ ]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNull(charArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jsonLocation40);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNotNull(jsonParser53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(objectCodec57);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser70);
        org.junit.Assert.assertNotNull(jsonParser73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(objectCodec77);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int82 = uTF8StreamJsonParser80.getValueAsInt(1926668007);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean83 = uTF8StreamJsonParser80.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1344957277) + "'", int27 == (-1344957277));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 379475161 + "'", int69 == 379475161);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1926668007 + "'", int82 == 1926668007);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        com.fasterxml.jackson.core.JsonToken jsonToken14 = readerBasedJsonParser13.getCurrentToken();
        readerBasedJsonParser13.setCurrentValue((java.lang.Object) (-2000520031));
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1343160427) + "'", int12 == (-1343160427));
        org.junit.Assert.assertNull(jsonToken14);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler1 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext4 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler1, obj2, false);
        char[] charArray6 = iOContext4.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean7 = iOContext4.isResourceManaged();
        java.io.Reader reader9 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer11 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int13 = charsToNameCanonicalizer11.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext4, 3, reader9, objectCodec10, charsToNameCanonicalizer11);
        int int15 = readerBasedJsonParser14.getValueAsInt();
        int int16 = readerBasedJsonParser14.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature17 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean19 = feature17.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser20 = readerBasedJsonParser14.enable(feature17);
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str23 = serializedString22.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString25 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str26 = serializedString25.toString();
        char[] charArray28 = new char[] { ' ' };
        int int30 = serializedString25.appendQuoted(charArray28, 1);
        int int32 = serializedString22.appendQuoted(charArray28, (int) (short) 0);
        byte[] byteArray33 = serializedString22.asUnquotedUTF8();
        boolean boolean34 = readerBasedJsonParser14.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString22);
        int int35 = readerBasedJsonParser14.getTokenColumnNr();
        char[] charArray36 = readerBasedJsonParser14.getTextCharacters();
        boolean boolean37 = readerBasedJsonParser14.requiresCustomCodec();
        com.fasterxml.jackson.core.JsonLocation jsonLocation38 = readerBasedJsonParser14.getCurrentLocation();
        com.fasterxml.jackson.core.JsonFactory jsonFactory39 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser48 = jsonFactory39.createJsonParser(byteArray45, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser51 = jsonParser48.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        boolean boolean53 = jsonParser48.hasTokenId((int) (byte) -69);
        jsonParser48.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec55 = jsonParser48.getCodec();
        java.lang.Throwable throwable57 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException58 = new com.fasterxml.jackson.core.JsonParseException(jsonParser48, "JSON", throwable57);
        com.fasterxml.jackson.core.JsonFactory jsonFactory59 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser68 = jsonFactory59.createJsonParser(byteArray65, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser71 = jsonParser68.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        boolean boolean73 = jsonParser68.hasTokenId((int) (byte) -69);
        jsonParser68.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec75 = jsonParser68.getCodec();
        java.lang.Throwable throwable77 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException78 = new com.fasterxml.jackson.core.JsonParseException(jsonParser68, "JSON", throwable77);
        jsonParseException58.addSuppressed((java.lang.Throwable) jsonParseException78);
        com.fasterxml.jackson.core.JsonParseException jsonParseException80 = new com.fasterxml.jackson.core.JsonParseException("ARRAY", jsonLocation38, (java.lang.Throwable) jsonParseException58);
        java.lang.Object obj81 = jsonParseException58.getProcessor();
        java.lang.String str82 = jsonParseException58.toString();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1333888681) + "'", int13 == (-1333888681));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature17.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jsonParser20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ ]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNull(charArray36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jsonLocation38);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser48);
        org.junit.Assert.assertNotNull(jsonParser51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(objectCodec55);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser68);
        org.junit.Assert.assertNotNull(jsonParser71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(objectCodec75);
        org.junit.Assert.assertNotNull(obj81);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int82 = uTF8StreamJsonParser80.getValueAsInt(1926668007);
        com.fasterxml.jackson.core.io.SerializedString serializedString84 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str85 = serializedString84.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString87 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str88 = serializedString87.toString();
        char[] charArray90 = new char[] { ' ' };
        int int92 = serializedString87.appendQuoted(charArray90, 1);
        int int94 = serializedString84.appendQuoted(charArray90, (int) (short) 0);
        byte[] byteArray95 = serializedString84.asUnquotedUTF8();
        uTF8StreamJsonParser80._inputBuffer = byteArray95;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean97 = uTF8StreamJsonParser80.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1323538825) + "'", int27 == (-1323538825));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 582363116 + "'", int69 == 582363116);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1926668007 + "'", int82 == 1926668007);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(charArray90);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray90), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray90), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray90), "[ ]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[]");
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature16.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = readerBasedJsonParser13.enable(feature16);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str22 = serializedString21.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str25 = serializedString24.toString();
        char[] charArray27 = new char[] { ' ' };
        int int29 = serializedString24.appendQuoted(charArray27, 1);
        int int31 = serializedString21.appendQuoted(charArray27, (int) (short) 0);
        byte[] byteArray32 = serializedString21.asUnquotedUTF8();
        boolean boolean33 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString21);
        int int34 = readerBasedJsonParser13.getTokenColumnNr();
        com.fasterxml.jackson.core.JsonToken jsonToken35 = readerBasedJsonParser13.getLastClearedToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec36 = null;
        readerBasedJsonParser13.setCodec(objectCodec36);
        com.fasterxml.jackson.core.JsonLocation jsonLocation38 = readerBasedJsonParser13.getCurrentLocation();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1321382605) + "'", int12 == (-1321382605));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNull(jsonToken35);
        org.junit.Assert.assertNotNull(jsonLocation38);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.JsonFactory.Feature feature1 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = jsonFactory0.configure(feature1, true);
        com.fasterxml.jackson.core.JsonParser jsonParser5 = jsonFactory3.createParser("[0]");
        boolean boolean6 = jsonFactory3.canUseCharArrays();
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature1.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory3);
        org.junit.Assert.assertNotNull(jsonParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature16.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = readerBasedJsonParser13.enable(feature16);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str22 = serializedString21.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str25 = serializedString24.toString();
        char[] charArray27 = new char[] { ' ' };
        int int29 = serializedString24.appendQuoted(charArray27, 1);
        int int31 = serializedString21.appendQuoted(charArray27, (int) (short) 0);
        byte[] byteArray32 = serializedString21.asUnquotedUTF8();
        boolean boolean33 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString21);
        int int34 = readerBasedJsonParser13.getTokenColumnNr();
        char[] charArray35 = readerBasedJsonParser13.getTextCharacters();
        boolean boolean36 = readerBasedJsonParser13.requiresCustomCodec();
        boolean boolean37 = readerBasedJsonParser13.isExpectedStartObjectToken();
        java.lang.String str38 = readerBasedJsonParser13.getCurrentName();
        // The following exception was thrown during execution in test generation
        try {
            readerBasedJsonParser13._reportInvalidToken("[0]");
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unrecognized token '[0]': was expecting 'null', 'true', 'false' or NaN? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1295004847) + "'", int12 == (-1295004847));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNull(charArray35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature16.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = readerBasedJsonParser13.enable(feature16);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str22 = serializedString21.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str25 = serializedString24.toString();
        char[] charArray27 = new char[] { ' ' };
        int int29 = serializedString24.appendQuoted(charArray27, 1);
        int int31 = serializedString21.appendQuoted(charArray27, (int) (short) 0);
        byte[] byteArray32 = serializedString21.asUnquotedUTF8();
        boolean boolean33 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString21);
        int int34 = readerBasedJsonParser13.getTokenColumnNr();
        char[] charArray35 = readerBasedJsonParser13.getTextCharacters();
        int int37 = readerBasedJsonParser13.nextIntValue((-911975288));
        boolean boolean39 = readerBasedJsonParser13.getValueAsBoolean(true);
        int int40 = readerBasedJsonParser13._nameStartRow;
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1286739337) + "'", int12 == (-1286739337));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNull(charArray35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-911975288) + "'", int37 == (-911975288));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean82 = uTF8StreamJsonParser80._loadToHaveAtLeast((-1621744051));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1268123971) + "'", int27 == (-1268123971));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-777180494) + "'", int69 == (-777180494));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        java.io.Writer writer1 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator2 = jsonFactory0.createJsonGenerator(writer1);
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = jsonFactory0.setRootValueSeparator("hi!");
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version6 = jsonFactory5.version();
        com.fasterxml.jackson.core.JsonParser.Feature feature7 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        boolean boolean8 = feature7.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory9 = jsonFactory5.enable(feature7);
        com.fasterxml.jackson.core.JsonFactory jsonFactory10 = jsonFactory0.disable(feature7);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = jsonFactory10._getBufferRecycler();
        com.fasterxml.jackson.core.io.OutputDecorator outputDecorator12 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory13 = jsonFactory10.setOutputDecorator(outputDecorator12);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler14 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj15 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext17 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler14, obj15, false);
        char[] charArray19 = iOContext17.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean20 = iOContext17.isResourceManaged();
        java.io.Reader reader22 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec23 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer24 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int26 = charsToNameCanonicalizer24.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser27 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext17, 3, reader22, objectCodec23, charsToNameCanonicalizer24);
        readerBasedJsonParser27._tokenIncomplete = true;
        com.fasterxml.jackson.core.JsonParser.Feature feature30 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        com.fasterxml.jackson.core.JsonParser jsonParser31 = readerBasedJsonParser27.disable(feature30);
        readerBasedJsonParser27.overrideCurrentName("JSON");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler34 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj35 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext37 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler34, obj35, false);
        char[] charArray39 = iOContext37.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream51 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray48, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper54 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext37, byteArray48, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext55 = byteSourceJsonBootstrapper54._context;
        java.io.Reader reader57 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec58 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer59 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int61 = charsToNameCanonicalizer59.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString63 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str64 = serializedString63.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString66 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str67 = serializedString66.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString69 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str70 = serializedString69.toString();
        char[] charArray72 = new char[] { ' ' };
        int int74 = serializedString69.appendQuoted(charArray72, 1);
        int int76 = serializedString66.appendQuoted(charArray72, (int) (short) 0);
        int int78 = serializedString63.appendUnquoted(charArray72, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser82 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext55, 100, reader57, objectCodec58, charsToNameCanonicalizer59, charArray72, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder83 = new com.fasterxml.jackson.core.util.ByteArrayBuilder();
        byteArrayBuilder83.close();
        byte[] byteArray86 = byteArrayBuilder83.completeAndCoalesce((int) (short) 10);
        byte[] byteArray87 = byteArrayBuilder83.resetAndGetFirstSegment();
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer88 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext55, (java.io.OutputStream) byteArrayBuilder83);
        int int89 = readerBasedJsonParser27.releaseBuffered((java.io.Writer) uTF8Writer88);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator90 = jsonFactory13.createGenerator((java.io.Writer) uTF8Writer88);
        org.junit.Assert.assertNotNull(jsonGenerator2);
        org.junit.Assert.assertNotNull(jsonFactory4);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature7.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jsonFactory9);
        org.junit.Assert.assertNotNull(jsonFactory10);
        org.junit.Assert.assertNotNull(bufferRecycler11);
        org.junit.Assert.assertNotNull(jsonFactory13);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer24);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1266758365) + "'", int26 == (-1266758365));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature30.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertNotNull(jsonParser31);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext55);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer59);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1266686491) + "'", int61 == (-1266686491));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[ ]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(jsonGenerator90);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        int int13 = charsToNameCanonicalizer10.collisionCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1), reader8, objectCodec9, charsToNameCanonicalizer10);
        com.fasterxml.jackson.core.Version version15 = readerBasedJsonParser14.version();
        boolean boolean16 = readerBasedJsonParser14.hasTextCharacters();
        com.fasterxml.jackson.core.JsonParser.Feature feature17 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        boolean boolean18 = feature17.enabledByDefault();
        boolean boolean19 = readerBasedJsonParser14.isEnabled(feature17);
        int int20 = readerBasedJsonParser14.getTextLength();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1216159069) + "'", int12 == (-1216159069));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature17.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory();
        java.io.Writer writer2 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator3 = jsonFactory1.createJsonGenerator(writer2);
        boolean boolean4 = jsonGenerator3.canWriteTypeId();
        defaultPrettyPrinter0.writeRootValueSeparator(jsonGenerator3);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj7 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext9 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler6, obj7, false);
        char[] charArray11 = iOContext9.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean12 = iOContext9.isResourceManaged();
        java.io.Reader reader14 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec15 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer16 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int18 = charsToNameCanonicalizer16.calcHash("hi!");
        int int19 = charsToNameCanonicalizer16.collisionCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser20 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext9, (-1), reader14, objectCodec15, charsToNameCanonicalizer16);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer21 = iOContext9.constructTextBuffer();
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        int int28 = charsToNameCanonicalizer25.collisionCount();
        com.fasterxml.jackson.core.io.SerializedString serializedString30 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str31 = serializedString30.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString33 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str34 = serializedString33.toString();
        char[] charArray36 = new char[] { ' ' };
        int int38 = serializedString33.appendQuoted(charArray36, 1);
        int int40 = serializedString30.appendQuoted(charArray36, (int) (short) 0);
        int int43 = charsToNameCanonicalizer25.calcHash(charArray36, 0, (-2076203353));
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler44 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj45 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext47 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler44, obj45, false);
        char[] charArray49 = iOContext47.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser53 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext9, (int) 'a', reader23, objectCodec24, charsToNameCanonicalizer25, charArray49, 15, (-1699771741), false);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator3.writeString(charArray49, (-1536860857), (-1679746369));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1536860857");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonGenerator3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1192296901) + "'", int18 == (-1192296901));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(textBuffer21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1192296901) + "'", int27 == (-1192296901));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[ ]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1699758391) + "'", int43 == (-1699758391));
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature16.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = readerBasedJsonParser13.enable(feature16);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str22 = serializedString21.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str25 = serializedString24.toString();
        char[] charArray27 = new char[] { ' ' };
        int int29 = serializedString24.appendQuoted(charArray27, 1);
        int int31 = serializedString21.appendQuoted(charArray27, (int) (short) 0);
        byte[] byteArray32 = serializedString21.asUnquotedUTF8();
        boolean boolean33 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString21);
        int int34 = readerBasedJsonParser13.getTokenColumnNr();
        char[] charArray35 = readerBasedJsonParser13.getTextCharacters();
        int int37 = readerBasedJsonParser13.nextIntValue((-911975288));
        int int38 = readerBasedJsonParser13.getTextLength();
        boolean boolean39 = readerBasedJsonParser13.hasTextCharacters();
        int int40 = readerBasedJsonParser13._nameStartCol;
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1187193847) + "'", int12 == (-1187193847));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNull(charArray35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-911975288) + "'", int37 == (-911975288));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int82 = uTF8StreamJsonParser80.getValueAsInt(1926668007);
        uTF8StreamJsonParser80._nameStartCol = 2006951265;
        // The following exception was thrown during execution in test generation
        try {
            int int86 = uTF8StreamJsonParser80.nextIntValue(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1175406511) + "'", int27 == (-1175406511));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1143444862) + "'", int69 == (-1143444862));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1926668007 + "'", int82 == 1926668007);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.JsonFactory jsonFactory49 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser58 = jsonFactory49.createJsonParser(byteArray55, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser61 = jsonParser58.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        boolean boolean63 = jsonParser58.hasTokenId((int) (byte) -69);
        jsonParser58.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec65 = jsonParser58.getCodec();
        readerBasedJsonParser48.setCurrentValue((java.lang.Object) jsonParser58);
        long long67 = readerBasedJsonParser48.getValueAsLong();
        boolean boolean68 = readerBasedJsonParser48.isExpectedStartObjectToken();
        java.lang.String str69 = readerBasedJsonParser48.getText();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken70 = readerBasedJsonParser48._parseNegNumber();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected end-of-inputNo digit following minus sign? at [Source: UNKNOWN; line: 1, column: 3]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1160816089) + "'", int27 == (-1160816089));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser58);
        org.junit.Assert.assertNotNull(jsonParser61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(objectCodec65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int82 = uTF8StreamJsonParser80.getValueAsInt(1926668007);
        boolean boolean83 = uTF8StreamJsonParser80._tokenIncomplete;
        byte[] byteArray84 = uTF8StreamJsonParser80._inputBuffer;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal85 = uTF8StreamJsonParser80.getDecimalValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1158372373) + "'", int27 == (-1158372373));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1270919319 + "'", int69 == 1270919319);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1926668007 + "'", int82 == 1926668007);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[10, 10, -1, 1]");
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        int int13 = charsToNameCanonicalizer10.collisionCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1), reader8, objectCodec9, charsToNameCanonicalizer10);
        com.fasterxml.jackson.core.Version version15 = readerBasedJsonParser14.version();
        boolean boolean16 = readerBasedJsonParser14.hasTextCharacters();
        java.lang.String str17 = readerBasedJsonParser14.nextTextValue();
        java.lang.String str18 = readerBasedJsonParser14.nextFieldName();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1155784909) + "'", int12 == (-1155784909));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        java.lang.String str81 = uTF8StreamJsonParser80.getValueAsString();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType82 = uTF8StreamJsonParser80.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1154778673) + "'", int27 == (-1154778673));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1196675074 + "'", int69 == 1196675074);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertNull(str81);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        int int16 = readerBasedJsonParser13.getTextOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = readerBasedJsonParser13._parseAposName();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected end-of-input: was expecting closing ''' for name? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1153484941) + "'", int12 == (-1153484941));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature16.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = readerBasedJsonParser13.enable(feature16);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str22 = serializedString21.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str25 = serializedString24.toString();
        char[] charArray27 = new char[] { ' ' };
        int int29 = serializedString24.appendQuoted(charArray27, 1);
        int int31 = serializedString21.appendQuoted(charArray27, (int) (short) 0);
        byte[] byteArray32 = serializedString21.asUnquotedUTF8();
        boolean boolean33 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString21);
        int int34 = readerBasedJsonParser13.getTokenColumnNr();
        com.fasterxml.jackson.core.JsonToken jsonToken35 = readerBasedJsonParser13.getLastClearedToken();
        com.fasterxml.jackson.core.JsonToken jsonToken36 = readerBasedJsonParser13.getLastClearedToken();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1132497733) + "'", int12 == (-1132497733));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNull(jsonToken35);
        org.junit.Assert.assertNull(jsonToken36);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonParser9.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        boolean boolean14 = jsonParser9.hasTokenId((int) (byte) -69);
        jsonParser9.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec16 = jsonParser9.getCodec();
        boolean boolean17 = jsonParser9.canReadObjectId();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertNotNull(jsonParser12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(objectCodec16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.JsonFactory jsonFactory49 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser58 = jsonFactory49.createJsonParser(byteArray55, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser61 = jsonParser58.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        boolean boolean63 = jsonParser58.hasTokenId((int) (byte) -69);
        jsonParser58.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec65 = jsonParser58.getCodec();
        readerBasedJsonParser48.setCurrentValue((java.lang.Object) jsonParser58);
        long long67 = readerBasedJsonParser48.getValueAsLong();
        // The following exception was thrown during execution in test generation
        try {
            readerBasedJsonParser48._reportInvalidToken("[com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: size=0, hashSize=0, 0/0/0/0 pri/sec/ter/spill (=0), total:0]", "hi!");
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unrecognized token '[com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: size=0, hashSize=0, 0/0/0/0 pri/sec/ter/spill (=0), total:0]': was expecting hi!? at [Source: UNKNOWN; line: 1, column: 3]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1124375971) + "'", int27 == (-1124375971));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser58);
        org.junit.Assert.assertNotNull(jsonParser61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(objectCodec65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonParser9.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        boolean boolean14 = jsonParser9.hasTokenId((int) (byte) -69);
        jsonParser9.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec16 = jsonParser9.getCodec();
        int int17 = jsonParser9.getValueAsInt();
        java.lang.Object obj18 = jsonParser9.getInputSource();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertNotNull(jsonParser12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(objectCodec16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonParser9.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        boolean boolean14 = jsonParser9.hasTokenId((int) (byte) -69);
        jsonParser9.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec16 = jsonParser9.getCodec();
        java.lang.Throwable throwable18 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException19 = new com.fasterxml.jackson.core.JsonParseException(jsonParser9, "JSON", throwable18);
        long long21 = jsonParser9.getValueAsLong((long) 2008604367);
        boolean boolean22 = jsonParser9.hasCurrentToken();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertNotNull(jsonParser12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(objectCodec16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2008604367L + "'", long21 == 2008604367L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        readerBasedJsonParser13._tokenIncomplete = true;
        java.lang.String str17 = readerBasedJsonParser13.getValueAsString("");
        java.lang.Object obj18 = readerBasedJsonParser13.getInputSource();
        // The following exception was thrown during execution in test generation
        try {
            readerBasedJsonParser13._finishString();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected end-of-input: was expecting closing quote for a string value? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1112516761) + "'", int12 == (-1112516761));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.JsonToken jsonToken1 = com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonToken1, true);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer4 = iOContext3.constructTextBuffer();
        boolean boolean5 = iOContext3.isResourceManaged();
        java.io.Reader reader7 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec8 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer9 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler10 = null;
        com.fasterxml.jackson.core.JsonToken jsonToken11 = com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT;
        com.fasterxml.jackson.core.io.IOContext iOContext13 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler10, (java.lang.Object) jsonToken11, true);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer14 = iOContext13.constructTextBuffer();
        textBuffer14.ensureNotShared();
        char[] charArray16 = textBuffer14.expandCurrentSegment();
        char[] charArray17 = textBuffer14.contentsAsArray();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser21 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-2080875163), reader7, objectCodec8, charsToNameCanonicalizer9, charArray17, 0, 0, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + jsonToken1 + "' != '" + com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT + "'", jsonToken1.equals(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT));
        org.junit.Assert.assertNotNull(textBuffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + jsonToken11 + "' != '" + com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT + "'", jsonToken11.equals(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT));
        org.junit.Assert.assertNotNull(textBuffer14);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int81 = uTF8StreamJsonParser80._nameStartRow;
        com.fasterxml.jackson.core.ObjectCodec objectCodec82 = null;
        uTF8StreamJsonParser80._objectCodec = objectCodec82;
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser80._reportInvalidInitial(2142864999);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Invalid UTF-8 start byte 0x7fb98667? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1109210557) + "'", int27 == (-1109210557));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2100051308 + "'", int69 == 2100051308);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature16.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = readerBasedJsonParser13.enable(feature16);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str22 = serializedString21.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str25 = serializedString24.toString();
        char[] charArray27 = new char[] { ' ' };
        int int29 = serializedString24.appendQuoted(charArray27, 1);
        int int31 = serializedString21.appendQuoted(charArray27, (int) (short) 0);
        byte[] byteArray32 = serializedString21.asUnquotedUTF8();
        boolean boolean33 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString21);
        java.lang.String str34 = readerBasedJsonParser13.nextFieldName();
        com.fasterxml.jackson.core.JsonLocation jsonLocation35 = readerBasedJsonParser13.getCurrentLocation();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1106982463) + "'", int12 == (-1106982463));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(jsonLocation35);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature16.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = readerBasedJsonParser13.enable(feature16);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str22 = serializedString21.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str25 = serializedString24.toString();
        char[] charArray27 = new char[] { ' ' };
        int int29 = serializedString24.appendQuoted(charArray27, 1);
        int int31 = serializedString21.appendQuoted(charArray27, (int) (short) 0);
        byte[] byteArray32 = serializedString21.asUnquotedUTF8();
        boolean boolean33 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString21);
        int int34 = readerBasedJsonParser13.getTokenColumnNr();
        com.fasterxml.jackson.core.JsonToken jsonToken35 = readerBasedJsonParser13.getLastClearedToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec36 = null;
        readerBasedJsonParser13.setCodec(objectCodec36);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder38 = readerBasedJsonParser13._getByteArrayBuilder();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1098357583) + "'", int12 == (-1098357583));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNull(jsonToken35);
        org.junit.Assert.assertNotNull(byteArrayBuilder38);
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int81 = uTF8StreamJsonParser80.getValueAsInt();
        int int82 = uTF8StreamJsonParser80.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation83 = uTF8StreamJsonParser80.getCurrentLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext84 = uTF8StreamJsonParser80.getParsingContext();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1093757647) + "'", int27 == (-1093757647));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 263323867 + "'", int69 == 263323867);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(jsonLocation83);
        org.junit.Assert.assertNotNull(jsonStreamContext84);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int82 = uTF8StreamJsonParser80.getValueAsInt(1926668007);
        com.fasterxml.jackson.core.io.SerializedString serializedString84 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str85 = serializedString84.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString87 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str88 = serializedString87.toString();
        char[] charArray90 = new char[] { ' ' };
        int int92 = serializedString87.appendQuoted(charArray90, 1);
        int int94 = serializedString84.appendQuoted(charArray90, (int) (short) 0);
        byte[] byteArray95 = serializedString84.asUnquotedUTF8();
        uTF8StreamJsonParser80._inputBuffer = byteArray95;
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser80._matchToken("[com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: size=0, hashSize=0, 0/0/0/0 pri/sec/ter/spill (=0), total:0]", (-1671193363));
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1671193363");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1073920423) + "'", int27 == (-1073920423));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 500302915 + "'", int69 == 500302915);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1926668007 + "'", int82 == 1926668007);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(charArray90);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray90), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray90), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray90), "[ ]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[]");
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = jsonFactory0.enable(feature2);
        com.fasterxml.jackson.core.ObjectCodec objectCodec5 = jsonFactory4.getCodec();
        boolean boolean6 = jsonFactory4.canUseCharArrays();
        com.fasterxml.jackson.core.io.OutputDecorator outputDecorator7 = jsonFactory4.getOutputDecorator();
        com.fasterxml.jackson.core.JsonFactory.Feature feature8 = com.fasterxml.jackson.core.JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
        com.fasterxml.jackson.core.JsonFactory jsonFactory9 = jsonFactory4.disable(feature8);
        com.fasterxml.jackson.core.JsonParser jsonParser11 = jsonFactory4.createJsonParser("}");
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jsonFactory4);
        org.junit.Assert.assertNull(objectCodec5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(outputDecorator7);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW + "'", feature8.equals(com.fasterxml.jackson.core.JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW));
        org.junit.Assert.assertNotNull(jsonFactory9);
        org.junit.Assert.assertNotNull(jsonParser11);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int81 = uTF8StreamJsonParser80.getValueAsInt();
        int int82 = uTF8StreamJsonParser80.getTextOffset();
        int[] intArray88 = new int[] { (-1847859655), (-2042494447), 2018810475, (-1187193847), 31 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str93 = uTF8StreamJsonParser80.parseEscapedName(intArray88, 0, (-1371910027), (-2045513155), (-263915515));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -2045513155");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1069895479) + "'", int27 == (-1069895479));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 428886644 + "'", int69 == 428886644);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1847859655, -2042494447, 2018810475, -1187193847, 31]");
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        int int13 = charsToNameCanonicalizer10.collisionCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1), reader8, objectCodec9, charsToNameCanonicalizer10);
        com.fasterxml.jackson.core.JsonToken jsonToken15 = readerBasedJsonParser14.getCurrentToken();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = readerBasedJsonParser14.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1057748773) + "'", int12 == (-1057748773));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(jsonToken15);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature16.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = readerBasedJsonParser13.enable(feature16);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str22 = serializedString21.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str25 = serializedString24.toString();
        char[] charArray27 = new char[] { ' ' };
        int int29 = serializedString24.appendQuoted(charArray27, 1);
        int int31 = serializedString21.appendQuoted(charArray27, (int) (short) 0);
        byte[] byteArray32 = serializedString21.asUnquotedUTF8();
        boolean boolean33 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString21);
        int int34 = readerBasedJsonParser13.getTokenColumnNr();
        char[] charArray35 = readerBasedJsonParser13.getTextCharacters();
        boolean boolean36 = readerBasedJsonParser13.requiresCustomCodec();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext37 = readerBasedJsonParser13.getParsingContext();
        com.fasterxml.jackson.core.JsonToken jsonToken38 = readerBasedJsonParser13.nextValue();
        // The following exception was thrown during execution in test generation
        try {
            readerBasedJsonParser13._reportInvalidToken("[0]");
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unrecognized token '[0]': was expecting 'null', 'true', 'false' or NaN? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1052861341) + "'", int12 == (-1052861341));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNull(charArray35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jsonReadContext37);
        org.junit.Assert.assertNull(jsonToken38);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        com.fasterxml.jackson.core.JsonToken jsonToken14 = readerBasedJsonParser13.getCurrentToken();
        int int15 = readerBasedJsonParser13.getTextOffset();
        java.lang.String str17 = readerBasedJsonParser13.getValueAsString("[com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: size=0, hashSize=0, 0/0/0/0 pri/sec/ter/spill (=0), total:0]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1024902355) + "'", int12 == (-1024902355));
        org.junit.Assert.assertNull(jsonToken14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: size=0, hashSize=0, 0/0/0/0 pri/sec/ter/spill (=0), total:0]" + "'", str17, "[com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: size=0, hashSize=0, 0/0/0/0 pri/sec/ter/spill (=0), total:0]");
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        int int13 = charsToNameCanonicalizer10.collisionCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1), reader8, objectCodec9, charsToNameCanonicalizer10);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer15 = iOContext3.constructTextBuffer();
        java.io.Reader reader17 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec18 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer19 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int21 = charsToNameCanonicalizer19.calcHash("hi!");
        int int22 = charsToNameCanonicalizer19.collisionCount();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str25 = serializedString24.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString27 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str28 = serializedString27.toString();
        char[] charArray30 = new char[] { ' ' };
        int int32 = serializedString27.appendQuoted(charArray30, 1);
        int int34 = serializedString24.appendQuoted(charArray30, (int) (short) 0);
        int int37 = charsToNameCanonicalizer19.calcHash(charArray30, 0, (-2076203353));
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler38 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj39 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext41 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler38, obj39, false);
        char[] charArray43 = iOContext41.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser47 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (int) 'a', reader17, objectCodec18, charsToNameCanonicalizer19, charArray43, 15, (-1699771741), false);
        com.fasterxml.jackson.core.io.IOContext iOContext48 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream59 = new com.fasterxml.jackson.core.io.MergedStream(iOContext48, inputStream49, byteArray56, (int) 'a', 32);
        mergedStream59.reset();
        mergedStream59.reset();
        mergedStream59.reset();
        mergedStream59.mark(1807141545);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper65 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, (java.io.InputStream) mergedStream59);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-999243337) + "'", int12 == (-999243337));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(textBuffer15);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer19);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-999243337) + "'", int21 == (-999243337));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ ]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1699753019) + "'", int37 == (-1699753019));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, 10, 1, -69, 1]");
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler14 = null;
        com.fasterxml.jackson.core.JsonToken jsonToken15 = com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT;
        com.fasterxml.jackson.core.io.IOContext iOContext17 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler14, (java.lang.Object) jsonToken15, true);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer18 = iOContext17.constructTextBuffer();
        textBuffer18.ensureNotShared();
        char[] charArray20 = textBuffer18.expandCurrentSegment();
        char[] charArray21 = textBuffer18.contentsAsArray();
        char[] charArray22 = textBuffer18.contentsAsArray();
        // The following exception was thrown during execution in test generation
        try {
            iOContext3.releaseConcatBuffer(charArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-985731025) + "'", int12 == (-985731025));
        org.junit.Assert.assertTrue("'" + jsonToken15 + "' != '" + com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT + "'", jsonToken15.equals(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT));
        org.junit.Assert.assertNotNull(textBuffer18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[]");
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        readerBasedJsonParser13._tokenIncomplete = true;
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        com.fasterxml.jackson.core.JsonParser jsonParser17 = readerBasedJsonParser13.disable(feature16);
        readerBasedJsonParser13.overrideCurrentName("JSON");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler20 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj21 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext23 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler20, obj21, false);
        char[] charArray25 = iOContext23.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext26 = null;
        java.io.InputStream inputStream27 = null;
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream37 = new com.fasterxml.jackson.core.io.MergedStream(iOContext26, inputStream27, byteArray34, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper40 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext23, byteArray34, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext41 = byteSourceJsonBootstrapper40._context;
        java.io.Reader reader43 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec44 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer45 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int47 = charsToNameCanonicalizer45.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString49 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str50 = serializedString49.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str53 = serializedString52.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString55 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str56 = serializedString55.toString();
        char[] charArray58 = new char[] { ' ' };
        int int60 = serializedString55.appendQuoted(charArray58, 1);
        int int62 = serializedString52.appendQuoted(charArray58, (int) (short) 0);
        int int64 = serializedString49.appendUnquoted(charArray58, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser68 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext41, 100, reader43, objectCodec44, charsToNameCanonicalizer45, charArray58, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder69 = new com.fasterxml.jackson.core.util.ByteArrayBuilder();
        byteArrayBuilder69.close();
        byte[] byteArray72 = byteArrayBuilder69.completeAndCoalesce((int) (short) 10);
        byte[] byteArray73 = byteArrayBuilder69.resetAndGetFirstSegment();
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer74 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext41, (java.io.OutputStream) byteArrayBuilder69);
        int int75 = readerBasedJsonParser13.releaseBuffered((java.io.Writer) uTF8Writer74);
        boolean boolean77 = readerBasedJsonParser13.hasTokenId(3);
        java.lang.Object obj78 = readerBasedJsonParser13.getCurrentValue();
        java.lang.String str79 = readerBasedJsonParser13.getText();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-983934175) + "'", int12 == (-983934175));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertNotNull(jsonParser17);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext41);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer45);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-983862301) + "'", int47 == (-983862301));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[ ]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNull(str79);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser jsonParser18 = readerBasedJsonParser13.overrideStdFeatures(100, 1912580703);
        double double20 = readerBasedJsonParser13.getValueAsDouble((double) (byte) 100);
        int int21 = readerBasedJsonParser13.getTokenColumnNr();
        com.fasterxml.jackson.core.JsonToken jsonToken22 = readerBasedJsonParser13.nextValue();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-971284351) + "'", int12 == (-971284351));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(jsonParser18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNull(jsonToken22);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        readerBasedJsonParser13._tokenIncomplete = true;
        java.lang.String str17 = readerBasedJsonParser13.getValueAsString("");
        readerBasedJsonParser13.close();
        com.fasterxml.jackson.core.JsonParser jsonParser21 = readerBasedJsonParser13.overrideStdFeatures((-65), (-1618078477));
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-968696887) + "'", int12 == (-968696887));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(jsonParser21);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.JsonFactory jsonFactory49 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser58 = jsonFactory49.createJsonParser(byteArray55, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser61 = jsonParser58.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        boolean boolean63 = jsonParser58.hasTokenId((int) (byte) -69);
        jsonParser58.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec65 = jsonParser58.getCodec();
        readerBasedJsonParser48.setCurrentValue((java.lang.Object) jsonParser58);
        int int67 = readerBasedJsonParser48._nameStartRow;
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-967115659) + "'", int27 == (-967115659));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser58);
        org.junit.Assert.assertNotNull(jsonParser61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(objectCodec65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        int int13 = charsToNameCanonicalizer10.collisionCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1), reader8, objectCodec9, charsToNameCanonicalizer10);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray15 = iOContext3.allocTokenBuffer();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Trying to call same allocXxx() method second time");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-960359503) + "'", int12 == (-960359503));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int81 = uTF8StreamJsonParser80._nameStartRow;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str83 = uTF8StreamJsonParser80.parseMediumName((-791794604));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1926668007");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-959137645) + "'", int27 == (-959137645));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-229142155) + "'", int69 == (-229142155));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        boolean boolean1 = jsonFactory0.canHandleBinaryNatively();
        com.fasterxml.jackson.core.JsonFactory.Feature feature2 = com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean4 = feature2.enabledIn((int) (short) 10);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory0.disable(feature2);
        com.fasterxml.jackson.core.io.SerializedString serializedString7 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str8 = serializedString7.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str11 = serializedString10.toString();
        char[] charArray13 = new char[] { ' ' };
        int int15 = serializedString10.appendQuoted(charArray13, 1);
        int int17 = serializedString7.appendQuoted(charArray13, (int) (short) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser20 = jsonFactory5.createParser(charArray13, 14, 0);
        boolean boolean21 = jsonFactory5.canUseCharArrays();
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.JsonFactory.Feature feature23 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory25 = jsonFactory22.configure(feature23, true);
        com.fasterxml.jackson.core.JsonFactory jsonFactory26 = jsonFactory5.enable(feature23);
        com.fasterxml.jackson.core.JsonParser.Feature feature27 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_YAML_COMMENTS;
        boolean boolean28 = jsonFactory26.isEnabled(feature27);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES + "'", feature2.equals(com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ ]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(jsonParser20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature23.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory25);
        org.junit.Assert.assertNotNull(jsonFactory26);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_YAML_COMMENTS + "'", feature27.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_YAML_COMMENTS));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        java.lang.String str81 = uTF8StreamJsonParser80.getValueAsString();
        boolean boolean82 = uTF8StreamJsonParser80._tokenIncomplete;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken83 = uTF8StreamJsonParser80._parseNegNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-933766123) + "'", int27 == (-933766123));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1678425992) + "'", int69 == (-1678425992));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        java.lang.String str81 = uTF8StreamJsonParser80.getValueAsString();
        // The following exception was thrown during execution in test generation
        try {
            int int83 = uTF8StreamJsonParser80.nextIntValue(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-931034911) + "'", int27 == (-931034911));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1739593787) + "'", int69 == (-1739593787));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertNull(str81);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.JsonToken jsonToken1 = com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonToken1, true);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer4 = iOContext3.constructTextBuffer();
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version6 = jsonFactory5.version();
        com.fasterxml.jackson.core.JsonParser.Feature feature7 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        boolean boolean8 = feature7.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory9 = jsonFactory5.enable(feature7);
        com.fasterxml.jackson.core.ObjectCodec objectCodec10 = jsonFactory9.getCodec();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = new com.fasterxml.jackson.core.JsonFactory();
        boolean boolean12 = jsonFactory11.canHandleBinaryNatively();
        com.fasterxml.jackson.core.JsonFactory.Feature feature13 = com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean15 = feature13.enabledIn((int) (short) 10);
        com.fasterxml.jackson.core.JsonFactory jsonFactory16 = jsonFactory11.disable(feature13);
        com.fasterxml.jackson.core.io.SerializedString serializedString18 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str19 = serializedString18.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str22 = serializedString21.toString();
        char[] charArray24 = new char[] { ' ' };
        int int26 = serializedString21.appendQuoted(charArray24, 1);
        int int28 = serializedString18.appendQuoted(charArray24, (int) (short) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser31 = jsonFactory16.createParser(charArray24, 14, 0);
        com.fasterxml.jackson.core.JsonParser jsonParser32 = jsonFactory9.createParser(charArray24);
        // The following exception was thrown during execution in test generation
        try {
            iOContext3.releaseConcatBuffer(charArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + jsonToken1 + "' != '" + com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT + "'", jsonToken1.equals(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT));
        org.junit.Assert.assertNotNull(textBuffer4);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature7.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jsonFactory9);
        org.junit.Assert.assertNull(objectCodec10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES + "'", feature13.equals(com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(jsonFactory16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ ]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(jsonParser31);
        org.junit.Assert.assertNotNull(jsonParser32);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = jsonFactory0.enable(feature2);
        com.fasterxml.jackson.core.ObjectCodec objectCodec5 = jsonFactory4.getCodec();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = jsonFactory4._getBufferRecycler();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes7 = jsonFactory4.getCharacterEscapes();
        com.fasterxml.jackson.core.JsonFactory jsonFactory8 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser17 = jsonFactory8.createJsonParser(byteArray14, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser20 = jsonParser17.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        com.fasterxml.jackson.core.JsonParser.Feature feature21 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        com.fasterxml.jackson.core.JsonParser jsonParser22 = jsonParser20.disable(feature21);
        boolean boolean24 = feature21.enabledIn((int) ' ');
        boolean boolean25 = jsonFactory4.isEnabled(feature21);
        boolean boolean26 = jsonFactory4.requiresPropertyOrdering();
        java.io.Writer writer27 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator28 = jsonFactory4.createJsonGenerator(writer27);
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext29 = jsonGenerator28.getOutputContext();
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jsonFactory4);
        org.junit.Assert.assertNull(objectCodec5);
        org.junit.Assert.assertNotNull(bufferRecycler6);
        org.junit.Assert.assertNull(characterEscapes7);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser17);
        org.junit.Assert.assertNotNull(jsonParser20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature21.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertNotNull(jsonParser22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jsonGenerator28);
        org.junit.Assert.assertNotNull(jsonStreamContext29);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.JsonFactory jsonFactory49 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser58 = jsonFactory49.createJsonParser(byteArray55, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser61 = jsonParser58.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        boolean boolean63 = jsonParser58.hasTokenId((int) (byte) -69);
        jsonParser58.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec65 = jsonParser58.getCodec();
        readerBasedJsonParser48.setCurrentValue((java.lang.Object) jsonParser58);
        boolean boolean67 = readerBasedJsonParser48.canReadTypeId();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-898116619) + "'", int27 == (-898116619));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser58);
        org.junit.Assert.assertNotNull(jsonParser61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(objectCodec65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        java.io.Writer writer1 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator2 = jsonFactory0.createJsonGenerator(writer1);
        jsonGenerator2.writeNumber(0L);
        java.lang.Object obj5 = jsonGenerator2.getOutputTarget();
        jsonGenerator2.writeStringField("JSON", "hi!");
        com.fasterxml.jackson.core.PrettyPrinter prettyPrinter9 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonGenerator2.setPrettyPrinter(prettyPrinter9);
        com.fasterxml.jackson.core.io.IOContext iOContext11 = null;
        java.io.InputStream inputStream12 = null;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream22 = new com.fasterxml.jackson.core.io.MergedStream(iOContext11, inputStream12, byteArray19, (int) 'a', 32);
        mergedStream22.reset();
        int int24 = mergedStream22.available();
        int int26 = jsonGenerator2.writeBinary((java.io.InputStream) mergedStream22, 0);
        com.fasterxml.jackson.core.io.SerializedString serializedString27 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext28 = null;
        com.fasterxml.jackson.core.json.DupDetector dupDetector29 = null;
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext33 = new com.fasterxml.jackson.core.json.JsonReadContext(jsonReadContext28, dupDetector29, (int) (byte) 1, (int) 'a', 10);
        int int34 = jsonReadContext33._columnNr;
        boolean boolean35 = jsonReadContext33.inObject();
        boolean boolean36 = jsonReadContext33.inRoot();
        com.fasterxml.jackson.core.JsonFactory jsonFactory37 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.JsonFactory.Feature feature38 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory37.configure(feature38, true);
        com.fasterxml.jackson.core.io.OutputDecorator outputDecorator41 = jsonFactory37.getOutputDecorator();
        jsonReadContext33.setCurrentValue((java.lang.Object) jsonFactory37);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler43 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj44 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext46 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler43, obj44, false);
        char[] charArray48 = iOContext46.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.JsonParser jsonParser51 = jsonFactory37.createParser(charArray48, (-845264650), 1916174403);
        int int53 = serializedString27.appendQuoted(charArray48, 2112821667);
        jsonGenerator2.writeString((com.fasterxml.jackson.core.SerializableString) serializedString27);
        com.fasterxml.jackson.core.io.SerializedString serializedString56 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str57 = serializedString56.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString59 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str60 = serializedString59.toString();
        char[] charArray62 = new char[] { ' ' };
        int int64 = serializedString59.appendQuoted(charArray62, 1);
        int int66 = serializedString56.appendQuoted(charArray62, (int) (short) 0);
        byte[] byteArray67 = serializedString56.asUnquotedUTF8();
        byte[] byteArray68 = serializedString56.asUnquotedUTF8();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler69 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj70 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext72 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler69, obj70, false);
        char[] charArray74 = iOContext72.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext75 = null;
        java.io.InputStream inputStream76 = null;
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream86 = new com.fasterxml.jackson.core.io.MergedStream(iOContext75, inputStream76, byteArray83, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper89 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext72, byteArray83, (int) ' ', 64);
        int int91 = serializedString56.appendQuotedUTF8(byteArray83, 549305411);
        int int93 = serializedString27.appendQuotedUTF8(byteArray83, 682029005);
        org.junit.Assert.assertNotNull(jsonGenerator2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-65) + "'", int24 == (-65));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(serializedString27);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature38.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertNull(outputDecorator41);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(jsonParser51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[ ]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        int int13 = charsToNameCanonicalizer10.collisionCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1), reader8, objectCodec9, charsToNameCanonicalizer10);
        char[] charArray15 = null;
        iOContext3.releaseConcatBuffer(charArray15);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-877560655) + "'", int12 == (-877560655));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser jsonParser18 = readerBasedJsonParser13.overrideStdFeatures(100, 1912580703);
        double double20 = readerBasedJsonParser13.getValueAsDouble((double) (byte) 100);
        java.lang.String str21 = readerBasedJsonParser13.getText();
        char[] charArray22 = readerBasedJsonParser13.getTextCharacters();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-875620057) + "'", int12 == (-875620057));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(jsonParser18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(charArray22);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int81 = uTF8StreamJsonParser80._nameStartRow;
        // The following exception was thrown during execution in test generation
        try {
            long long83 = uTF8StreamJsonParser80.nextLongValue((long) 2094278175);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-874398199) + "'", int27 == (-874398199));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1140879145 + "'", int69 == 1140879145);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        readerBasedJsonParser13._tokenIncomplete = true;
        java.lang.String str17 = readerBasedJsonParser13.getValueAsString("");
        java.lang.Object obj18 = readerBasedJsonParser13.getInputSource();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number19 = readerBasedJsonParser13.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-866348311) + "'", int12 == (-866348311));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        readerBasedJsonParser13._tokenIncomplete = true;
        int int16 = readerBasedJsonParser13.getTokenLineNr();
        int int17 = readerBasedJsonParser13.getValueAsInt();
        // The following exception was thrown during execution in test generation
        try {
            readerBasedJsonParser13._reportInvalidToken("", "JSON");
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unrecognized token '': was expecting JSON? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-858873415) + "'", int12 == (-858873415));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        readerBasedJsonParser13._tokenIncomplete = true;
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        com.fasterxml.jackson.core.JsonParser jsonParser17 = readerBasedJsonParser13.disable(feature16);
        int int18 = readerBasedJsonParser13.getFormatFeatures();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-853482865) + "'", int12 == (-853482865));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertNotNull(jsonParser17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = jsonFactory0.enable(feature2);
        com.fasterxml.jackson.core.ObjectCodec objectCodec5 = jsonFactory4.getCodec();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = jsonFactory4._getBufferRecycler();
        com.fasterxml.jackson.core.JsonParser jsonParser8 = jsonFactory4.createParser("[0]");
        jsonParser8.clearCurrentToken();
        java.lang.String str10 = jsonParser8.getValueAsString();
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jsonFactory4);
        org.junit.Assert.assertNull(objectCodec5);
        org.junit.Assert.assertNotNull(bufferRecycler6);
        org.junit.Assert.assertNotNull(jsonParser8);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        readerBasedJsonParser13._tokenIncomplete = true;
        com.fasterxml.jackson.core.JsonToken jsonToken16 = readerBasedJsonParser13.getCurrentToken();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-851470393) + "'", int12 == (-851470393));
        org.junit.Assert.assertNull(jsonToken16);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        java.io.Writer writer1 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator2 = jsonFactory0.createJsonGenerator(writer1);
        com.fasterxml.jackson.core.io.SerializedString serializedString4 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str5 = serializedString4.toString();
        char[] charArray7 = new char[] { ' ' };
        int int9 = serializedString4.appendQuoted(charArray7, 1);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonGenerator2.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString4);
        com.fasterxml.jackson.core.io.SerializedString serializedString12 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str13 = serializedString12.toString();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter14 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString12);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler15 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj16 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler15, obj16, false);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder19 = new com.fasterxml.jackson.core.util.ByteArrayBuilder(bufferRecycler15);
        int int20 = serializedString12.writeQuotedUTF8((java.io.OutputStream) byteArrayBuilder19);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler21 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj22 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext24 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler21, obj22, false);
        char[] charArray26 = iOContext24.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean27 = iOContext24.isResourceManaged();
        java.io.Reader reader29 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec30 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer31 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int33 = charsToNameCanonicalizer31.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser34 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext24, 3, reader29, objectCodec30, charsToNameCanonicalizer31);
        boolean boolean35 = iOContext24.isResourceManaged();
        byte[] byteArray36 = iOContext24.allocBase64Buffer();
        byteArrayBuilder19.write(byteArray36);
        byte[] byteArray38 = byteArrayBuilder19.getCurrentSegment();
        // The following exception was thrown during execution in test generation
        try {
            int int40 = serializedString4.appendQuotedUTF8(byteArray38, (-32));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonGenerator2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ ]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer31);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-850320409) + "'", int33 == (-850320409));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertNotNull(byteArray38);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        com.fasterxml.jackson.core.JsonLocation jsonLocation81 = uTF8StreamJsonParser80.getCurrentLocation();
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser80._closeInput();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-849314173) + "'", int27 == (-849314173));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1820503149 + "'", int69 == 1820503149);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertNotNull(jsonLocation81);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        readerBasedJsonParser13._tokenIncomplete = true;
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        com.fasterxml.jackson.core.JsonParser jsonParser17 = readerBasedJsonParser13.disable(feature16);
        readerBasedJsonParser13.overrideCurrentName("JSON");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler20 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj21 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext23 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler20, obj21, false);
        char[] charArray25 = iOContext23.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext26 = null;
        java.io.InputStream inputStream27 = null;
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream37 = new com.fasterxml.jackson.core.io.MergedStream(iOContext26, inputStream27, byteArray34, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper40 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext23, byteArray34, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext41 = byteSourceJsonBootstrapper40._context;
        java.io.Reader reader43 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec44 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer45 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int47 = charsToNameCanonicalizer45.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString49 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str50 = serializedString49.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str53 = serializedString52.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString55 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str56 = serializedString55.toString();
        char[] charArray58 = new char[] { ' ' };
        int int60 = serializedString55.appendQuoted(charArray58, 1);
        int int62 = serializedString52.appendQuoted(charArray58, (int) (short) 0);
        int int64 = serializedString49.appendUnquoted(charArray58, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser68 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext41, 100, reader43, objectCodec44, charsToNameCanonicalizer45, charArray58, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder69 = new com.fasterxml.jackson.core.util.ByteArrayBuilder();
        byteArrayBuilder69.close();
        byte[] byteArray72 = byteArrayBuilder69.completeAndCoalesce((int) (short) 10);
        byte[] byteArray73 = byteArrayBuilder69.resetAndGetFirstSegment();
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer74 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext41, (java.io.OutputStream) byteArrayBuilder69);
        int int75 = readerBasedJsonParser13.releaseBuffered((java.io.Writer) uTF8Writer74);
        boolean boolean77 = readerBasedJsonParser13.hasTokenId(3);
        java.lang.Object obj78 = readerBasedJsonParser13.getCurrentValue();
        int int79 = readerBasedJsonParser13.getTextOffset();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-848164189) + "'", int12 == (-848164189));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertNotNull(jsonParser17);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext41);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer45);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-848092315) + "'", int47 == (-848092315));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[ ]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature16.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = readerBasedJsonParser13.enable(feature16);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str22 = serializedString21.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str25 = serializedString24.toString();
        char[] charArray27 = new char[] { ' ' };
        int int29 = serializedString24.appendQuoted(charArray27, 1);
        int int31 = serializedString21.appendQuoted(charArray27, (int) (short) 0);
        byte[] byteArray32 = serializedString21.asUnquotedUTF8();
        boolean boolean33 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString21);
        int int34 = readerBasedJsonParser13.getTokenColumnNr();
        java.lang.Object obj35 = readerBasedJsonParser13.getInputSource();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-835729987) + "'", int12 == (-835729987));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNull(obj35);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder49 = new com.fasterxml.jackson.core.util.ByteArrayBuilder();
        byteArrayBuilder49.close();
        byte[] byteArray52 = byteArrayBuilder49.completeAndCoalesce((int) (short) 10);
        byte[] byteArray53 = byteArrayBuilder49.resetAndGetFirstSegment();
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer54 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext21, (java.io.OutputStream) byteArrayBuilder49);
        uTF8Writer54.close();
        uTF8Writer54.flush();
        uTF8Writer54.close();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Writer writer59 = uTF8Writer54.append('4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-832136287) + "'", int27 == (-832136287));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int82 = uTF8StreamJsonParser80.getValueAsInt(1926668007);
        uTF8StreamJsonParser80._nameStartCol = 2006951265;
        uTF8StreamJsonParser80.overrideCurrentName("hi!");
        // The following exception was thrown during execution in test generation
        try {
            int int87 = uTF8StreamJsonParser80.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-831058177) + "'", int27 == (-831058177));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2095542937 + "'", int69 == 2095542937);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1926668007 + "'", int82 == 1926668007);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonParser9.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        boolean boolean14 = jsonParser9.hasTokenId((int) (byte) -69);
        jsonParser9.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec16 = jsonParser9.getCodec();
        java.lang.Throwable throwable18 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException19 = new com.fasterxml.jackson.core.JsonParseException(jsonParser9, "JSON", throwable18);
        long long21 = jsonParser9.getValueAsLong((long) 2008604367);
        com.fasterxml.jackson.core.JsonLocation jsonLocation22 = jsonParser9.getCurrentLocation();
        jsonParser9.overrideCurrentName("");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertNotNull(jsonParser12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(objectCodec16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2008604367L + "'", long21 == 2008604367L);
        org.junit.Assert.assertNotNull(jsonLocation22);
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int82 = uTF8StreamJsonParser80.getValueAsInt(1926668007);
        uTF8StreamJsonParser80._nameStartCol = 2006951265;
        int int85 = uTF8StreamJsonParser80.getTextLength();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger86 = uTF8StreamJsonParser80.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-808777237) + "'", int27 == (-808777237));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 129792453 + "'", int69 == 129792453);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1926668007 + "'", int82 == 1926668007);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature16.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = readerBasedJsonParser13.enable(feature16);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str22 = serializedString21.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str25 = serializedString24.toString();
        char[] charArray27 = new char[] { ' ' };
        int int29 = serializedString24.appendQuoted(charArray27, 1);
        int int31 = serializedString21.appendQuoted(charArray27, (int) (short) 0);
        byte[] byteArray32 = serializedString21.asUnquotedUTF8();
        boolean boolean33 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString21);
        int int34 = readerBasedJsonParser13.getTextLength();
        boolean boolean35 = readerBasedJsonParser13.isExpectedStartArrayToken();
        java.lang.Object obj36 = readerBasedJsonParser13.getInputSource();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-807124135) + "'", int12 == (-807124135));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj36);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int81 = uTF8StreamJsonParser80.getValueAsInt();
        int int82 = uTF8StreamJsonParser80.getTextOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation83 = uTF8StreamJsonParser80.getCurrentLocation();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str84 = uTF8StreamJsonParser80._parseAposName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-797349271) + "'", int27 == (-797349271));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 493852293 + "'", int69 == 493852293);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(jsonLocation83);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        byteQuadsCanonicalizer65.release();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-796055539) + "'", int27 == (-796055539));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 475091369 + "'", int69 == 475091369);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.JsonFactory jsonFactory49 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser58 = jsonFactory49.createJsonParser(byteArray55, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser61 = jsonParser58.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        boolean boolean63 = jsonParser58.hasTokenId((int) (byte) -69);
        jsonParser58.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec65 = jsonParser58.getCodec();
        readerBasedJsonParser48.setCurrentValue((java.lang.Object) jsonParser58);
        long long67 = readerBasedJsonParser48.getValueAsLong();
        boolean boolean68 = readerBasedJsonParser48.isExpectedStartObjectToken();
        java.lang.Object obj69 = readerBasedJsonParser48.getTypeId();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-790305619) + "'", int27 == (-790305619));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser58);
        org.junit.Assert.assertNotNull(jsonParser61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(objectCodec65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(obj69);
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder49 = new com.fasterxml.jackson.core.util.ByteArrayBuilder();
        byteArrayBuilder49.close();
        byte[] byteArray52 = byteArrayBuilder49.completeAndCoalesce((int) (short) 10);
        byte[] byteArray53 = byteArrayBuilder49.resetAndGetFirstSegment();
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer54 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext21, (java.io.OutputStream) byteArrayBuilder49);
        byteArrayBuilder49.appendThreeBytes(2035485243);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-784411951) + "'", int27 == (-784411951));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[83, 10, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int81 = uTF8StreamJsonParser80.getValueAsInt();
        int int82 = uTF8StreamJsonParser80.getTextOffset();
        boolean boolean83 = uTF8StreamJsonParser80.hasTextCharacters();
        java.lang.String str85 = uTF8StreamJsonParser80.getValueAsString("JSON");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-774205843) + "'", int27 == (-774205843));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 668192782 + "'", int69 == 668192782);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "JSON" + "'", str85, "JSON");
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str2 = serializedString1.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString4 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str5 = serializedString4.toString();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter6 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString4);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler7 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj8 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext10 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler7, obj8, false);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder11 = new com.fasterxml.jackson.core.util.ByteArrayBuilder(bufferRecycler7);
        int int12 = serializedString4.writeQuotedUTF8((java.io.OutputStream) byteArrayBuilder11);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler13 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj14 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext16 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler13, obj14, false);
        char[] charArray18 = iOContext16.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean19 = iOContext16.isResourceManaged();
        java.io.Reader reader21 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec22 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer23 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int25 = charsToNameCanonicalizer23.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser26 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext16, 3, reader21, objectCodec22, charsToNameCanonicalizer23);
        boolean boolean27 = iOContext16.isResourceManaged();
        byte[] byteArray28 = iOContext16.allocBase64Buffer();
        byteArrayBuilder11.write(byteArray28);
        byte[] byteArray30 = byteArrayBuilder11.getCurrentSegment();
        int int31 = serializedString1.writeQuotedUTF8((java.io.OutputStream) byteArrayBuilder11);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-766946569) + "'", int25 == (-766946569));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler1 = null;
        com.fasterxml.jackson.core.JsonToken jsonToken2 = com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT;
        com.fasterxml.jackson.core.io.IOContext iOContext4 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler1, (java.lang.Object) jsonToken2, true);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer5 = iOContext4.constructTextBuffer();
        textBuffer5.ensureNotShared();
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str9 = serializedString8.toString();
        char[] charArray11 = new char[] { ' ' };
        int int13 = serializedString8.appendQuoted(charArray11, 1);
        textBuffer5.resetWithShared(charArray11, (-1), (int) (byte) 100);
        java.lang.String str17 = textBuffer5.contentsAsString();
        char[] charArray18 = com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.HEX_CHARS;
        textBuffer5.resetWithShared(charArray18, (-1794609231), (int) (byte) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser24 = jsonFactory0.createParser(charArray18, 32, (int) (byte) 100);
        com.fasterxml.jackson.core.Version version25 = jsonFactory0.version();
        org.junit.Assert.assertTrue("'" + jsonToken2 + "' != '" + com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT + "'", jsonToken2.equals(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT));
        org.junit.Assert.assertNotNull(textBuffer5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[ ]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "0123456789ABCDEF");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "0123456789ABCDEF");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F]");
        org.junit.Assert.assertNotNull(jsonParser24);
        org.junit.Assert.assertNotNull(version25);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        int int13 = charsToNameCanonicalizer10.collisionCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1), reader8, objectCodec9, charsToNameCanonicalizer10);
        com.fasterxml.jackson.core.JsonToken jsonToken15 = readerBasedJsonParser14.getCurrentToken();
        boolean boolean16 = readerBasedJsonParser14.canReadTypeId();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-760118539) + "'", int12 == (-760118539));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(jsonToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature16.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = readerBasedJsonParser13.enable(feature16);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str22 = serializedString21.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str25 = serializedString24.toString();
        char[] charArray27 = new char[] { ' ' };
        int int29 = serializedString24.appendQuoted(charArray27, 1);
        int int31 = serializedString21.appendQuoted(charArray27, (int) (short) 0);
        byte[] byteArray32 = serializedString21.asUnquotedUTF8();
        boolean boolean33 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString21);
        int int34 = readerBasedJsonParser13.getTokenColumnNr();
        char[] charArray35 = readerBasedJsonParser13.getTextCharacters();
        int int37 = readerBasedJsonParser13.nextIntValue((-911975288));
        int int38 = readerBasedJsonParser13.getTextLength();
        java.io.Reader reader39 = null;
        readerBasedJsonParser13._reader = reader39;
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-758752933) + "'", int12 == (-758752933));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNull(charArray35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-911975288) + "'", int37 == (-911975288));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature16.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = readerBasedJsonParser13.enable(feature16);
        boolean boolean21 = feature16.enabledIn((-2121268351));
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-756093595) + "'", int12 == (-756093595));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        readerBasedJsonParser13._tokenIncomplete = true;
        java.lang.String str17 = readerBasedJsonParser13.getValueAsString("");
        readerBasedJsonParser13.close();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = readerBasedJsonParser13.nextTextValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected end-of-input: was expecting closing quote for a string value? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-751996777) + "'", int12 == (-751996777));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int82 = uTF8StreamJsonParser80.getValueAsInt(1926668007);
        uTF8StreamJsonParser80._nameStartCol = 2006951265;
        com.fasterxml.jackson.core.Base64Variant base64Variant85 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray86 = uTF8StreamJsonParser80._decodeBase64(base64Variant85);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-719725351) + "'", int27 == (-719725351));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-713568586) + "'", int69 == (-713568586));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1926668007 + "'", int82 == 1926668007);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int81 = byteQuadsCanonicalizer65.hashSeed();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-703913071) + "'", int27 == (-703913071));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-416659741) + "'", int69 == (-416659741));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1699744801) + "'", int81 == (-1699744801));
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.JsonToken jsonToken1 = com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonToken1, true);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding4 = iOContext3.getEncoding();
        com.fasterxml.jackson.core.io.SerializedString serializedString5 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext6 = null;
        com.fasterxml.jackson.core.json.DupDetector dupDetector7 = null;
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext11 = new com.fasterxml.jackson.core.json.JsonReadContext(jsonReadContext6, dupDetector7, (int) (byte) 1, (int) 'a', 10);
        int int12 = jsonReadContext11._columnNr;
        boolean boolean13 = jsonReadContext11.inObject();
        boolean boolean14 = jsonReadContext11.inRoot();
        com.fasterxml.jackson.core.JsonFactory jsonFactory15 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.JsonFactory.Feature feature16 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = jsonFactory15.configure(feature16, true);
        com.fasterxml.jackson.core.io.OutputDecorator outputDecorator19 = jsonFactory15.getOutputDecorator();
        jsonReadContext11.setCurrentValue((java.lang.Object) jsonFactory15);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler21 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj22 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext24 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler21, obj22, false);
        char[] charArray26 = iOContext24.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.JsonParser jsonParser29 = jsonFactory15.createParser(charArray26, (-845264650), 1916174403);
        int int31 = serializedString5.appendQuoted(charArray26, 2112821667);
        // The following exception was thrown during execution in test generation
        try {
            iOContext3.releaseNameCopyBuffer(charArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + jsonToken1 + "' != '" + com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT + "'", jsonToken1.equals(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT));
        org.junit.Assert.assertNull(jsonEncoding4);
        org.junit.Assert.assertNotNull(serializedString5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature16.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory18);
        org.junit.Assert.assertNull(outputDecorator19);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(jsonParser29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        int int13 = charsToNameCanonicalizer10.collisionCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1), reader8, objectCodec9, charsToNameCanonicalizer10);
        com.fasterxml.jackson.core.Version version15 = readerBasedJsonParser14.version();
        boolean boolean16 = readerBasedJsonParser14.hasTextCharacters();
        com.fasterxml.jackson.core.ObjectCodec objectCodec17 = null;
        readerBasedJsonParser14.setCodec(objectCodec17);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-691335121) + "'", int12 == (-691335121));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        int int16 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser jsonParser18 = readerBasedJsonParser13.setFeatureMask((-1266758365));
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = readerBasedJsonParser13.getBooleanValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not of boolean type? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-689825767) + "'", int12 == (-689825767));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(jsonParser18);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        java.io.Writer writer1 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator2 = jsonFactory0.createJsonGenerator(writer1);
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = jsonFactory0.setRootValueSeparator("hi!");
        char[] charArray5 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser8 = jsonFactory4.createParser(charArray5, (-1560794899), (-1699744801));
        org.junit.Assert.assertNotNull(jsonGenerator2);
        org.junit.Assert.assertNotNull(jsonFactory4);
        org.junit.Assert.assertNotNull(jsonParser8);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        boolean boolean1 = jsonFactory0.canHandleBinaryNatively();
        com.fasterxml.jackson.core.JsonFactory.Feature feature2 = com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean4 = feature2.enabledIn((int) (short) 10);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory0.disable(feature2);
        com.fasterxml.jackson.core.io.SerializedString serializedString7 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str8 = serializedString7.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str11 = serializedString10.toString();
        char[] charArray13 = new char[] { ' ' };
        int int15 = serializedString10.appendQuoted(charArray13, 1);
        int int17 = serializedString7.appendQuoted(charArray13, (int) (short) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser20 = jsonFactory5.createParser(charArray13, 14, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType21 = jsonParser20.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: [C@5010c490; line: 1, column: 15]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES + "'", feature2.equals(com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ ]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(jsonParser20);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature16.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = readerBasedJsonParser13.enable(feature16);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str22 = serializedString21.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str25 = serializedString24.toString();
        char[] charArray27 = new char[] { ' ' };
        int int29 = serializedString24.appendQuoted(charArray27, 1);
        int int31 = serializedString21.appendQuoted(charArray27, (int) (short) 0);
        byte[] byteArray32 = serializedString21.asUnquotedUTF8();
        boolean boolean33 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString21);
        int int34 = readerBasedJsonParser13.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation35 = readerBasedJsonParser13.getCurrentLocation();
        readerBasedJsonParser13._releaseBuffers();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-682638367) + "'", int12 == (-682638367));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(jsonLocation35);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int81 = uTF8StreamJsonParser80.getValueAsInt();
        int int82 = uTF8StreamJsonParser80.getTextOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str83 = uTF8StreamJsonParser80._finishAndReturnString();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-679619659) + "'", int27 == (-679619659));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-261013877) + "'", int69 == (-261013877));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory2 = jsonFactory0.setInputDecorator(inputDecorator1);
        com.fasterxml.jackson.core.ObjectCodec objectCodec3 = jsonFactory2.getCodec();
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = new com.fasterxml.jackson.core.JsonFactory();
        boolean boolean5 = jsonFactory4.canHandleBinaryNatively();
        com.fasterxml.jackson.core.JsonFactory.Feature feature6 = com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean8 = feature6.enabledIn((int) (short) 10);
        com.fasterxml.jackson.core.JsonFactory jsonFactory9 = jsonFactory4.disable(feature6);
        com.fasterxml.jackson.core.io.SerializedString serializedString11 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str12 = serializedString11.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString14 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str15 = serializedString14.toString();
        char[] charArray17 = new char[] { ' ' };
        int int19 = serializedString14.appendQuoted(charArray17, 1);
        int int21 = serializedString11.appendQuoted(charArray17, (int) (short) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser24 = jsonFactory9.createParser(charArray17, 14, 0);
        com.fasterxml.jackson.core.JsonParser jsonParser25 = jsonFactory2.createParser(charArray17);
        java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature> wildcardClass26 = jsonFactory2.getFormatWriteFeatureType();
        org.junit.Assert.assertNotNull(jsonFactory2);
        org.junit.Assert.assertNull(objectCodec3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES + "'", feature6.equals(com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(jsonFactory9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ ]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(jsonParser24);
        org.junit.Assert.assertNotNull(jsonParser25);
        org.junit.Assert.assertNull(wildcardClass26);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser80._reportInvalidToken("ARRAY");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-671354149) + "'", int27 == (-671354149));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1999785235) + "'", int69 == (-1999785235));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        int int13 = charsToNameCanonicalizer10.collisionCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1), reader8, objectCodec9, charsToNameCanonicalizer10);
        com.fasterxml.jackson.core.Version version15 = readerBasedJsonParser14.version();
        boolean boolean16 = readerBasedJsonParser14.hasTextCharacters();
        java.lang.String str17 = readerBasedJsonParser14.nextTextValue();
        boolean boolean19 = readerBasedJsonParser14.hasTokenId((-968696887));
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-658057459) + "'", int12 == (-658057459));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        int int13 = charsToNameCanonicalizer10.collisionCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1), reader8, objectCodec9, charsToNameCanonicalizer10);
        com.fasterxml.jackson.core.Version version15 = readerBasedJsonParser14.version();
        boolean boolean16 = readerBasedJsonParser14.hasTextCharacters();
        com.fasterxml.jackson.core.JsonParser.Feature feature17 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        boolean boolean18 = feature17.enabledByDefault();
        boolean boolean19 = readerBasedJsonParser14.isEnabled(feature17);
        java.lang.String str20 = readerBasedJsonParser14.nextFieldName();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-650366941) + "'", int12 == (-650366941));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature17.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int81 = uTF8StreamJsonParser80.getValueAsInt();
        int int82 = uTF8StreamJsonParser80.getTextOffset();
        uTF8StreamJsonParser80.overrideCurrentName("[0]");
        // The following exception was thrown during execution in test generation
        try {
            char char85 = uTF8StreamJsonParser80._decodeEscaped();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-648713839) + "'", int27 == (-648713839));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1818127322) + "'", int69 == (-1818127322));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int82 = uTF8StreamJsonParser80.getValueAsInt(1926668007);
        boolean boolean83 = uTF8StreamJsonParser80._tokenIncomplete;
        int int85 = uTF8StreamJsonParser80._decodeCharForError(0);
        int[] intArray86 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser._icLatin1;
        uTF8StreamJsonParser80._quadBuffer = intArray86;
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-637645243) + "'", int27 == (-637645243));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1450315111) + "'", int69 == (-1450315111));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1926668007 + "'", int82 == 1926668007);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        boolean boolean14 = iOContext3.isResourceManaged();
        java.io.Reader reader16 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec17 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer18 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int20 = charsToNameCanonicalizer18.calcHash("hi!");
        char[] charArray21 = null;
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser25 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-829405075), reader16, objectCodec17, charsToNameCanonicalizer18, charArray21, 1200101271, (-1132497733), true);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-626576647) + "'", int12 == (-626576647));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer18);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-626576647) + "'", int20 == (-626576647));
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        readerBasedJsonParser13._tokenIncomplete = true;
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        com.fasterxml.jackson.core.JsonParser jsonParser17 = readerBasedJsonParser13.disable(feature16);
        readerBasedJsonParser13.overrideCurrentName("JSON");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler20 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj21 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext23 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler20, obj21, false);
        char[] charArray25 = iOContext23.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext26 = null;
        java.io.InputStream inputStream27 = null;
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream37 = new com.fasterxml.jackson.core.io.MergedStream(iOContext26, inputStream27, byteArray34, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper40 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext23, byteArray34, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext41 = byteSourceJsonBootstrapper40._context;
        java.io.Reader reader43 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec44 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer45 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int47 = charsToNameCanonicalizer45.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString49 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str50 = serializedString49.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str53 = serializedString52.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString55 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str56 = serializedString55.toString();
        char[] charArray58 = new char[] { ' ' };
        int int60 = serializedString55.appendQuoted(charArray58, 1);
        int int62 = serializedString52.appendQuoted(charArray58, (int) (short) 0);
        int int64 = serializedString49.appendUnquoted(charArray58, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser68 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext41, 100, reader43, objectCodec44, charsToNameCanonicalizer45, charArray58, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder69 = new com.fasterxml.jackson.core.util.ByteArrayBuilder();
        byteArrayBuilder69.close();
        byte[] byteArray72 = byteArrayBuilder69.completeAndCoalesce((int) (short) 10);
        byte[] byteArray73 = byteArrayBuilder69.resetAndGetFirstSegment();
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer74 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext41, (java.io.OutputStream) byteArrayBuilder69);
        int int75 = readerBasedJsonParser13.releaseBuffered((java.io.Writer) uTF8Writer74);
        boolean boolean77 = readerBasedJsonParser13.hasTokenId(3);
        java.lang.String str78 = readerBasedJsonParser13.getCurrentName();
        boolean boolean80 = readerBasedJsonParser13.getValueAsBoolean(false);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-625067293) + "'", int12 == (-625067293));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertNotNull(jsonParser17);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext41);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer45);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-624995419) + "'", int47 == (-624995419));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[ ]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "JSON" + "'", str78, "JSON");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonParser9.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        boolean boolean14 = jsonParser9.hasTokenId((int) (byte) -69);
        jsonParser9.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec16 = jsonParser9.getCodec();
        java.lang.Throwable throwable18 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException19 = new com.fasterxml.jackson.core.JsonParseException(jsonParser9, "JSON", throwable18);
        com.fasterxml.jackson.core.JsonFactory jsonFactory20 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser29 = jsonFactory20.createJsonParser(byteArray26, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser32 = jsonParser29.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        boolean boolean34 = jsonParser29.hasTokenId((int) (byte) -69);
        jsonParser29.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec36 = jsonParser29.getCodec();
        java.lang.Throwable throwable38 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException39 = new com.fasterxml.jackson.core.JsonParseException(jsonParser29, "JSON", throwable38);
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory40.createJsonParser(byteArray46, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser52 = jsonParser49.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        boolean boolean54 = jsonParser49.hasTokenId((int) (byte) -69);
        jsonParser49.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec56 = jsonParser49.getCodec();
        java.lang.Throwable throwable58 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException59 = new com.fasterxml.jackson.core.JsonParseException(jsonParser49, "JSON", throwable58);
        jsonParseException39.addSuppressed((java.lang.Throwable) jsonParseException59);
        jsonParseException19.addSuppressed((java.lang.Throwable) jsonParseException59);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertNotNull(jsonParser12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(objectCodec16);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser29);
        org.junit.Assert.assertNotNull(jsonParser32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(objectCodec36);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonParser52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(objectCodec56);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        java.lang.String str81 = uTF8StreamJsonParser80.getValueAsString();
        com.fasterxml.jackson.core.ObjectCodec objectCodec82 = uTF8StreamJsonParser80.getCodec();
        // The following exception was thrown during execution in test generation
        try {
            char char83 = uTF8StreamJsonParser80._decodeEscaped();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-610548745) + "'", int27 == (-610548745));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1332785787) + "'", int69 == (-1332785787));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(objectCodec82);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int82 = uTF8StreamJsonParser80.getValueAsInt(1926668007);
        boolean boolean83 = uTF8StreamJsonParser80._tokenIncomplete;
        byte[] byteArray84 = uTF8StreamJsonParser80._inputBuffer;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken86 = uTF8StreamJsonParser80._parsePosNumber((-32));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-609183139) + "'", int27 == (-609183139));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1356199216 + "'", int69 == 1356199216);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1926668007 + "'", int82 == 1926668007);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[10, 10, -1, 1]");
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int81 = uTF8StreamJsonParser80.getValueAsInt();
        uTF8StreamJsonParser80._nameStartCol = (short) 0;
        java.io.InputStream inputStream84 = uTF8StreamJsonParser80._inputStream;
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-607386289) + "'", int27 == (-607386289));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1381854173 + "'", int69 == 1381854173);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(inputStream84);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        com.fasterxml.jackson.core.JsonParser jsonParser83 = uTF8StreamJsonParser80.overrideStdFeatures((-845264650), (-1552385641));
        boolean boolean84 = jsonParser83.hasTextCharacters();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-589705285) + "'", int27 == (-589705285));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1119860361 + "'", int69 == 1119860361);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertNotNull(jsonParser83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.JsonFactory.Feature feature1 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = jsonFactory0.configure(feature1, true);
        com.fasterxml.jackson.core.io.SerializedString serializedString5 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str6 = serializedString5.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str9 = serializedString8.toString();
        char[] charArray11 = new char[] { ' ' };
        int int13 = serializedString8.appendQuoted(charArray11, 1);
        int int15 = serializedString5.appendQuoted(charArray11, (int) (short) 0);
        byte[] byteArray16 = serializedString5.asUnquotedUTF8();
        byte[] byteArray17 = serializedString5.asUnquotedUTF8();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler18 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj19 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext21 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler18, obj19, false);
        char[] charArray23 = iOContext21.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext24 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream35 = new com.fasterxml.jackson.core.io.MergedStream(iOContext24, inputStream25, byteArray32, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper38 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext21, byteArray32, (int) ' ', 64);
        int int40 = serializedString5.appendQuotedUTF8(byteArray32, 549305411);
        com.fasterxml.jackson.core.JsonParser jsonParser43 = jsonFactory0.createParser(byteArray32, 15, (-1023608623));
        com.fasterxml.jackson.core.JsonFactory jsonFactory44 = new com.fasterxml.jackson.core.JsonFactory();
        java.io.Writer writer45 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator46 = jsonFactory44.createJsonGenerator(writer45);
        com.fasterxml.jackson.core.JsonFactory jsonFactory48 = jsonFactory44.setRootValueSeparator("hi!");
        com.fasterxml.jackson.core.JsonFactory jsonFactory49 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version50 = jsonFactory49.version();
        com.fasterxml.jackson.core.JsonParser.Feature feature51 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        boolean boolean52 = feature51.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory53 = jsonFactory49.enable(feature51);
        com.fasterxml.jackson.core.JsonFactory jsonFactory54 = jsonFactory44.disable(feature51);
        boolean boolean55 = jsonFactory0.isEnabled(feature51);
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature1.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[ ]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(jsonParser43);
        org.junit.Assert.assertNotNull(jsonGenerator46);
        org.junit.Assert.assertNotNull(jsonFactory48);
        org.junit.Assert.assertNotNull(version50);
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature51.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jsonFactory53);
        org.junit.Assert.assertNotNull(jsonFactory54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = jsonFactory0.enable(feature2);
        com.fasterxml.jackson.core.ObjectCodec objectCodec5 = jsonFactory4.getCodec();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler6 = jsonFactory4._getBufferRecycler();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes7 = jsonFactory4.getCharacterEscapes();
        com.fasterxml.jackson.core.JsonFactory jsonFactory8 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser17 = jsonFactory8.createJsonParser(byteArray14, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser20 = jsonParser17.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        com.fasterxml.jackson.core.JsonParser.Feature feature21 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        com.fasterxml.jackson.core.JsonParser jsonParser22 = jsonParser20.disable(feature21);
        boolean boolean24 = feature21.enabledIn((int) ' ');
        boolean boolean25 = jsonFactory4.isEnabled(feature21);
        boolean boolean26 = jsonFactory4.requiresPropertyOrdering();
        java.io.Writer writer27 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator28 = jsonFactory4.createJsonGenerator(writer27);
        com.fasterxml.jackson.core.JsonFactory jsonFactory29 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version30 = jsonFactory29.version();
        com.fasterxml.jackson.core.JsonParser.Feature feature31 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        boolean boolean32 = feature31.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory33 = jsonFactory29.enable(feature31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec34 = jsonFactory33.getCodec();
        boolean boolean35 = jsonFactory33.canUseCharArrays();
        com.fasterxml.jackson.core.io.OutputDecorator outputDecorator36 = jsonFactory33.getOutputDecorator();
        com.fasterxml.jackson.core.JsonFactory.Feature feature37 = com.fasterxml.jackson.core.JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = jsonFactory33.disable(feature37);
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory4.configure(feature37, true);
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jsonFactory4);
        org.junit.Assert.assertNull(objectCodec5);
        org.junit.Assert.assertNotNull(bufferRecycler6);
        org.junit.Assert.assertNull(characterEscapes7);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser17);
        org.junit.Assert.assertNotNull(jsonParser20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature21.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertNotNull(jsonParser22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jsonGenerator28);
        org.junit.Assert.assertNotNull(version30);
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature31.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jsonFactory33);
        org.junit.Assert.assertNull(objectCodec34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(outputDecorator36);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW + "'", feature37.equals(com.fasterxml.jackson.core.JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW));
        org.junit.Assert.assertNotNull(jsonFactory38);
        org.junit.Assert.assertNotNull(jsonFactory40);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext0 = null;
        com.fasterxml.jackson.core.json.DupDetector dupDetector1 = null;
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext5 = new com.fasterxml.jackson.core.json.JsonReadContext(jsonReadContext0, dupDetector1, (int) (byte) 1, (int) 'a', 10);
        int int6 = jsonReadContext5._columnNr;
        boolean boolean7 = jsonReadContext5.inObject();
        boolean boolean8 = jsonReadContext5.inRoot();
        com.fasterxml.jackson.core.JsonFactory jsonFactory9 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.JsonFactory.Feature feature10 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory12 = jsonFactory9.configure(feature10, true);
        com.fasterxml.jackson.core.io.OutputDecorator outputDecorator13 = jsonFactory9.getOutputDecorator();
        jsonReadContext5.setCurrentValue((java.lang.Object) jsonFactory9);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler15 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj16 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler15, obj16, false);
        char[] charArray20 = iOContext18.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.JsonParser jsonParser23 = jsonFactory9.createParser(charArray20, (-845264650), 1916174403);
        com.fasterxml.jackson.core.io.IOContext iOContext24 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream35 = new com.fasterxml.jackson.core.io.MergedStream(iOContext24, inputStream25, byteArray32, (int) 'a', 32);
        mergedStream35.reset();
        mergedStream35.reset();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonFactory9.createJsonParser((java.io.InputStream) mergedStream35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature10.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory12);
        org.junit.Assert.assertNull(outputDecorator13);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(jsonParser23);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, 10, 1, -69, 1]");
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.JsonParser.Feature feature2 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        boolean boolean3 = feature2.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = jsonFactory0.enable(feature2);
        com.fasterxml.jackson.core.ObjectCodec objectCodec5 = jsonFactory4.getCodec();
        com.fasterxml.jackson.core.JsonFactory jsonFactory6 = new com.fasterxml.jackson.core.JsonFactory();
        boolean boolean7 = jsonFactory6.canHandleBinaryNatively();
        com.fasterxml.jackson.core.JsonFactory.Feature feature8 = com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean10 = feature8.enabledIn((int) (short) 10);
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = jsonFactory6.disable(feature8);
        com.fasterxml.jackson.core.io.SerializedString serializedString13 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str14 = serializedString13.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString16 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str17 = serializedString16.toString();
        char[] charArray19 = new char[] { ' ' };
        int int21 = serializedString16.appendQuoted(charArray19, 1);
        int int23 = serializedString13.appendQuoted(charArray19, (int) (short) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser26 = jsonFactory11.createParser(charArray19, 14, 0);
        com.fasterxml.jackson.core.JsonParser jsonParser27 = jsonFactory4.createParser(charArray19);
        com.fasterxml.jackson.core.Version version28 = jsonParser27.version();
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature2.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jsonFactory4);
        org.junit.Assert.assertNull(objectCodec5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES + "'", feature8.equals(com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(jsonFactory11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[ ]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(jsonParser26);
        org.junit.Assert.assertNotNull(jsonParser27);
        org.junit.Assert.assertNotNull(version28);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int82 = uTF8StreamJsonParser80.getValueAsInt(1926668007);
        com.fasterxml.jackson.core.io.SerializedString serializedString84 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str85 = serializedString84.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString87 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str88 = serializedString87.toString();
        char[] charArray90 = new char[] { ' ' };
        int int92 = serializedString87.appendQuoted(charArray90, 1);
        int int94 = serializedString84.appendQuoted(charArray90, (int) (short) 0);
        byte[] byteArray95 = serializedString84.asUnquotedUTF8();
        uTF8StreamJsonParser80._inputBuffer = byteArray95;
        com.fasterxml.jackson.core.Base64Variant base64Variant97 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray98 = uTF8StreamJsonParser80._decodeBase64(base64Variant97);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected end-of-input in null? at [Source: UNKNOWN; line: 1, column: -2098699914]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-561315055) + "'", int27 == (-561315055));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2097198817 + "'", int69 == 2097198817);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1926668007 + "'", int82 == 1926668007);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(charArray90);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray90), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray90), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray90), "[ ]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[]");
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        int int13 = charsToNameCanonicalizer10.collisionCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1), reader8, objectCodec9, charsToNameCanonicalizer10);
        com.fasterxml.jackson.core.Version version15 = readerBasedJsonParser14.version();
        boolean boolean16 = readerBasedJsonParser14.hasTextCharacters();
        com.fasterxml.jackson.core.JsonParser jsonParser17 = readerBasedJsonParser14.skipChildren();
        com.fasterxml.jackson.core.JsonToken jsonToken18 = jsonParser17.getLastClearedToken();
        long long19 = jsonParser17.getValueAsLong();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-553337041) + "'", int12 == (-553337041));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jsonParser17);
        org.junit.Assert.assertNull(jsonToken18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        int int13 = charsToNameCanonicalizer10.collisionCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1), reader8, objectCodec9, charsToNameCanonicalizer10);
        com.fasterxml.jackson.core.JsonLocation jsonLocation15 = readerBasedJsonParser14.getTokenLocation();
        boolean boolean16 = readerBasedJsonParser14.isExpectedStartArrayToken();
        java.lang.String str17 = readerBasedJsonParser14.getText();
        readerBasedJsonParser14.close();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-542987185) + "'", int12 == (-542987185));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(jsonLocation15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int81 = uTF8StreamJsonParser80.getValueAsInt();
        int int82 = uTF8StreamJsonParser80.getTextOffset();
        uTF8StreamJsonParser80.overrideCurrentName("[0]");
        int[] intArray85 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser._icLatin1;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str90 = uTF8StreamJsonParser80.parseEscapedName(intArray85, 56320, 16, (-1699744801), (-796055539));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1699744801");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-541405957) + "'", int27 == (-541405957));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1869727431 + "'", int69 == 1869727431);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        com.fasterxml.jackson.core.JsonLocation jsonLocation81 = uTF8StreamJsonParser80.getCurrentLocation();
        byte[] byteArray82 = uTF8StreamJsonParser80._inputBuffer;
        java.lang.Object obj83 = uTF8StreamJsonParser80.getEmbeddedObject();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-529331125) + "'", int27 == (-529331125));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 447615572 + "'", int69 == 447615572);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertNotNull(jsonLocation81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 10, -1, 1]");
        org.junit.Assert.assertNull(obj83);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        boolean boolean1 = jsonFactory0.canHandleBinaryNatively();
        com.fasterxml.jackson.core.Version version2 = jsonFactory0.version();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler3 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj4 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler3, obj4, false);
        char[] charArray8 = iOContext6.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream20 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray17, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper23 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext6, byteArray17, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext24 = byteSourceJsonBootstrapper23._context;
        java.io.Reader reader26 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec27 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer28 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int30 = charsToNameCanonicalizer28.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString38 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str39 = serializedString38.toString();
        char[] charArray41 = new char[] { ' ' };
        int int43 = serializedString38.appendQuoted(charArray41, 1);
        int int45 = serializedString35.appendQuoted(charArray41, (int) (short) 0);
        int int47 = serializedString32.appendUnquoted(charArray41, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser51 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext24, 100, reader26, objectCodec27, charsToNameCanonicalizer28, charArray41, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder52 = new com.fasterxml.jackson.core.util.ByteArrayBuilder();
        byteArrayBuilder52.close();
        byte[] byteArray55 = byteArrayBuilder52.completeAndCoalesce((int) (short) 10);
        byte[] byteArray56 = byteArrayBuilder52.resetAndGetFirstSegment();
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer57 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext24, (java.io.OutputStream) byteArrayBuilder52);
        uTF8Writer57.close();
        uTF8Writer57.flush();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator60 = jsonFactory0.createGenerator((java.io.Writer) uTF8Writer57);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(version2);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext24);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-520275001) + "'", int30 == (-520275001));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[ ]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(jsonGenerator60);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        int int13 = charsToNameCanonicalizer10.collisionCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1), reader8, objectCodec9, charsToNameCanonicalizer10);
        com.fasterxml.jackson.core.Version version15 = readerBasedJsonParser14.version();
        boolean boolean16 = readerBasedJsonParser14.hasTextCharacters();
        java.lang.String str17 = readerBasedJsonParser14.nextTextValue();
        java.lang.Boolean boolean18 = readerBasedJsonParser14.nextBooleanValue();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-503815855) + "'", int12 == (-503815855));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(boolean18);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder49 = new com.fasterxml.jackson.core.util.ByteArrayBuilder();
        byteArrayBuilder49.close();
        byte[] byteArray52 = byteArrayBuilder49.completeAndCoalesce((int) (short) 10);
        byte[] byteArray53 = byteArrayBuilder49.resetAndGetFirstSegment();
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer54 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext21, (java.io.OutputStream) byteArrayBuilder49);
        java.io.Writer writer56 = uTF8Writer54.append(' ');
        // The following exception was thrown during execution in test generation
        try {
            java.io.Writer writer60 = uTF8Writer54.append((java.lang.CharSequence) "ARRAY", (-938150437), (-1575816565));
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -938150437");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-502234627) + "'", int27 == (-502234627));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(writer56);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler1 = null;
        com.fasterxml.jackson.core.JsonToken jsonToken2 = com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT;
        com.fasterxml.jackson.core.io.IOContext iOContext4 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler1, (java.lang.Object) jsonToken2, true);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer5 = iOContext4.constructTextBuffer();
        textBuffer5.ensureNotShared();
        com.fasterxml.jackson.core.io.SerializedString serializedString8 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str9 = serializedString8.toString();
        char[] charArray11 = new char[] { ' ' };
        int int13 = serializedString8.appendQuoted(charArray11, 1);
        textBuffer5.resetWithShared(charArray11, (-1), (int) (byte) 100);
        java.lang.String str17 = textBuffer5.contentsAsString();
        char[] charArray18 = com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.HEX_CHARS;
        textBuffer5.resetWithShared(charArray18, (-1794609231), (int) (byte) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser24 = jsonFactory0.createParser(charArray18, 32, (int) (byte) 100);
        com.fasterxml.jackson.core.JsonFactory jsonFactory25 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory25.createJsonParser(byteArray31, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser37 = jsonParser34.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        com.fasterxml.jackson.core.JsonParser.Feature feature38 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        com.fasterxml.jackson.core.JsonParser jsonParser39 = jsonParser37.disable(feature38);
        boolean boolean41 = feature38.enabledIn((int) ' ');
        boolean boolean42 = jsonFactory0.isEnabled(feature38);
        org.junit.Assert.assertTrue("'" + jsonToken2 + "' != '" + com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT + "'", jsonToken2.equals(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT));
        org.junit.Assert.assertNotNull(textBuffer5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[ ]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "0123456789ABCDEF");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "0123456789ABCDEF");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F]");
        org.junit.Assert.assertNotNull(jsonParser24);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertNotNull(jsonParser37);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature38.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertNotNull(jsonParser39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        int int13 = charsToNameCanonicalizer10.collisionCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1), reader8, objectCodec9, charsToNameCanonicalizer10);
        int int15 = readerBasedJsonParser14._nameStartCol;
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-473916271) + "'", int12 == (-473916271));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        int int16 = readerBasedJsonParser13.getTextOffset();
        java.lang.String str17 = readerBasedJsonParser13.nextTextValue();
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = new com.fasterxml.jackson.core.JsonFactory();
        java.io.Writer writer19 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator20 = jsonFactory18.createJsonGenerator(writer19);
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = jsonFactory18.setRootValueSeparator("hi!");
        com.fasterxml.jackson.core.JsonParser.Feature feature23 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        boolean boolean24 = feature23.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory26 = jsonFactory18.configure(feature23, true);
        com.fasterxml.jackson.core.JsonParser jsonParser27 = readerBasedJsonParser13.disable(feature23);
        readerBasedJsonParser13.close();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-472981909) + "'", int12 == (-472981909));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(jsonGenerator20);
        org.junit.Assert.assertNotNull(jsonFactory22);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature23.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jsonFactory26);
        org.junit.Assert.assertNotNull(jsonParser27);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        int int13 = charsToNameCanonicalizer10.collisionCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1), reader8, objectCodec9, charsToNameCanonicalizer10);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler15 = null;
        com.fasterxml.jackson.core.JsonToken jsonToken16 = com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT;
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler15, (java.lang.Object) jsonToken16, true);
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding19 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE;
        iOContext18.setEncoding(jsonEncoding19);
        iOContext3.setEncoding(jsonEncoding19);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-471113185) + "'", int12 == (-471113185));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken16 + "' != '" + com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT + "'", jsonToken16.equals(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT));
        org.junit.Assert.assertTrue("'" + jsonEncoding19 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF16_BE + "'", jsonEncoding19.equals(com.fasterxml.jackson.core.JsonEncoding.UTF16_BE));
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser jsonParser18 = readerBasedJsonParser13.overrideStdFeatures(100, 1912580703);
        double double20 = readerBasedJsonParser13.getValueAsDouble((double) (byte) 100);
        java.io.Reader reader21 = readerBasedJsonParser13._reader;
        java.io.Reader reader22 = null;
        readerBasedJsonParser13._reader = reader22;
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-462272683) + "'", int12 == (-462272683));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(jsonParser18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNull(reader21);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        readerBasedJsonParser13._tokenIncomplete = true;
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        com.fasterxml.jackson.core.JsonParser jsonParser17 = readerBasedJsonParser13.disable(feature16);
        readerBasedJsonParser13.overrideCurrentName("JSON");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler20 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj21 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext23 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler20, obj21, false);
        char[] charArray25 = iOContext23.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext26 = null;
        java.io.InputStream inputStream27 = null;
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream37 = new com.fasterxml.jackson.core.io.MergedStream(iOContext26, inputStream27, byteArray34, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper40 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext23, byteArray34, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext41 = byteSourceJsonBootstrapper40._context;
        java.io.Reader reader43 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec44 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer45 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int47 = charsToNameCanonicalizer45.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString49 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str50 = serializedString49.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str53 = serializedString52.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString55 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str56 = serializedString55.toString();
        char[] charArray58 = new char[] { ' ' };
        int int60 = serializedString55.appendQuoted(charArray58, 1);
        int int62 = serializedString52.appendQuoted(charArray58, (int) (short) 0);
        int int64 = serializedString49.appendUnquoted(charArray58, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser68 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext41, 100, reader43, objectCodec44, charsToNameCanonicalizer45, charArray58, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder69 = new com.fasterxml.jackson.core.util.ByteArrayBuilder();
        byteArrayBuilder69.close();
        byte[] byteArray72 = byteArrayBuilder69.completeAndCoalesce((int) (short) 10);
        byte[] byteArray73 = byteArrayBuilder69.resetAndGetFirstSegment();
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer74 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext41, (java.io.OutputStream) byteArrayBuilder69);
        int int75 = readerBasedJsonParser13.releaseBuffered((java.io.Writer) uTF8Writer74);
        readerBasedJsonParser13.close();
        readerBasedJsonParser13._closeInput();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType78 = readerBasedJsonParser13.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-456379015) + "'", int12 == (-456379015));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertNotNull(jsonParser17);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext41);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer45);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-456235267) + "'", int47 == (-456235267));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[ ]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        readerBasedJsonParser13._tokenIncomplete = true;
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        com.fasterxml.jackson.core.JsonParser jsonParser17 = readerBasedJsonParser13.disable(feature16);
        readerBasedJsonParser13.overrideCurrentName("JSON");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler20 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj21 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext23 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler20, obj21, false);
        char[] charArray25 = iOContext23.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext26 = null;
        java.io.InputStream inputStream27 = null;
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream37 = new com.fasterxml.jackson.core.io.MergedStream(iOContext26, inputStream27, byteArray34, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper40 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext23, byteArray34, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext41 = byteSourceJsonBootstrapper40._context;
        java.io.Reader reader43 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec44 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer45 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int47 = charsToNameCanonicalizer45.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString49 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str50 = serializedString49.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str53 = serializedString52.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString55 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str56 = serializedString55.toString();
        char[] charArray58 = new char[] { ' ' };
        int int60 = serializedString55.appendQuoted(charArray58, 1);
        int int62 = serializedString52.appendQuoted(charArray58, (int) (short) 0);
        int int64 = serializedString49.appendUnquoted(charArray58, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser68 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext41, 100, reader43, objectCodec44, charsToNameCanonicalizer45, charArray58, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder69 = new com.fasterxml.jackson.core.util.ByteArrayBuilder();
        byteArrayBuilder69.close();
        byte[] byteArray72 = byteArrayBuilder69.completeAndCoalesce((int) (short) 10);
        byte[] byteArray73 = byteArrayBuilder69.resetAndGetFirstSegment();
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer74 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext41, (java.io.OutputStream) byteArrayBuilder69);
        int int75 = readerBasedJsonParser13.releaseBuffered((java.io.Writer) uTF8Writer74);
        boolean boolean77 = readerBasedJsonParser13.hasTokenId(3);
        boolean boolean78 = readerBasedJsonParser13.hasCurrentToken();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-454582165) + "'", int12 == (-454582165));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertNotNull(jsonParser17);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext41);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer45);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-454510291) + "'", int47 == (-454510291));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[ ]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        int int13 = charsToNameCanonicalizer10.collisionCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1), reader8, objectCodec9, charsToNameCanonicalizer10);
        com.fasterxml.jackson.core.Version version15 = readerBasedJsonParser14.version();
        boolean boolean16 = readerBasedJsonParser14.hasTextCharacters();
        com.fasterxml.jackson.core.JsonParser.Feature feature17 = com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        boolean boolean18 = feature17.enabledByDefault();
        boolean boolean19 = readerBasedJsonParser14.isEnabled(feature17);
        java.lang.Class<?> wildcardClass20 = readerBasedJsonParser14.getClass();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-442363585) + "'", int12 == (-442363585));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION + "'", feature17.equals(com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        boolean boolean1 = jsonFactory0.canHandleBinaryNatively();
        com.fasterxml.jackson.core.JsonFactory.Feature feature2 = com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean4 = feature2.enabledIn((int) (short) 10);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory0.disable(feature2);
        com.fasterxml.jackson.core.io.SerializedString serializedString7 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str8 = serializedString7.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString10 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str11 = serializedString10.toString();
        char[] charArray13 = new char[] { ' ' };
        int int15 = serializedString10.appendQuoted(charArray13, 1);
        int int17 = serializedString7.appendQuoted(charArray13, (int) (short) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser20 = jsonFactory5.createParser(charArray13, 14, 0);
        boolean boolean21 = jsonFactory5.canUseCharArrays();
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.JsonFactory.Feature feature23 = com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory25 = jsonFactory22.configure(feature23, true);
        com.fasterxml.jackson.core.JsonFactory jsonFactory26 = jsonFactory5.enable(feature23);
        java.io.File file27 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding28 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonGenerator jsonGenerator29 = jsonFactory5.createGenerator(file27, jsonEncoding28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES + "'", feature2.equals(com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ ]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(jsonParser20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES + "'", feature23.equals(com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory25);
        org.junit.Assert.assertNotNull(jsonFactory26);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int81 = uTF8StreamJsonParser80._nameStartRow;
        com.fasterxml.jackson.core.ObjectCodec objectCodec82 = null;
        uTF8StreamJsonParser80._objectCodec = objectCodec82;
        com.fasterxml.jackson.core.JsonToken jsonToken84 = com.fasterxml.jackson.core.JsonToken.VALUE_TRUE;
        boolean boolean85 = jsonToken84.isBoolean();
        java.lang.String str86 = uTF8StreamJsonParser80._getText2(jsonToken84);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-438194893) + "'", int27 == (-438194893));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-816418559) + "'", int69 == (-816418559));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + jsonToken84 + "' != '" + com.fasterxml.jackson.core.JsonToken.VALUE_TRUE + "'", jsonToken84.equals(com.fasterxml.jackson.core.JsonToken.VALUE_TRUE));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "true" + "'", str86, "true");
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        int int16 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser jsonParser18 = readerBasedJsonParser13.setFeatureMask((-1266758365));
        com.fasterxml.jackson.core.JsonToken jsonToken19 = readerBasedJsonParser13.nextToken();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-427485667) + "'", int12 == (-427485667));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(jsonParser18);
        org.junit.Assert.assertNull(jsonToken19);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int81 = uTF8StreamJsonParser80._nameStartRow;
        int[] intArray82 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser._icLatin1;
        uTF8StreamJsonParser80._quadBuffer = intArray82;
        // The following exception was thrown during execution in test generation
        try {
            uTF8StreamJsonParser80._matchToken("ARRAY", (-1023967993));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-425904439) + "'", int27 == (-425904439));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-99749487) + "'", int69 == (-99749487));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int81 = uTF8StreamJsonParser80.getValueAsInt();
        uTF8StreamJsonParser80._nameStartCol = (short) 0;
        uTF8StreamJsonParser80._releaseBuffers();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-424395085) + "'", int27 == (-424395085));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-70368712) + "'", int69 == (-70368712));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        int int13 = charsToNameCanonicalizer10.collisionCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1), reader8, objectCodec9, charsToNameCanonicalizer10);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer15 = iOContext3.constructTextBuffer();
        java.io.Reader reader17 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec18 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer19 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int21 = charsToNameCanonicalizer19.calcHash("hi!");
        int int22 = charsToNameCanonicalizer19.collisionCount();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str25 = serializedString24.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString27 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str28 = serializedString27.toString();
        char[] charArray30 = new char[] { ' ' };
        int int32 = serializedString27.appendQuoted(charArray30, 1);
        int int34 = serializedString24.appendQuoted(charArray30, (int) (short) 0);
        int int37 = charsToNameCanonicalizer19.calcHash(charArray30, 0, (-2076203353));
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler38 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj39 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext41 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler38, obj39, false);
        char[] charArray43 = iOContext41.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser47 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (int) 'a', reader17, objectCodec18, charsToNameCanonicalizer19, charArray43, 15, (-1699771741), false);
        boolean boolean48 = charsToNameCanonicalizer19.maybeDirty();
        int int49 = charsToNameCanonicalizer19.bucketCount();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-417423307) + "'", int12 == (-417423307));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(textBuffer15);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer19);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-417423307) + "'", int21 == (-417423307));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ ]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1699736829) + "'", int37 == (-1699736829));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 64 + "'", int49 == 64);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature16.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = readerBasedJsonParser13.enable(feature16);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str22 = serializedString21.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str25 = serializedString24.toString();
        char[] charArray27 = new char[] { ' ' };
        int int29 = serializedString24.appendQuoted(charArray27, 1);
        int int31 = serializedString21.appendQuoted(charArray27, (int) (short) 0);
        byte[] byteArray32 = serializedString21.asUnquotedUTF8();
        boolean boolean33 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString21);
        int int34 = readerBasedJsonParser13.getTokenColumnNr();
        char[] charArray35 = readerBasedJsonParser13.getTextCharacters();
        boolean boolean36 = readerBasedJsonParser13.requiresCustomCodec();
        char[] charArray37 = readerBasedJsonParser13._inputBuffer;
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-412895245) + "'", int12 == (-412895245));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNull(charArray35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(charArray37);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonParser9.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        boolean boolean14 = jsonParser9.hasTokenId((int) (byte) -69);
        jsonParser9.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec16 = jsonParser9.getCodec();
        java.lang.Throwable throwable18 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException19 = new com.fasterxml.jackson.core.JsonParseException(jsonParser9, "JSON", throwable18);
        // The following exception was thrown during execution in test generation
        try {
            long long21 = jsonParser9.nextLongValue((long) 14);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertNotNull(jsonParser12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(objectCodec16);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        char[] charArray82 = iOContext21.allocTokenBuffer((-1853034583));
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-405492223) + "'", int27 == (-405492223));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-312051830) + "'", int69 == (-312051830));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertNotNull(charArray82);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature16.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = readerBasedJsonParser13.enable(feature16);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str22 = serializedString21.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str25 = serializedString24.toString();
        char[] charArray27 = new char[] { ' ' };
        int int29 = serializedString24.appendQuoted(charArray27, 1);
        int int31 = serializedString21.appendQuoted(charArray27, (int) (short) 0);
        byte[] byteArray32 = serializedString21.asUnquotedUTF8();
        boolean boolean33 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString21);
        int int34 = readerBasedJsonParser13.getTextLength();
        boolean boolean35 = readerBasedJsonParser13.isExpectedStartArrayToken();
        com.fasterxml.jackson.core.io.SerializedString serializedString37 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str38 = serializedString37.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString40 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str41 = serializedString40.toString();
        char[] charArray43 = new char[] { ' ' };
        int int45 = serializedString40.appendQuoted(charArray43, 1);
        int int47 = serializedString37.appendQuoted(charArray43, (int) (short) 0);
        byte[] byteArray48 = serializedString37.asUnquotedUTF8();
        byte[] byteArray49 = serializedString37.asUnquotedUTF8();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler50 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj51 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext53 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler50, obj51, false);
        char[] charArray55 = iOContext53.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext56 = null;
        java.io.InputStream inputStream57 = null;
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext56, inputStream57, byteArray64, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper70 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext53, byteArray64, (int) ' ', 64);
        int int72 = serializedString37.appendQuotedUTF8(byteArray64, 549305411);
        boolean boolean73 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString37);
        java.nio.ByteBuffer byteBuffer74 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int75 = serializedString37.putQuotedUTF8(byteBuffer74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-392842399) + "'", int12 == (-392842399));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[ ]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        java.io.Writer writer1 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator2 = jsonFactory0.createJsonGenerator(writer1);
        com.fasterxml.jackson.core.io.SerializedString serializedString4 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str5 = serializedString4.toString();
        char[] charArray7 = new char[] { ' ' };
        int int9 = serializedString4.appendQuoted(charArray7, 1);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = jsonGenerator2.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString4);
        boolean boolean11 = jsonGenerator10.isClosed();
        com.fasterxml.jackson.core.JsonFactory jsonFactory12 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser21 = jsonFactory12.createJsonParser(byteArray18, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser22 = jsonParser21.skipChildren();
        com.fasterxml.jackson.core.JsonParser jsonParser24 = jsonParser21.setFeatureMask((int) (short) 1);
        int int25 = jsonParser24.getTextOffset();
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator10.writeTypeId((java.lang.Object) int25);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: No native support for writing Type Ids");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(jsonGenerator2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ ]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(jsonGenerator10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser21);
        org.junit.Assert.assertNotNull(jsonParser22);
        org.junit.Assert.assertNotNull(jsonParser24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        int int13 = charsToNameCanonicalizer10.collisionCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser14 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, (-1), reader8, objectCodec9, charsToNameCanonicalizer10);
        com.fasterxml.jackson.core.JsonLocation jsonLocation15 = readerBasedJsonParser14.getTokenLocation();
        java.lang.Object obj16 = readerBasedJsonParser14.getObjectId();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-390039313) + "'", int12 == (-390039313));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(jsonLocation15);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int81 = uTF8StreamJsonParser80.getValueAsInt();
        java.lang.String str83 = uTF8StreamJsonParser80.getValueAsString("{?}");
        com.fasterxml.jackson.core.ObjectCodec objectCodec84 = uTF8StreamJsonParser80.getCodec();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-386445613) + "'", int27 == (-386445613));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1630336554) + "'", int69 == (-1630336554));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "{?}" + "'", str83, "{?}");
        org.junit.Assert.assertNull(objectCodec84);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray14, (int) 'a', 32);
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper20 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext3, byteArray14, (int) ' ', 64);
        com.fasterxml.jackson.core.io.IOContext iOContext21 = byteSourceJsonBootstrapper20._context;
        java.io.Reader reader23 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer25 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int27 = charsToNameCanonicalizer25.calcHash("hi!");
        com.fasterxml.jackson.core.io.SerializedString serializedString29 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str30 = serializedString29.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString32 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str33 = serializedString32.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString35 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str36 = serializedString35.toString();
        char[] charArray38 = new char[] { ' ' };
        int int40 = serializedString35.appendQuoted(charArray38, 1);
        int int42 = serializedString32.appendQuoted(charArray38, (int) (short) 0);
        int int44 = serializedString29.appendUnquoted(charArray38, 0);
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser48 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext21, 100, reader23, objectCodec24, charsToNameCanonicalizer25, charArray38, 2, (int) (byte) 0, true);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) -69, (byte) 1 };
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray58, (int) 'a', 32);
        int int62 = mergedStream61.available();
        int int63 = mergedStream61.available();
        com.fasterxml.jackson.core.ObjectCodec objectCodec64 = null;
        com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer65 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot();
        int int69 = byteQuadsCanonicalizer65.calcHash(3, (-65), (int) (short) -1);
        boolean boolean70 = byteQuadsCanonicalizer65.maybeDirty();
        int int71 = byteQuadsCanonicalizer65.totalCount();
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1, (byte) 1 };
        com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser80 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext21, 1949883309, (java.io.InputStream) mergedStream61, objectCodec64, byteQuadsCanonicalizer65, byteArray76, 1926668007, (-2098699915), false);
        int int81 = uTF8StreamJsonParser80.getValueAsInt();
        int int82 = uTF8StreamJsonParser80.getTextOffset();
        java.lang.String str83 = uTF8StreamJsonParser80.getValueAsString();
        int int84 = uTF8StreamJsonParser80.getValueAsInt();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str85 = uTF8StreamJsonParser80.nextFieldName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertNotNull(iOContext21);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-379905079) + "'", int27 == (-379905079));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ ]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 10, 1, -69, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-65) + "'", int62 == (-65));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-65) + "'", int63 == (-65));
        org.junit.Assert.assertNotNull(byteQuadsCanonicalizer65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-2070239855) + "'", int69 == (-2070239855));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        java.lang.Object obj1 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, obj1, false);
        char[] charArray5 = iOContext3.allocNameCopyBuffer((int) (byte) -69);
        boolean boolean6 = iOContext3.isResourceManaged();
        java.io.Reader reader8 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer10 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int12 = charsToNameCanonicalizer10.calcHash("hi!");
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser13 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext3, 3, reader8, objectCodec9, charsToNameCanonicalizer10);
        int int14 = readerBasedJsonParser13.getValueAsInt();
        int int15 = readerBasedJsonParser13.getTextOffset();
        com.fasterxml.jackson.core.JsonParser.Feature feature16 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        boolean boolean18 = feature16.enabledIn(0);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = readerBasedJsonParser13.enable(feature16);
        com.fasterxml.jackson.core.io.SerializedString serializedString21 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str22 = serializedString21.toString();
        com.fasterxml.jackson.core.io.SerializedString serializedString24 = new com.fasterxml.jackson.core.io.SerializedString("");
        java.lang.String str25 = serializedString24.toString();
        char[] charArray27 = new char[] { ' ' };
        int int29 = serializedString24.appendQuoted(charArray27, 1);
        int int31 = serializedString21.appendQuoted(charArray27, (int) (short) 0);
        byte[] byteArray32 = serializedString21.asUnquotedUTF8();
        boolean boolean33 = readerBasedJsonParser13.nextFieldName((com.fasterxml.jackson.core.SerializableString) serializedString21);
        int int34 = readerBasedJsonParser13.getTokenColumnNr();
        char[] charArray35 = readerBasedJsonParser13.getTextCharacters();
        // The following exception was thrown during execution in test generation
        try {
            short short36 = readerBasedJsonParser13.getShortValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-376455127) + "'", int12 == (-376455127));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature16.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ ]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNull(charArray35);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) -1, (byte) 100 };
        com.fasterxml.jackson.core.JsonParser jsonParser9 = jsonFactory0.createJsonParser(byteArray6, (int) (short) 100, 1);
        com.fasterxml.jackson.core.JsonParser jsonParser12 = jsonParser9.overrideStdFeatures((int) (byte) 10, (int) (short) 1);
        boolean boolean14 = jsonParser9.hasTokenId((int) (byte) -69);
        jsonParser9.clearCurrentToken();
        com.fasterxml.jackson.core.ObjectCodec objectCodec16 = jsonParser9.getCodec();
        int int17 = jsonParser9.getValueAsInt();
        com.fasterxml.jackson.core.JsonParser.Feature feature18 = com.fasterxml.jackson.core.JsonParser.Feature.IGNORE_UNDEFINED;
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonParser9.disable(feature18);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 10, -1, 100]");
        org.junit.Assert.assertNotNull(jsonParser9);
        org.junit.Assert.assertNotNull(jsonParser12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(objectCodec16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.IGNORE_UNDEFINED + "'", feature18.equals(com.fasterxml.jackson.core.JsonParser.Feature.IGNORE_UNDEFINED));
        org.junit.Assert.assertNotNull(jsonParser19);
    }
}
