/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 02 00:13:09 GMT 2024
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.SimpleTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.MutablePeriod;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.TimeOfDay;
import org.joda.time.chrono.BasicDayOfYearDateTimeField;
import org.joda.time.chrono.BasicMonthOfYearDateTimeField;
import org.joda.time.chrono.BasicSingleEraDateTimeField;
import org.joda.time.chrono.BasicWeekyearDateTimeField;
import org.joda.time.chrono.BasicYearDateTimeField;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GJDayOfWeekDateTimeField;
import org.joda.time.chrono.GJEraDateTimeField;
import org.joda.time.chrono.GJYearOfEraDateTimeField;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.ISOYearOfEraDateTimeField;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.DelegatedDateTimeField;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.field.ScaledDurationField;
import org.joda.time.field.SkipDateTimeField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZonedChronology_ESTest extends ZonedChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      String string0 = zonedChronology0.toString();
      assertEquals("ZonedChronology[EthiopicChronology[UTC], +01:00]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1, 1, 1, 1, 1);
      assertEquals((-62135564762000L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
      zonedChronology0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      try { 
        zonedChronology0.getDateTimeMillis(2251, 2251, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2251 for monthOfYear must be in the range [1,13]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "u");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      try { 
        zonedChronology0.getDateTimeMillis((long) 1, 1, 0, 0, (-4266));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -4266 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(ethiopicChronology0);
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(basicWeekyearDateTimeField0);
      DurationField durationField0 = delegatedDateTimeField0.getLeapDurationField();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, dateTimeZone0);
      long long0 = zonedChronology_ZonedDurationField0.getValueAsLong(1406L, 86400000L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(copticChronology0);
      DurationField durationField0 = basicYearDateTimeField0.getLeapDurationField();
      long long0 = durationField0.getMillis((long) 1, 0L);
      assertEquals(86400000L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      DurationField durationField0 = zonedChronology0.minutes();
      long long0 = durationField0.getMillis(1932, 29944032L);
      assertEquals(115920000L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
      DurationField durationField0 = zonedChronology0.years();
      int int0 = durationField0.getValue((long) 1, (long) 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(ethiopicChronology0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(ethiopicChronology0, basicWeekyearDateTimeField0);
      DurationField durationField0 = skipDateTimeField0.getLeapDurationField();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 2147483631);
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(skipDateTimeField0, fixedDateTimeZone0, durationField0, scaledDurationField0, scaledDurationField0);
      boolean boolean0 = zonedChronology_ZonedDateTimeField0.isLeap(1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(ethiopicChronology0);
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(basicWeekyearDateTimeField0);
      DurationField durationField0 = delegatedDateTimeField0.getLeapDurationField();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, dateTimeZone0);
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicWeekyearDateTimeField0, dateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      long long0 = zonedChronology_ZonedDateTimeField0.remainder(1921L);
      assertEquals(9907201921L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2435);
      DateMidnight dateMidnight0 = new DateMidnight((long) 2435);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      DateTimeField dateTimeField0 = zonedChronology0.secondOfMinute();
      DateTimeFieldType dateTimeFieldType0 = dateTimeField0.getType();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2435);
      assertEquals((-57600000L), dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(ethiopicChronology0);
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(basicWeekyearDateTimeField0);
      DurationField durationField0 = delegatedDateTimeField0.getLeapDurationField();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, dateTimeZone0);
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicWeekyearDateTimeField0, dateTimeZone0, zonedChronology_ZonedDurationField0, durationField0, zonedChronology_ZonedDurationField0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string0 = zonedChronology_ZonedDateTimeField0.getAsText((-2147483539), locale0);
      assertEquals("-2147483539", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      DateTimeField dateTimeField0 = zonedChronology0.monthOfYear();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(zonedChronology0, dateTimeField0);
      DurationField durationField0 = skipDateTimeField0.getRangeDurationField();
      assertNotNull(durationField0);
      assertEquals("years", durationField0.getName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
      DurationField durationField0 = zonedChronology0.years();
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(iSOYearOfEraDateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      Locale locale0 = Locale.UK;
      String string0 = zonedChronology_ZonedDateTimeField0.getAsShortText((-274), locale0);
      assertEquals("-274", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      DateTimeField dateTimeField0 = zonedChronology0.monthOfYear();
      boolean boolean0 = dateTimeField0.isLenient();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      DateTimeField dateTimeField0 = zonedChronology0.monthOfYear();
      int int0 = dateTimeField0.getLeapAmount(1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      DateTimeField dateTimeField0 = zonedChronology0.dayOfMonth();
      MonthDay monthDay0 = new MonthDay((-28800000L));
      dateTimeField0.getMinimumValue((ReadablePartial) monthDay0);
      assertEquals(31, monthDay0.getDayOfMonth());
      assertEquals(12, monthDay0.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
      DurationField durationField0 = zonedChronology0.years();
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(iSOYearOfEraDateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      int int0 = zonedChronology_ZonedDateTimeField0.getMaximumValue((long) (-274));
      assertEquals(292278993, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      DateTimeField dateTimeField0 = zonedChronology0.monthOfYear();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(zonedChronology0, dateTimeField0);
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(skipDateTimeField0, ethiopicChronology0);
      DurationField durationField0 = gJYearOfEraDateTimeField0.getDurationField();
      assertNotNull(durationField0);
      assertEquals("months", durationField0.getName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      DateTimeField dateTimeField0 = zonedChronology0.monthOfYear();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(zonedChronology0, dateTimeField0);
      DurationField durationField0 = skipDateTimeField0.getLeapDurationField();
      assertEquals("days", durationField0.getName());
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(ethiopicChronology0);
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(basicWeekyearDateTimeField0);
      DurationField durationField0 = delegatedDateTimeField0.getLeapDurationField();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, dateTimeZone0);
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicWeekyearDateTimeField0, dateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      int int0 = zonedChronology_ZonedDateTimeField0.getMinimumValue(3669L);
      assertEquals((-292269337), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      DurationField durationField0 = zonedChronology0.hours();
      GJDayOfWeekDateTimeField gJDayOfWeekDateTimeField0 = new GJDayOfWeekDateTimeField(ethiopicChronology0, durationField0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(gJDayOfWeekDateTimeField0, dateTimeFieldType0);
      LocalTime localTime0 = new LocalTime();
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(delegatedDateTimeField0, dateTimeZone0, (DurationField) null, durationField0, durationField0);
      int int0 = zonedChronology_ZonedDateTimeField0.getMaximumValue((ReadablePartial) localTime0);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(zonedChronology0);
      
      DateTimeField dateTimeField0 = zonedChronology0.monthOfYear();
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("monthOfYear", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(0L, (Chronology) zonedChronology0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, timeOfDay0.getMillisOfSecond());
      assertEquals(0, timeOfDay0.getMinuteOfHour());
      assertEquals(0, timeOfDay0.getHourOfDay());
      assertEquals(4, timeOfDay0.size());
      assertEquals(0, timeOfDay0.getSecondOfMinute());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertNotNull(timeOfDay0);
      
      LocalTime localTime0 = timeOfDay0.toLocalTime();
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, timeOfDay0.getMillisOfSecond());
      assertEquals(0, timeOfDay0.getMinuteOfHour());
      assertEquals(0, timeOfDay0.getHourOfDay());
      assertEquals(4, timeOfDay0.size());
      assertEquals(0, timeOfDay0.getSecondOfMinute());
      assertEquals(4, localTime0.size());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertNotNull(localTime0);
      
      int int0 = dateTimeField0.getMaximumValue((ReadablePartial) localTime0, (int[]) null);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("monthOfYear", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
      assertEquals(0, timeOfDay0.getMillisOfSecond());
      assertEquals(0, timeOfDay0.getMinuteOfHour());
      assertEquals(0, timeOfDay0.getHourOfDay());
      assertEquals(4, timeOfDay0.size());
      assertEquals(0, timeOfDay0.getSecondOfMinute());
      assertEquals(4, localTime0.size());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology0);
      
      DurationField durationField0 = zonedChronology0.hours();
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(durationField0);
      
      GJDayOfWeekDateTimeField gJDayOfWeekDateTimeField0 = new GJDayOfWeekDateTimeField(ethiopicChronology0, durationField0);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertTrue(gJDayOfWeekDateTimeField0.isSupported());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertEquals(3600000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertEquals(1, gJDayOfWeekDateTimeField0.getMinimumValue());
      assertFalse(gJDayOfWeekDateTimeField0.isLenient());
      assertEquals(7, gJDayOfWeekDateTimeField0.getMaximumValue());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(gJDayOfWeekDateTimeField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(gJDayOfWeekDateTimeField0, dateTimeZone0, durationField0, durationField0, (DurationField) null);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertTrue(gJDayOfWeekDateTimeField0.isSupported());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertEquals(3600000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertEquals(1, gJDayOfWeekDateTimeField0.getMinimumValue());
      assertFalse(gJDayOfWeekDateTimeField0.isLenient());
      assertEquals(7, gJDayOfWeekDateTimeField0.getMaximumValue());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = zonedChronology_ZonedDateTimeField0.getAsShortText(712L, locale0);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertTrue(gJDayOfWeekDateTimeField0.isSupported());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertEquals(3600000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertEquals(1, gJDayOfWeekDateTimeField0.getMinimumValue());
      assertFalse(gJDayOfWeekDateTimeField0.isLenient());
      assertEquals(7, gJDayOfWeekDateTimeField0.getMaximumValue());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("\u6728", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology0);
      
      DurationField durationField0 = zonedChronology0.hours();
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(durationField0);
      
      GJDayOfWeekDateTimeField gJDayOfWeekDateTimeField0 = new GJDayOfWeekDateTimeField(ethiopicChronology0, durationField0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertFalse(gJDayOfWeekDateTimeField0.isLenient());
      assertEquals(7, gJDayOfWeekDateTimeField0.getMaximumValue());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertEquals(1, gJDayOfWeekDateTimeField0.getMinimumValue());
      assertEquals(3600000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertTrue(gJDayOfWeekDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(gJDayOfWeekDateTimeField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(gJDayOfWeekDateTimeField0, dateTimeZone0, durationField0, durationField0, (DurationField) null);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertFalse(gJDayOfWeekDateTimeField0.isLenient());
      assertEquals(7, gJDayOfWeekDateTimeField0.getMaximumValue());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertEquals(1, gJDayOfWeekDateTimeField0.getMinimumValue());
      assertEquals(3600000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertTrue(gJDayOfWeekDateTimeField0.isSupported());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        zonedChronology_ZonedDateTimeField0.set(2858L, "0nY5?.E", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"0nY5?.E\" for dayOfWeek is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(ethiopicChronology0);
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(basicWeekyearDateTimeField0);
      
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(basicWeekyearDateTimeField0);
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertEquals("weekyear", delegatedDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(delegatedDateTimeField0);
      
      DurationField durationField0 = delegatedDateTimeField0.getLeapDurationField();
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertEquals("weekyear", delegatedDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(durationField0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, dateTimeZone0);
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertEquals("weekyear", delegatedDateTimeField0.getName());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertTrue(zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicWeekyearDateTimeField0, dateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertEquals("weekyear", delegatedDateTimeField0.getName());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertTrue(zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weekyear", zonedChronology_ZonedDateTimeField0.getName());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      String string0 = zonedChronology_ZonedDateTimeField0.getAsText(60000L, (Locale) null);
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertEquals("weekyear", delegatedDateTimeField0.getName());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertTrue(zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weekyear", zonedChronology_ZonedDateTimeField0.getName());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("1962", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(ethiopicChronology0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(basicWeekyearDateTimeField0);
      
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(basicWeekyearDateTimeField0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", delegatedDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(delegatedDateTimeField0);
      
      DurationField durationField0 = delegatedDateTimeField0.getLeapDurationField();
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", delegatedDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(durationField0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, dateTimeZone0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", delegatedDateTimeField0.getName());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertTrue(zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicWeekyearDateTimeField0, dateTimeZone0, durationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", delegatedDateTimeField0.getName());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertTrue(zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertEquals("weekyear", zonedChronology_ZonedDateTimeField0.getName());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      TimeOfDay timeOfDay0 = new TimeOfDay(3061728028800L);
      assertEquals(800, timeOfDay0.getMillisOfSecond());
      assertEquals(8, timeOfDay0.getHourOfDay());
      assertEquals(0, timeOfDay0.getMinuteOfHour());
      assertEquals(28, timeOfDay0.getSecondOfMinute());
      assertEquals(4, timeOfDay0.size());
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertNotNull(timeOfDay0);
      
      int[] intArray0 = new int[2];
      int int0 = zonedChronology_ZonedDateTimeField0.getMinimumValue((ReadablePartial) timeOfDay0, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", delegatedDateTimeField0.getName());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertTrue(zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertEquals("weekyear", zonedChronology_ZonedDateTimeField0.getName());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(800, timeOfDay0.getMillisOfSecond());
      assertEquals(8, timeOfDay0.getHourOfDay());
      assertEquals(0, timeOfDay0.getMinuteOfHour());
      assertEquals(28, timeOfDay0.getSecondOfMinute());
      assertEquals(4, timeOfDay0.size());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, TimeOfDay.MINUTE_OF_HOUR);
      assertEquals(2, TimeOfDay.SECOND_OF_MINUTE);
      assertEquals(3, TimeOfDay.MILLIS_OF_SECOND);
      assertEquals(0, TimeOfDay.HOUR_OF_DAY);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals((-292269337), int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology0);
      
      DateTimeField dateTimeField0 = zonedChronology0.weekyearOfCentury();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("weekyearOfCentury", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeField0);
      
      Locale locale0 = new Locale("E<w9DQXH!b", "E<w9DQXH!b");
      assertEquals("", locale0.getVariant());
      assertEquals("E<W9DQXH!B", locale0.getCountry());
      assertEquals("e<w9dqxh!b_E<W9DQXH!B", locale0.toString());
      assertEquals("e<w9dqxh!b", locale0.getLanguage());
      assertNotNull(locale0);
      
      int int0 = dateTimeField0.getMaximumShortTextLength(locale0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("weekyearOfCentury", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
      assertEquals("", locale0.getVariant());
      assertEquals("E<W9DQXH!B", locale0.getCountry());
      assertEquals("e<w9dqxh!b_E<W9DQXH!B", locale0.toString());
      assertEquals("e<w9dqxh!b", locale0.getLanguage());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 736);
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(basicMonthOfYearDateTimeField0);
      
      DurationField durationField0 = basicMonthOfYearDateTimeField0.getLeapDurationField();
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals("days", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(durationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicMonthOfYearDateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals("days", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("monthOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(locale0);
      
      int int0 = zonedChronology_ZonedDateTimeField0.getMaximumTextLength(locale0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals("days", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("monthOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2435);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.435", dateTimeZone0.toString());
      assertEquals("+00:00:02.435", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      // Undeclared exception!
      try { 
        ZonedChronology.getInstance((Chronology) null, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply a chronology
         //
         verifyException("org.joda.time.chrono.ZonedChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      // Undeclared exception!
      try { 
        ZonedChronology.getInstance(buddhistChronology0, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DateTimeZone must not be null
         //
         verifyException("org.joda.time.chrono.ZonedChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology0);
      
      Chronology chronology0 = zonedChronology0.withZone(dateTimeZone0);
      assertSame(zonedChronology0, chronology0);
      assertSame(chronology0, zonedChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology0);
      
      Chronology chronology0 = zonedChronology0.withZone((DateTimeZone) null);
      assertNotSame(zonedChronology0, chronology0);
      assertNotSame(chronology0, zonedChronology0);
      assertFalse(chronology0.equals((Object)zonedChronology0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(219, 0);
      assertEquals("+219:00", dateTimeZone0.getID());
      assertEquals("+219:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);
      assertEquals("+219:00", dateTimeZone0.getID());
      assertEquals("+219:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(zonedChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotSame(fixedDateTimeZone0, dateTimeZone0);
      assertFalse(fixedDateTimeZone0.equals((Object)dateTimeZone0));
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      CopticChronology copticChronology1 = (CopticChronology)zonedChronology0.withZone(fixedDateTimeZone0);
      assertNotSame(copticChronology0, copticChronology1);
      assertNotSame(dateTimeZone0, fixedDateTimeZone0);
      assertNotSame(fixedDateTimeZone0, dateTimeZone0);
      assertNotSame(copticChronology1, copticChronology0);
      assertFalse(dateTimeZone0.equals((Object)fixedDateTimeZone0));
      assertFalse(fixedDateTimeZone0.equals((Object)dateTimeZone0));
      assertFalse(copticChronology1.equals((Object)copticChronology0));
      assertEquals("+219:00", dateTimeZone0.getID());
      assertEquals("+219:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null, 1);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(gJChronology0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(zonedChronology0);
      
      boolean boolean0 = zonedChronology0.equals(gJChronology0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(zonedChronology0);
      
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      assertEquals("America/Los_Angeles", dateTimeZone1.getID());
      assertEquals("America/Los_Angeles", dateTimeZone1.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone1);
      
      ZonedChronology zonedChronology1 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone1);
      assertNotSame(zonedChronology1, zonedChronology0);
      assertFalse(zonedChronology1.equals((Object)zonedChronology0));
      assertEquals("America/Los_Angeles", dateTimeZone1.getID());
      assertEquals("America/Los_Angeles", dateTimeZone1.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(zonedChronology1);
      
      boolean boolean0 = zonedChronology1.equals(zonedChronology0);
      assertNotSame(zonedChronology0, zonedChronology1);
      assertNotSame(zonedChronology1, zonedChronology0);
      assertFalse(zonedChronology0.equals((Object)zonedChronology1));
      assertFalse(zonedChronology1.equals((Object)zonedChronology0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone1.getID());
      assertEquals("America/Los_Angeles", dateTimeZone1.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertNotNull(zonedChronology0);
      
      ZonedChronology zonedChronology1 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      assertNotSame(zonedChronology1, zonedChronology0);
      assertFalse(zonedChronology1.equals((Object)zonedChronology0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology1);
      
      boolean boolean0 = zonedChronology0.equals(zonedChronology1);
      assertNotSame(zonedChronology0, zonedChronology1);
      assertNotSame(zonedChronology1, zonedChronology0);
      assertFalse(zonedChronology0.equals((Object)zonedChronology1));
      assertFalse(zonedChronology1.equals((Object)zonedChronology0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology0);
      
      ZonedChronology zonedChronology1 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      assertNotSame(zonedChronology1, zonedChronology0);
      assertTrue(zonedChronology1.equals((Object)zonedChronology0));
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology1);
      
      boolean boolean0 = zonedChronology1.equals(zonedChronology0);
      assertNotSame(zonedChronology0, zonedChronology1);
      assertNotSame(zonedChronology1, zonedChronology0);
      assertTrue(zonedChronology0.equals((Object)zonedChronology1));
      assertTrue(zonedChronology1.equals((Object)zonedChronology0));
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, EthiopicChronology.EE);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology0);
      
      DurationField durationField0 = zonedChronology0.eras();
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0L, durationField0.getUnitMillis());
      assertFalse(durationField0.isSupported());
      assertEquals("eras", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(durationField0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = null;
      try {
        zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.ZonedChronology$ZonedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(ethiopicChronology0);
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(basicWeekyearDateTimeField0);
      
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(basicWeekyearDateTimeField0);
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", delegatedDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(delegatedDateTimeField0);
      
      DurationField durationField0 = delegatedDateTimeField0.getLeapDurationField();
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", delegatedDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(durationField0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, dateTimeZone0);
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", delegatedDateTimeField0.getName());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      boolean boolean0 = zonedChronology_ZonedDurationField0.isPrecise();
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", delegatedDateTimeField0.getName());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(zonedChronology0);
      
      DurationField durationField0 = zonedChronology0.years();
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("years", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(durationField0);
      
      boolean boolean0 = durationField0.isPrecise();
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("years", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(ethiopicChronology0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(basicWeekyearDateTimeField0);
      
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(basicWeekyearDateTimeField0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", delegatedDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(delegatedDateTimeField0);
      
      DurationField durationField0 = delegatedDateTimeField0.getLeapDurationField();
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", delegatedDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(durationField0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, dateTimeZone0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", delegatedDateTimeField0.getName());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertTrue(zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      BasicDayOfYearDateTimeField basicDayOfYearDateTimeField0 = null;
      try {
        basicDayOfYearDateTimeField0 = new BasicDayOfYearDateTimeField(ethiopicChronology0, zonedChronology_ZonedDurationField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unit duration field must be precise
         //
         verifyException("org.joda.time.field.PreciseDurationDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(2448L, 190L);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(ethiopicChronology0);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(basicWeekyearDateTimeField0);
      
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(basicWeekyearDateTimeField0);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", delegatedDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(delegatedDateTimeField0);
      
      DurationField durationField0 = delegatedDateTimeField0.getLeapDurationField();
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", delegatedDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(durationField0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, dateTimeZone0);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", delegatedDateTimeField0.getName());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      long long0 = zonedChronology_ZonedDurationField0.subtract((long) 1, 0L);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", delegatedDateTimeField0.getName());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology0);
      
      DurationField durationField0 = zonedChronology0.hours();
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(durationField0);
      
      long long0 = durationField0.subtract((-2652L), (-2652L));
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(9547197348L, long0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(zonedChronology0);
      
      DurationField durationField0 = zonedChronology0.years();
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("years", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(durationField0);
      
      long long0 = durationField0.getDifferenceAsLong(713L, 713L);
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("years", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology0);
      
      DurationField durationField0 = zonedChronology0.hours();
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(durationField0);
      
      long long0 = durationField0.getDifferenceAsLong(1, 1);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField(")");
      assertEquals("era", basicSingleEraDateTimeField0.getName());
      assertEquals(1, basicSingleEraDateTimeField0.getMinimumValue());
      assertEquals(1, basicSingleEraDateTimeField0.getMaximumValue());
      assertFalse(basicSingleEraDateTimeField0.isLenient());
      assertTrue(basicSingleEraDateTimeField0.isSupported());
      assertNotNull(basicSingleEraDateTimeField0);
      
      DurationField durationField0 = basicSingleEraDateTimeField0.getDurationField();
      assertEquals("era", basicSingleEraDateTimeField0.getName());
      assertEquals(1, basicSingleEraDateTimeField0.getMinimumValue());
      assertEquals(1, basicSingleEraDateTimeField0.getMaximumValue());
      assertFalse(basicSingleEraDateTimeField0.isLenient());
      assertTrue(basicSingleEraDateTimeField0.isSupported());
      assertFalse(durationField0.isSupported());
      assertTrue(durationField0.isPrecise());
      assertEquals("eras", durationField0.getName());
      assertEquals(0L, durationField0.getUnitMillis());
      assertNotNull(durationField0);
      
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("era", basicSingleEraDateTimeField0.getName());
      assertEquals(1, basicSingleEraDateTimeField0.getMinimumValue());
      assertEquals(1, basicSingleEraDateTimeField0.getMaximumValue());
      assertFalse(basicSingleEraDateTimeField0.isLenient());
      assertTrue(basicSingleEraDateTimeField0.isSupported());
      assertFalse(durationField0.isSupported());
      assertTrue(durationField0.isPrecise());
      assertEquals("eras", durationField0.getName());
      assertEquals(0L, durationField0.getUnitMillis());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertEquals("centuryOfEra", unsupportedDateTimeField0.getName());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertNotNull(unsupportedDateTimeField0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(553);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+553:00", dateTimeZone0.toString());
      assertEquals("+553:00", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = null;
      try {
        zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(unsupportedDateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.ZonedChronology$ZonedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology0);
      
      DurationField durationField0 = zonedChronology0.hours();
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(durationField0);
      
      GJDayOfWeekDateTimeField gJDayOfWeekDateTimeField0 = new GJDayOfWeekDateTimeField(ethiopicChronology0, durationField0);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals(3600000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertTrue(gJDayOfWeekDateTimeField0.isSupported());
      assertEquals(1, gJDayOfWeekDateTimeField0.getMinimumValue());
      assertEquals(7, gJDayOfWeekDateTimeField0.getMaximumValue());
      assertFalse(gJDayOfWeekDateTimeField0.isLenient());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(gJDayOfWeekDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(gJDayOfWeekDateTimeField0, dateTimeFieldType0);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals(3600000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertTrue(gJDayOfWeekDateTimeField0.isSupported());
      assertEquals(1, gJDayOfWeekDateTimeField0.getMinimumValue());
      assertEquals(7, gJDayOfWeekDateTimeField0.getMaximumValue());
      assertFalse(gJDayOfWeekDateTimeField0.isLenient());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", delegatedDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(delegatedDateTimeField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(delegatedDateTimeField0, dateTimeZone0, (DurationField) null, durationField0, durationField0);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals(3600000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertTrue(gJDayOfWeekDateTimeField0.isSupported());
      assertEquals(1, gJDayOfWeekDateTimeField0.getMinimumValue());
      assertEquals(7, gJDayOfWeekDateTimeField0.getMaximumValue());
      assertFalse(gJDayOfWeekDateTimeField0.isLenient());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", delegatedDateTimeField0.getName());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      long long0 = zonedChronology_ZonedDateTimeField0.add((long) 1, 1844);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals(3600000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertTrue(gJDayOfWeekDateTimeField0.isSupported());
      assertEquals(1, gJDayOfWeekDateTimeField0.getMinimumValue());
      assertEquals(7, gJDayOfWeekDateTimeField0.getMaximumValue());
      assertFalse(gJDayOfWeekDateTimeField0.isLenient());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", delegatedDateTimeField0.getName());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(6638400001L, long0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology0);
      
      DurationField durationField0 = zonedChronology0.hours();
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(durationField0);
      
      GJDayOfWeekDateTimeField gJDayOfWeekDateTimeField0 = new GJDayOfWeekDateTimeField(ethiopicChronology0, durationField0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertTrue(gJDayOfWeekDateTimeField0.isSupported());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertEquals(1, gJDayOfWeekDateTimeField0.getMinimumValue());
      assertEquals(3600000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertFalse(gJDayOfWeekDateTimeField0.isLenient());
      assertEquals(7, gJDayOfWeekDateTimeField0.getMaximumValue());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(gJDayOfWeekDateTimeField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(gJDayOfWeekDateTimeField0, dateTimeZone0, durationField0, durationField0, (DurationField) null);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertTrue(gJDayOfWeekDateTimeField0.isSupported());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertEquals(1, gJDayOfWeekDateTimeField0.getMinimumValue());
      assertEquals(3600000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertFalse(gJDayOfWeekDateTimeField0.isLenient());
      assertEquals(7, gJDayOfWeekDateTimeField0.getMaximumValue());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      long long0 = zonedChronology_ZonedDateTimeField0.add((-1548L), (-370));
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertTrue(gJDayOfWeekDateTimeField0.isSupported());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertEquals(1, gJDayOfWeekDateTimeField0.getMinimumValue());
      assertEquals(3600000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertFalse(gJDayOfWeekDateTimeField0.isLenient());
      assertEquals(7, gJDayOfWeekDateTimeField0.getMaximumValue());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals((-1332001548L), long0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(ethiopicChronology0);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(basicWeekyearDateTimeField0);
      
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(basicWeekyearDateTimeField0);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", delegatedDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(delegatedDateTimeField0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology0);
      
      DurationField durationField0 = zonedChronology0.hours();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(durationField0);
      
      DurationField durationField1 = delegatedDateTimeField0.getLeapDurationField();
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", delegatedDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(durationField1);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicWeekyearDateTimeField0, dateTimeZone0, durationField1, durationField1, durationField0);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", delegatedDateTimeField0.getName());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("weekyear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      long long0 = zonedChronology_ZonedDateTimeField0.add(604800000L, (-1688L));
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", delegatedDateTimeField0.getName());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("weekyear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals((-53268364800000L), long0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology0);
      
      DurationField durationField0 = zonedChronology0.hours();
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(durationField0);
      
      GJDayOfWeekDateTimeField gJDayOfWeekDateTimeField0 = new GJDayOfWeekDateTimeField(ethiopicChronology0, durationField0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertEquals(1, gJDayOfWeekDateTimeField0.getMinimumValue());
      assertFalse(gJDayOfWeekDateTimeField0.isLenient());
      assertEquals(7, gJDayOfWeekDateTimeField0.getMaximumValue());
      assertTrue(gJDayOfWeekDateTimeField0.isSupported());
      assertEquals(3600000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(gJDayOfWeekDateTimeField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(gJDayOfWeekDateTimeField0, dateTimeZone0, durationField0, durationField0, (DurationField) null);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertEquals(1, gJDayOfWeekDateTimeField0.getMinimumValue());
      assertFalse(gJDayOfWeekDateTimeField0.isLenient());
      assertEquals(7, gJDayOfWeekDateTimeField0.getMaximumValue());
      assertTrue(gJDayOfWeekDateTimeField0.isSupported());
      assertEquals(3600000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      long long0 = zonedChronology_ZonedDateTimeField0.add((long) 1, 604800000L);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertEquals(1, gJDayOfWeekDateTimeField0.getMinimumValue());
      assertFalse(gJDayOfWeekDateTimeField0.isLenient());
      assertEquals(7, gJDayOfWeekDateTimeField0.getMaximumValue());
      assertTrue(gJDayOfWeekDateTimeField0.isSupported());
      assertEquals(3600000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(2177280000000001L, long0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology0);
      
      DateTimeField dateTimeField0 = zonedChronology0.monthOfYear();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("monthOfYear", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeField0);
      
      long long0 = dateTimeField0.addWrapField((long) 1, 1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("monthOfYear", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(2592000001L, long0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology0);
      
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(ethiopicChronology0);
      assertTrue(gJEraDateTimeField0.isSupported());
      assertEquals("era", gJEraDateTimeField0.getName());
      assertEquals(1, gJEraDateTimeField0.getMaximumValue());
      assertFalse(gJEraDateTimeField0.isLenient());
      assertEquals(0, gJEraDateTimeField0.getMinimumValue());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(gJEraDateTimeField0);
      
      DurationField durationField0 = zonedChronology0.eras();
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertFalse(durationField0.isSupported());
      assertTrue(durationField0.isPrecise());
      assertEquals(0L, durationField0.getUnitMillis());
      assertEquals("eras", durationField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(durationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(gJEraDateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(gJEraDateTimeField0.isSupported());
      assertEquals("era", gJEraDateTimeField0.getName());
      assertEquals(1, gJEraDateTimeField0.getMaximumValue());
      assertFalse(gJEraDateTimeField0.isLenient());
      assertEquals(0, gJEraDateTimeField0.getMinimumValue());
      assertFalse(durationField0.isSupported());
      assertTrue(durationField0.isPrecise());
      assertEquals(0L, durationField0.getUnitMillis());
      assertEquals("eras", durationField0.getName());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("era", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      long long0 = zonedChronology_ZonedDateTimeField0.addWrapField(1000L, 93);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(gJEraDateTimeField0.isSupported());
      assertEquals("era", gJEraDateTimeField0.getName());
      assertEquals(1, gJEraDateTimeField0.getMaximumValue());
      assertFalse(gJEraDateTimeField0.isLenient());
      assertEquals(0, gJEraDateTimeField0.getMinimumValue());
      assertFalse(durationField0.isSupported());
      assertTrue(durationField0.isPrecise());
      assertEquals(0L, durationField0.getUnitMillis());
      assertEquals("eras", durationField0.getName());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("era", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals((-123832022399000L), long0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      try { 
        buddhistChronology0.getDateTimeMillis(1189, 1, (-1025), 1, 7, 34, (-595));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1025 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology0);
      
      DurationField durationField0 = zonedChronology0.hours();
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(durationField0);
      
      GJDayOfWeekDateTimeField gJDayOfWeekDateTimeField0 = new GJDayOfWeekDateTimeField(ethiopicChronology0, durationField0);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertEquals(1, gJDayOfWeekDateTimeField0.getMinimumValue());
      assertTrue(gJDayOfWeekDateTimeField0.isSupported());
      assertEquals(3600000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertFalse(gJDayOfWeekDateTimeField0.isLenient());
      assertEquals(7, gJDayOfWeekDateTimeField0.getMaximumValue());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(gJDayOfWeekDateTimeField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(gJDayOfWeekDateTimeField0, dateTimeZone0, durationField0, durationField0, (DurationField) null);
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertEquals(1, gJDayOfWeekDateTimeField0.getMinimumValue());
      assertTrue(gJDayOfWeekDateTimeField0.isSupported());
      assertEquals(3600000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertFalse(gJDayOfWeekDateTimeField0.isLenient());
      assertEquals(7, gJDayOfWeekDateTimeField0.getMaximumValue());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      // Undeclared exception!
      try { 
        zonedChronology_ZonedDateTimeField0.set(714L, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1 for dayOfWeek is not supported: Illegal instant due to time zone offset transition: 1969-12-31T22:00:00.714 (+01:00)
         //
         verifyException("org.joda.time.chrono.ZonedChronology$ZonedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      ISOYearOfEraDateTimeField iSOYearOfEraDateTimeField0 = (ISOYearOfEraDateTimeField)ISOYearOfEraDateTimeField.INSTANCE;
      assertTrue(iSOYearOfEraDateTimeField0.isSupported());
      assertEquals(0, iSOYearOfEraDateTimeField0.getMinimumValue());
      assertEquals("yearOfEra", iSOYearOfEraDateTimeField0.getName());
      assertNotNull(iSOYearOfEraDateTimeField0);
      
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(iSOYearOfEraDateTimeField0, ethiopicChronology0);
      assertTrue(iSOYearOfEraDateTimeField0.isSupported());
      assertEquals(0, iSOYearOfEraDateTimeField0.getMinimumValue());
      assertEquals("yearOfEra", iSOYearOfEraDateTimeField0.getName());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertTrue(gJYearOfEraDateTimeField0.isSupported());
      assertEquals(1, gJYearOfEraDateTimeField0.getMinimumValue());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(gJYearOfEraDateTimeField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(gJYearOfEraDateTimeField0, dateTimeZone0, (DurationField) null, (DurationField) null, (DurationField) null);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(iSOYearOfEraDateTimeField0.isSupported());
      assertEquals(0, iSOYearOfEraDateTimeField0.getMinimumValue());
      assertEquals("yearOfEra", iSOYearOfEraDateTimeField0.getName());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertTrue(gJYearOfEraDateTimeField0.isSupported());
      assertEquals(1, gJYearOfEraDateTimeField0.getMinimumValue());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("yearOfEra", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      int int0 = zonedChronology_ZonedDateTimeField0.getDifference(1, 2683L);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(iSOYearOfEraDateTimeField0.isSupported());
      assertEquals(0, iSOYearOfEraDateTimeField0.getMinimumValue());
      assertEquals("yearOfEra", iSOYearOfEraDateTimeField0.getName());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertTrue(gJYearOfEraDateTimeField0.isSupported());
      assertEquals(1, gJYearOfEraDateTimeField0.getMinimumValue());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("yearOfEra", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology0);
      
      DurationField durationField0 = zonedChronology0.hours();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(durationField0);
      
      GJDayOfWeekDateTimeField gJDayOfWeekDateTimeField0 = new GJDayOfWeekDateTimeField(ethiopicChronology0, durationField0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals(1, gJDayOfWeekDateTimeField0.getMinimumValue());
      assertEquals(3600000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertTrue(gJDayOfWeekDateTimeField0.isSupported());
      assertEquals(7, gJDayOfWeekDateTimeField0.getMaximumValue());
      assertFalse(gJDayOfWeekDateTimeField0.isLenient());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(gJDayOfWeekDateTimeField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(gJDayOfWeekDateTimeField0, dateTimeZone0, durationField0, durationField0, durationField0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals(1, gJDayOfWeekDateTimeField0.getMinimumValue());
      assertEquals(3600000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertTrue(gJDayOfWeekDateTimeField0.isSupported());
      assertEquals(7, gJDayOfWeekDateTimeField0.getMaximumValue());
      assertFalse(gJDayOfWeekDateTimeField0.isLenient());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      int int0 = zonedChronology_ZonedDateTimeField0.getDifference(1, 1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals(1, gJDayOfWeekDateTimeField0.getMinimumValue());
      assertEquals(3600000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertTrue(gJDayOfWeekDateTimeField0.isSupported());
      assertEquals(7, gJDayOfWeekDateTimeField0.getMaximumValue());
      assertFalse(gJDayOfWeekDateTimeField0.isLenient());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(zonedChronology0);
      
      DateTimeField dateTimeField0 = zonedChronology0.monthOfYear();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("monthOfYear", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      long long0 = dateTimeField0.getDifferenceAsLong((-2652L), 1117L);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("monthOfYear", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(zonedChronology0);
      
      DurationField durationField0 = zonedChronology0.years();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(durationField0.isSupported());
      assertEquals("years", durationField0.getName());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(durationField0);
      
      DurationField durationField1 = zonedChronology0.hours();
      assertNotSame(durationField1, durationField0);
      assertFalse(durationField1.equals((Object)durationField0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(durationField1.isSupported());
      assertEquals("hours", durationField1.getName());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(durationField1);
      
      DateTimeField dateTimeField0 = zonedChronology0.monthOfYear();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(dateTimeField0.isSupported());
      assertEquals("monthOfYear", dateTimeField0.getName());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(dateTimeField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone0, durationField1, durationField0, durationField0);
      assertFalse(durationField0.equals((Object)durationField1));
      assertFalse(durationField1.equals((Object)durationField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)dateTimeField0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(durationField0.isSupported());
      assertEquals("years", durationField0.getName());
      assertTrue(durationField1.isSupported());
      assertEquals("hours", durationField1.getName());
      assertTrue(dateTimeField0.isSupported());
      assertEquals("monthOfYear", dateTimeField0.getName());
      assertEquals("monthOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      long long0 = zonedChronology_ZonedDateTimeField0.getDifferenceAsLong(43200000L, 1);
      assertNotSame(durationField0, durationField1);
      assertNotSame(durationField1, durationField0);
      assertNotSame(dateTimeField0, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, dateTimeField0);
      assertFalse(durationField0.equals((Object)durationField1));
      assertFalse(durationField1.equals((Object)durationField0));
      assertFalse(dateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)dateTimeField0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(durationField0.isSupported());
      assertEquals("years", durationField0.getName());
      assertTrue(durationField1.isSupported());
      assertEquals("hours", durationField1.getName());
      assertTrue(dateTimeField0.isSupported());
      assertEquals("monthOfYear", dateTimeField0.getName());
      assertEquals("monthOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(1, CopticChronology.AM);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology0);
      
      DurationField durationField0 = zonedChronology0.hours();
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(durationField0);
      
      GJDayOfWeekDateTimeField gJDayOfWeekDateTimeField0 = new GJDayOfWeekDateTimeField(ethiopicChronology0, durationField0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertEquals(3600000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertEquals(7, gJDayOfWeekDateTimeField0.getMaximumValue());
      assertFalse(gJDayOfWeekDateTimeField0.isLenient());
      assertTrue(gJDayOfWeekDateTimeField0.isSupported());
      assertEquals(1, gJDayOfWeekDateTimeField0.getMinimumValue());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(gJDayOfWeekDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(gJDayOfWeekDateTimeField0, dateTimeFieldType0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertEquals(3600000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertEquals(7, gJDayOfWeekDateTimeField0.getMaximumValue());
      assertFalse(gJDayOfWeekDateTimeField0.isLenient());
      assertTrue(gJDayOfWeekDateTimeField0.isSupported());
      assertEquals(1, gJDayOfWeekDateTimeField0.getMinimumValue());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", delegatedDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(delegatedDateTimeField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(delegatedDateTimeField0, dateTimeZone0, durationField0, durationField0, (DurationField) null);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertEquals(3600000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertEquals(7, gJDayOfWeekDateTimeField0.getMaximumValue());
      assertFalse(gJDayOfWeekDateTimeField0.isLenient());
      assertTrue(gJDayOfWeekDateTimeField0.isSupported());
      assertEquals(1, gJDayOfWeekDateTimeField0.getMinimumValue());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", delegatedDateTimeField0.getName());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      long long0 = zonedChronology_ZonedDateTimeField0.roundFloor(1000L);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertEquals(3600000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertEquals(7, gJDayOfWeekDateTimeField0.getMaximumValue());
      assertFalse(gJDayOfWeekDateTimeField0.isLenient());
      assertTrue(gJDayOfWeekDateTimeField0.isSupported());
      assertEquals(1, gJDayOfWeekDateTimeField0.getMinimumValue());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", delegatedDateTimeField0.getName());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(ethiopicChronology0);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(basicWeekyearDateTimeField0);
      
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(basicWeekyearDateTimeField0);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", delegatedDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(delegatedDateTimeField0);
      
      DurationField durationField0 = delegatedDateTimeField0.getLeapDurationField();
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", delegatedDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(durationField0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, dateTimeZone0);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", delegatedDateTimeField0.getName());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertTrue(zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(basicWeekyearDateTimeField0, dateTimeZone0, zonedChronology_ZonedDurationField0, durationField0, zonedChronology_ZonedDurationField0);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", delegatedDateTimeField0.getName());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertTrue(zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("weekyear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      long long0 = zonedChronology_ZonedDateTimeField0.roundCeiling(1);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", delegatedDateTimeField0.getName());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertTrue(zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("weekyear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(22143600000L, long0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology0);
      
      DurationField durationField0 = zonedChronology0.hours();
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(durationField0);
      
      GJDayOfWeekDateTimeField gJDayOfWeekDateTimeField0 = new GJDayOfWeekDateTimeField(ethiopicChronology0, durationField0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertEquals(1, gJDayOfWeekDateTimeField0.getMinimumValue());
      assertEquals(3600000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertTrue(gJDayOfWeekDateTimeField0.isSupported());
      assertFalse(gJDayOfWeekDateTimeField0.isLenient());
      assertEquals(7, gJDayOfWeekDateTimeField0.getMaximumValue());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(gJDayOfWeekDateTimeField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(gJDayOfWeekDateTimeField0, dateTimeZone0, durationField0, durationField0, (DurationField) null);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertEquals(1, gJDayOfWeekDateTimeField0.getMinimumValue());
      assertEquals(3600000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertTrue(gJDayOfWeekDateTimeField0.isSupported());
      assertFalse(gJDayOfWeekDateTimeField0.isLenient());
      assertEquals(7, gJDayOfWeekDateTimeField0.getMaximumValue());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      long long0 = zonedChronology_ZonedDateTimeField0.roundCeiling(1);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertEquals(1, gJDayOfWeekDateTimeField0.getMinimumValue());
      assertEquals(3600000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertTrue(gJDayOfWeekDateTimeField0.isSupported());
      assertFalse(gJDayOfWeekDateTimeField0.isLenient());
      assertEquals(7, gJDayOfWeekDateTimeField0.getMaximumValue());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(3600000L, long0);
  }
}
