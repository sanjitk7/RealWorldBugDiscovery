diff --git a/api-tests/src/test/java/org/openmrs/module/htmlformentry/RegressionTest.java b/api-tests/src/test/java/org/openmrs/module/htmlformentry/RegressionTest.java
index 8b6508c2..96b939a7 100644
--- a/api-tests/src/test/java/org/openmrs/module/htmlformentry/RegressionTest.java
+++ b/api-tests/src/test/java/org/openmrs/module/htmlformentry/RegressionTest.java
@@ -1100,133 +1100,6 @@ public class RegressionTest extends BaseModuleContextSensitiveTest {
                }.run();
        }
 
-       // see https://issues.openmrs.org/browse/HTML-678
-       @Test
-       public void testEditShouldNotClearTimeComponentForm() throws Exception {
-               final Date date = new Date();
-               new RegressionTestHelper() {
-
-                       @Override
-                       public String getFormName() {
-                               return "encounterDateAndLocationForm";
-                       }
-
-
-                       @Override
-                       public String[] widgetLabels() {
-                               return new String[] { "Date:", "Location:" };
-                       }
-
-                       @Override
-                       public void setupRequest(MockHttpServletRequest request, Map<String, String> widgets) {
-                               request.addParameter(widgets.get("Date:"), dateAsString(date));
-                               request.addParameter(widgets.get("Location:"), "2");
-
-
-                       }
-
-                       @Override
-                       public boolean doEditEncounter() {
-                               return true;
-                       }
-
-                       // instead of editing the existing encounter, create an encounter with an encounter datetime with a time component
-                       @Override
-                       public Encounter getEncounterToEdit() {
-                               Encounter encounter = new Encounter();
-                               encounter.setEncounterDatetime(date);
-                               encounter.setLocation(Context.getLocationService().getLocation(2));
-                               encounter.setDateCreated(date);
-                               encounter.setPatient(Context.getPatientService().getPatient(2));
-                               return encounter;
-                       }
-
-                       @Override
-                       public String[] widgetLabelsForEdit() {
-                               return new String[] { "Date:", "Location:"};
-                       };
-
-                       @Override
-                       public void setupEditRequest(MockHttpServletRequest request, Map<String, String> widgets) {
-                               request.addParameter(widgets.get("Date:"), dateAsString(date));
-                               request.addParameter(widgets.get("Location:"), "2");
-
-                       };
-
-                       @Override
-                       public void testEditedResults(SubmissionResults results) {
-                               results.assertNoErrors();
-                               results.assertEncounterDatetime(date);
-                       };
-
-               }.run();
-       }
-
-       // to make sure https://issues.openmrs.org/browse/HTML-678 doesn't break date editing
-       @Test
-       public void testEditShouldEditDate() throws Exception {
-
-               final Date date = new Date();
-               new RegressionTestHelper() {
-
-                       @Override
-                       public String getFormName() {
-                               return "encounterDateAndLocationForm";
-                       }
-
-
-                       @Override
-                       public String[] widgetLabels() {
-                               return new String[] { "Date:", "Location:" };
-                       }
-
-                       @Override
-                       public void setupRequest(MockHttpServletRequest request, Map<String, String> widgets) {
-                               request.addParameter(widgets.get("Date:"), "2015-07-08");
-                               request.addParameter(widgets.get("Location:"), "2");
-
-
-                       }
-
-                       @Override
-                       public boolean doEditEncounter() {
-                               return true;
-                       }
-
-                       // instead of editing the existing encounter, create an encounter with an encounter datetime with a time component
-                       @Override
-                       public Encounter getEncounterToEdit() {
-                               Encounter encounter = new Encounter();
-                               encounter.setEncounterDatetime(date);
-                               encounter.setLocation(Context.getLocationService().getLocation(2));
-                               encounter.setDateCreated(date);
-                               encounter.setPatient(Context.getPatientService().getPatient(2));
-                               return encounter;
-                       }
-
-                       @Override
-                       public String[] widgetLabelsForEdit() {
-                               return new String[] { "Date:", "Location:"};
-                       };
-
-                       @Override
-                       public void setupEditRequest(MockHttpServletRequest request, Map<String, String> widgets) {
-                               request.addParameter(widgets.get("Date:"), "2015-08-08");
-                               request.addParameter(widgets.get("Location:"), "2");
-
-                       };
-
-                       @Override
-                       public void testEditedResults(SubmissionResults results) {
-                               results.assertNoErrors();
-                               results.assertEncounterDatetime(date);
-                       };
-
-               }.run();
-       }
-
-       /**
-
        /**
         * This is supposed to be a regression test for HTML-135, but I couldn't get it to successfully
         * fail. There must be a difference between editing a form in production, versus in this unit
diff --git a/api/src/main/java/org/openmrs/module/htmlformentry/element/EncounterDetailSubmissionElement.java b/api/src/main/java/org/openmrs/module/htmlformentry/element/EncounterDetailSubmissionEle
ment.java
index 3dc57efd..fc54a7c6 100644
--- a/api/src/main/java/org/openmrs/module/htmlformentry/element/EncounterDetailSubmissionElement.java
+++ b/api/src/main/java/org/openmrs/module/htmlformentry/element/EncounterDetailSubmissionElement.java
@@ -4,7 +4,6 @@ import org.apache.commons.beanutils.PropertyUtils;
 import org.apache.commons.lang.StringEscapeUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
-import org.joda.time.DateMidnight;
 import org.openmrs.Encounter;
 import org.openmrs.EncounterType;
 import org.openmrs.Location;
@@ -776,21 +775,12 @@ public class EncounterDetailSubmissionElement implements HtmlGeneratorElement, F
     public void handleSubmission(FormEntrySession session, HttpServletRequest submission) {
         if (dateWidget != null) {
             Date date = (Date) dateWidget.getValue(session.getContext(), submission);
-            Date previousDate = session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime();
-
-            if (previousDate == null) {
-                session.getSubmissionActions().getCurrentEncounter().setEncounterDatetime(date);
-            }
-
-            else {
-                // we don't want to lose any time information just because we edited it with a form that only collects date,
-                // so we only update the date if the date has a time component or the actual date has changed
-                if (hasTimeComponent(date) || !stripTimeComponent(date).equals(stripTimeComponent(previousDate))) {
-                    session.getContext().setPreviousEncounterDate(
-                            new Date(session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime().getTime()));
-                    session.getSubmissionActions().getCurrentEncounter().setEncounterDatetime(date);
-                }
+            if (session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime() != null
+                    && !session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime().equals(date)) {
+                session.getContext().setPreviousEncounterDate(
+                        new Date(session.getSubmissionActions().getCurrentEncounter().getEncounterDatetime().getTime()));
             }
+            session.getSubmissionActions().getCurrentEncounter().setEncounterDatetime(date);
         }
         if (timeWidget != null) {
             Date time = (Date) timeWidget.getValue(session.getContext(), submission);
@@ -826,12 +816,4 @@ public class EncounterDetailSubmissionElement implements HtmlGeneratorElement, F
         }
     }
 
-    private boolean hasTimeComponent(Date date) {
-        return !(new DateMidnight(date).toDate().equals(date));
-    }
-
-    private DateMidnight stripTimeComponent(Date date) {
-        return new DateMidnight(date);
-    }
-
 }
diff --git a/api/src/test/resources/org/openmrs/module/htmlformentry/include/encounterDateAndLocationForm.xml b/api/src/test/resources/org/openmrs/module/htmlformentry/include/encounterDateAndLocatio
nForm.xml
deleted file mode 100644
index ce9ac16d..00000000
--- a/api/src/test/resources/org/openmrs/module/htmlformentry/include/encounterDateAndLocationForm.xml
+++ /dev/null
@@ -1,5 +0,0 @@
-<htmlform>
-    Date: <encounterDate/>
-    Location: <encounterLocation/>
-    <submit/>
-</htmlform>