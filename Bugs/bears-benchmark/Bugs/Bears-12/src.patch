diff --git a/release-notes/VERSION b/release-notes/VERSION
index c2c06a9ea..69c80bf52 100644
--- a/release-notes/VERSION
+++ b/release-notes/VERSION
@@ -6,9 +6,6 @@ Project: jackson-databind
 2.8.8 (not yet released)
 
 (partial) #994: `DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS` only works for POJOs, Maps
-#1345: `@JsonProperty(access = READ_ONLY)` together with generated constructor (Lombok) causes
- exception: "Could not find creator property with name ..."
- (reported by Raniz85@github)
 #1533: `AsPropertyTypeDeserializer` ignores `DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT`
 #1543: JsonFormat.Shape.NUMBER_INT does not work when defined on enum type in 2.8
  (reported by Alex P)
diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
index c69169f7f..4c6144408 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
@@ -441,11 +441,9 @@ public class BeanDeserializerFactory
             BeanDescription beanDesc, BeanDeserializerBuilder builder)
         throws JsonMappingException
     {
+        final SettableBeanProperty[] creatorProps =
+                builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig());
         final boolean isConcrete = !beanDesc.getType().isAbstract();
-        final SettableBeanProperty[] creatorProps = isConcrete
-                ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())
-                : null;
-        final boolean hasCreatorProps = (creatorProps != null);
         
         // 01-May-2016, tatu: Which base type to use here gets tricky, since
         //   it may often make most sense to use general type for overrides,
@@ -492,8 +490,8 @@ public class BeanDeserializerFactory
                 }
             }
         }
-        final boolean useGettersAsSetters = ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)
-                && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS);
+        final boolean useGettersAsSetters = (ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)
+                && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS));
 
         // Ok: let's then filter out property definitions
         List<BeanPropertyDefinition> propDefs = filterBeanProps(ctxt,
@@ -533,7 +531,7 @@ public class BeanDeserializerFactory
             }
             // 25-Sep-2014, tatu: No point in finding constructor parameters for abstract types
             //   (since they are never used anyway)
-            if (hasCreatorProps && propDef.hasConstructorParameter()) {
+            if (isConcrete && propDef.hasConstructorParameter()) {
                 /* If property is passed via constructor parameter, we must
                  * handle things in special way. Not sure what is the most optimal way...
                  * for now, let's just call a (new) method in builder, which does nothing.
@@ -550,13 +548,8 @@ public class BeanDeserializerFactory
                     }
                 }
                 if (cprop == null) {
-                    List<String> n = new ArrayList<>();
-                    for (SettableBeanProperty cp : creatorProps) {
-                        n.add(cp.getName());
-                    }
-                    ctxt.reportBadPropertyDefinition(beanDesc, propDef,
-                            "Could not find creator property with name '%s' (known Creator properties: %s)",
-                            name, n);
+                    ctxt.reportMappingException("Could not find creator property with name '%s' (in class %s)",
+                            name, beanDesc.getBeanClass().getName());
                     continue;
                 }
                 if (prop != null) {
diff --git a/src/test/java/com/fasterxml/jackson/databind/deser/ReadOrWriteOnlyTest.java b/src/test/java/com/fasterxml/jackson/databind/deser/ReadOrWriteOnlyTest.java
index 0afd3ffb9..78d54bcc9 100644
--- a/src/test/java/com/fasterxml/jackson/databind/deser/ReadOrWriteOnlyTest.java
+++ b/src/test/java/com/fasterxml/jackson/databind/deser/ReadOrWriteOnlyTest.java
@@ -1,7 +1,5 @@
 package com.fasterxml.jackson.databind.deser;
 
-import java.beans.ConstructorProperties;
-
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.databind.*;
 
@@ -49,22 +47,7 @@ public class ReadOrWriteOnlyTest extends BaseMapTest
         public void setLastName(String n) {
             lastName = n;
         }
-    }
-
-    // for [databind#1345], emulate way Lombok embellishes classes
-    static class Foo1345 {
-        @JsonProperty(access=JsonProperty.Access.READ_ONLY)
-        public String id;
-        public String name;
-
-        @ConstructorProperties({ "id", "name" })
-        public Foo1345(String id, String name) {
-            this.id = id;
-            this.name = name;
-        }
-
-        protected Foo1345() { }
-    }
+    }    
 
     /*
     /**********************************************************
@@ -92,12 +75,4 @@ public class ReadOrWriteOnlyTest extends BaseMapTest
         Pojo935 result = MAPPER.readValue(json, Pojo935.class);
         assertNotNull(result);
     }
-
-    public void testReadOnly1345() throws Exception
-    {
-        Foo1345 result = MAPPER.readValue("{\"name\":\"test\"}", Foo1345.class);
-        assertNotNull(result);
-        assertEquals("test", result.name);
-        assertNull(result.id);
-    }
 }
diff --git a/src/test/java/com/fasterxml/jackson/failing/ReadOnly1345Test.java b/src/test/java/com/fasterxml/jackson/failing/ReadOnly1345Test.java
new file mode 100644
index 000000000..7c081786b
--- /dev/null
+++ b/src/test/java/com/fasterxml/jackson/failing/ReadOnly1345Test.java
@@ -0,0 +1,29 @@
+package com.fasterxml.jackson.failing;
+
+import java.beans.ConstructorProperties;
+
+import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.databind.*;
+
+public class ReadOnly1345Test extends BaseMapTest
+{
+    static class Foo1345 {
+        @JsonProperty(access=JsonProperty.Access.READ_ONLY)
+        public String id;
+        public String name;
+
+        @ConstructorProperties({ "id", "name" })
+        public Foo1345(String id, String name) {
+            this.id = id;
+            this.name = name;
+        }
+    }
+
+    public void testReadOnly1345() throws Exception
+    {
+        ObjectMapper mapper = new ObjectMapper();
+        Foo1345 result = mapper.readValue("{\"name\":\"test\"}", Foo1345.class);
+        assertNotNull(result);
+        assertEquals("test", result.name);
+    }
+}
