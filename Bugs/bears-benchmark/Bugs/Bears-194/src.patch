diff --git a/src/main/java/com/gdssecurity/pmd/rules/dfa/DfaSecurityRule.java b/src/main/java/com/gdssecurity/pmd/rules/dfa/DfaSecurityRule.java
index c78faf2f6..d93425e7c 100644
--- a/src/main/java/com/gdssecurity/pmd/rules/dfa/DfaSecurityRule.java
+++ b/src/main/java/com/gdssecurity/pmd/rules/dfa/DfaSecurityRule.java
@@ -544,6 +544,9 @@ public class DfaSecurityRule extends BaseSecurityRule implements Executable {
 	private boolean isAnyArgumentTainted(Node simpleNode) {
 		ASTArgumentList argListNode = simpleNode.getFirstDescendantOfType(ASTArgumentList.class);
 		if (argListNode != null) {
+			if (isSanitized(argListNode)) {
+				return false;
+			}
 			int numChildren = argListNode.jjtGetNumChildren();
 			for (int i = 0; i < numChildren; i++) {
 				Node argument = argListNode.jjtGetChild(i);
@@ -555,6 +558,27 @@ public class DfaSecurityRule extends BaseSecurityRule implements Executable {
 		return false;
 	}
 
+	private boolean isSanitized(ASTArgumentList argListNode) {
+		try {
+			ASTArguments arguments = (ASTArguments) argListNode.jjtGetParent();
+			ASTPrimarySuffix suffix = (ASTPrimarySuffix) arguments.jjtGetParent();
+			ASTPrimaryExpression exp = (ASTPrimaryExpression) suffix.jjtGetParent();
+			String method = getMethod(exp);
+			Class<?> type = getJavaType(exp);
+			String typeName = type.getName();
+			if (isSink(typeName, method)) {
+				return false;
+			}
+			if (isSanitizerMethod(typeName, method) || isSafeType(getReturnType(exp, typeName, method))) {
+				return true;
+			}
+		}
+		catch (Exception e) {
+			return false;
+		}
+		return false;
+	}
+
 	private boolean isMethodCall(Node node) {
 		ASTArguments arguments = node.getFirstDescendantOfType(ASTArguments.class);
 		return arguments != null;
