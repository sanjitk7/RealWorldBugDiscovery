diff --git a/src/main/java/org/jsapar/compose/bean/BeanComposer.java b/src/main/java/org/jsapar/compose/bean/BeanComposer.java
index cef34f6b..93b03ad6 100644
--- a/src/main/java/org/jsapar/compose/bean/BeanComposer.java
+++ b/src/main/java/org/jsapar/compose/bean/BeanComposer.java
@@ -136,7 +136,7 @@ public class BeanComposer<T> implements Composer, BeanEventListener<T>, ErrorEve
 
         for (Cell cell : line) {
             String sName = cell.getName();
-            if (sName == null || sName.isEmpty() || cell.isEmpty())
+            if (sName == null || sName.isEmpty())
                 continue;
 
             try {
diff --git a/src/main/java/org/jsapar/parse/bean/Bean2Cell.java b/src/main/java/org/jsapar/parse/bean/Bean2Cell.java
index bdecb9b2..5a9b4edd 100644
--- a/src/main/java/org/jsapar/parse/bean/Bean2Cell.java
+++ b/src/main/java/org/jsapar/parse/bean/Bean2Cell.java
@@ -228,9 +228,6 @@ public class Bean2Cell {
 
     public void assign(Object bean, Cell cell)
             throws BeanComposeException, InvocationTargetException, IllegalAccessException, InstantiationException {
-        if(cell.isEmpty()) {
-            return;
-        }
         if (isLeaf()) {
             assignProperty(bean, cell);
             return;
diff --git a/src/test/java/org/jsapar/parse/bean/Bean2CellTest.java b/src/test/java/org/jsapar/parse/bean/Bean2CellTest.java
index f6122edb..31a11a85 100644
--- a/src/test/java/org/jsapar/parse/bean/Bean2CellTest.java
+++ b/src/test/java/org/jsapar/parse/bean/Bean2CellTest.java
@@ -4,7 +4,6 @@ import org.jsapar.TstPerson;
 import org.jsapar.compose.bean.BeanComposeException;
 import org.jsapar.model.BooleanCell;
 import org.jsapar.model.Cell;
-import org.jsapar.model.StringCell;
 import org.junit.Test;
 
 import java.beans.BeanInfo;
@@ -31,7 +30,10 @@ public class Bean2CellTest {
 
     @Test
     public void makeCell() throws IntrospectionException, InvocationTargetException, IllegalAccessException {
-        Bean2Cell bean2Cell = makeBean2CellOfPropertyName(TstPerson.class, "adult");
+        BeanInfo beanInfo = Introspector.getBeanInfo(TstPerson.class);
+        PropertyDescriptor propertyDescriptor = Arrays.stream(beanInfo.getPropertyDescriptors())
+                .filter(it -> it.getName().equals("adult")).findFirst().orElseThrow(AssertionError::new);
+        Bean2Cell bean2Cell = Bean2Cell.ofCellName("adult", propertyDescriptor);
         TstPerson tstPerson = new TstPerson();
         tstPerson.setAdult(true);
         Cell cell = bean2Cell.makeCell(tstPerson);
@@ -45,7 +47,10 @@ public class Bean2CellTest {
     public void assign_Boolean()
             throws IntrospectionException, InvocationTargetException, InstantiationException, IllegalAccessException,
             BeanComposeException {
-        Bean2Cell bean2Cell = makeBean2CellOfPropertyName(TstPerson.class, "adult");
+        BeanInfo beanInfo = Introspector.getBeanInfo(TstPerson.class);
+        PropertyDescriptor propertyDescriptor = Arrays.stream(beanInfo.getPropertyDescriptors())
+                .filter(it -> it.getName().equals("adult")).findFirst().orElseThrow(AssertionError::new);
+        Bean2Cell bean2Cell = Bean2Cell.ofCellName("adult", propertyDescriptor);
         TstPerson tstPerson = new TstPerson();
         assertFalse(tstPerson.isAdult());
         bean2Cell.assign(tstPerson, new BooleanCell("adult", true));
@@ -53,35 +58,4 @@ public class Bean2CellTest {
         bean2Cell.assign(tstPerson, new BooleanCell("adult", false));
         assertFalse(tstPerson.isAdult());
     }
-
-    @Test
-    public void assign_String()
-            throws IntrospectionException, InvocationTargetException, InstantiationException, IllegalAccessException,
-            BeanComposeException {
-        Bean2Cell bean2Cell = makeBean2CellOfPropertyName(TstPerson.class, "lastName");
-        TstPerson tstPerson = new TstPerson();
-        assertEquals("Nobody", tstPerson.getLastName());
-        bean2Cell.assign(tstPerson, new StringCell("lastName", "Somebody"));
-        assertEquals("Somebody", tstPerson.getLastName());
-    }
-
-    @SuppressWarnings("SameParameterValue")
-    private Bean2Cell makeBean2CellOfPropertyName(Class<?> beanClass, String propertyName) throws IntrospectionException {
-        BeanInfo beanInfo = Introspector.getBeanInfo(beanClass);
-        PropertyDescriptor propertyDescriptor = Arrays.stream(beanInfo.getPropertyDescriptors())
-                .filter(it -> it.getName().equals(propertyName)).findFirst().orElseThrow(AssertionError::new);
-        return Bean2Cell.ofCellName(propertyName, propertyDescriptor);
-    }
-
-    @Test
-    public void assign_empty()
-            throws IntrospectionException, InvocationTargetException, InstantiationException, IllegalAccessException,
-            BeanComposeException {
-        Bean2Cell bean2Cell = makeBean2CellOfPropertyName(TstPerson.class, "lastName");
-        TstPerson tstPerson = new TstPerson();
-        assertEquals("Nobody", tstPerson.getLastName());
-        bean2Cell.assign(tstPerson, StringCell.emptyOf("lastName"));
-        assertEquals("Nobody", tstPerson.getLastName());
-    }
-
 }