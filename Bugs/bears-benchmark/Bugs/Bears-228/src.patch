diff --git a/omod-1.9/src/main/java/org/openmrs/module/webservices/rest/web/v1_0/resource/openmrs1_9/ObsResource1_9.java b/omod-1.9/src/main/java/org/openmrs/module/webservices/rest/web/v1_0/resource/openmrs1_9/ObsResource1_9.java
index 2addff34..ed0d28d8 100644
--- a/omod-1.9/src/main/java/org/openmrs/module/webservices/rest/web/v1_0/resource/openmrs1_9/ObsResource1_9.java
+++ b/omod-1.9/src/main/java/org/openmrs/module/webservices/rest/web/v1_0/resource/openmrs1_9/ObsResource1_9.java
@@ -9,11 +9,7 @@
  */
 package org.openmrs.module.webservices.rest.web.v1_0.resource.openmrs1_9;
 
-import java.util.Map;
-
-import org.openmrs.Concept;
 import org.openmrs.Obs;
-import org.openmrs.module.webservices.rest.web.ConversionUtil;
 import org.openmrs.module.webservices.rest.web.RestConstants;
 import org.openmrs.module.webservices.rest.web.annotation.PropertySetter;
 import org.openmrs.module.webservices.rest.web.annotation.Resource;
@@ -35,19 +31,7 @@ public class ObsResource1_9 extends ObsResource1_8 {
         */
        @PropertySetter("concept")
        public static void setConcept(Obs obs, Object value) {
-               Object identifier = null;
-               if (value instanceof Map) {
-                       Object uuid = ((Map) value).get(RestConstants.PROPERTY_UUID);
-                       if (uuid != null) {
-                               identifier = uuid;
-                       }
-               }
-               
-               if (identifier == null) {
-                       identifier = value;
-               }
-               
-               obs.setConcept(ConversionUtil.getConverter(Concept.class).getByUniqueId((String) identifier));
+               obs.setConcept(new ConceptResource1_9().getByUniqueId((String) value));
        }
        
 }
diff --git a/omod-1.9/src/test/java/org/openmrs/module/webservices/rest/web/v1_0/controller/openmrs1_9/ObsController1_9Test.java b/omod-1.9/src/test/java/org/openmrs/module/webservices/rest/web/v1_0/controller/openmrs1_9/ObsController1_9Test.java
index eeaaa4fa..a89d1f9f 100644
--- a/omod-1.9/src/test/java/org/openmrs/module/webservices/rest/web/v1_0/controller/openmrs1_9/ObsController1_9Test.java
+++ b/omod-1.9/src/test/java/org/openmrs/module/webservices/rest/web/v1_0/controller/openmrs1_9/ObsController1_9Test.java
@@ -9,7 +9,6 @@
  */
 package org.openmrs.module.webservices.rest.web.v1_0.controller.openmrs1_9;
 
-import com.fasterxml.jackson.databind.ObjectMapper;
 import org.apache.commons.beanutils.PropertyUtils;
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.io.output.ByteArrayOutputStream;
@@ -22,6 +21,7 @@ import org.openmrs.api.AdministrationService;
 import org.openmrs.api.ConceptService;
 import org.openmrs.api.context.Context;
 import org.openmrs.module.webservices.rest.SimpleObject;
+import org.openmrs.module.webservices.rest.test.Util;
 import org.openmrs.module.webservices.rest.web.RestTestConstants1_8;
 import org.openmrs.module.webservices.rest.web.response.ResourceDoesNotSupportOperationException;
 import org.openmrs.module.webservices.rest.web.v1_0.controller.MainResourceControllerTest;
@@ -199,22 +199,6 @@ public class ObsController1_9Test extends MainResourceControllerTest {
                assertThat(out.toByteArray(), is(equalTo(rawResponse.getContentAsByteArray())));
        }
        
-       @Test
-       public void getObs_shouldCreateAnObsWhenTheQuestionConceptIsSetAsAMapContainingTheUuid() throws Exception {
-               long originalCount = getAllCount();
-               SimpleObject obs = new SimpleObject();
-               obs.add("person", "da7f524f-27ce-4bb2-86d6-6d1d05312bd5");
-               SimpleObject concept = new SimpleObject();
-               concept.add("uuid", "c607c80f-1ea9-4da3-bb88-6276ce8868dd");
-               concept.add("name", new SimpleObject());
-               obs.add("concept", concept);
-               obs.add("obsDatetime", "2018-11-13T00:00:00.000-0500");
-               obs.add("value", 180.0);
-               String json = new ObjectMapper().writeValueAsString(obs);
-               handle(newPostRequest(getURI(), json));
-               assertEquals(++originalCount, getAllCount());
-       }
-       
        private ConceptComplex newConceptComplex() {
                setupBinaryDataHandler();