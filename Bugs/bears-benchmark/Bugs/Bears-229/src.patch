diff --git a/README.md b/README.md
index a4d8f5f..4c9c5eb 100644
--- a/README.md
+++ b/README.md
@@ -59,9 +59,9 @@ The following tags are added to traces :
 | `component` | `java-p6spy` |
 | `peer.service` | if exists, the peer service name set in `spy.properties` or within the jdbc url using `tracingPeerService` |
 | `error` | `true` is any error occurred. `false` otherwise |
-| `db.type` | if exists, the authoritative part of the jdbc url (ex : `mysql` in `jdbc:mysql://localhost`) |
+| `db.type` | the authoritative part of the jdbc url (ex : `mysql` in `jdbc:mysql://localhost`) |
 | `db.statement` | the SQL query |
-| `db.instance` | if exists, the connection's catalog (can be a database name or a schema) |
+| `db.instance` | the connection's catalog (can be a database name or a schema) |
 | `db.user` | if exists, the user name |
 
 [ci-img]: https://travis-ci.org/opentracing-contrib/java-p6spy.svg?branch=master
diff --git a/pom.xml b/pom.xml
index 33f5b63..2c3ad12 100644
--- a/pom.xml
+++ b/pom.xml
@@ -80,14 +80,6 @@
       <version>${p6spy.version}</version>
     </dependency>
 
-    <dependency>
-      <groupId>io.opentracing</groupId>
-      <artifactId>opentracing-util</artifactId>
-      <version>${opentracing.version}</version>
-      <type>test-jar</type>
-      <scope>test</scope>
-    </dependency>
-
     <dependency>
       <groupId>io.opentracing</groupId>
       <artifactId>opentracing-mock</artifactId>
@@ -98,35 +90,28 @@
     <dependency>
       <groupId>org.hsqldb</groupId>
       <artifactId>hsqldb</artifactId>
-      <version>2.4.1</version>
+      <version>2.4.0</version>
       <scope>test</scope>
     </dependency>
 
     <dependency>
       <groupId>org.hibernate</groupId>
       <artifactId>hibernate-core</artifactId>
-      <version>5.3.6.Final</version>
+      <version>5.2.12.Final</version>
       <scope>test</scope>
     </dependency>
 
     <dependency>
       <groupId>org.springframework</groupId>
       <artifactId>spring-jdbc</artifactId>
-      <version>4.3.19.RELEASE</version>
+      <version>4.3.12.RELEASE</version>
       <scope>test</scope>
     </dependency>
 
     <dependency>
       <groupId>org.apache.commons</groupId>
       <artifactId>commons-dbcp2</artifactId>
-      <version>2.5.0</version>
-      <scope>test</scope>
-    </dependency>
-
-    <dependency>
-      <groupId>org.mockito</groupId>
-      <artifactId>mockito-core</artifactId>
-      <version>2.22.0</version>
+      <version>2.1.1</version>
       <scope>test</scope>
     </dependency>
 
diff --git a/src/main/java/io/opentracing/contrib/p6spy/TracingP6SpyListener.java b/src/main/java/io/opentracing/contrib/p6spy/TracingP6SpyListener.java
index c5a9da6..dcba6da 100644
--- a/src/main/java/io/opentracing/contrib/p6spy/TracingP6SpyListener.java
+++ b/src/main/java/io/opentracing/contrib/p6spy/TracingP6SpyListener.java
@@ -122,17 +122,13 @@ class TracingP6SpyListener extends SimpleJdbcEventListener {
 
     Tags.COMPONENT.set(span, "java-p6spy");
     Tags.DB_STATEMENT.set(span, statementInformation.getSql());
-    if (!isNullOrEmpty(dbUrl)) {
-      span.setTag("peer.address", dbUrl);
-      Tags.DB_TYPE.set(span, extractDbType(dbUrl));
-    }
-    if (!isNullOrEmpty(dbInstance)) {
-      Tags.DB_INSTANCE.set(span, dbInstance);
-    }
-    if (!isNullOrEmpty(peerName)) {
+    Tags.DB_TYPE.set(span, extractDbType(dbUrl));
+    Tags.DB_INSTANCE.set(span, dbInstance);
+    span.setTag("peer.address", dbUrl);
+    if (peerName != null && !peerName.isEmpty()) {
       Tags.PEER_SERVICE.set(span, peerName);
     }
-    if (!isNullOrEmpty(dbUser)) {
+    if (dbUser != null && !dbUser.isEmpty()) {
       Tags.DB_USER.set(span, dbUser);
     }
   }
@@ -142,11 +138,9 @@ class TracingP6SpyListener extends SimpleJdbcEventListener {
   }
 
   private static String extractPeerService(String url) {
-    if (url != null) {
-      Matcher matcher = URL_PEER_SERVICE_FINDER.matcher(url);
-      if (matcher.find() && matcher.groupCount() == 1) {
-        return matcher.group(1);
-      }
+    Matcher matcher = URL_PEER_SERVICE_FINDER.matcher(url);
+    if (matcher.find() && matcher.groupCount() == 1) {
+      return matcher.group(1);
     }
     return "";
   }
@@ -173,8 +167,4 @@ class TracingP6SpyListener extends SimpleJdbcEventListener {
     }
     return OptionalBoolean.OPTION_NOT_FOUND;
   }
-
-  private static boolean isNullOrEmpty(String s) {
-    return s == null || s.isEmpty();
-  }
 }
diff --git a/src/test/java/io/opentracing/contrib/p6spy/HibernateTest.java b/src/test/java/io/opentracing/contrib/p6spy/HibernateTest.java
index f504067..89603ae 100644
--- a/src/test/java/io/opentracing/contrib/p6spy/HibernateTest.java
+++ b/src/test/java/io/opentracing/contrib/p6spy/HibernateTest.java
@@ -18,7 +18,7 @@ import com.p6spy.engine.spy.option.SpyDotProperties;
 import io.opentracing.Scope;
 import io.opentracing.mock.MockSpan;
 import io.opentracing.mock.MockTracer;
-import io.opentracing.util.GlobalTracerTestUtil;
+import io.opentracing.util.GlobalTracer;
 import io.opentracing.util.ThreadLocalScopeManager;
 import java.util.List;
 import javax.persistence.Column;
@@ -51,7 +51,7 @@ public class HibernateTest {
 
   @BeforeClass
   public static void init() {
-    GlobalTracerTestUtil.setGlobalTracerUnconditionally(mockTracer);
+    GlobalTracer.register(mockTracer);
   }
 
   @Before
diff --git a/src/test/java/io/opentracing/contrib/p6spy/JdbcTest.java b/src/test/java/io/opentracing/contrib/p6spy/JdbcTest.java
deleted file mode 100644
index e5070a9..0000000
--- a/src/test/java/io/opentracing/contrib/p6spy/JdbcTest.java
+++ /dev/null
@@ -1,144 +0,0 @@
-/*
- * Copyright 2017-2018 The OpenTracing Authors
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
- * in compliance with the License. You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the License
- * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
- * or implied. See the License for the specific language governing permissions and limitations under
- * the License.
- */
-package io.opentracing.contrib.p6spy;
-
-import com.p6spy.engine.common.ConnectionInformation;
-import com.p6spy.engine.common.StatementInformation;
-import io.opentracing.mock.MockSpan;
-import io.opentracing.mock.MockTracer;
-import io.opentracing.tag.Tags;
-import io.opentracing.util.GlobalTracerTestUtil;
-import java.sql.Connection;
-import java.sql.DriverManager;
-import java.sql.SQLException;
-import java.sql.Statement;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import org.junit.Before;
-import org.junit.BeforeClass;
-import org.junit.Test;
-import org.mockito.Mockito;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
-public class JdbcTest {
-
-  private static final MockTracer mockTracer = new MockTracer();
-
-  @BeforeClass
-  public static void init() {
-    GlobalTracerTestUtil.setGlobalTracerUnconditionally(mockTracer);
-  }
-
-  @Before
-  public void before() {
-    mockTracer.reset();
-  }
-
-  @Test
-  public void should_report_one_span() throws Exception {
-    Connection connection = DriverManager.getConnection("jdbc:p6spy:hsqldb:mem:jdbc");
-    Statement statement = connection.createStatement();
-    statement.executeUpdate("CREATE TABLE employer (id INTEGER)");
-    connection.close();
-    List<MockSpan> spans = mockTracer.finishedSpans();
-    assertEquals(1, spans.size());
-  }
-
-  @Test
-  public void should_report_one_span_with_null_url() throws Exception {
-    final Connection connection = createConnection();
-    Mockito.when(connection.getMetaData().getURL()).thenReturn(null);
-    simulateExecuteQuery(connection);
-
-    List<MockSpan> spans = mockTracer.finishedSpans();
-    assertEquals(1, spans.size());
-    final MockSpan span = spans.get(0);
-    assertNull(span.tags().get("peer.address"));
-    assertNull(span.tags().get(Tags.DB_TYPE.getKey()));
-  }
-
-  @Test
-  public void should_report_one_span_with_null_user() throws Exception {
-    final Connection connection = createConnection();
-    Mockito.when(connection.getMetaData().getUserName()).thenReturn(null);
-    simulateExecuteQuery(connection);
-
-    List<MockSpan> spans = mockTracer.finishedSpans();
-    assertEquals(1, spans.size());
-    final MockSpan span = spans.get(0);
-    assertNull(span.tags().get(Tags.DB_USER.getKey()));
-  }
-
-  @Test
-  public void should_report_one_span_with_null_catalog() throws Exception {
-    final Connection connection = createConnection();
-    Mockito.when(connection.getCatalog()).thenReturn(null);
-    simulateExecuteQuery(connection);
-
-    List<MockSpan> spans = mockTracer.finishedSpans();
-    assertEquals(1, spans.size());
-    final MockSpan span = spans.get(0);
-    assertNull(span.tags().get(Tags.DB_INSTANCE.getKey()));
-  }
-
-  @Test
-  public void should_not_report_span_with_sql_exception() throws Exception {
-    final Connection connection = createConnection();
-    Mockito.when(connection.getCatalog()).thenThrow(new SQLException());
-    simulateExecuteQuery(connection);
-
-    List<MockSpan> spans = mockTracer.finishedSpans();
-    assertEquals(0, spans.size());
-  }
-
-  private static Connection createConnection() throws SQLException {
-    final Connection connection = DriverManager.getConnection("jdbc:p6spy:hsqldb:mem:jdbc");
-    return deepDelegates(connection);
-  }
-
-  private static void simulateExecuteQuery(Connection connection) {
-    final StatementInformation statementInformation = new StatementInformation(ConnectionInformation.fromTestConnection(connection));
-    final TracingP6SpyListener p6SpyListener = new TracingP6SpyListener("", false);
-    p6SpyListener.onBeforeAnyExecute(statementInformation);
-    p6SpyListener.onAfterAnyExecute(statementInformation, 1, null);
-  }
-
-  private static <T> T deepDelegates(final T t) {
-    final T mocked =
-        (T) Mockito.mock(t.getClass(), new Answer() {
-          Map<InvocationOnMock, Object> memoizedCalls = new HashMap<>();
-
-          @Override public Object answer(InvocationOnMock invocation) throws Throwable {
-            final Object memoizedReturnedValue = memoizedCalls.get(invocation);
-            if (memoizedReturnedValue != null) {
-              return memoizedReturnedValue;
-            }
-            Object returnedValue = invocation.getMethod().invoke(t, invocation.getArguments());
-            if (returnedValue != null) {
-              try {
-                returnedValue = deepDelegates(returnedValue);
-              } catch (Throwable e){}
-            }
-            memoizedCalls.put(invocation, returnedValue);
-            return returnedValue;
-          }
-        });
-    return mocked;
-  }
-}
diff --git a/src/test/java/io/opentracing/contrib/p6spy/SpringTest.java b/src/test/java/io/opentracing/contrib/p6spy/SpringTest.java
index b738cfc..4d77e00 100644
--- a/src/test/java/io/opentracing/contrib/p6spy/SpringTest.java
+++ b/src/test/java/io/opentracing/contrib/p6spy/SpringTest.java
@@ -16,7 +16,7 @@ package io.opentracing.contrib.p6spy;
 import io.opentracing.Scope;
 import io.opentracing.mock.MockSpan;
 import io.opentracing.mock.MockTracer;
-import io.opentracing.util.GlobalTracerTestUtil;
+import io.opentracing.util.GlobalTracer;
 import io.opentracing.util.ThreadLocalScopeManager;
 import java.sql.SQLException;
 import java.util.List;
@@ -38,7 +38,7 @@ public class SpringTest {
 
   @BeforeClass
   public static void init() {
-    GlobalTracerTestUtil.setGlobalTracerUnconditionally(mockTracer);
+    GlobalTracer.register(mockTracer);
   }
 
   @Before