diff --git a/address-controller/src/main/java/io/enmasse/controller/api/DefaultExceptionMapper.java b/address-controller/src/main/java/io/enmasse/controller/api/DefaultExceptionMapper.java
index ef45c560..1d8d40d3 100644
--- a/address-controller/src/main/java/io/enmasse/controller/api/DefaultExceptionMapper.java
+++ b/address-controller/src/main/java/io/enmasse/controller/api/DefaultExceptionMapper.java
@@ -11,6 +11,7 @@ import javax.ws.rs.ext.Provider;
 
 import io.enmasse.address.model.UnresolvedAddressException;
 import io.enmasse.address.model.UnresolvedAddressSpaceException;
+import io.enmasse.address.model.v1.DeserializeException;
 import io.enmasse.controller.common.exceptionmapping.ErrorResponse;
 import okhttp3.ResponseBody;
 import org.slf4j.Logger;
@@ -28,7 +29,7 @@ public class DefaultExceptionMapper implements ExceptionMapper<Exception> {
             WebApplicationException webApplicationException = (WebApplicationException) exception;
             status = Response.Status.fromStatusCode(webApplicationException.getResponse().getStatus());
             response = webApplicationException.getResponse();
-        } else if (exception instanceof UnresolvedAddressException || exception instanceof UnresolvedAddressSpaceException) {
+        } else if (exception instanceof UnresolvedAddressException || exception instanceof UnresolvedAddressSpaceException || exception instanceof DeserializeException) {
             status = Response.Status.BAD_REQUEST;
             response = Response.status(status)
                     .entity(new ErrorResponse(null, exception.getMessage()))
diff --git a/address-model-lib/src/main/java/io/enmasse/address/model/v1/AddressSpaceV1Deserializer.java b/address-model-lib/src/main/java/io/enmasse/address/model/v1/AddressSpaceV1Deserializer.java
index c0fafac2..b5e07005 100644
--- a/address-model-lib/src/main/java/io/enmasse/address/model/v1/AddressSpaceV1Deserializer.java
+++ b/address-model-lib/src/main/java/io/enmasse/address/model/v1/AddressSpaceV1Deserializer.java
@@ -35,6 +35,7 @@ class AddressSpaceV1Deserializer extends JsonDeserializer<AddressSpace> {
     }
 
     AddressSpace deserialize(ObjectNode root) {
+        validate(root);
 
         ObjectNode metadata = (ObjectNode) root.get(Fields.METADATA);
         ObjectNode spec = (ObjectNode) root.get(Fields.SPEC);
@@ -147,6 +148,42 @@ class AddressSpaceV1Deserializer extends JsonDeserializer<AddressSpace> {
         return builder.build();
     }
 
+    private void validate(ObjectNode root) {
+        validateMetadata(root);
+        validateSpec(root);
+    }
+
+    private void validateMetadata(ObjectNode root) {
+        JsonNode node = root.get(Fields.METADATA);
+        if (node == null || !node.isObject()) {
+            throw new DeserializeException("Missing 'metadata' object field");
+        }
+
+        ObjectNode metadata = (ObjectNode) node;
+        JsonNode name = metadata.get(Fields.NAME);
+        if (name == null || !name.isTextual()) {
+            throw new DeserializeException("Missing 'name' string field in 'metadata'");
+        }
+    }
+
+    private void validateSpec(ObjectNode root) {
+        JsonNode node = root.get(Fields.SPEC);
+        if (node == null || !node.isObject()) {
+            throw new DeserializeException("Missing 'spec' object field");
+        }
+
+        ObjectNode spec = (ObjectNode) node;
+        JsonNode type = spec.get(Fields.TYPE);
+        if (type == null || !type.isTextual()) {
+            throw new DeserializeException("Missing 'type' string field in 'spec'");
+        }
+
+        JsonNode plan = spec.get(Fields.PLAN);
+        if (plan == null || !plan.isTextual()) {
+            throw new DeserializeException("Missing 'plan' string field in 'spec'");
+        }
+    }
+
     static class TypeConverter {
         private static final Map<Class, Function<JsonNode, Object>> converterMap = new HashMap<>();
 
diff --git a/address-model-lib/src/main/java/io/enmasse/address/model/v1/AddressV1Deserializer.java b/address-model-lib/src/main/java/io/enmasse/address/model/v1/AddressV1Deserializer.java
index 93877799..a59850e8 100644
--- a/address-model-lib/src/main/java/io/enmasse/address/model/v1/AddressV1Deserializer.java
+++ b/address-model-lib/src/main/java/io/enmasse/address/model/v1/AddressV1Deserializer.java
@@ -7,6 +7,7 @@ package io.enmasse.address.model.v1;
 import com.fasterxml.jackson.core.JsonParser;
 import com.fasterxml.jackson.databind.DeserializationContext;
 import com.fasterxml.jackson.databind.JsonDeserializer;
+import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.node.ArrayNode;
 import com.fasterxml.jackson.databind.node.ObjectNode;
@@ -29,6 +30,7 @@ class AddressV1Deserializer extends JsonDeserializer<Address> {
     }
 
     Address deserialize(ObjectNode root) {
+        validate(root);
         ObjectNode metadata = (ObjectNode) root.get(Fields.METADATA);
         ObjectNode spec = (ObjectNode) root.get(Fields.SPEC);
         ObjectNode status = (ObjectNode) root.get(Fields.STATUS);
@@ -83,4 +85,27 @@ class AddressV1Deserializer extends JsonDeserializer<Address> {
 
         return builder.build();
     }
+
+    private void validate(ObjectNode root) {
+        JsonNode node = root.get(Fields.SPEC);
+        if (node == null || !node.isObject()) {
+            throw new DeserializeException("Missing 'spec' object field");
+        }
+
+        ObjectNode spec = (ObjectNode) node;
+        JsonNode address = spec.get(Fields.ADDRESS);
+        if (address == null || !address.isTextual()) {
+            throw new DeserializeException("Missing 'address' string field in 'spec'");
+        }
+
+        JsonNode type = spec.get(Fields.TYPE);
+        if (type == null || !type.isTextual()) {
+            throw new DeserializeException("Missing 'type' string field in 'spec'");
+        }
+
+        JsonNode plan = spec.get(Fields.PLAN);
+        if (plan == null || !plan.isTextual()) {
+            throw new DeserializeException("Missing 'plan' string field in 'spec'");
+        }
+    }
 }
