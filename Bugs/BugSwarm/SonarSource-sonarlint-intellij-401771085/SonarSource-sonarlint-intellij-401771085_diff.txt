diff --git a/src/main/java/org/sonarlint/intellij/config/global/rules/RuleConfigurationPanel.java b/src/main/java/org/sonarlint/intellij/config/global/rules/RuleConfigurationPanel.java
index c33fcc43..7034875a 100644
--- a/src/main/java/org/sonarlint/intellij/config/global/rules/RuleConfigurationPanel.java
+++ b/src/main/java/org/sonarlint/intellij/config/global/rules/RuleConfigurationPanel.java
@@ -114,7 +114,7 @@ public class RuleConfigurationPanel implements ConfigurationPanel<SonarLintGloba
   }
 
   private void saveCurrentActivation() {
-    currentActivationByRuleKey = model.getCurrentRuleActivation();
+    model.saveCurrentRuleActivation(currentActivationByRuleKey);
   }
 
   @Override public void load(SonarLintGlobalSettings settings) {
@@ -127,6 +127,8 @@ public class RuleConfigurationPanel implements ConfigurationPanel<SonarLintGloba
   }
 
   private void updateModel() {
+    saveCurrentActivation();
+    filterComponent.getTextEditor().setText(filterModel.getText());
     Collection<RuleDetails> ruleDetails = engine.getAllRuleDetails();
     Map<String, List<RulesTreeNode.Rule>> rulesByLanguage = ruleDetails.stream()
       .map(r -> new RulesTreeNode.Rule(r, currentActivationByRuleKey.get(r.getKey())))
@@ -240,7 +242,6 @@ public class RuleConfigurationPanel implements ConfigurationPanel<SonarLintGloba
 
     filterComponent = new FilterComponent("sonarlint_rule_filter", 10) {
       @Override public void filter() {
-        saveCurrentActivation();
         filterModel.setText(getFilter());
       }
     };
diff --git a/src/main/java/org/sonarlint/intellij/config/global/rules/RulesTreeTableModel.java b/src/main/java/org/sonarlint/intellij/config/global/rules/RulesTreeTableModel.java
index e380c623..3a32359b 100644
--- a/src/main/java/org/sonarlint/intellij/config/global/rules/RulesTreeTableModel.java
+++ b/src/main/java/org/sonarlint/intellij/config/global/rules/RulesTreeTableModel.java
@@ -24,7 +24,6 @@ import com.intellij.ui.treeStructure.treetable.TreeTableModel;
 import com.intellij.ui.treeStructure.treetable.TreeTableTree;
 import com.intellij.util.ui.JBUI;
 import icons.SonarLintIcons;
-import java.util.HashMap;
 import java.util.Map;
 import javax.swing.Icon;
 import javax.swing.JTree;
@@ -112,15 +111,13 @@ public class RulesTreeTableModel extends DefaultTreeModel implements TreeTableMo
     }
   }
 
-  public Map<String, Boolean> getCurrentRuleActivation() {
-    Map<String, Boolean> currentActivationByRuleKey = new HashMap<>();
+  public void saveCurrentRuleActivation(Map<String, Boolean> map) {
     RulesTreeNode.Root rootNode = (RulesTreeNode.Root) root;
     for (RulesTreeNode.Language lang : rootNode.childrenIterable()) {
       for (RulesTreeNode.Rule rule : lang.childrenIterable()) {
-        currentActivationByRuleKey.put(rule.getKey(), rule.isActivated());
+        map.put(rule.getKey(), rule.isActivated());
       }
     }
-    return currentActivationByRuleKey;
   }
 
   private void activateRule(RulesTreeNode.Rule rule, boolean activate) {
diff --git a/src/test/java/org/sonarlint/intellij/config/global/rules/RulesTreeTableModelTest.java b/src/test/java/org/sonarlint/intellij/config/global/rules/RulesTreeTableModelTest.java
index f5418ca5..9f3da494 100644
--- a/src/test/java/org/sonarlint/intellij/config/global/rules/RulesTreeTableModelTest.java
+++ b/src/test/java/org/sonarlint/intellij/config/global/rules/RulesTreeTableModelTest.java
@@ -22,6 +22,7 @@ package org.sonarlint.intellij.config.global.rules;
 import com.intellij.ui.treeStructure.treetable.TreeTable;
 import com.intellij.ui.treeStructure.treetable.TreeTableModel;
 import com.intellij.ui.treeStructure.treetable.TreeTableTree;
+import java.util.HashMap;
 import java.util.Map;
 import javax.swing.Icon;
 import javax.swing.table.AbstractTableModel;
@@ -95,7 +96,8 @@ public class RulesTreeTableModelTest {
 
   @Test
   public void get_current_rule_activation() {
-    Map<String, Boolean> ruleActivation = model.getCurrentRuleActivation();
+    Map<String, Boolean> ruleActivation = new HashMap<>();
+    model.saveCurrentRuleActivation(ruleActivation);
     assertThat(ruleActivation).containsExactly(entry("key", true));
   }
 
diff --git a/src/test/java/org/sonarlint/intellij/trigger/SonarLintSubmitterTest.java b/src/test/java/org/sonarlint/intellij/trigger/SonarLintSubmitterTest.java
index 9e857308..3989863a 100644
--- a/src/test/java/org/sonarlint/intellij/trigger/SonarLintSubmitterTest.java
+++ b/src/test/java/org/sonarlint/intellij/trigger/SonarLintSubmitterTest.java
@@ -22,12 +22,15 @@ package org.sonarlint.intellij.trigger;
 import com.intellij.openapi.fileEditor.FileEditorManager;
 import com.intellij.openapi.module.Module;
 import com.intellij.openapi.project.Project;
+import com.intellij.openapi.util.Computable;
 import com.intellij.openapi.vfs.VirtualFile;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.function.Predicate;
 import org.junit.Before;
 import org.junit.Test;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
 import org.sonarlint.intellij.SonarTest;
 import org.sonarlint.intellij.analysis.LocalFileExclusions;
 import org.sonarlint.intellij.analysis.SonarLintJobManager;
@@ -64,6 +67,12 @@ public class SonarLintSubmitterTest extends SonarTest {
 
   @Before
   public void start() throws InvalidBindingException {
+    when(super.app.runReadAction(any(Computable.class))).thenAnswer(new Answer() {
+      @Override
+      public Object answer(InvocationOnMock invocation) {
+        return ((Computable)invocation.getArgument(0)).compute();
+      }
+    });
     when(bindingManager.getFacade()).thenReturn(facade);
     when(facade.getExcluded(any(Module.class), anyCollection(), any(Predicate.class))).thenReturn(Collections.emptySet());
     globalSettings = new SonarLintGlobalSettings();
