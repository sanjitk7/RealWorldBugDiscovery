diff --git a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/JdbcClientTokenServices.java b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/JdbcClientTokenServices.java
index f0b34a55..e5419001 100644
--- a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/JdbcClientTokenServices.java
+++ b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/JdbcClientTokenServices.java
@@ -15,8 +15,7 @@ import org.springframework.jdbc.core.support.SqlLobValue;
 import org.springframework.security.core.Authentication;
 import org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails;
 import org.springframework.security.oauth2.common.OAuth2AccessToken;
-import org.springframework.security.oauth2.common.util.SerializationStrategy;
-import org.springframework.security.oauth2.common.util.SerializationUtils;
+import org.springframework.security.oauth2.common.util.WhitelistedSerializationStrategy;
 import org.springframework.util.Assert;
 
 /**
@@ -44,7 +43,7 @@ public class JdbcClientTokenServices implements ClientTokenServices {
 
 	private final JdbcTemplate jdbcTemplate;
 
-	private SerializationStrategy serializationStrategy = new SerializationStrategy();
+	private WhitelistedSerializationStrategy serializationStrategy = new WhitelistedSerializationStrategy();
 
 	public JdbcClientTokenServices(DataSource dataSource) {
 		Assert.notNull(dataSource, "DataSource required");
@@ -81,7 +80,7 @@ public class JdbcClientTokenServices implements ClientTokenServices {
 		String name = authentication==null ? null : authentication.getName();
 		jdbcTemplate.update(
 				insertAccessTokenSql,
-				new Object[] { accessToken.getValue(), new SqlLobValue(SerializationUtils.serialize(accessToken)),
+				new Object[] { accessToken.getValue(), new SqlLobValue(serializationStrategy.serialize(accessToken)),
 						keyGenerator.extractKey(resource, authentication), name,
 						resource.getClientId() }, new int[] { Types.VARCHAR, Types.BLOB, Types.VARCHAR, Types.VARCHAR,
 						Types.VARCHAR });
@@ -103,7 +102,7 @@ public class JdbcClientTokenServices implements ClientTokenServices {
 		this.deleteAccessTokenSql = deleteAccessTokenSql;
 	}
 
-	public void setSerializationStrategy(SerializationStrategy strategy) {
+	public void setSerializationStrategy(WhitelistedSerializationStrategy strategy) {
 		this.serializationStrategy = strategy;
 	}
 }
diff --git a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util/SaferObjectInputStream.java b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util/SaferObjectInputStream.java
deleted file mode 100644
index 44f05d0c..00000000
--- a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util/SaferObjectInputStream.java
+++ /dev/null
@@ -1,102 +0,0 @@
-/*
- * Copyright 2002-2019 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.security.oauth2.common.util;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.NotSerializableException;
-import java.io.ObjectInputStream;
-import java.io.ObjectStreamClass;
-import java.util.Collections;
-import java.util.List;
-import org.springframework.util.ClassUtils;
-
-/**
- * Special ObjectInputStream subclass that checks if classes are allowed to deserialize.
- * The class should be configured with a whitelist of only allowed (safe) classes to deserialize.
- *
- * @author Artem Smotrakov
- */
-public class SaferObjectInputStream extends ObjectInputStream {
-
-    /**
-     * The list of classes which are allowed for deserialization.
-     */
-    private final List<String> allowedClasses;
-
-    /**
-     * The class loader to use for loading local classes.
-     */
-    private final ClassLoader classLoader;
-
-    /**
-     * Create a new SaferObjectInputStream for the given InputStream, class loader and  allowed class names.
-     *
-     * @param in             the InputStream to read from
-     * @param classLoader    the ClassLoader to use for loading local classes
-     * @param allowedClasses the list of allowed classes for deserialization
-     * @throws IOException
-     */
-    public SaferObjectInputStream(InputStream in, ClassLoader classLoader, List<String> allowedClasses)
-        throws IOException {
-
-        super(in);
-        this.classLoader = classLoader;
-        this.allowedClasses = Collections.unmodifiableList(allowedClasses);
-    }
-
-    /**
-     * Create a new SaferObjectInputStream for the given InputStream and allowed class names.
-     *
-     * @param in             the InputStream to read from
-     * @param allowedClasses the list of allowed classes for deserialization
-     * @see ObjectInputStream#ObjectInputStream(InputStream)
-     */
-    public SaferObjectInputStream(InputStream in, List<String> allowedClasses) throws IOException {
-        this(in, null, allowedClasses);
-    }
-
-    /**
-     * Resolve the class only if it's allowed to deserialize.
-     *
-     * @see ObjectInputStream#resolveClass(ObjectStreamClass)
-     */
-    @Override
-    protected Class<?> resolveClass(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException {
-        if (isProhibited(classDesc.getName())) {
-            throw new NotSerializableException("Not allowed to deserialize " + classDesc.getName());
-        }
-        if (this.classLoader != null) {
-            return ClassUtils.forName(classDesc.getName(), this.classLoader);
-        }
-        return super.resolveClass(classDesc);
-    }
-
-    /**
-     * Check if the class is allowed to be deserialized.
-     *
-     * @param className the class to check
-     * @return true if the class is not allowed to be deserialized, false otherwise
-     */
-    private boolean isProhibited(String className) {
-        for (String allowedClass : this.allowedClasses) {
-            if (className.startsWith(allowedClass)) {
-                return false;
-            }
-        }
-        return true;
-    }
-}
diff --git a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util/SerializationStrategy.java b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util/SerializationStrategy.java
index 87263a50..02e39459 100644
--- a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util/SerializationStrategy.java
+++ b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util/SerializationStrategy.java
@@ -1,102 +1,107 @@
 package org.springframework.security.oauth2.common.util;
 
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
 import java.io.IOException;
+import java.io.InputStream;
+import java.io.NotSerializableException;
 import java.io.ObjectInputStream;
-import java.io.ObjectOutputStream;
-import java.util.ArrayList;
+import java.io.ObjectStreamClass;
 import java.util.Collections;
 import java.util.List;
+import org.springframework.util.ClassUtils;
 
-/**
- * Serialization strategy based on {@link SaferObjectInputStream}.
- */
-public class SerializationStrategy {
+public interface SerializationStrategy {
 
-	/**
-	 * A list of classes which are allowed to deserialize by default.
-	 */
-	private static final List<String> DEFAULT_ALLOWED_CLASSES;
+  /**
+   * Serializes an object.
+   *
+   * @param object The object to be serialized.
+   * @return A byte array.
+   */
+  byte[] serialize(Object object);
 
-	static {
-		List<String> classes = new ArrayList<String>();
-		classes.add("java.lang.");
-		classes.add("java.util.");
-		classes.add("org.springframework.security.");
-		DEFAULT_ALLOWED_CLASSES = Collections.unmodifiableList(classes);
-	}
+  /**
+   * Deserializes an object from a byte array.
+   *
+   * @param byteArray The byte array.
+   * @param <T> The type of the object.
+   * @return The deserialized object.
+   */
+  <T> T deserialize(byte[] byteArray);
 
-	/**
-	 * A list of classes which allowed to deserialize.
-	 */
-	private final List<String> allowedClasses;
+  /**
+   * Special ObjectInputStream subclass that checks if classes are allowed to deserialize.
+   * The class should be configured with a whitelist of only allowed (safe) classes to deserialize.
+   *
+   * @author Artem Smotrakov
+   */
+  class WhitelistedObjectInputStream extends ObjectInputStream {
 
-	/**
-	 * Initializes {@link SerializationStrategy} with the default allowed classes.
-	 */
-	public SerializationStrategy() {
-		this(DEFAULT_ALLOWED_CLASSES);
-	}
+      /**
+       * The list of classes which are allowed for deserialization.
+       */
+      private final List<String> allowedClasses;
 
-	/**
-	 * Initializes {@link SerializationStrategy} with specified allowed classes.
-	 * 
-	 * @param allowedClasses The allowed classes for deserialization.
-	 */
-	public SerializationStrategy(List<String> allowedClasses) {
-		this.allowedClasses = Collections.unmodifiableList(allowedClasses);
-	}
+      /**
+       * The class loader to use for loading local classes.
+       */
+      private final ClassLoader classLoader;
 
-	public byte[] serialize(Object state) {
-		ObjectOutputStream oos = null;
-		try {
-			ByteArrayOutputStream bos = new ByteArrayOutputStream(512);
-			oos = new ObjectOutputStream(bos);
-			oos.writeObject(state);
-			oos.flush();
-			return bos.toByteArray();
-		}
-		catch (IOException e) {
-			throw new IllegalArgumentException(e);
-		}
-		finally {
-			if (oos != null) {
-				try {
-					oos.close();
-				}
-				catch (IOException e) {
-					// eat it
-				}
-			}
-		}
-	}
+      /**
+       * Create a new WhitelistedObjectInputStream for the given InputStream, class loader and  allowed class names.
+       *
+       * @param in             The InputStream to read from.
+       * @param classLoader    The ClassLoader to use for loading local classes.
+       * @param allowedClasses The list of allowed classes for deserialization.
+       * @throws IOException
+       */
+      public WhitelistedObjectInputStream(InputStream in, ClassLoader classLoader, List<String> allowedClasses)
+          throws IOException {
 
-	public <T> T deserialize(byte[] byteArray) {
-		ObjectInputStream oip = null;
-		try {
-			oip = new SaferObjectInputStream(new ByteArrayInputStream(byteArray),
-					Thread.currentThread().getContextClassLoader(), allowedClasses);
-			@SuppressWarnings("unchecked")
-			T result = (T) oip.readObject();
-			return result;
-		}
-		catch (IOException e) {
-			throw new IllegalArgumentException(e);
-		}
-		catch (ClassNotFoundException e) {
-			throw new IllegalArgumentException(e);
-		}
-		finally {
-			if (oip != null) {
-				try {
-					oip.close();
-				}
-				catch (IOException e) {
-					// eat it
-				}
-			}
-		}
-	}
+          super(in);
+          this.classLoader = classLoader;
+          this.allowedClasses = Collections.unmodifiableList(allowedClasses);
+      }
 
+      /**
+       * Create a new WhitelistedObjectInputStream for the given InputStream and allowed class names.
+       *
+       * @param in             The InputStream to read from.
+       * @param allowedClasses The list of allowed classes for deserialization.
+       * @see ObjectInputStream#ObjectInputStream(InputStream)
+       */
+      public WhitelistedObjectInputStream(InputStream in, List<String> allowedClasses) throws IOException {
+          this(in, null, allowedClasses);
+      }
+
+      /**
+       * Resolve the class only if it's allowed to deserialize.
+       *
+       * @see ObjectInputStream#resolveClass(ObjectStreamClass)
+       */
+      @Override
+      protected Class<?> resolveClass(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException {
+          if (isProhibited(classDesc.getName())) {
+              throw new NotSerializableException("Not allowed to deserialize " + classDesc.getName());
+          }
+          if (this.classLoader != null) {
+              return ClassUtils.forName(classDesc.getName(), this.classLoader);
+          }
+          return super.resolveClass(classDesc);
+      }
+
+      /**
+       * Check if the class is allowed to be deserialized.
+       *
+       * @param className The class to check
+       * @return True if the class is not allowed to be deserialized, false otherwise.
+       */
+      private boolean isProhibited(String className) {
+          for (String allowedClass : this.allowedClasses) {
+              if (className.startsWith(allowedClass)) {
+                  return false;
+              }
+          }
+          return true;
+      }
+  }
 }
diff --git a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util/WhitelistedSerializationStrategy.java b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util/WhitelistedSerializationStrategy.java
new file mode 100644
index 00000000..f7f81948
--- /dev/null
+++ b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util/WhitelistedSerializationStrategy.java
@@ -0,0 +1,102 @@
+package org.springframework.security.oauth2.common.util;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+/**
+ * Serialization strategy based on {@link WhitelistedObjectInputStream}.
+ */
+public class WhitelistedSerializationStrategy implements SerializationStrategy {
+
+	/**
+	 * A list of classes which are allowed to deserialize by default.
+	 */
+	private static final List<String> DEFAULT_ALLOWED_CLASSES;
+
+	static {
+		List<String> classes = new ArrayList<String>();
+		classes.add("java.lang.");
+		classes.add("java.util.");
+		classes.add("org.springframework.security.");
+		DEFAULT_ALLOWED_CLASSES = Collections.unmodifiableList(classes);
+	}
+
+	/**
+	 * A list of classes which allowed to deserialize.
+	 */
+	private final List<String> allowedClasses;
+
+	/**
+	 * Initializes {@link WhitelistedSerializationStrategy} with the default allowed classes.
+	 */
+	public WhitelistedSerializationStrategy() {
+		this(DEFAULT_ALLOWED_CLASSES);
+	}
+
+	/**
+	 * Initializes {@link WhitelistedSerializationStrategy} with specified allowed classes.
+	 * 
+	 * @param allowedClasses The allowed classes for deserialization.
+	 */
+	public WhitelistedSerializationStrategy(List<String> allowedClasses) {
+		this.allowedClasses = Collections.unmodifiableList(allowedClasses);
+	}
+
+	public byte[] serialize(Object state) {
+		ObjectOutputStream oos = null;
+		try {
+			ByteArrayOutputStream bos = new ByteArrayOutputStream(512);
+			oos = new ObjectOutputStream(bos);
+			oos.writeObject(state);
+			oos.flush();
+			return bos.toByteArray();
+		}
+		catch (IOException e) {
+			throw new IllegalArgumentException(e);
+		}
+		finally {
+			if (oos != null) {
+				try {
+					oos.close();
+				}
+				catch (IOException e) {
+					// eat it
+				}
+			}
+		}
+	}
+
+	public <T> T deserialize(byte[] byteArray) {
+		ObjectInputStream oip = null;
+		try {
+			oip = new WhitelistedObjectInputStream(new ByteArrayInputStream(byteArray),
+					Thread.currentThread().getContextClassLoader(), allowedClasses);
+			@SuppressWarnings("unchecked")
+			T result = (T) oip.readObject();
+			return result;
+		}
+		catch (IOException e) {
+			throw new IllegalArgumentException(e);
+		}
+		catch (ClassNotFoundException e) {
+			throw new IllegalArgumentException(e);
+		}
+		finally {
+			if (oip != null) {
+				try {
+					oip.close();
+				}
+				catch (IOException e) {
+					// eat it
+				}
+			}
+		}
+	}
+
+}
diff --git a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/code/JdbcAuthorizationCodeServices.java b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/code/JdbcAuthorizationCodeServices.java
index ac4e8d68..9e6a4250 100644
--- a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/code/JdbcAuthorizationCodeServices.java
+++ b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/code/JdbcAuthorizationCodeServices.java
@@ -10,7 +10,7 @@ import org.springframework.dao.EmptyResultDataAccessException;
 import org.springframework.jdbc.core.JdbcTemplate;
 import org.springframework.jdbc.core.RowMapper;
 import org.springframework.jdbc.core.support.SqlLobValue;
-import org.springframework.security.oauth2.common.util.SerializationStrategy;
+import org.springframework.security.oauth2.common.util.WhitelistedSerializationStrategy;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
 import org.springframework.util.Assert;
 
@@ -33,7 +33,7 @@ public class JdbcAuthorizationCodeServices extends RandomValueAuthorizationCodeS
 
 	private final JdbcTemplate jdbcTemplate;
 
-	private SerializationStrategy serializationStrategy = new SerializationStrategy();
+	private WhitelistedSerializationStrategy serializationStrategy = new WhitelistedSerializationStrategy();
 
 	public JdbcAuthorizationCodeServices(DataSource dataSource) {
 		Assert.notNull(dataSource, "DataSource required");
@@ -81,7 +81,7 @@ public class JdbcAuthorizationCodeServices extends RandomValueAuthorizationCodeS
 		this.deleteAuthenticationSql = deleteAuthenticationSql;
 	}
 
-	public void setSerializationStrategy(SerializationStrategy strategy) {
+	public void setSerializationStrategy(WhitelistedSerializationStrategy strategy) {
 		this.serializationStrategy = strategy;
 	}
 }
diff --git a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/JdbcTokenStore.java b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/JdbcTokenStore.java
index 1c4e3724..c0035b0f 100644
--- a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/JdbcTokenStore.java
+++ b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/JdbcTokenStore.java
@@ -21,8 +21,7 @@ import org.springframework.jdbc.core.RowMapper;
 import org.springframework.jdbc.core.support.SqlLobValue;
 import org.springframework.security.oauth2.common.OAuth2AccessToken;
 import org.springframework.security.oauth2.common.OAuth2RefreshToken;
-import org.springframework.security.oauth2.common.util.SerializationStrategy;
-import org.springframework.security.oauth2.common.util.SerializationUtils;
+import org.springframework.security.oauth2.common.util.WhitelistedSerializationStrategy;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
 import org.springframework.security.oauth2.provider.token.AuthenticationKeyGenerator;
 import org.springframework.security.oauth2.provider.token.DefaultAuthenticationKeyGenerator;
@@ -97,7 +96,7 @@ public class JdbcTokenStore implements TokenStore {
 
 	private final JdbcTemplate jdbcTemplate;
 
-	private SerializationStrategy serializationStrategy = new SerializationStrategy();
+	private WhitelistedSerializationStrategy serializationStrategy = new WhitelistedSerializationStrategy();
 
 	public JdbcTokenStore(DataSource dataSource) {
 		Assert.notNull(dataSource, "DataSource required");
@@ -386,15 +385,15 @@ public class JdbcTokenStore implements TokenStore {
 	}
 
 	protected byte[] serializeAccessToken(OAuth2AccessToken token) {
-		return SerializationUtils.serialize(token);
+		return serializationStrategy.serialize(token);
 	}
 
 	protected byte[] serializeRefreshToken(OAuth2RefreshToken token) {
-		return SerializationUtils.serialize(token);
+		return serializationStrategy.serialize(token);
 	}
 
 	protected byte[] serializeAuthentication(OAuth2Authentication authentication) {
-		return SerializationUtils.serialize(authentication);
+		return serializationStrategy.serialize(authentication);
 	}
 
 	protected OAuth2AccessToken deserializeAccessToken(byte[] token) {
@@ -461,7 +460,7 @@ public class JdbcTokenStore implements TokenStore {
 		this.selectAccessTokensFromClientIdSql = selectAccessTokensFromClientIdSql;
 	}
 
-	public void setSerializationStrategy(SerializationStrategy strategy) {
+	public void setSerializationStrategy(WhitelistedSerializationStrategy strategy) {
 		this.serializationStrategy = strategy;
 	}
 }
diff --git a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/redis/JdkSerializationStrategy.java b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/redis/JdkSerializationStrategy.java
index e3934877..f7aad436 100644
--- a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/redis/JdkSerializationStrategy.java
+++ b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/redis/JdkSerializationStrategy.java
@@ -1,62 +1,41 @@
 package org.springframework.security.oauth2.provider.token.store.redis;
 
-<<<<<<< HEAD
-import org.springframework.data.redis.serializer.JdkSerializationRedisSerializer;
-
-/**
- * Serializes objects using {@link JdkSerializationRedisSerializer}
-=======
 import org.springframework.core.serializer.support.SerializationFailedException;
 
 import java.io.Serializable;
-import java.util.List;
 import org.springframework.security.oauth2.common.util.SerializationStrategy;
+import org.springframework.security.oauth2.common.util.WhitelistedSerializationStrategy;
 
 /**
- * Serializes and deserializes allowed objects using {@link SerializationStrategy}.
->>>>>>> Allow specifying allowed classes for deserialization
+ * Serializes and deserializes allowed objects using {@link WhitelistedSerializationStrategy}.
  *
  * @author efenderbosch
  *
  */
 public class JdkSerializationStrategy extends StandardStringSerializationStrategy {
 
-<<<<<<< HEAD
-	private static final JdkSerializationRedisSerializer OBJECT_SERIALIZER = new JdkSerializationRedisSerializer();
-
-	@Override
-	@SuppressWarnings("unchecked")
-	protected <T> T deserializeInternal(byte[] bytes, Class<T> clazz) {
-		return (T) OBJECT_SERIALIZER.deserialize(bytes);
-	}
-
-	@Override
-	protected byte[] serializeInternal(Object object) {
-		return OBJECT_SERIALIZER.serialize(object);
-	}
-=======
     private static final byte[] EMPTY_ARRAY = new byte[0];
 
     /**
-     * The SerializationStrategy to be used.
+     * The {@link SerializationStrategy} to be used.
      */
-    private final SerializationStrategy serializationStrategy;
+    private SerializationStrategy serializationStrategy;
 
     /**
      * The default constructor initializes a {@link JdkSerializationStrategy}
-     * with a default {@link SerializationStrategy};
+     * with {@link WhitelistedSerializationStrategy}.
      */
     public JdkSerializationStrategy() {
-        this.serializationStrategy = new SerializationStrategy();
+        this.serializationStrategy = new WhitelistedSerializationStrategy();
     }
 
     /**
-     * Initializes a {@link JdkSerializationStrategy} with a list of allowed classes.
+     * Sets {@link SerializationStrategy}.
      *
-     * @param allowedClasses The allowed classes.
+     * @param serializationStrategy The serialization strategy.
      */
-    public JdkSerializationStrategy(List<String> allowedClasses) {
-        this.serializationStrategy = new SerializationStrategy(allowedClasses);
+    public void setSerializationStrategy(SerializationStrategy serializationStrategy) {
+        this.serializationStrategy = serializationStrategy;
     }
 
     @Override
@@ -89,6 +68,5 @@ public class JdkSerializationStrategy extends StandardStringSerializationStrateg
             throw new SerializationFailedException("Failed to serialize object", e);
         }
     }
->>>>>>> Allow specifying allowed classes for deserialization
 
 }
diff --git a/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/util/WhitelistedSerializationStrategyTests.java b/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/util/WhitelistedSerializationStrategyTests.java
new file mode 100644
index 00000000..68b0dc8c
--- /dev/null
+++ b/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/util/WhitelistedSerializationStrategyTests.java
@@ -0,0 +1,63 @@
+package org.springframework.security.oauth2.common.util;
+
+import org.junit.Test;
+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
+import org.springframework.security.core.GrantedAuthority;
+import org.springframework.security.oauth2.common.DefaultExpiringOAuth2RefreshToken;
+import org.springframework.security.oauth2.common.DefaultOAuth2AccessToken;
+import org.springframework.security.oauth2.provider.OAuth2Authentication;
+import org.springframework.security.oauth2.provider.OAuth2Request;
+
+import java.io.Serializable;
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.UUID;
+
+import static org.junit.Assert.*;
+
+/**
+ * @author Artem Smotrakov
+ */
+public class WhitelistedSerializationStrategyTests {
+
+	@Test
+	public void deserializeAllowedClasses() {
+		deserializeAllowedClasses(new DefaultOAuth2AccessToken("access-token-" + UUID.randomUUID()));
+
+		deserializeAllowedClasses(new OAuth2Authentication(
+				new OAuth2Request(Collections.<String, String>emptyMap(), "clientId", Collections.<GrantedAuthority>emptyList(),
+						false, Collections.<String>emptySet(),
+						new HashSet<String>(Arrays.asList("resourceId-1", "resourceId-2")), "redirectUri",
+						Collections.<String>emptySet(), Collections.<String, Serializable>emptyMap()),
+				new UsernamePasswordAuthenticationToken("test", "N/A")));
+
+		deserializeAllowedClasses(new DefaultExpiringOAuth2RefreshToken(
+				"access-token-" + UUID.randomUUID(), new Date()));
+
+		deserializeAllowedClasses("xyz");
+		deserializeAllowedClasses(new HashMap<String, String>());
+	}
+
+	private void deserializeAllowedClasses(Object object) {
+		WhitelistedSerializationStrategy strategy = new WhitelistedSerializationStrategy();
+		byte[] bytes = strategy.serialize(object);
+		assertNotNull(bytes);
+		assertTrue(bytes.length > 0);
+
+		Object clone = strategy.deserialize(bytes);
+		assertNotNull(clone);
+		assertEquals(object, clone);
+	}
+
+	@Test(expected = IllegalArgumentException.class)
+	public void deserializeProhibitedClasses() throws UnknownHostException {
+		WhitelistedSerializationStrategy strategy = new WhitelistedSerializationStrategy();
+		byte[] bytes = strategy.serialize(InetAddress.getLocalHost());
+		strategy.deserialize(bytes);
+	}
+}
\ No newline at end of file
diff --git a/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/AuthorizationRequestTests.java b/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/AuthorizationRequestTests.java
index 41f31daa..2d7db2c5 100644
--- a/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/AuthorizationRequestTests.java
+++ b/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/AuthorizationRequestTests.java
@@ -30,7 +30,7 @@ import java.util.SortedSet;
 import org.junit.Before;
 import org.junit.Test;
 import org.springframework.security.oauth2.common.util.OAuth2Utils;
-import org.springframework.util.SerializationUtils;
+import org.springframework.security.oauth2.common.util.WhitelistedSerializationStrategy;
 import org.springframework.util.StringUtils;
 
 /**
@@ -161,8 +161,9 @@ public class AuthorizationRequestTests {
 	@Test
 	public void testSerialization() {
 		AuthorizationRequest authorizationRequest = createFromParameters(parameters);
-		AuthorizationRequest other = (AuthorizationRequest) SerializationUtils.deserialize(SerializationUtils
-				.serialize(authorizationRequest));
+		WhitelistedSerializationStrategy serializationStrategy = new WhitelistedSerializationStrategy();
+		AuthorizationRequest other = serializationStrategy.deserialize(
+				serializationStrategy.serialize(authorizationRequest));
 		assertEquals(authorizationRequest, other);
 	}
 
diff --git a/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/OAuth2RequestTests.java b/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/OAuth2RequestTests.java
index 1462e82a..f88c9f57 100644
--- a/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/OAuth2RequestTests.java
+++ b/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/OAuth2RequestTests.java
@@ -23,7 +23,7 @@ import org.junit.Before;
 import org.junit.Test;
 import org.springframework.security.core.GrantedAuthority;
 import org.springframework.security.oauth2.common.util.OAuth2Utils;
-import org.springframework.security.oauth2.common.util.SerializationUtils;
+import org.springframework.security.oauth2.common.util.WhitelistedSerializationStrategy;
 
 /**
  * @author Dave Syer
@@ -88,8 +88,9 @@ public class OAuth2RequestTests {
 				Collections.<String>emptySet(), Collections.<String, Serializable>emptyMap());
 		request2.setRequestParameters(request.getRequestParameters());
 
-		byte[] serializedRequest = SerializationUtils.serialize(request);
-		byte[] serializedRequest2 = SerializationUtils.serialize(request2);
+		WhitelistedSerializationStrategy serializationStrategy = new WhitelistedSerializationStrategy();
+		byte[] serializedRequest = serializationStrategy.serialize(request);
+		byte[] serializedRequest2 = serializationStrategy.serialize(request2);
 
 		assertEquals(serializedRequest.length, serializedRequest2.length);
 	}
diff --git a/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/code/JdbcAuthorizationCodeServicesTests.java b/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/code/JdbcAuthorizationCodeServicesTests.java
index b58d7c10..55090124 100644
--- a/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/code/JdbcAuthorizationCodeServicesTests.java
+++ b/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/code/JdbcAuthorizationCodeServicesTests.java
@@ -11,7 +11,7 @@ import org.junit.Before;
 import org.junit.Test;
 import org.springframework.jdbc.datasource.embedded.EmbeddedDatabase;
 import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;
-import org.springframework.security.oauth2.common.util.SerializationStrategy;
+import org.springframework.security.oauth2.common.util.WhitelistedSerializationStrategy;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
 import org.springframework.security.oauth2.provider.OAuth2Request;
 import org.springframework.security.oauth2.provider.RequestTokenFactory;
@@ -61,7 +61,7 @@ public class JdbcAuthorizationCodeServicesTests extends AuthorizationCodeService
 		allowedClasses.add("org.springframework.security.");
 		allowedClasses.add("org.company.oauth2.CustomOAuth2AccessToken");
 		allowedClasses.add("org.company.oauth2.CustomOAuth2Authentication");
-		SerializationStrategy strategy = new SerializationStrategy(allowedClasses);
+		WhitelistedSerializationStrategy strategy = new WhitelistedSerializationStrategy(allowedClasses);
 		jdbcAuthorizationCodeServices.setSerializationStrategy(strategy);
 		String code = jdbcAuthorizationCodeServices.createAuthorizationCode(expectedAuthentication);
 		assertNotNull(code);
diff --git a/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/JdbcTokenStoreTests.java b/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/JdbcTokenStoreTests.java
index 60cece7a..e8b3024c 100644
--- a/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/JdbcTokenStoreTests.java
+++ b/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/JdbcTokenStoreTests.java
@@ -16,7 +16,7 @@ import org.springframework.jdbc.datasource.embedded.EmbeddedDatabase;
 import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;
 import org.springframework.security.oauth2.common.DefaultOAuth2AccessToken;
 import org.springframework.security.oauth2.common.OAuth2AccessToken;
-import org.springframework.security.oauth2.common.util.SerializationStrategy;
+import org.springframework.security.oauth2.common.util.WhitelistedSerializationStrategy;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
 import org.springframework.security.oauth2.provider.RequestTokenFactory;
 
@@ -76,7 +76,7 @@ public class JdbcTokenStoreTests extends TokenStoreBaseTests {
 		allowedClasses.add("org.springframework.security.");
 		allowedClasses.add("org.company.oauth2.CustomOAuth2AccessToken");
 		allowedClasses.add("org.company.oauth2.CustomOAuth2Authentication");
-		SerializationStrategy strategy = new SerializationStrategy(allowedClasses);
+		WhitelistedSerializationStrategy strategy = new WhitelistedSerializationStrategy(allowedClasses);
 		tokenStore.setSerializationStrategy(strategy);
 		tokenStore.storeAccessToken(expectedOAuth2AccessToken, expectedAuthentication);
 
diff --git a/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/redis/RedisTokenStoreCustomTokenTests.java b/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/redis/RedisTokenStoreCustomTokenTests.java
index 4d2a7102..cfcf9360 100644
--- a/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/redis/RedisTokenStoreCustomTokenTests.java
+++ b/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/redis/RedisTokenStoreCustomTokenTests.java
@@ -15,6 +15,7 @@ import org.springframework.core.serializer.support.SerializationFailedException;
 import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;
 import org.springframework.security.authentication.TestingAuthenticationToken;
 import org.springframework.security.oauth2.common.OAuth2AccessToken;
+import org.springframework.security.oauth2.common.util.WhitelistedSerializationStrategy;
 import org.springframework.security.oauth2.provider.OAuth2Authentication;
 import org.springframework.security.oauth2.provider.OAuth2Request;
 import org.springframework.security.oauth2.provider.RequestTokenFactory;
@@ -77,7 +78,8 @@ public class RedisTokenStoreCustomTokenTests {
 		OAuth2AccessToken oauth2AccessToken = new CustomOAuth2AccessToken("access-token-" + UUID.randomUUID());
 		OAuth2Authentication oauth2Authentication = new CustomOAuth2Authentication(request, authentication);
 
-		JdkSerializationStrategy strategy = new JdkSerializationStrategy(ALLOWED_CLASSES);
+		JdkSerializationStrategy strategy = new JdkSerializationStrategy();
+		strategy.setSerializationStrategy(new WhitelistedSerializationStrategy(ALLOWED_CLASSES));
 		tokenStore.setSerializationStrategy(strategy);
 		tokenStore.storeAccessToken(oauth2AccessToken, oauth2Authentication);
 
@@ -88,7 +90,8 @@ public class RedisTokenStoreCustomTokenTests {
 
 	@After
 	public void cleanUp() {
-		JdkSerializationStrategy strategy = new JdkSerializationStrategy(ALLOWED_CLASSES);
+		JdkSerializationStrategy strategy = new JdkSerializationStrategy();
+		strategy.setSerializationStrategy(new WhitelistedSerializationStrategy(ALLOWED_CLASSES));
 		tokenStore.setSerializationStrategy(strategy);
 		for (OAuth2AccessToken token : tokenStore.findTokensByClientId(CLIENT_ID)) {
 			tokenStore.removeAccessToken(token);
