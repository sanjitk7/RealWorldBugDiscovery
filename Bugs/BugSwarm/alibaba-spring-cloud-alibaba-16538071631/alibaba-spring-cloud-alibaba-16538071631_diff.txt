diff --git a/spring-cloud-alibaba-dependencies/pom.xml b/spring-cloud-alibaba-dependencies/pom.xml
index c8e3ecd4..d1ead351 100644
--- a/spring-cloud-alibaba-dependencies/pom.xml
+++ b/spring-cloud-alibaba-dependencies/pom.xml
@@ -237,7 +237,22 @@
             </dependency>
             <dependency>
                 <groupId>com.alibaba.cloud</groupId>
-                <artifactId>spring-cloud-starter-alibaba-governance-routing</artifactId>
+                <artifactId>spring-cloud-alibaba-routing-zuul-adapter</artifactId>
+                <version>${revision}</version>
+            </dependency>
+            <dependency>
+                <groupId>com.alibaba.cloud</groupId>
+                <artifactId>spring-cloud-alibaba-routing-gateway-adapter</artifactId>
+                <version>${revision}</version>
+            </dependency>
+            <dependency>
+                <groupId>com.alibaba.cloud</groupId>
+                <artifactId>spring-cloud-alibaba-routing-service-adapter</artifactId>
+                <version>${revision}</version>
+            </dependency>
+            <dependency>
+                <groupId>com.alibaba.cloud</groupId>
+                <artifactId>spring-cloud-alibaba-routing-starter</artifactId>
                 <version>${revision}</version>
             </dependency>
             <dependency>
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/istio-consumer-example/pom.xml b/spring-cloud-alibaba-examples/governance-example/label-routing-example/istio-consumer-example/pom.xml
index 5cb044ae..91272fa9 100644
--- a/spring-cloud-alibaba-examples/governance-example/label-routing-example/istio-consumer-example/pom.xml
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/istio-consumer-example/pom.xml
@@ -33,7 +33,7 @@
 
 		<dependency>
 			<groupId>com.alibaba.cloud</groupId>
-			<artifactId>spring-cloud-starter-alibaba-governance-routing</artifactId>
+			<artifactId>spring-cloud-alibaba-routing-starter</artifactId>
 		</dependency>
 
 		<dependency>
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/opensergo-consumer-example/pom.xml b/spring-cloud-alibaba-examples/governance-example/label-routing-example/opensergo-consumer-example/pom.xml
index 28f209ba..bf66db4f 100644
--- a/spring-cloud-alibaba-examples/governance-example/label-routing-example/opensergo-consumer-example/pom.xml
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/opensergo-consumer-example/pom.xml
@@ -33,7 +33,7 @@
 
 		<dependency>
 			<groupId>com.alibaba.cloud</groupId>
-			<artifactId>spring-cloud-starter-alibaba-governance-routing</artifactId>
+			<artifactId>spring-cloud-alibaba-routing-starter</artifactId>
 		</dependency>
 
 		<dependency>
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/pom.xml b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/pom.xml
new file mode 100644
index 00000000..963742bf
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/pom.xml
@@ -0,0 +1,71 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
+		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
+
+	<parent>
+		<groupId>com.alibaba.cloud</groupId>
+		<artifactId>spring-cloud-alibaba-examples</artifactId>
+		<version>${revision}</version>
+		<relativePath>../../../pom.xml</relativePath>
+	</parent>
+
+	<modules>
+		<module>routing-reactive-consumer-example</module>
+		<module>routing-feign-consumer-example</module>
+		<module>routing-rest-consumer-example</module>
+	</modules>
+
+	<modelVersion>4.0.0</modelVersion>
+
+	<artifactId>routing-consumer-example</artifactId>
+	<name>Spring Cloud Starter Alibaba Label Routing Consumer Example</name>
+	<description>Example demonstrating how to use label routing consumer</description>
+	<packaging>pom</packaging>
+
+	<dependencies>
+
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-web</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>com.alibaba.cloud</groupId>
+			<artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>com.alibaba.cloud</groupId>
+			<artifactId>spring-cloud-alibaba-routing-service-adapter</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-webflux</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>org.springframework.cloud</groupId>
+			<artifactId>spring-cloud-starter-openfeign</artifactId>
+		</dependency>
+
+	</dependencies>
+
+	<build>
+		<plugins>
+			<plugin>
+				<groupId>org.springframework.boot</groupId>
+				<artifactId>spring-boot-maven-plugin</artifactId>
+			</plugin>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-deploy-plugin</artifactId>
+				<version>${maven-deploy-plugin.version}</version>
+				<configuration>
+					<skip>true</skip>
+				</configuration>
+			</plugin>
+		</plugins>
+	</build>
+
+</project>
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/resources/routing-test-4-gateway.json b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/resources/routing-test-4-gateway.json
new file mode 100644
index 00000000..e69de29b
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/resources/routng-test-4-web-client.json b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/resources/routng-test-4-web-client.json
new file mode 100644
index 00000000..8972cacf
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/resources/routng-test-4-web-client.json
@@ -0,0 +1,308 @@
+{
+	"info": {
+		"_postman_id": "15318bb7-4dee-4a05-af0c-373dc73b80b1",
+		"name": "ospp",
+		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
+		"_exporter_id": "16212773"
+	},
+	"item": [
+		{
+			"name": "feign",
+			"item": [
+				{
+					"name": "V1版本测试",
+					"request": {
+						"method": "GET",
+						"header": [],
+						"url": {
+							"raw": "http://localhost:18085/router-test",
+							"protocol": "http",
+							"host": [
+								"localhost"
+							],
+							"port": "18085",
+							"path": [
+								"router-test"
+							]
+						}
+					},
+					"response": []
+				},
+				{
+					"name": "V2版本测试",
+					"request": {
+						"method": "GET",
+						"header": [
+							{
+								"key": "tag",
+								"value": "v2",
+								"type": "text"
+							}
+						],
+						"url": {
+							"raw": "http://localhost:18085/router-test?id=11",
+							"protocol": "http",
+							"host": [
+								"localhost"
+							],
+							"port": "18085",
+							"path": [
+								"router-test"
+							],
+							"query": [
+								{
+									"key": "id",
+									"value": "11"
+								}
+							]
+						}
+					},
+					"response": []
+				},
+				{
+					"name": "添加路由配置信息",
+					"request": {
+						"method": "GET",
+						"header": [],
+						"url": {
+							"raw": "http://localhost:18085/add",
+							"protocol": "http",
+							"host": [
+								"localhost"
+							],
+							"port": "18085",
+							"path": [
+								"add"
+							]
+						}
+					},
+					"response": []
+				},
+				{
+					"name": "更新路由规则信息",
+					"request": {
+						"method": "GET",
+						"header": [],
+						"url": {
+							"raw": "http://localhost:18085/update",
+							"protocol": "http",
+							"host": [
+								"localhost"
+							],
+							"port": "18085",
+							"path": [
+								"update"
+							]
+						}
+					},
+					"response": []
+				}
+			]
+		},
+		{
+			"name": "resttemplate",
+			"item": [
+				{
+					"name": "V!版本测试",
+					"request": {
+						"method": "GET",
+						"header": [],
+						"url": {
+							"raw": "http://localhost:18087/router-test",
+							"protocol": "http",
+							"host": [
+								"localhost"
+							],
+							"port": "18087",
+							"path": [
+								"router-test"
+							]
+						}
+					},
+					"response": []
+				},
+				{
+					"name": "V2版本测试",
+					"request": {
+						"method": "GET",
+						"header": [
+							{
+								"key": "tag",
+								"value": "v2",
+								"type": "text"
+							}
+						],
+						"url": {
+							"raw": "http://localhost:18087/router-test?id=11",
+							"protocol": "http",
+							"host": [
+								"localhost"
+							],
+							"port": "18087",
+							"path": [
+								"router-test"
+							],
+							"query": [
+								{
+									"key": "id",
+									"value": "11"
+								}
+							]
+						}
+					},
+					"response": []
+				},
+				{
+					"name": "添加路由配置信息",
+					"request": {
+						"method": "GET",
+						"header": [],
+						"url": {
+							"raw": "http://localhost:18087/add",
+							"protocol": "http",
+							"host": [
+								"localhost"
+							],
+							"port": "18087",
+							"path": [
+								"add"
+							]
+						}
+					},
+					"response": []
+				},
+				{
+					"name": "更新路由规则信息",
+					"request": {
+						"method": "GET",
+						"header": [],
+						"url": {
+							"raw": "http://localhost:18087/update",
+							"protocol": "http",
+							"host": [
+								"localhost"
+							],
+							"port": "18087",
+							"path": [
+								"update"
+							]
+						}
+					},
+					"response": []
+				}
+			]
+		},
+		{
+			"name": "webclient",
+			"item": [
+				{
+					"name": "V!版本测试",
+					"request": {
+						"method": "GET",
+						"header": [],
+						"url": {
+							"raw": "http://localhost:18086/router-test",
+							"protocol": "http",
+							"host": [
+								"localhost"
+							],
+							"port": "18086",
+							"path": [
+								"router-test"
+							]
+						}
+					},
+					"response": []
+				},
+				{
+					"name": "V2版本测试",
+					"request": {
+						"method": "GET",
+						"header": [
+							{
+								"key": "tag",
+								"value": "v2",
+								"type": "text"
+							}
+						],
+						"url": {
+							"raw": "http://localhost:18086/router-test?id=11",
+							"protocol": "http",
+							"host": [
+								"localhost"
+							],
+							"port": "18086",
+							"path": [
+								"router-test"
+							],
+							"query": [
+								{
+									"key": "id",
+									"value": "11"
+								}
+							]
+						}
+					},
+					"response": []
+				},
+				{
+					"name": "添加路由配置信息",
+					"request": {
+						"method": "GET",
+						"header": [],
+						"url": {
+							"raw": "http://localhost:18086/add",
+							"protocol": "http",
+							"host": [
+								"localhost"
+							],
+							"port": "18086",
+							"path": [
+								"add"
+							]
+						}
+					},
+					"response": []
+				},
+				{
+					"name": "更新路由规则信息",
+					"request": {
+						"method": "GET",
+						"header": [],
+						"url": {
+							"raw": "http://localhost:18086/update",
+							"protocol": "http",
+							"host": [
+								"localhost"
+							],
+							"port": "18086",
+							"path": [
+								"update"
+							]
+						}
+					},
+					"response": []
+				},
+				{
+					"name": "获取所有服务实例",
+					"request": {
+						"method": "GET",
+						"header": [],
+						"url": {
+							"raw": "http://localhost:18086/all-services",
+							"protocol": "http",
+							"host": [
+								"localhost"
+							],
+							"port": "18086",
+							"path": [
+								"all-services"
+							]
+						}
+					},
+					"response": []
+				}
+			]
+		}
+	]
+}
\ No newline at end of file
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-feign-consumer-example/pom.xml b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-feign-consumer-example/pom.xml
new file mode 100644
index 00000000..087657ab
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-feign-consumer-example/pom.xml
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+	<modelVersion>4.0.0</modelVersion>
+
+	<parent>
+		<groupId>com.alibaba.cloud</groupId>
+		<artifactId>routing-consumer-example</artifactId>
+		<version>${revision}</version>
+		<relativePath>../pom.xml</relativePath>
+	</parent>
+
+	<artifactId>routing-feign-consumer-example</artifactId>
+
+
+</project>
\ No newline at end of file
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-feign-consumer-example/src/main/java/com/alibaba/cloud/consumer/feign/ConsumerFeignApplication.java b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-feign-consumer-example/src/main/java/com/alibaba/cloud/consumer/feign/ConsumerFeignApplication.java
new file mode 100644
index 00000000..3ce76694
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-feign-consumer-example/src/main/java/com/alibaba/cloud/consumer/feign/ConsumerFeignApplication.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright 2013-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.consumer.feign;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
+import org.springframework.cloud.openfeign.EnableFeignClients;
+
+/**
+ * @author yuluo-yx
+ * @author <a href="1481556636@qq.com"></a>
+ */
+
+@SpringBootApplication
+@EnableDiscoveryClient
+@EnableFeignClients
+public class ConsumerFeignApplication {
+
+	public static void main(String[] args) {
+
+		SpringApplication.run(ConsumerFeignApplication.class, args);
+	}
+
+}
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-feign-consumer-example/src/main/java/com/alibaba/cloud/consumer/feign/api/FeignService.java b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-feign-consumer-example/src/main/java/com/alibaba/cloud/consumer/feign/api/FeignService.java
new file mode 100644
index 00000000..c7d1ba4e
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-feign-consumer-example/src/main/java/com/alibaba/cloud/consumer/feign/api/FeignService.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright 2013-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.consumer.feign.api;
+
+import org.springframework.cloud.openfeign.FeignClient;
+import org.springframework.web.bind.annotation.GetMapping;
+
+/**
+ * @author yuluo-yx
+ * @author <a href="1481556636@qq.com"></a>
+ */
+
+@FeignClient(name = "service-provider")
+public interface FeignService {
+
+	/**
+	 * Feign test.
+	 * @return String
+	 */
+	@GetMapping("/test-a1")
+	String test();
+
+}
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-feign-consumer-example/src/main/java/com/alibaba/cloud/consumer/feign/controller/ConsumerFeignExampleController.java b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-feign-consumer-example/src/main/java/com/alibaba/cloud/consumer/feign/controller/ConsumerFeignExampleController.java
new file mode 100644
index 00000000..646101b4
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-feign-consumer-example/src/main/java/com/alibaba/cloud/consumer/feign/controller/ConsumerFeignExampleController.java
@@ -0,0 +1,147 @@
+/*
+ * Copyright 2013-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.consumer.feign.controller;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import com.alibaba.cloud.commons.governance.event.RoutingDataChangedEvent;
+import com.alibaba.cloud.commons.governance.routing.MatchService;
+import com.alibaba.cloud.commons.governance.routing.RoutingRule;
+import com.alibaba.cloud.commons.governance.routing.UnifiedRoutingDataStructure;
+import com.alibaba.cloud.commons.governance.routing.rule.HeaderRoutingRule;
+import com.alibaba.cloud.commons.governance.routing.rule.Rule;
+import com.alibaba.cloud.commons.governance.routing.rule.UrlRoutingRule;
+import com.alibaba.cloud.consumer.feign.api.FeignService;
+
+import org.springframework.beans.BeansException;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.ApplicationContext;
+import org.springframework.context.ApplicationContextAware;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+/**
+ * @author yuluo-yx
+ * @author <a href="1481556636@qq.com"></a>
+ */
+
+@RestController
+public class ConsumerFeignExampleController implements ApplicationContextAware {
+
+	@Autowired
+	private ApplicationContext applicationContext;
+
+	@Autowired
+	private FeignService feignService;
+
+	@Override
+	public void setApplicationContext(ApplicationContext applicationContext)
+			throws BeansException {
+		this.applicationContext = applicationContext;
+	}
+
+	@GetMapping("/router-test")
+	public String notFound() {
+		return feignService.test();
+	}
+
+	@GetMapping("/add")
+	public void getDataFromControlPlaneTest() {
+		List<Rule> routeRules = new ArrayList<>();
+		List<MatchService> matchServices = new ArrayList<>();
+
+		UnifiedRoutingDataStructure unifiedRouteDataStructure = new UnifiedRoutingDataStructure();
+		unifiedRouteDataStructure.setTargetService("service-provider");
+
+		RoutingRule labelRouteData = new RoutingRule();
+		labelRouteData.setDefaultRouteVersion("v1");
+
+		Rule routeRule = new HeaderRoutingRule();
+		routeRule.setCondition("=");
+		routeRule.setKey("tag");
+		routeRule.setValue("v2");
+		Rule routeRule1 = new UrlRoutingRule.ParameterRoutingRule();
+		routeRule1.setCondition(">");
+		routeRule1.setKey("id");
+		routeRule1.setValue("10");
+		Rule routeRule2 = new UrlRoutingRule.PathRoutingRule();
+		routeRule2.setCondition("=");
+		routeRule2.setValue("/router-test");
+		routeRules.add(routeRule);
+		routeRules.add(routeRule1);
+		routeRules.add(routeRule2);
+
+		MatchService matchService = new MatchService();
+		matchService.setVersion("v2");
+		matchService.setWeight(100);
+		matchService.setRuleList(routeRules);
+		matchServices.add(matchService);
+
+		labelRouteData.setMatchRouteList(matchServices);
+
+		unifiedRouteDataStructure.setLabelRouteRule(labelRouteData);
+
+		List<UnifiedRoutingDataStructure> unifiedRouteDataStructureList = new ArrayList<>();
+		unifiedRouteDataStructureList.add(unifiedRouteDataStructure);
+		applicationContext.publishEvent(
+				new RoutingDataChangedEvent(this, unifiedRouteDataStructureList));
+	}
+
+	@GetMapping("/update")
+	public void updateDataFromControlPlaneTest() {
+		List<Rule> routeRules = new ArrayList<>();
+		List<MatchService> matchServices = new ArrayList<>();
+
+		UnifiedRoutingDataStructure unifiedRouteDataStructure = new UnifiedRoutingDataStructure();
+		unifiedRouteDataStructure.setTargetService("service-provider");
+
+		RoutingRule labelRouteData = new RoutingRule();
+		labelRouteData.setDefaultRouteVersion("v1");
+
+		Rule routeRule = new HeaderRoutingRule();
+		routeRule.setCondition("=");
+		routeRule.setKey("tag");
+		routeRule.setValue("v2");
+		Rule routeRule1 = new UrlRoutingRule.ParameterRoutingRule();
+		routeRule1.setCondition(">");
+		routeRule1.setKey("id");
+		routeRule1.setValue("10");
+		Rule routeRule2 = new UrlRoutingRule.PathRoutingRule();
+		routeRule2.setCondition("=");
+		routeRule2.setValue("/router-test");
+		routeRules.add(routeRule);
+		routeRules.add(routeRule1);
+		routeRules.add(routeRule2);
+
+		MatchService matchService = new MatchService();
+		matchService.setVersion("v2");
+		matchService.setWeight(50);
+		matchService.setRuleList(routeRules);
+		matchServices.add(matchService);
+
+		labelRouteData.setMatchRouteList(matchServices);
+
+		unifiedRouteDataStructure.setLabelRouteRule(labelRouteData);
+
+		List<UnifiedRoutingDataStructure> unifiedRouteDataStructureList = new ArrayList<>();
+		unifiedRouteDataStructureList.add(unifiedRouteDataStructure);
+		applicationContext.publishEvent(
+				new RoutingDataChangedEvent(this, unifiedRouteDataStructureList));
+	}
+
+}
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-feign-consumer-example/src/main/resources/application.properties b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-feign-consumer-example/src/main/resources/application.properties
new file mode 100644
index 00000000..1f91e52b
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-feign-consumer-example/src/main/resources/application.properties
@@ -0,0 +1,16 @@
+spring.application.name=feign-service-consumer
+server.port=18085
+
+management.endpoints.web.exposure.include=*
+spring.cloud.nacos.discovery.fail-fast=true
+spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848
+spring.cloud.nacos.discovery.enabled=true
+
+spring.cloud.nacos.username=nacos
+spring.cloud.nacos.password=nacos
+
+#spring.cloud.governance.routing.rule=RandomRule
+
+# Regional affinity routing configuration
+spring.cloud.governance.routing.region=dev
+spring.cloud.governance.routing.zone=zone1
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-reactive-consumer-example/pom.xml b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-reactive-consumer-example/pom.xml
new file mode 100644
index 00000000..e4c0479d
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-reactive-consumer-example/pom.xml
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+	<modelVersion>4.0.0</modelVersion>
+
+	<parent>
+		<groupId>com.alibaba.cloud</groupId>
+		<artifactId>routing-consumer-example</artifactId>
+		<version>${revision}</version>
+		<relativePath>../pom.xml</relativePath>
+	</parent>
+
+	<artifactId>routing-reactive-consumer-example</artifactId>
+
+</project>
\ No newline at end of file
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-reactive-consumer-example/src/main/java/com/alibaba/cloud/consumer/reactive/ConsumerReactiveExampleApplication.java b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-reactive-consumer-example/src/main/java/com/alibaba/cloud/consumer/reactive/ConsumerReactiveExampleApplication.java
new file mode 100644
index 00000000..8c2fca03
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-reactive-consumer-example/src/main/java/com/alibaba/cloud/consumer/reactive/ConsumerReactiveExampleApplication.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright 2013-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.consumer.reactive;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
+
+/**
+ * @author yuluo-yx
+ * @author <a href="1481556636@qq.com"></a>
+ */
+
+@SpringBootApplication
+@EnableDiscoveryClient
+public class ConsumerReactiveExampleApplication {
+
+	public static void main(String[] args) {
+
+		SpringApplication.run(ConsumerReactiveExampleApplication.class, args);
+	}
+
+}
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-reactive-consumer-example/src/main/java/com/alibaba/cloud/consumer/reactive/configuration/WebClientConfiguration.java b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-reactive-consumer-example/src/main/java/com/alibaba/cloud/consumer/reactive/configuration/WebClientConfiguration.java
new file mode 100644
index 00000000..337beff6
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-reactive-consumer-example/src/main/java/com/alibaba/cloud/consumer/reactive/configuration/WebClientConfiguration.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright 2013-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.consumer.reactive.configuration;
+
+import org.springframework.cloud.client.loadbalancer.LoadBalanced;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.web.reactive.function.client.WebClient;
+
+/**
+ * @author yuluo-yx
+ * @author <a href="1481556636@qq.com"></a>
+ */
+
+@Configuration
+public class WebClientConfiguration {
+
+	@Bean
+	@LoadBalanced
+	public WebClient.Builder webClient() {
+
+		return WebClient.builder();
+	}
+
+}
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-reactive-consumer-example/src/main/java/com/alibaba/cloud/consumer/reactive/controller/ConsumerReactiveExampleController.java b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-reactive-consumer-example/src/main/java/com/alibaba/cloud/consumer/reactive/controller/ConsumerReactiveExampleController.java
new file mode 100644
index 00000000..10a0fb6d
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-reactive-consumer-example/src/main/java/com/alibaba/cloud/consumer/reactive/controller/ConsumerReactiveExampleController.java
@@ -0,0 +1,178 @@
+/*
+ * Copyright 2013-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.consumer.reactive.controller;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import javax.annotation.Resource;
+
+import com.alibaba.cloud.commons.governance.event.RoutingDataChangedEvent;
+import com.alibaba.cloud.commons.governance.routing.MatchService;
+import com.alibaba.cloud.commons.governance.routing.RoutingRule;
+import com.alibaba.cloud.commons.governance.routing.UnifiedRoutingDataStructure;
+import com.alibaba.cloud.commons.governance.routing.rule.HeaderRoutingRule;
+import com.alibaba.cloud.commons.governance.routing.rule.Rule;
+import com.alibaba.cloud.commons.governance.routing.rule.UrlRoutingRule;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import reactor.core.publisher.Flux;
+import reactor.core.publisher.Mono;
+
+import org.springframework.beans.BeansException;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.cloud.client.discovery.ReactiveDiscoveryClient;
+import org.springframework.context.ApplicationContext;
+import org.springframework.context.ApplicationContextAware;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RestController;
+import org.springframework.web.reactive.function.client.WebClient;
+
+/**
+ * @author yuluo-yx
+ * @author <a href="1481556636@qq.com"></a>
+ */
+
+@RestController
+public class ConsumerReactiveExampleController implements ApplicationContextAware {
+
+	private static final Logger log = LoggerFactory
+			.getLogger(ConsumerReactiveExampleController.class);
+
+	private static final String SERVICE_ADDRESS = "http://service-provider";
+
+	@Autowired
+	private ApplicationContext applicationContext;
+
+	@Resource
+	private ReactiveDiscoveryClient reactiveDiscoveryClient;
+
+	@Resource
+	private WebClient.Builder webClientBuilder;
+
+	@Override
+	public void setApplicationContext(ApplicationContext applicationContext)
+			throws BeansException {
+
+		this.applicationContext = applicationContext;
+	}
+
+	@GetMapping("/all-services")
+	public Flux<String> allServices() {
+		return reactiveDiscoveryClient.getInstances("service-provider")
+				.map(serviceInstance -> serviceInstance.getHost() + ":"
+						+ serviceInstance.getPort());
+	}
+
+	@GetMapping("/router-test")
+	public Mono<String> notFound() {
+
+		return webClientBuilder.build().get().uri("http://service-provider/test-a1")
+				.retrieve().bodyToMono(String.class);
+
+	}
+
+	@GetMapping("/add")
+	public void getDataFromControlPlaneTest() {
+
+		log.info("执行 /add 请求，添加路由规则！");
+
+		List<Rule> routeRules = new ArrayList<>();
+		List<MatchService> matchServices = new ArrayList<>();
+
+		UnifiedRoutingDataStructure unifiedRouteDataStructure = new UnifiedRoutingDataStructure();
+		unifiedRouteDataStructure.setTargetService("service-provider");
+
+		RoutingRule labelRouteData = new RoutingRule();
+		labelRouteData.setDefaultRouteVersion("v1");
+
+		Rule routeRule = new HeaderRoutingRule();
+		routeRule.setCondition("=");
+		routeRule.setKey("tag");
+		routeRule.setValue("v2");
+		Rule routeRule1 = new UrlRoutingRule.ParameterRoutingRule();
+		routeRule1.setCondition(">");
+		routeRule1.setKey("id");
+		routeRule1.setValue("10");
+		Rule routeRule2 = new UrlRoutingRule.PathRoutingRule();
+		routeRule2.setCondition("=");
+		routeRule2.setValue("/router-test");
+		routeRules.add(routeRule);
+		routeRules.add(routeRule1);
+		routeRules.add(routeRule2);
+
+		MatchService matchService = new MatchService();
+		matchService.setVersion("v2");
+		matchService.setWeight(100);
+		matchService.setRuleList(routeRules);
+		matchServices.add(matchService);
+
+		labelRouteData.setMatchRouteList(matchServices);
+
+		unifiedRouteDataStructure.setLabelRouteRule(labelRouteData);
+
+		List<UnifiedRoutingDataStructure> unifiedRouteDataStructureList = new ArrayList<>();
+		unifiedRouteDataStructureList.add(unifiedRouteDataStructure);
+		applicationContext.publishEvent(
+				new RoutingDataChangedEvent(this, unifiedRouteDataStructureList));
+
+		log.info("/add 请求执行完毕，添加路由规则成功！");
+	}
+
+	@GetMapping("/update")
+	public void updateDataFromControlPlaneTest() {
+		List<Rule> routeRules = new ArrayList<>();
+		List<MatchService> matchServices = new ArrayList<>();
+
+		UnifiedRoutingDataStructure unifiedRouteDataStructure = new UnifiedRoutingDataStructure();
+		unifiedRouteDataStructure.setTargetService("service-provider");
+
+		RoutingRule labelRouteData = new RoutingRule();
+		labelRouteData.setDefaultRouteVersion("v1");
+
+		Rule routeRule = new HeaderRoutingRule();
+		routeRule.setCondition("=");
+		routeRule.setKey("tag");
+		routeRule.setValue("v2");
+		Rule routeRule1 = new UrlRoutingRule.ParameterRoutingRule();
+		routeRule1.setCondition(">");
+		routeRule1.setKey("id");
+		routeRule1.setValue("10");
+		Rule routeRule2 = new UrlRoutingRule.PathRoutingRule();
+		routeRule2.setCondition("=");
+		routeRule2.setValue("/router-test");
+		routeRules.add(routeRule);
+		routeRules.add(routeRule1);
+		routeRules.add(routeRule2);
+
+		MatchService matchService = new MatchService();
+		matchService.setVersion("v2");
+		matchService.setWeight(50);
+		matchService.setRuleList(routeRules);
+		matchServices.add(matchService);
+
+		labelRouteData.setMatchRouteList(matchServices);
+
+		unifiedRouteDataStructure.setLabelRouteRule(labelRouteData);
+
+		List<UnifiedRoutingDataStructure> unifiedRouteDataStructureList = new ArrayList<>();
+		unifiedRouteDataStructureList.add(unifiedRouteDataStructure);
+		applicationContext.publishEvent(
+				new RoutingDataChangedEvent(this, unifiedRouteDataStructureList));
+	}
+
+}
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-reactive-consumer-example/src/main/resources/application.properties b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-reactive-consumer-example/src/main/resources/application.properties
new file mode 100644
index 00000000..1b68d711
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-reactive-consumer-example/src/main/resources/application.properties
@@ -0,0 +1,15 @@
+spring.application.name=reactive-service-consumer
+server.port=18086
+
+management.endpoints.web.exposure.include=*
+spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848
+
+spring.cloud.nacos.username=nacos
+spring.cloud.nacos.password=nacos
+
+#spring.cloud.governance.routing.rule=RandomRule
+
+# Regional affinity routing configuration
+spring.cloud.governance.routing.region=qa
+spring.cloud.governance.routing.zone=zone1
+
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-rest-consumer-example/pom.xml b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-rest-consumer-example/pom.xml
new file mode 100644
index 00000000..acd16a7d
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-rest-consumer-example/pom.xml
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+	<modelVersion>4.0.0</modelVersion>
+
+	<parent>
+		<groupId>com.alibaba.cloud</groupId>
+		<artifactId>routing-consumer-example</artifactId>
+		<version>${revision}</version>
+		<relativePath>../pom.xml</relativePath>
+	</parent>
+
+	<artifactId>routing-rest-consumer-example</artifactId>
+
+</project>
\ No newline at end of file
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-rest-consumer-example/src/main/java/com/alibaba/cloud/consumer/resttemplate/ConsumerRestTemplateApplication.java b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-rest-consumer-example/src/main/java/com/alibaba/cloud/consumer/resttemplate/ConsumerRestTemplateApplication.java
new file mode 100644
index 00000000..2f7399f5
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-rest-consumer-example/src/main/java/com/alibaba/cloud/consumer/resttemplate/ConsumerRestTemplateApplication.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright 2013-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.consumer.resttemplate;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
+
+/**
+ * @author yuluo-yx
+ * @author <a href="1481556636@qq.com"></a>
+ */
+
+@SpringBootApplication
+@EnableDiscoveryClient
+public class ConsumerRestTemplateApplication {
+
+	public static void main(String[] args) {
+
+		SpringApplication.run(ConsumerRestTemplateApplication.class, args);
+	}
+
+}
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-rest-consumer-example/src/main/java/com/alibaba/cloud/consumer/resttemplate/configuration/RestTemplateConfiguration.java b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-rest-consumer-example/src/main/java/com/alibaba/cloud/consumer/resttemplate/configuration/RestTemplateConfiguration.java
new file mode 100644
index 00000000..7581a923
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-rest-consumer-example/src/main/java/com/alibaba/cloud/consumer/resttemplate/configuration/RestTemplateConfiguration.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright 2013-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.consumer.resttemplate.configuration;
+
+import org.springframework.cloud.client.loadbalancer.LoadBalanced;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.web.client.RestTemplate;
+
+/**
+ * @author yuluo-yx
+ * @author <a href="1481556636@qq.com"></a>
+ */
+
+@Configuration
+public class RestTemplateConfiguration {
+
+	@Bean
+	@LoadBalanced
+	public RestTemplate restTemplate() {
+
+		return new RestTemplate();
+	}
+
+}
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-rest-consumer-example/src/main/java/com/alibaba/cloud/consumer/resttemplate/controller/ConsumerRestTemplateExampleController.java b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-rest-consumer-example/src/main/java/com/alibaba/cloud/consumer/resttemplate/controller/ConsumerRestTemplateExampleController.java
new file mode 100644
index 00000000..b92a42d4
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-rest-consumer-example/src/main/java/com/alibaba/cloud/consumer/resttemplate/controller/ConsumerRestTemplateExampleController.java
@@ -0,0 +1,188 @@
+/*
+ * Copyright 2013-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.consumer.resttemplate.controller;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import com.alibaba.cloud.commons.governance.event.RoutingDataChangedEvent;
+import com.alibaba.cloud.commons.governance.routing.MatchService;
+import com.alibaba.cloud.commons.governance.routing.RoutingRule;
+import com.alibaba.cloud.commons.governance.routing.UnifiedRoutingDataStructure;
+import com.alibaba.cloud.commons.governance.routing.rule.HeaderRoutingRule;
+import com.alibaba.cloud.commons.governance.routing.rule.Rule;
+import com.alibaba.cloud.commons.governance.routing.rule.UrlRoutingRule;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import org.springframework.beans.BeansException;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.ApplicationContext;
+import org.springframework.context.ApplicationContextAware;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RestController;
+import org.springframework.web.client.RestTemplate;
+
+/**
+ * @author yuluo-yx
+ * @author <a href="1481556636@qq.com"></a>
+ */
+
+@RestController
+public class ConsumerRestTemplateExampleController implements ApplicationContextAware {
+
+	private static final Logger log = LoggerFactory
+			.getLogger(ConsumerRestTemplateExampleController.class);
+
+	private static final String SERVICE_PROVIDER_ADDRESS = "http://service-provider";
+
+	@Autowired
+	private ApplicationContext applicationContext;
+
+	@Autowired
+	private RestTemplate restTemplate;
+
+	@Override
+	public void setApplicationContext(ApplicationContext applicationContext)
+			throws BeansException {
+
+		this.applicationContext = applicationContext;
+	}
+
+	@GetMapping("/router-test")
+	public String notFound() {
+
+		return restTemplate.getForObject(SERVICE_PROVIDER_ADDRESS + "/test-a1",
+				String.class);
+	}
+
+	@GetMapping("/add")
+	public void getDataFromControlPlaneTest() {
+
+		log.info("请求 /add 接口，发布路由规则");
+
+		List<Rule> routeRules = new ArrayList<>();
+		List<MatchService> matchServices = new ArrayList<>();
+
+		UnifiedRoutingDataStructure unifiedRouteDataStructure = new UnifiedRoutingDataStructure();
+
+		// set target service
+		unifiedRouteDataStructure.setTargetService("service-provider");
+
+		RoutingRule labelRouteData = new RoutingRule();
+
+		// set default service version
+		labelRouteData.setDefaultRouteVersion("v1");
+
+		// set request header routing rule
+		Rule routeRule = new HeaderRoutingRule();
+		routeRule.setCondition("=");
+		routeRule.setKey("tag");
+		routeRule.setValue("v2");
+
+		// set request url routing rule
+		Rule routeRule1 = new UrlRoutingRule.ParameterRoutingRule();
+		routeRule1.setCondition(">");
+		routeRule1.setKey("id");
+		routeRule1.setValue("10");
+
+		// set request url routing rule
+		Rule routeRule2 = new UrlRoutingRule.PathRoutingRule();
+		routeRule2.setCondition("=");
+		routeRule2.setValue("/router-test");
+
+		// add routing rule to routeRules#List<Rule>
+		routeRules.add(routeRule);
+		routeRules.add(routeRule1);
+		routeRules.add(routeRule2);
+
+		// If the preceding conditions are met, the route is routed to the v2 instance and
+		// the weight is set to 100
+		MatchService matchService = new MatchService();
+		matchService.setVersion("v2");
+		matchService.setWeight(100);
+		matchService.setRuleList(routeRules);
+		matchServices.add(matchService);
+
+		labelRouteData.setMatchRouteList(matchServices);
+
+		unifiedRouteDataStructure.setLabelRouteRule(labelRouteData);
+
+		List<UnifiedRoutingDataStructure> unifiedRouteDataStructureList = new ArrayList<>();
+		unifiedRouteDataStructureList.add(unifiedRouteDataStructure);
+
+		RoutingDataChangedEvent routingDataChangedEvent = new RoutingDataChangedEvent(
+				this, unifiedRouteDataStructureList);
+
+		// Publish routing rules
+		applicationContext.publishEvent(routingDataChangedEvent);
+
+		log.info("请求 /add 接口，发布路由规则完成！");
+
+	}
+
+	@GetMapping("/update")
+	public void updateDataFromControlPlaneTest() {
+
+		log.info("请求 /update 接口，更新路由规则");
+
+		List<Rule> routeRules = new ArrayList<>();
+		List<MatchService> matchServices = new ArrayList<>();
+
+		UnifiedRoutingDataStructure unifiedRouteDataStructure = new UnifiedRoutingDataStructure();
+		unifiedRouteDataStructure.setTargetService("service-provider");
+
+		RoutingRule labelRouteData = new RoutingRule();
+		labelRouteData.setDefaultRouteVersion("v1");
+
+		Rule routeRule = new HeaderRoutingRule();
+		routeRule.setCondition("=");
+		routeRule.setKey("tag");
+		routeRule.setValue("v2");
+		Rule routeRule1 = new UrlRoutingRule.ParameterRoutingRule();
+		routeRule1.setCondition(">");
+		routeRule1.setKey("id");
+		routeRule1.setValue("10");
+		Rule routeRule2 = new UrlRoutingRule.PathRoutingRule();
+		routeRule2.setCondition("=");
+		routeRule2.setValue("/router-test");
+		routeRules.add(routeRule);
+		routeRules.add(routeRule1);
+		routeRules.add(routeRule2);
+
+		// set weight 50
+		MatchService matchService = new MatchService();
+		matchService.setVersion("v2");
+		matchService.setWeight(50);
+		matchService.setRuleList(routeRules);
+		matchServices.add(matchService);
+
+		labelRouteData.setMatchRouteList(matchServices);
+
+		unifiedRouteDataStructure.setLabelRouteRule(labelRouteData);
+
+		List<UnifiedRoutingDataStructure> unifiedRouteDataStructureList = new ArrayList<>();
+		unifiedRouteDataStructureList.add(unifiedRouteDataStructure);
+
+		applicationContext.publishEvent(
+				new RoutingDataChangedEvent(this, unifiedRouteDataStructureList));
+
+		log.info("请求 /update 接口，更新路由规则完成！");
+
+	}
+
+}
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-rest-consumer-example/src/main/resources/application.properties b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-rest-consumer-example/src/main/resources/application.properties
new file mode 100644
index 00000000..6c5387a4
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-consumer-example/routing-rest-consumer-example/src/main/resources/application.properties
@@ -0,0 +1,15 @@
+spring.application.name=rest-service-consumer
+server.port=18087
+
+management.endpoints.web.exposure.include=*
+spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848
+
+spring.cloud.nacos.username=nacos
+spring.cloud.nacos.password=nacos
+
+#spring.cloud.governance.routing.rule=RandomRule
+
+# Regional affinity routing configuration
+spring.cloud.governance.routing.region=qa
+spring.cloud.governance.routing.zone=zone1
+
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/pom.xml b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/pom.xml
new file mode 100644
index 00000000..6c9567ef
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/pom.xml
@@ -0,0 +1,45 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+	<modelVersion>4.0.0</modelVersion>
+
+	<parent>
+		<groupId>com.alibaba.cloud</groupId>
+		<artifactId>spring-cloud-alibaba-examples</artifactId>
+		<version>${revision}</version>
+		<relativePath>../../../../pom.xml</relativePath>
+	</parent>
+
+	<artifactId>routing-gateway-consumer-example</artifactId>
+
+	<properties>
+		<maven.compiler.source>8</maven.compiler.source>
+		<maven.compiler.target>8</maven.compiler.target>
+		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+	</properties>
+
+	<dependencies>
+
+		<dependency>
+			<groupId>org.springframework.cloud</groupId>
+			<artifactId>spring-cloud-starter-openfeign</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>com.alibaba.cloud</groupId>
+			<artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>com.alibaba.cloud</groupId>
+			<artifactId>spring-cloud-alibaba-routing-gateway-adapter</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>org.springframework.cloud</groupId>
+			<artifactId>spring-cloud-starter-gateway</artifactId>
+		</dependency>
+	</dependencies>
+
+</project>
\ No newline at end of file
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/src/main/java/com/alibaba/cloud/example/gateway/ConsumerGatewayApplication.java b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/src/main/java/com/alibaba/cloud/example/gateway/ConsumerGatewayApplication.java
new file mode 100644
index 00000000..e786e148
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/src/main/java/com/alibaba/cloud/example/gateway/ConsumerGatewayApplication.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright 2013-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.example.gateway;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+@SpringBootApplication
+@EnableDiscoveryClient
+public class ConsumerGatewayApplication {
+
+	public static void main(String[] args) {
+
+		SpringApplication.run(ConsumerGatewayApplication.class);
+	}
+
+}
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/src/main/java/com/alibaba/cloud/example/gateway/configuration/RouterFunctionConfiguration.java b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/src/main/java/com/alibaba/cloud/example/gateway/configuration/RouterFunctionConfiguration.java
new file mode 100644
index 00000000..92b5d7ae
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/src/main/java/com/alibaba/cloud/example/gateway/configuration/RouterFunctionConfiguration.java
@@ -0,0 +1,62 @@
+/*
+ * Copyright 2013-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.example.gateway.configuration;
+
+import com.alibaba.cloud.example.gateway.handler.AddRouterRouteRuleHandler;
+import com.alibaba.cloud.example.gateway.handler.GetServerListHandler;
+import com.alibaba.cloud.example.gateway.handler.UpdateRoutingRuleHandler;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.http.MediaType;
+import org.springframework.web.reactive.function.server.RequestPredicates;
+import org.springframework.web.reactive.function.server.RouterFunction;
+import org.springframework.web.reactive.function.server.RouterFunctions;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+@Configuration
+public class RouterFunctionConfiguration {
+
+	@Autowired
+	private AddRouterRouteRuleHandler addRouterRouteRuleHandler;
+
+	@Autowired
+	private UpdateRoutingRuleHandler updateRoutingRuleHandler;
+
+	@Autowired
+	private GetServerListHandler getServerListHandler;
+
+	@SuppressWarnings("rawtypes")
+	@Bean
+	public RouterFunction routerFunction() {
+
+		return RouterFunctions.route()
+				.GET("/add", RequestPredicates.accept(MediaType.TEXT_PLAIN),
+						addRouterRouteRuleHandler)
+				.GET("/update", RequestPredicates.accept(MediaType.TEXT_PLAIN),
+						updateRoutingRuleHandler)
+				.GET("/all-service", RequestPredicates.accept(MediaType.TEXT_PLAIN),
+						getServerListHandler)
+				.build();
+	}
+
+}
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/src/main/java/com/alibaba/cloud/example/gateway/handler/AddRouterRouteRuleHandler.java b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/src/main/java/com/alibaba/cloud/example/gateway/handler/AddRouterRouteRuleHandler.java
new file mode 100644
index 00000000..129cbdf5
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/src/main/java/com/alibaba/cloud/example/gateway/handler/AddRouterRouteRuleHandler.java
@@ -0,0 +1,51 @@
+/*
+ * Copyright 2013-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.example.gateway.handler;
+
+import com.alibaba.cloud.example.gateway.service.AddRoutingRuleService;
+import reactor.core.publisher.Mono;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.HttpStatus;
+import org.springframework.stereotype.Service;
+import org.springframework.web.reactive.function.BodyInserters;
+import org.springframework.web.reactive.function.server.HandlerFunction;
+import org.springframework.web.reactive.function.server.ServerRequest;
+import org.springframework.web.reactive.function.server.ServerResponse;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+@Service
+public class AddRouterRouteRuleHandler implements HandlerFunction<ServerResponse> {
+
+	@Autowired
+	private AddRoutingRuleService routingRuleService;
+
+	@Override
+	public Mono<ServerResponse> handle(ServerRequest serverRequest) {
+
+		routingRuleService.getDataFromControlPlaneTest();
+
+		return ServerResponse.status(HttpStatus.OK)
+				.body(BodyInserters.fromValue("添加路由规则成功！"));
+
+	}
+
+}
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/src/main/java/com/alibaba/cloud/example/gateway/handler/GetServerListHandler.java b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/src/main/java/com/alibaba/cloud/example/gateway/handler/GetServerListHandler.java
new file mode 100644
index 00000000..eb21c528
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/src/main/java/com/alibaba/cloud/example/gateway/handler/GetServerListHandler.java
@@ -0,0 +1,62 @@
+/*
+ * Copyright 2013-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.example.gateway.handler;
+
+import java.util.HashMap;
+import java.util.List;
+
+import reactor.core.publisher.Mono;
+
+import org.springframework.cloud.client.ServiceInstance;
+import org.springframework.cloud.client.discovery.DiscoveryClient;
+import org.springframework.http.HttpStatus;
+import org.springframework.stereotype.Service;
+import org.springframework.web.reactive.function.BodyInserters;
+import org.springframework.web.reactive.function.server.HandlerFunction;
+import org.springframework.web.reactive.function.server.ServerRequest;
+import org.springframework.web.reactive.function.server.ServerResponse;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+@Service
+public class GetServerListHandler implements HandlerFunction<ServerResponse> {
+
+	private final DiscoveryClient discoveryClient;
+
+	public GetServerListHandler(DiscoveryClient discoveryClient) {
+		this.discoveryClient = discoveryClient;
+	}
+
+	@Override
+	public Mono<ServerResponse> handle(ServerRequest serverRequest) {
+
+		HashMap<String, List<ServiceInstance>> map = new HashMap<>();
+
+		List<String> services = discoveryClient.getServices();
+		for (String service : services) {
+			List<ServiceInstance> instances = discoveryClient.getInstances(service);
+			map.put(service, instances);
+		}
+
+		return ServerResponse.status(HttpStatus.OK).body(BodyInserters.fromValue(map));
+
+	}
+
+}
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/src/main/java/com/alibaba/cloud/example/gateway/handler/UpdateRoutingRuleHandler.java b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/src/main/java/com/alibaba/cloud/example/gateway/handler/UpdateRoutingRuleHandler.java
new file mode 100644
index 00000000..0642267b
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/src/main/java/com/alibaba/cloud/example/gateway/handler/UpdateRoutingRuleHandler.java
@@ -0,0 +1,51 @@
+/*
+ * Copyright 2013-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.example.gateway.handler;
+
+import com.alibaba.cloud.example.gateway.service.UpdateRoutingRuleService;
+import reactor.core.publisher.Mono;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.HttpStatus;
+import org.springframework.stereotype.Service;
+import org.springframework.web.reactive.function.BodyInserters;
+import org.springframework.web.reactive.function.server.HandlerFunction;
+import org.springframework.web.reactive.function.server.ServerRequest;
+import org.springframework.web.reactive.function.server.ServerResponse;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+@Service
+public class UpdateRoutingRuleHandler implements HandlerFunction<ServerResponse> {
+
+	@Autowired
+	private UpdateRoutingRuleService routingRuleService;
+
+	@Override
+	public Mono<ServerResponse> handle(ServerRequest serverRequest) {
+
+		routingRuleService.updateDataFromControlPlaneTest();
+
+		return ServerResponse.status(HttpStatus.OK)
+				.body(BodyInserters.fromValue("更新路由规则成功！"));
+
+	}
+
+}
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/src/main/java/com/alibaba/cloud/example/gateway/service/AddRoutingRuleService.java b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/src/main/java/com/alibaba/cloud/example/gateway/service/AddRoutingRuleService.java
new file mode 100644
index 00000000..02330119
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/src/main/java/com/alibaba/cloud/example/gateway/service/AddRoutingRuleService.java
@@ -0,0 +1,28 @@
+/*
+ * Copyright 2013-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.example.gateway.service;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+public interface AddRoutingRuleService {
+
+	void getDataFromControlPlaneTest();
+
+}
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/src/main/java/com/alibaba/cloud/example/gateway/service/UpdateRoutingRuleService.java b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/src/main/java/com/alibaba/cloud/example/gateway/service/UpdateRoutingRuleService.java
new file mode 100644
index 00000000..56787096
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/src/main/java/com/alibaba/cloud/example/gateway/service/UpdateRoutingRuleService.java
@@ -0,0 +1,28 @@
+/*
+ * Copyright 2013-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.example.gateway.service;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+public interface UpdateRoutingRuleService {
+
+	void updateDataFromControlPlaneTest();
+
+}
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/src/main/java/com/alibaba/cloud/example/gateway/service/impl/AddRoutingRuleServiceImpl.java b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/src/main/java/com/alibaba/cloud/example/gateway/service/impl/AddRoutingRuleServiceImpl.java
new file mode 100644
index 00000000..3e687678
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/src/main/java/com/alibaba/cloud/example/gateway/service/impl/AddRoutingRuleServiceImpl.java
@@ -0,0 +1,126 @@
+/*
+ * Copyright 2013-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.example.gateway.service.impl;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import com.alibaba.cloud.commons.governance.event.RoutingDataChangedEvent;
+import com.alibaba.cloud.commons.governance.routing.MatchService;
+import com.alibaba.cloud.commons.governance.routing.RoutingRule;
+import com.alibaba.cloud.commons.governance.routing.UnifiedRoutingDataStructure;
+import com.alibaba.cloud.commons.governance.routing.rule.HeaderRoutingRule;
+import com.alibaba.cloud.commons.governance.routing.rule.Rule;
+import com.alibaba.cloud.commons.governance.routing.rule.UrlRoutingRule;
+import com.alibaba.cloud.example.gateway.service.AddRoutingRuleService;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import org.springframework.beans.BeansException;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.ApplicationContext;
+import org.springframework.context.ApplicationContextAware;
+import org.springframework.stereotype.Service;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+@Service
+public class AddRoutingRuleServiceImpl
+		implements AddRoutingRuleService, ApplicationContextAware {
+
+	private static final Logger log = LoggerFactory
+			.getLogger(AddRoutingRuleServiceImpl.class);
+
+	@Autowired
+	private ApplicationContext applicationContext;
+
+	@Override
+	public void setApplicationContext(ApplicationContext applicationContext)
+			throws BeansException {
+
+		this.applicationContext = applicationContext;
+	}
+
+	@Override
+	public void getDataFromControlPlaneTest() {
+
+		log.info("请求 /add 接口，发布路由规则");
+
+		List<Rule> routeRules = new ArrayList<>();
+		List<MatchService> matchServices = new ArrayList<>();
+
+		UnifiedRoutingDataStructure unifiedRouteDataStructure = new UnifiedRoutingDataStructure();
+
+		// set target service
+		unifiedRouteDataStructure.setTargetService("service-provider");
+
+		RoutingRule labelRouteData = new RoutingRule();
+
+		// set default service version
+		labelRouteData.setDefaultRouteVersion("v1");
+
+		// set request header routing rule
+		Rule routeRule = new HeaderRoutingRule();
+		routeRule.setCondition("=");
+		routeRule.setKey("tag");
+		routeRule.setValue("v2");
+
+		// set request url routing rule
+		Rule routeRule1 = new UrlRoutingRule.ParameterRoutingRule();
+		routeRule1.setCondition(">");
+		routeRule1.setKey("id");
+		routeRule1.setValue("10");
+
+		// set request url routing rule
+		Rule routeRule2 = new UrlRoutingRule.PathRoutingRule();
+		routeRule2.setCondition("=");
+		routeRule2.setValue("/test-a1");
+
+		// add routing rule to routeRules#List<Rule>
+		routeRules.add(routeRule);
+		routeRules.add(routeRule1);
+		routeRules.add(routeRule2);
+
+		// If the preceding conditions are met, the route is routed to the v2 instance and
+		// the weight is set to 100
+		MatchService matchService = new MatchService();
+		matchService.setVersion("v2");
+		matchService.setWeight(100);
+		matchService.setRuleList(routeRules);
+		matchServices.add(matchService);
+
+		labelRouteData.setMatchRouteList(matchServices);
+
+		unifiedRouteDataStructure.setLabelRouteRule(labelRouteData);
+
+		List<UnifiedRoutingDataStructure> unifiedRouteDataStructureList = new ArrayList<>();
+		unifiedRouteDataStructureList.add(unifiedRouteDataStructure);
+
+		RoutingDataChangedEvent routingDataChangedEvent = new RoutingDataChangedEvent(
+				this, unifiedRouteDataStructureList);
+
+		// Publish routing rules
+		applicationContext.publishEvent(routingDataChangedEvent);
+
+		log.info("请求 /add 接口，发布路由规则完成！");
+
+	}
+
+}
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/src/main/java/com/alibaba/cloud/example/gateway/service/impl/UpdateRoutingRuleServiceImpl.java b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/src/main/java/com/alibaba/cloud/example/gateway/service/impl/UpdateRoutingRuleServiceImpl.java
new file mode 100644
index 00000000..7cca5bd8
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/src/main/java/com/alibaba/cloud/example/gateway/service/impl/UpdateRoutingRuleServiceImpl.java
@@ -0,0 +1,110 @@
+/*
+ * Copyright 2013-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.example.gateway.service.impl;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import com.alibaba.cloud.commons.governance.event.RoutingDataChangedEvent;
+import com.alibaba.cloud.commons.governance.routing.MatchService;
+import com.alibaba.cloud.commons.governance.routing.RoutingRule;
+import com.alibaba.cloud.commons.governance.routing.UnifiedRoutingDataStructure;
+import com.alibaba.cloud.commons.governance.routing.rule.HeaderRoutingRule;
+import com.alibaba.cloud.commons.governance.routing.rule.Rule;
+import com.alibaba.cloud.commons.governance.routing.rule.UrlRoutingRule;
+import com.alibaba.cloud.example.gateway.service.UpdateRoutingRuleService;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import org.springframework.beans.BeansException;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.ApplicationContext;
+import org.springframework.context.ApplicationContextAware;
+import org.springframework.stereotype.Service;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+@Service
+public class UpdateRoutingRuleServiceImpl
+		implements UpdateRoutingRuleService, ApplicationContextAware {
+
+	private static final Logger log = LoggerFactory
+			.getLogger(UpdateRoutingRuleServiceImpl.class);
+
+	@Autowired
+	private ApplicationContext applicationContext;
+
+	@Override
+	public void setApplicationContext(ApplicationContext applicationContext)
+			throws BeansException {
+
+		this.applicationContext = applicationContext;
+	}
+
+	public void updateDataFromControlPlaneTest() {
+
+		log.info("请求 /update 接口，更新路由规则");
+
+		List<Rule> routeRules = new ArrayList<>();
+		List<MatchService> matchServices = new ArrayList<>();
+
+		UnifiedRoutingDataStructure unifiedRouteDataStructure = new UnifiedRoutingDataStructure();
+		unifiedRouteDataStructure.setTargetService("service-provider");
+
+		RoutingRule labelRouteData = new RoutingRule();
+		labelRouteData.setDefaultRouteVersion("v1");
+
+		Rule routeRule = new HeaderRoutingRule();
+		routeRule.setCondition("=");
+		routeRule.setKey("tag");
+		routeRule.setValue("v2");
+		Rule routeRule1 = new UrlRoutingRule.ParameterRoutingRule();
+		routeRule1.setCondition(">");
+		routeRule1.setKey("id");
+		routeRule1.setValue("10");
+		Rule routeRule2 = new UrlRoutingRule.PathRoutingRule();
+		routeRule2.setCondition("=");
+		routeRule2.setValue("/test-a1");
+		routeRules.add(routeRule);
+		routeRules.add(routeRule1);
+		routeRules.add(routeRule2);
+
+		// set weight 50
+		MatchService matchService = new MatchService();
+		matchService.setVersion("v2");
+		matchService.setWeight(50);
+		matchService.setRuleList(routeRules);
+		matchServices.add(matchService);
+
+		labelRouteData.setMatchRouteList(matchServices);
+
+		unifiedRouteDataStructure.setLabelRouteRule(labelRouteData);
+
+		List<UnifiedRoutingDataStructure> unifiedRouteDataStructureList = new ArrayList<>();
+		unifiedRouteDataStructureList.add(unifiedRouteDataStructure);
+
+		applicationContext.publishEvent(
+				new RoutingDataChangedEvent(this, unifiedRouteDataStructureList));
+
+		log.info("请求 /update 接口，更新路由规则完成！");
+
+	}
+
+}
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/src/main/resources/application.properties b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/src/main/resources/application.properties
new file mode 100644
index 00000000..9d68185c
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example/src/main/resources/application.properties
@@ -0,0 +1,24 @@
+server.port=18088
+spring.application.name=gateway-consumer-example
+spring.main.web-application-type=reactive
+
+management.endpoints.web.exposure.include=*
+spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848
+
+spring.cloud.nacos.username=nacos
+spring.cloud.nacos.password=nacos
+
+#spring.cloud.governance.routing.rule=RandomRule
+
+# Regional affinity routing configuration
+spring.cloud.governance.routing.region=dev
+spring.cloud.governance.routing.zone=zone1
+
+spring.cloud.gateway.discovery.locator.enabled=false
+spring.cloud.gateway.discovery.locator.lower-case-service-id=true
+
+# Route config
+spring.cloud.gateway.routes[0].id=label-routing-test-route
+spring.cloud.gateway.routes[0].uri=lb://service-provider
+spring.cloud.gateway.routes[0].predicates[0]=Path=/service-provider/**
+spring.cloud.gateway.routes[0].filters[0]=StripPrefix=1
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-zuul-consumer-example/pom.xml b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-zuul-consumer-example/pom.xml
new file mode 100644
index 00000000..c9b11243
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-zuul-consumer-example/pom.xml
@@ -0,0 +1,51 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+	<modelVersion>4.0.0</modelVersion>
+
+	<parent>
+		<groupId>com.alibaba.cloud</groupId>
+		<artifactId>spring-cloud-alibaba-examples</artifactId>
+		<version>${revision}</version>
+		<relativePath>../../../../pom.xml</relativePath>
+	</parent>
+
+	<artifactId>routing-zuul-consumer-example</artifactId>
+
+	<properties>
+		<maven.compiler.source>8</maven.compiler.source>
+		<maven.compiler.target>8</maven.compiler.target>
+		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+	</properties>
+
+	<dependencies>
+
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-web</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>com.alibaba.cloud</groupId>
+			<artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>org.springframework.cloud</groupId>
+			<artifactId>spring-cloud-starter-openfeign</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>com.alibaba.cloud</groupId>
+			<artifactId>spring-cloud-alibaba-routing-zuul-adapter</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>org.springframework.cloud</groupId>
+			<artifactId>spring-cloud-starter-netflix-zuul</artifactId>
+		</dependency>
+
+	</dependencies>
+
+</project>
\ No newline at end of file
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-zuul-consumer-example/src/main/java/com/alibaba/example/zuul/ConsumerZuulApplication.java b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-zuul-consumer-example/src/main/java/com/alibaba/example/zuul/ConsumerZuulApplication.java
new file mode 100644
index 00000000..bfcf4b77
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-zuul-consumer-example/src/main/java/com/alibaba/example/zuul/ConsumerZuulApplication.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright 2013-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.example.zuul;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
+import org.springframework.cloud.netflix.zuul.EnableZuulProxy;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+@EnableZuulProxy
+@EnableDiscoveryClient
+@SpringBootApplication
+public class ConsumerZuulApplication {
+
+	public static void main(String[] args) {
+
+		SpringApplication.run(ConsumerZuulApplication.class);
+	}
+
+}
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-zuul-consumer-example/src/main/java/com/alibaba/example/zuul/controller/RouteRuleController.java b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-zuul-consumer-example/src/main/java/com/alibaba/example/zuul/controller/RouteRuleController.java
new file mode 100644
index 00000000..79155410
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-zuul-consumer-example/src/main/java/com/alibaba/example/zuul/controller/RouteRuleController.java
@@ -0,0 +1,143 @@
+/*
+ * Copyright 2013-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.example.zuul.controller;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import com.alibaba.cloud.commons.governance.event.RoutingDataChangedEvent;
+import com.alibaba.cloud.commons.governance.routing.MatchService;
+import com.alibaba.cloud.commons.governance.routing.RoutingRule;
+import com.alibaba.cloud.commons.governance.routing.UnifiedRoutingDataStructure;
+import com.alibaba.cloud.commons.governance.routing.rule.HeaderRoutingRule;
+import com.alibaba.cloud.commons.governance.routing.rule.Rule;
+import com.alibaba.cloud.commons.governance.routing.rule.UrlRoutingRule;
+
+import org.springframework.beans.BeansException;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.ApplicationContext;
+import org.springframework.context.ApplicationContextAware;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+@RestController
+public class RouteRuleController implements ApplicationContextAware {
+
+	@Autowired
+	private ApplicationContext applicationContext;
+
+	@Override
+	public void setApplicationContext(ApplicationContext applicationContext)
+			throws BeansException {
+
+		this.applicationContext = applicationContext;
+	}
+
+	@GetMapping("/add")
+	public String getDataFromControlPlaneTest() {
+		List<Rule> routeRules = new ArrayList<>();
+		List<MatchService> matchServices = new ArrayList<>();
+
+		UnifiedRoutingDataStructure unifiedRouteDataStructure = new UnifiedRoutingDataStructure();
+		unifiedRouteDataStructure.setTargetService("service-provider");
+
+		RoutingRule labelRouteData = new RoutingRule();
+		labelRouteData.setDefaultRouteVersion("v1");
+
+		Rule routeRule = new HeaderRoutingRule();
+		routeRule.setCondition("=");
+		routeRule.setKey("tag");
+		routeRule.setValue("v2");
+		Rule routeRule1 = new UrlRoutingRule.ParameterRoutingRule();
+		routeRule1.setCondition(">");
+		routeRule1.setKey("id");
+		routeRule1.setValue("10");
+		Rule routeRule2 = new UrlRoutingRule.PathRoutingRule();
+		routeRule2.setCondition("=");
+		routeRule2.setValue("/service-provider/test-a1");
+		routeRules.add(routeRule);
+		routeRules.add(routeRule1);
+		routeRules.add(routeRule2);
+
+		MatchService matchService = new MatchService();
+		matchService.setVersion("v2");
+		matchService.setWeight(100);
+		matchService.setRuleList(routeRules);
+		matchServices.add(matchService);
+
+		labelRouteData.setMatchRouteList(matchServices);
+
+		unifiedRouteDataStructure.setLabelRouteRule(labelRouteData);
+
+		List<UnifiedRoutingDataStructure> unifiedRouteDataStructureList = new ArrayList<>();
+		unifiedRouteDataStructureList.add(unifiedRouteDataStructure);
+		applicationContext.publishEvent(
+				new RoutingDataChangedEvent(this, unifiedRouteDataStructureList));
+
+		return "添加路由规则完成！";
+	}
+
+	@GetMapping("/update")
+	public String updateDataFromControlPlaneTest() {
+		List<Rule> routeRules = new ArrayList<>();
+		List<MatchService> matchServices = new ArrayList<>();
+
+		UnifiedRoutingDataStructure unifiedRouteDataStructure = new UnifiedRoutingDataStructure();
+		unifiedRouteDataStructure.setTargetService("service-provider");
+
+		RoutingRule labelRouteData = new RoutingRule();
+		labelRouteData.setDefaultRouteVersion("v1");
+
+		Rule routeRule = new HeaderRoutingRule();
+		routeRule.setCondition("=");
+		routeRule.setKey("tag");
+		routeRule.setValue("v2");
+		Rule routeRule1 = new UrlRoutingRule.ParameterRoutingRule();
+		routeRule1.setCondition(">");
+		routeRule1.setKey("id");
+		routeRule1.setValue("10");
+		Rule routeRule2 = new UrlRoutingRule.PathRoutingRule();
+		routeRule2.setCondition("=");
+		routeRule2.setValue("/service-provider/test-a1");
+		routeRules.add(routeRule);
+		routeRules.add(routeRule1);
+		routeRules.add(routeRule2);
+
+		MatchService matchService = new MatchService();
+		matchService.setVersion("v2");
+		matchService.setWeight(50);
+		matchService.setRuleList(routeRules);
+		matchServices.add(matchService);
+
+		labelRouteData.setMatchRouteList(matchServices);
+
+		unifiedRouteDataStructure.setLabelRouteRule(labelRouteData);
+
+		List<UnifiedRoutingDataStructure> unifiedRouteDataStructureList = new ArrayList<>();
+		unifiedRouteDataStructureList.add(unifiedRouteDataStructure);
+		applicationContext.publishEvent(
+				new RoutingDataChangedEvent(this, unifiedRouteDataStructureList));
+
+		return "更新路由规则完成";
+	}
+
+}
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-zuul-consumer-example/src/main/resources/application.properties b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-zuul-consumer-example/src/main/resources/application.properties
new file mode 100644
index 00000000..184e8f1e
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-gateway-consumer-example/routing-zuul-consumer-example/src/main/resources/application.properties
@@ -0,0 +1,18 @@
+server.port=18089
+spring.application.name=zuul-consumer-example
+
+management.endpoints.web.exposure.include=*
+spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848
+
+spring.cloud.nacos.username=nacos
+spring.cloud.nacos.password=nacos
+
+#spring.cloud.governance.routing.rule=RandomRule
+
+# Regional affinity routing configuration
+spring.cloud.governance.routing.region=dev
+spring.cloud.governance.routing.zone=zone1
+
+# Route config
+zuul.routes.my-service.serviceId=service-provider
+zuul.routes.my-service.path=/service-provider/**
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-provider-example/pom.xml b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-provider-example/pom.xml
new file mode 100644
index 00000000..5ca3f66f
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-provider-example/pom.xml
@@ -0,0 +1,48 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
+
+	<parent>
+		<groupId>com.alibaba.cloud</groupId>
+		<artifactId>spring-cloud-alibaba-examples</artifactId>
+		<version>${revision}</version>
+		<relativePath>../../../pom.xml</relativePath>
+	</parent>
+	<modelVersion>4.0.0</modelVersion>
+
+	<artifactId>routing-provider-example</artifactId>
+	<name>Spring Cloud Starter Alibaba Label Routing Provider Example</name>
+	<description>Example demonstrating how to use label routing provider</description>
+	<packaging>jar</packaging>
+
+	<dependencies>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-web</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>com.alibaba.cloud</groupId>
+			<artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>org.springframework.cloud</groupId>
+			<artifactId>spring-cloud-starter-openfeign</artifactId>
+		</dependency>
+
+	</dependencies>
+
+	<build>
+		<plugins>
+			<plugin>
+				<groupId>org.springframework.boot</groupId>
+				<artifactId>spring-boot-maven-plugin</artifactId>
+				<configuration>
+					<mainClass>com.alibaba.cloud.examples.ProviderA1Application</mainClass>
+				</configuration>
+			</plugin>
+		</plugins>
+	</build>
+
+</project>
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-provider-example/src/main/java/com/alibaba/cloud/examples/ProviderA1Application.java b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-provider-example/src/main/java/com/alibaba/cloud/examples/ProviderA1Application.java
new file mode 100644
index 00000000..9f3ba476
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-provider-example/src/main/java/com/alibaba/cloud/examples/ProviderA1Application.java
@@ -0,0 +1,61 @@
+/*
+ * Copyright 2013-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.examples;
+
+import com.alibaba.cloud.nacos.registry.NacosRegistration;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+/**
+ * @author yuluo-yx
+ * @author <a href="1481556636@qq.com"></a>
+ */
+
+@EnableDiscoveryClient
+@SpringBootApplication
+public class ProviderA1Application {
+
+	public static void main(String[] args) {
+		System.setProperty("spring.profiles.active", "a1");
+		SpringApplication.run(ProviderA1Application.class, args);
+	}
+
+	@Autowired
+	NacosRegistration nacosRegistration;
+
+	@RestController
+	class Controller {
+
+		@GetMapping("/test-a1")
+		public String test() {
+			String host = nacosRegistration.getHost();
+			int port = nacosRegistration.getPort();
+			String zone = nacosRegistration.getMetadata().get("zone");
+			String region = nacosRegistration.getMetadata().get("region");
+			String version = nacosRegistration.getMetadata().get("version");
+			return "Route in " + host + ":" + port + ", region: " + region + ", zone: "
+					+ zone + ", version: " + version;
+		}
+
+	}
+
+}
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-provider-example/src/main/java/com/alibaba/cloud/examples/ProviderA2Application.java b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-provider-example/src/main/java/com/alibaba/cloud/examples/ProviderA2Application.java
new file mode 100644
index 00000000..53f03320
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-provider-example/src/main/java/com/alibaba/cloud/examples/ProviderA2Application.java
@@ -0,0 +1,63 @@
+/*
+ * Copyright 2013-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.examples;
+
+import com.alibaba.cloud.nacos.registry.NacosRegistration;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+/**
+ * @author yuluo
+ * @author <a href="1481556636@qq.com"></a>
+ */
+
+@EnableDiscoveryClient
+@SpringBootApplication
+public class ProviderA2Application {
+
+	public static void main(String[] args) {
+		System.setProperty("spring.profiles.active", "a2");
+		SpringApplication.run(ProviderA2Application.class, args);
+	}
+
+	@Autowired
+	NacosRegistration nacosRegistration;
+
+	@RestController
+	class Controller {
+
+		@GetMapping("/test-a2")
+		public String test() {
+
+			String host = nacosRegistration.getHost();
+			int port = nacosRegistration.getPort();
+			String zone = nacosRegistration.getMetadata().get("zone");
+			String region = nacosRegistration.getMetadata().get("region");
+			String version = nacosRegistration.getMetadata().get("version");
+			return "Route in " + host + ":" + port + ", region: " + region + ", zone: "
+					+ zone + ", version: " + version;
+
+		}
+
+	}
+
+}
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-provider-example/src/main/java/com/alibaba/cloud/examples/ProviderA3Application.java b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-provider-example/src/main/java/com/alibaba/cloud/examples/ProviderA3Application.java
new file mode 100644
index 00000000..27e72a31
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-provider-example/src/main/java/com/alibaba/cloud/examples/ProviderA3Application.java
@@ -0,0 +1,62 @@
+/*
+ * Copyright 2013-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.examples;
+
+import com.alibaba.cloud.nacos.registry.NacosRegistration;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+/**
+ * @author yuluo
+ * @author <a href="1481556636@qq.com"></a>
+ */
+
+@EnableDiscoveryClient
+@SpringBootApplication
+public class ProviderA3Application {
+
+	public static void main(String[] args) {
+		System.setProperty("spring.profiles.active", "a3");
+		SpringApplication.run(ProviderA3Application.class, args);
+	}
+
+	@Autowired
+	NacosRegistration nacosRegistration;
+
+	@RestController
+	class Controller {
+
+		@GetMapping("/test-a3")
+		public String test() {
+
+			String host = nacosRegistration.getHost();
+			int port = nacosRegistration.getPort();
+			String zone = nacosRegistration.getMetadata().get("zone");
+			String region = nacosRegistration.getMetadata().get("region");
+			String version = nacosRegistration.getMetadata().get("version");
+			return "Route in " + host + ":" + port + ", region: " + region + ", zone: "
+					+ zone + ", version: " + version;
+		}
+
+	}
+
+}
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-provider-example/src/main/java/com/alibaba/cloud/examples/ProviderA4Application.java b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-provider-example/src/main/java/com/alibaba/cloud/examples/ProviderA4Application.java
new file mode 100644
index 00000000..3ce55ef1
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-provider-example/src/main/java/com/alibaba/cloud/examples/ProviderA4Application.java
@@ -0,0 +1,63 @@
+/*
+ * Copyright 2013-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.examples;
+
+import com.alibaba.cloud.nacos.registry.NacosRegistration;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+/**
+ * @author yuluo
+ * @author <a href="1481556636@qq.com"></a>
+ */
+
+@EnableDiscoveryClient
+@SpringBootApplication
+public class ProviderA4Application {
+
+	public static void main(String[] args) {
+		System.setProperty("spring.profiles.active", "a4");
+		SpringApplication.run(ProviderA4Application.class, args);
+	}
+
+	@Autowired
+	NacosRegistration nacosRegistration;
+
+	@RestController
+	class Controller {
+
+		@GetMapping("/test-a4")
+		public String test() {
+
+			String host = nacosRegistration.getHost();
+			int port = nacosRegistration.getPort();
+			String zone = nacosRegistration.getMetadata().get("zone");
+			String region = nacosRegistration.getMetadata().get("region");
+			String version = nacosRegistration.getMetadata().get("version");
+			return "Route in " + host + ":" + port + ", region: " + region + ", zone: "
+					+ zone + ", version: " + version;
+
+		}
+
+	}
+
+}
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-provider-example/src/main/resources/Bootstrap.properties b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-provider-example/src/main/resources/Bootstrap.properties
new file mode 100644
index 00000000..25c408b8
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-provider-example/src/main/resources/Bootstrap.properties
@@ -0,0 +1,8 @@
+spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848
+spring.cloud.nacos.discovery.enabled=true
+
+spring.cloud.nacos.username=nacos
+spring.cloud.nacos.password=nacos
+
+management.endpoints.web.exposure.include=*
+management.endpoint.health.show-details=always
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-provider-example/src/main/resources/application-a1.properties b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-provider-example/src/main/resources/application-a1.properties
new file mode 100644
index 00000000..7d373a0b
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-provider-example/src/main/resources/application-a1.properties
@@ -0,0 +1,6 @@
+server.port=18081
+spring.application.name=service-provider
+
+spring.cloud.nacos.discovery.metadata.region=qa
+spring.cloud.nacos.discovery.metadata.zone=zone1
+spring.cloud.nacos.discovery.metadata.version=v1
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-provider-example/src/main/resources/application-a2.properties b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-provider-example/src/main/resources/application-a2.properties
new file mode 100644
index 00000000..90cb0420
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-provider-example/src/main/resources/application-a2.properties
@@ -0,0 +1,6 @@
+server.port=18082
+spring.application.name=service-provider
+
+spring.cloud.nacos.discovery.metadata.region=qa
+spring.cloud.nacos.discovery.metadata.zone=zone2
+spring.cloud.nacos.discovery.metadata.version=v2
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-provider-example/src/main/resources/application-a3.properties b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-provider-example/src/main/resources/application-a3.properties
new file mode 100644
index 00000000..77a8bae3
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-provider-example/src/main/resources/application-a3.properties
@@ -0,0 +1,6 @@
+server.port=18083
+spring.application.name=service-provider
+
+spring.cloud.nacos.discovery.metadata.region=dev
+spring.cloud.nacos.discovery.metadata.zone=zone1
+spring.cloud.nacos.discovery.metadata.version=v1
diff --git a/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-provider-example/src/main/resources/application-a4.properties b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-provider-example/src/main/resources/application-a4.properties
new file mode 100644
index 00000000..ef2ffd79
--- /dev/null
+++ b/spring-cloud-alibaba-examples/governance-example/label-routing-example/routing-provider-example/src/main/resources/application-a4.properties
@@ -0,0 +1,6 @@
+server.port=18084
+spring.application.name=service-provider
+
+spring.cloud.nacos.discovery.metadata.region=dev
+spring.cloud.nacos.discovery.metadata.zone=zone2
+spring.cloud.nacos.discovery.metadata.version=v2
diff --git a/spring-cloud-alibaba-examples/nacos-example/nacos-discovery-example/nacos-reactivediscovery-consumer-example/src/main/java/com/alibaba/cloud/examples/ConsumerReactiveApplication.java b/spring-cloud-alibaba-examples/nacos-example/nacos-discovery-example/nacos-reactivediscovery-consumer-example/src/main/java/com/alibaba/cloud/examples/ConsumerReactiveApplication.java
index c6abf055..761eb03d 100644
--- a/spring-cloud-alibaba-examples/nacos-example/nacos-discovery-example/nacos-reactivediscovery-consumer-example/src/main/java/com/alibaba/cloud/examples/ConsumerReactiveApplication.java
+++ b/spring-cloud-alibaba-examples/nacos-example/nacos-discovery-example/nacos-reactivediscovery-consumer-example/src/main/java/com/alibaba/cloud/examples/ConsumerReactiveApplication.java
@@ -26,9 +26,7 @@ import org.springframework.cloud.loadbalancer.annotation.LoadBalancerClients;
  */
 
 @SpringBootApplication
-@LoadBalancerClients({
-		@LoadBalancerClient("service-provider")
-})
+@LoadBalancerClients({ @LoadBalancerClient("service-provider") })
 public class ConsumerReactiveApplication {
 
 	public static void main(String[] args) {
diff --git a/spring-cloud-alibaba-examples/pom.xml b/spring-cloud-alibaba-examples/pom.xml
index b4bbcd99..d76cec35 100644
--- a/spring-cloud-alibaba-examples/pom.xml
+++ b/spring-cloud-alibaba-examples/pom.xml
@@ -60,12 +60,16 @@
 		<module>integrated-example/integrated-frontend</module>
         <module>governance-example/label-routing-example/istio-consumer-example</module>
         <module>governance-example/label-routing-example/opensergo-consumer-example</module>
-        <module>governance-example/label-routing-example/consumer-example</module>
-        <module>governance-example/label-routing-example/provider-example</module>
+        <module>governance-example/label-routing-example/routing-consumer-example</module>
+        <module>governance-example/label-routing-example/routing-provider-example</module>
         <module>governance-example/authentication-example/istio-authentication-provider-mvc-example</module>
         <module>governance-example/authentication-example/istio-authentication-provider-webflux-example</module>
+        <module>governance-example/label-routing-example/routing-gateway-consumer-example/routing-gateway-consumer-example</module>
+		<module>
+			governance-example/label-routing-example/routing-gateway-consumer-example/routing-zuul-consumer-example
+		</module>
 
-    </modules>
+	</modules>
 
     <build>
         <plugins>
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/pom.xml b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/pom.xml
index 251a7e93..05228427 100644
--- a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/pom.xml
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/pom.xml
@@ -2,73 +2,23 @@
 <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
     <modelVersion>4.0.0</modelVersion>
+
     <parent>
         <groupId>com.alibaba.cloud</groupId>
         <artifactId>spring-cloud-alibaba-starters</artifactId>
         <version>${revision}</version>
         <relativePath>../pom.xml</relativePath>
     </parent>
+
     <artifactId>spring-cloud-starter-alibaba-governance-routing</artifactId>
+    <packaging>pom</packaging>
     <name>Spring Cloud Starter Alibaba Governance Label Routing</name>
 
-    <dependencies>
-
-        <dependency>
-            <groupId>com.netflix.ribbon</groupId>
-            <artifactId>ribbon-loadbalancer</artifactId>
-        </dependency>
-
-        <dependency>
-            <groupId>org.springframework.cloud</groupId>
-            <artifactId>spring-cloud-starter-openfeign</artifactId>
-            <optional>true</optional>
-        </dependency>
-
-        <dependency>
-            <groupId>org.springframework</groupId>
-            <artifactId>spring-webmvc</artifactId>
-            <optional>true</optional>
-        </dependency>
-
-        <dependency>
-            <groupId>javax.servlet</groupId>
-            <artifactId>javax.servlet-api</artifactId>
-        </dependency>
-
-        <dependency>
-            <groupId>com.alibaba.cloud</groupId>
-            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
-        </dependency>
-
-        <dependency>
-            <groupId>org.springframework.boot</groupId>
-            <artifactId>spring-boot-autoconfigure</artifactId>
-        </dependency>
-
-        <dependency>
-            <groupId>org.slf4j</groupId>
-            <artifactId>slf4j-api</artifactId>
-        </dependency>
-
-        <dependency>
-            <groupId>org.springframework.boot</groupId>
-            <artifactId>spring-boot-configuration-processor</artifactId>
-            <optional>true</optional>
-        </dependency>
-
-        <dependency>
-            <groupId>org.springframework.boot</groupId>
-            <artifactId>spring-boot-starter-test</artifactId>
-            <scope>test</scope>
-            <optional>true</optional>
-        </dependency>
-
-        <dependency>
-            <groupId>org.springframework.boot</groupId>
-            <artifactId>spring-boot-starter-webflux</artifactId>
-            <scope>provided</scope>
-        </dependency>
-
-    </dependencies>
+    <modules>
+        <module>spring-cloud-alibaba-routing-starter</module>
+        <module>spring-cloud-alibaba-routing-gateway-adapter</module>
+        <module>spring-cloud-alibaba-routing-service-adapter</module>
+        <module>spring-cloud-alibaba-routing-zuul-adapter</module>
+    </modules>
 
 </project>
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/pom.xml b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/pom.xml
new file mode 100644
index 00000000..5e7dd0ad
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/pom.xml
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+	<modelVersion>4.0.0</modelVersion>
+
+	<parent>
+		<groupId>com.alibaba.cloud</groupId>
+		<artifactId>spring-cloud-starter-alibaba-governance-routing</artifactId>
+		<version>${revision}</version>
+		<relativePath>../pom.xml</relativePath>
+	</parent>
+
+	<artifactId>spring-cloud-alibaba-routing-gateway-adapter</artifactId>
+	<name>Spring Cloud Alibaba Governance Label Routing Gateway Adapter</name>
+
+	<properties>
+		<maven.compiler.source>8</maven.compiler.source>
+		<maven.compiler.target>8</maven.compiler.target>
+		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+	</properties>
+
+	<dependencies>
+
+		<dependency>
+			<groupId>com.alibaba.cloud</groupId>
+			<artifactId>spring-cloud-alibaba-routing-starter</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>org.springframework.cloud</groupId>
+			<artifactId>spring-cloud-starter-gateway</artifactId>
+		</dependency>
+	</dependencies>
+
+</project>
\ No newline at end of file
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/java/com/alibaba/cloud/routing/gateway/configuration/RoutingGatewayConfiguration.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/java/com/alibaba/cloud/routing/gateway/configuration/RoutingGatewayConfiguration.java
new file mode 100644
index 00000000..fcbe9184
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/java/com/alibaba/cloud/routing/gateway/configuration/RoutingGatewayConfiguration.java
@@ -0,0 +1,62 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.gateway.configuration;
+
+import com.alibaba.cloud.routing.context.RoutingContextHolder;
+import com.alibaba.cloud.routing.gateway.context.defaults.RoutingGatewayContextHolder;
+import com.alibaba.cloud.routing.gateway.filter.RoutingGatewayClearFilter;
+import com.alibaba.cloud.routing.gateway.filter.RoutingGatewayFilter;
+import com.alibaba.cloud.routing.gateway.filter.defaults.DefaultRoutingGatewayClearFilter;
+import com.alibaba.cloud.routing.gateway.filter.defaults.DefaultRoutingGatewayFilter;
+
+import org.springframework.boot.autoconfigure.AutoConfigureBefore;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.cloud.netflix.ribbon.RibbonClientConfiguration;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+@Configuration
+@AutoConfigureBefore(RibbonClientConfiguration.class)
+public class RoutingGatewayConfiguration {
+
+	@Bean
+	@ConditionalOnMissingBean
+	public RoutingGatewayFilter routingGatewayFilter() {
+
+		return new DefaultRoutingGatewayFilter();
+	}
+
+	@Bean
+	@ConditionalOnMissingBean
+	public RoutingGatewayClearFilter routingGatewayClearFilter() {
+
+		return new DefaultRoutingGatewayClearFilter();
+	}
+
+	@Bean
+	@ConditionalOnMissingBean
+	public RoutingContextHolder routingGatewayContextHolder() {
+
+		return new RoutingGatewayContextHolder();
+	}
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/java/com/alibaba/cloud/routing/gateway/constants/RoutingGatewayConstants.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/java/com/alibaba/cloud/routing/gateway/constants/RoutingGatewayConstants.java
new file mode 100644
index 00000000..79ef359d
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/java/com/alibaba/cloud/routing/gateway/constants/RoutingGatewayConstants.java
@@ -0,0 +1,51 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.gateway.constants;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+public final class RoutingGatewayConstants {
+
+	private RoutingGatewayConstants() {
+	}
+
+	/**
+	 * Service governance traffic stains the public prefix.
+	 */
+	public static final String GATEWAY_PROPERTY_PREFIX = "spring.cloud.governance.routing.gateway";
+
+	/**
+	 * Strategy gateway route filter order.
+	 */
+	public static final String GATEWAY_ROUTE_FILTER_ORDER = GATEWAY_PROPERTY_PREFIX
+			+ ".filter.order";
+
+	/**
+	 * Filter order number.
+	 */
+	public static final int GATEWAY_ROUTE_FILTER_ORDER_VALUE = 9000;
+
+	/**
+	 * Whether strategy gateway header priority is enabled.
+	 */
+	public static final String GATEWAY_HEADER_PRIORITY = GATEWAY_PROPERTY_PREFIX
+			+ ".header.priority";
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/java/com/alibaba/cloud/routing/gateway/context/RoutingGatewayContext.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/java/com/alibaba/cloud/routing/gateway/context/RoutingGatewayContext.java
new file mode 100644
index 00000000..4aaab1e6
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/java/com/alibaba/cloud/routing/gateway/context/RoutingGatewayContext.java
@@ -0,0 +1,101 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.gateway.context;
+
+import org.apache.commons.lang.builder.EqualsBuilder;
+import org.apache.commons.lang.builder.HashCodeBuilder;
+import org.apache.commons.lang.builder.ToStringBuilder;
+import org.apache.commons.lang.builder.ToStringStyle;
+
+import org.springframework.http.server.reactive.ServerHttpRequest;
+import org.springframework.web.server.ServerWebExchange;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+public class RoutingGatewayContext {
+
+	private static final ThreadLocal<RoutingGatewayContext> THREAD_LOCAL = ThreadLocal
+			.withInitial(RoutingGatewayContext::new);
+
+	public static RoutingGatewayContext getCurrentContext() {
+
+		return THREAD_LOCAL.get();
+	}
+
+	public static void clearCurrentContext() {
+
+		THREAD_LOCAL.remove();
+	}
+
+	private ServerWebExchange exchange;
+
+	public ServerWebExchange getExchange() {
+		return exchange;
+	}
+
+	public void setExchange(ServerWebExchange exchange) {
+		this.exchange = exchange;
+	}
+
+	private ServerHttpRequest serverHttpRequest;
+
+	private String region;
+
+	private String zone;
+
+	public ServerHttpRequest getServerHttpRequest() {
+		return serverHttpRequest;
+	}
+
+	public void setServerHttpRequest(ServerHttpRequest serverHttpRequest) {
+		this.serverHttpRequest = serverHttpRequest;
+	}
+
+	public String getRegion() {
+		return region;
+	}
+
+	public void setRegion(String region) {
+		this.region = region;
+	}
+
+	public String getZone() {
+		return zone;
+	}
+
+	public void setZone(String zone) {
+		this.zone = zone;
+	}
+
+	@Override
+	public int hashCode() {
+		return HashCodeBuilder.reflectionHashCode(this);
+	}
+
+	@Override
+	public boolean equals(Object object) {
+		return EqualsBuilder.reflectionEquals(this, object);
+	}
+
+	@Override
+	public String toString() {
+		return ToStringBuilder.reflectionToString(this, ToStringStyle.MULTI_LINE_STYLE);
+	}
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/java/com/alibaba/cloud/routing/gateway/context/defaults/RoutingGatewayContextHolder.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/java/com/alibaba/cloud/routing/gateway/context/defaults/RoutingGatewayContextHolder.java
new file mode 100644
index 00000000..d95d3237
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/java/com/alibaba/cloud/routing/gateway/context/defaults/RoutingGatewayContextHolder.java
@@ -0,0 +1,49 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.gateway.context.defaults;
+
+import com.alibaba.cloud.routing.context.AbstractRoutingContextHolder;
+import com.alibaba.cloud.routing.gateway.context.RoutingGatewayContext;
+
+import org.springframework.http.server.reactive.ServerHttpRequest;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+public class RoutingGatewayContextHolder extends AbstractRoutingContextHolder {
+
+	@Override
+	public String getRouteRegion() {
+
+		return RoutingGatewayContext.getCurrentContext().getRegion();
+	}
+
+	@Override
+	public String getRoutZone() {
+
+		return RoutingGatewayContext.getCurrentContext().getZone();
+	}
+
+	@Override
+	public ServerHttpRequest getServerHttpRequest() {
+
+		return RoutingGatewayContext.getCurrentContext().getServerHttpRequest();
+	}
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/java/com/alibaba/cloud/routing/gateway/filter/RoutingGatewayClearFilter.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/java/com/alibaba/cloud/routing/gateway/filter/RoutingGatewayClearFilter.java
new file mode 100644
index 00000000..6d0c1fed
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/java/com/alibaba/cloud/routing/gateway/filter/RoutingGatewayClearFilter.java
@@ -0,0 +1,26 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.gateway.filter;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+public interface RoutingGatewayClearFilter extends RoutingGatewayFilter {
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/java/com/alibaba/cloud/routing/gateway/filter/RoutingGatewayFilter.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/java/com/alibaba/cloud/routing/gateway/filter/RoutingGatewayFilter.java
new file mode 100644
index 00000000..ba34c458
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/java/com/alibaba/cloud/routing/gateway/filter/RoutingGatewayFilter.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.gateway.filter;
+
+import org.springframework.cloud.gateway.filter.GlobalFilter;
+import org.springframework.core.Ordered;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+public interface RoutingGatewayFilter extends GlobalFilter, Ordered {
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/java/com/alibaba/cloud/routing/gateway/filter/defaults/DefaultRoutingGatewayClearFilter.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/java/com/alibaba/cloud/routing/gateway/filter/defaults/DefaultRoutingGatewayClearFilter.java
new file mode 100644
index 00000000..4399384c
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/java/com/alibaba/cloud/routing/gateway/filter/defaults/DefaultRoutingGatewayClearFilter.java
@@ -0,0 +1,47 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.gateway.filter.defaults;
+
+import com.alibaba.cloud.routing.gateway.context.RoutingGatewayContext;
+import com.alibaba.cloud.routing.gateway.filter.RoutingGatewayClearFilter;
+import reactor.core.publisher.Mono;
+
+import org.springframework.cloud.gateway.filter.GatewayFilterChain;
+import org.springframework.core.Ordered;
+import org.springframework.web.server.ServerWebExchange;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+public class DefaultRoutingGatewayClearFilter implements RoutingGatewayClearFilter {
+
+	@Override
+	public int getOrder() {
+		return Ordered.LOWEST_PRECEDENCE - 1;
+	}
+
+	@Override
+	public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
+
+		RoutingGatewayContext.clearCurrentContext();
+
+		return chain.filter(exchange);
+	}
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/java/com/alibaba/cloud/routing/gateway/filter/defaults/DefaultRoutingGatewayFilter.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/java/com/alibaba/cloud/routing/gateway/filter/defaults/DefaultRoutingGatewayFilter.java
new file mode 100644
index 00000000..6281160a
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/java/com/alibaba/cloud/routing/gateway/filter/defaults/DefaultRoutingGatewayFilter.java
@@ -0,0 +1,99 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.gateway.filter.defaults;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.annotation.Resource;
+
+import com.alibaba.cloud.routing.constant.RoutingConstants;
+import com.alibaba.cloud.routing.gateway.constants.RoutingGatewayConstants;
+import com.alibaba.cloud.routing.gateway.context.RoutingGatewayContext;
+import com.alibaba.cloud.routing.gateway.filter.RoutingGatewayFilter;
+import com.alibaba.cloud.routing.gateway.util.RoutingGatewayFilterResolver;
+import com.alibaba.cloud.routing.properties.RoutingProperties;
+import reactor.core.publisher.Mono;
+
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.cloud.gateway.filter.GatewayFilterChain;
+import org.springframework.http.server.reactive.ServerHttpRequest;
+import org.springframework.web.server.ServerWebExchange;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+public class DefaultRoutingGatewayFilter implements RoutingGatewayFilter {
+
+	// Filter order.
+	@Value("${" + RoutingGatewayConstants.GATEWAY_ROUTE_FILTER_ORDER + ":"
+			+ RoutingGatewayConstants.GATEWAY_ROUTE_FILTER_ORDER_VALUE + "}")
+	protected Integer filterOrder;
+
+	// Gateway rule priority switch.
+	@Value("${" + RoutingGatewayConstants.GATEWAY_HEADER_PRIORITY + ":true}")
+	protected Boolean gatewayHeaderPriority;
+
+	@Resource
+	private RoutingProperties routingProperties;
+
+	@Override
+	public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
+
+		RoutingGatewayContext.getCurrentContext().setExchange(exchange);
+
+		ServerHttpRequest request = exchange.getRequest();
+		ServerHttpRequest.Builder requestBuilder = request.mutate();
+
+		applyHeader(request, requestBuilder);
+
+		ServerHttpRequest newRequest = requestBuilder.build();
+		ServerWebExchange newExchange = exchange.mutate().request(newRequest).build();
+
+		RoutingGatewayContext.getCurrentContext().setExchange(newExchange);
+
+		return chain.filter(newExchange);
+	}
+
+	private void applyHeader(ServerHttpRequest request,
+			ServerHttpRequest.Builder requestBuilder) {
+
+		// Use map to simplify if... else statement
+		Map<String, String> propertiesMap = new HashMap<>();
+		propertiesMap.put(RoutingConstants.SCA_ROUTING_SERVICE_ZONE,
+				routingProperties.getZone());
+		RoutingGatewayContext.getCurrentContext().setZone(routingProperties.getZone());
+		propertiesMap.put(RoutingConstants.SCA_ROUTING_SERVICE_REGION,
+				routingProperties.getRegion());
+		RoutingGatewayContext.getCurrentContext()
+				.setRegion(routingProperties.getRegion());
+		RoutingGatewayContext.getCurrentContext().setServerHttpRequest(request);
+
+		propertiesMap.forEach((k, v) -> RoutingGatewayFilterResolver.setHeader(request,
+				requestBuilder, k, v, gatewayHeaderPriority));
+
+	}
+
+	@Override
+	public int getOrder() {
+
+		return filterOrder;
+	}
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/java/com/alibaba/cloud/routing/gateway/util/RoutingGatewayFilterResolver.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/java/com/alibaba/cloud/routing/gateway/util/RoutingGatewayFilterResolver.java
new file mode 100644
index 00000000..e5623e4d
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/java/com/alibaba/cloud/routing/gateway/util/RoutingGatewayFilterResolver.java
@@ -0,0 +1,59 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.gateway.util;
+
+import com.alibaba.cloud.commons.lang.StringUtils;
+
+import org.springframework.http.server.reactive.ServerHttpRequest;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+public final class RoutingGatewayFilterResolver {
+
+	private RoutingGatewayFilterResolver() {
+	}
+
+	public static void setHeader(ServerHttpRequest request,
+			ServerHttpRequest.Builder requestBuilder, String headerName,
+			String headerValue, Boolean gatewayHeaderPriority) {
+		if (StringUtils.isEmpty(headerValue)) {
+			return;
+		}
+
+		if (gatewayHeaderPriority) {
+
+			// Under the gateway priority condition, clear all external headers.
+			requestBuilder.headers(headers -> headers.remove(headerName));
+
+			// Add the header set by the gateway.
+			requestBuilder.headers(headers -> headers.add(headerName, headerValue));
+		}
+		else {
+			// If the gateway is not prioritized, determine whether the external request
+			// contains headers.
+			// If it does, the built-in header is not added.
+			if (!request.getHeaders().containsKey(headerName)) {
+				requestBuilder.headers(headers -> headers.add(headerName, headerValue));
+			}
+		}
+
+	}
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/resources/META-INF/additional-spring-configuration-metadata.json b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/resources/META-INF/additional-spring-configuration-metadata.json
new file mode 100644
index 00000000..7e155677
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/resources/META-INF/additional-spring-configuration-metadata.json
@@ -0,0 +1,16 @@
+{
+  "properties": [
+    {
+      "name": "spring.cloud.governance.routing.gateway.filter.order",
+      "type": "java.lang.Integer",
+      "defaultValue": 9000,
+      "description": "Strategy gateway route filter order."
+    },
+    {
+      "name": "spring.cloud.governance.routing.gateway.header.priority",
+      "type": "java.lang.Boolean",
+      "defaultValue": true,
+      "description": "Whether strategy gateway header priority is enabled."
+    }
+  ]
+}
\ No newline at end of file
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/resources/META-INF/spring.factories b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/resources/META-INF/spring.factories
new file mode 100644
index 00000000..76336133
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-gateway-adapter/src/main/resources/META-INF/spring.factories
@@ -0,0 +1,2 @@
+org.springframework.boot.autoconfigure.EnableAutoConfiguration=\
+  com.alibaba.cloud.routing.gateway.configuration.RoutingGatewayConfiguration
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-service-adapter/pom.xml b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-service-adapter/pom.xml
new file mode 100644
index 00000000..c47f08dc
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-service-adapter/pom.xml
@@ -0,0 +1,38 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+	<modelVersion>4.0.0</modelVersion>
+
+	<parent>
+		<groupId>com.alibaba.cloud</groupId>
+		<artifactId>spring-cloud-starter-alibaba-governance-routing</artifactId>
+		<version>${revision}</version>
+		<relativePath>../pom.xml</relativePath>
+	</parent>
+
+	<artifactId>spring-cloud-alibaba-routing-service-adapter</artifactId>
+	<name>Spring Cloud Alibaba Governance Label Routing Service Adapter</name>
+
+	<properties>
+		<maven.compiler.source>8</maven.compiler.source>
+		<maven.compiler.target>8</maven.compiler.target>
+		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+	</properties>
+
+	<dependencies>
+
+		<dependency>
+			<groupId>com.alibaba.cloud</groupId>
+			<artifactId>spring-cloud-alibaba-routing-starter</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>org.springframework</groupId>
+			<artifactId>spring-webmvc</artifactId>
+			<optional>true</optional>
+		</dependency>
+
+	</dependencies>
+
+</project>
\ No newline at end of file
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-service-adapter/src/main/java/com/alibaba/cloud/routing/service/package-info.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-service-adapter/src/main/java/com/alibaba/cloud/routing/service/package-info.java
new file mode 100644
index 00000000..946a3506
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-service-adapter/src/main/java/com/alibaba/cloud/routing/service/package-info.java
@@ -0,0 +1,23 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * @author yuluo
+ * @author 1281556636@qq.com
+ */
+package com.alibaba.cloud.routing.service;
+
+// Add spring-mvc dependencies to avoid coupling with spring-cloud-gateway.
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/pom.xml b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/pom.xml
new file mode 100644
index 00000000..4bc6c0ae
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/pom.xml
@@ -0,0 +1,70 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+	<modelVersion>4.0.0</modelVersion>
+	<parent>
+		<groupId>com.alibaba.cloud</groupId>
+		<artifactId>spring-cloud-starter-alibaba-governance-routing</artifactId>
+		<version>${revision}</version>
+		<relativePath>../pom.xml</relativePath>
+	</parent>
+
+	<artifactId>spring-cloud-alibaba-routing-starter</artifactId>
+	<name>Spring Cloud Alibaba Governance Label Routing Starter</name>
+
+	<properties>
+		<maven.compiler.source>8</maven.compiler.source>
+		<maven.compiler.target>8</maven.compiler.target>
+		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+	</properties>
+
+	<dependencies>
+
+		<dependency>
+			<groupId>javax.servlet</groupId>
+			<artifactId>javax.servlet-api</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-autoconfigure</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-configuration-processor</artifactId>
+			<optional>true</optional>
+		</dependency>
+
+		<dependency>
+			<groupId>org.slf4j</groupId>
+			<artifactId>slf4j-api</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>com.alibaba.cloud</groupId>
+			<artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-webflux</artifactId>
+			<scope>provided</scope>
+		</dependency>
+
+		<dependency>
+			<groupId>com.netflix.ribbon</groupId>
+			<artifactId>ribbon-loadbalancer</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>org.springframework.cloud</groupId>
+			<artifactId>spring-cloud-starter-openfeign</artifactId>
+			<scope>provided</scope>
+			<optional>true</optional>
+		</dependency>
+
+	</dependencies>
+
+</project>
\ No newline at end of file
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/aop/RestTemplateBeanPostProcessor.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/aop/RestTemplateBeanPostProcessor.java
new file mode 100644
index 00000000..c88f85f5
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/aop/RestTemplateBeanPostProcessor.java
@@ -0,0 +1,54 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.aop;
+
+import com.alibaba.cloud.routing.aop.interceptor.RoutingRestTemplateInterceptor;
+
+import org.springframework.beans.BeansException;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.config.BeanPostProcessor;
+import org.springframework.web.client.RestTemplate;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+public class RestTemplateBeanPostProcessor implements BeanPostProcessor {
+
+	@Autowired
+	private RoutingRestTemplateInterceptor restTemplateInterceptor;
+
+	@Override
+	public Object postProcessBeforeInitialization(Object bean, String beanName)
+			throws BeansException {
+
+		return bean;
+	}
+
+	@Override
+	public Object postProcessAfterInitialization(Object bean, String beanName)
+			throws BeansException {
+		if (bean instanceof RestTemplate) {
+			RestTemplate restTemplate = (RestTemplate) bean;
+			restTemplate.getInterceptors().add(restTemplateInterceptor);
+		}
+
+		return bean;
+	}
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/aop/WebClientBeanPostProcessor.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/aop/WebClientBeanPostProcessor.java
new file mode 100644
index 00000000..7f737aaa
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/aop/WebClientBeanPostProcessor.java
@@ -0,0 +1,54 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.aop;
+
+import com.alibaba.cloud.routing.aop.interceptor.RoutingWebClientInterceptor;
+
+import org.springframework.beans.BeansException;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.config.BeanPostProcessor;
+import org.springframework.web.reactive.function.client.WebClient;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+public class WebClientBeanPostProcessor implements BeanPostProcessor {
+
+	@Autowired
+	private RoutingWebClientInterceptor webClientInterceptor;
+
+	@Override
+	public Object postProcessBeforeInitialization(Object bean, String beanName)
+			throws BeansException {
+		return bean;
+	}
+
+	@Override
+	public Object postProcessAfterInitialization(Object bean, String beanName)
+			throws BeansException {
+		if (bean instanceof WebClient.Builder) {
+			WebClient.Builder webClientBuilder = (WebClient.Builder) bean;
+
+			webClientBuilder.filter(webClientInterceptor);
+		}
+
+		return bean;
+	}
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/aop/interceptor/RoutingFeignInterceptor.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/aop/interceptor/RoutingFeignInterceptor.java
new file mode 100644
index 00000000..0fe44bff
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/aop/interceptor/RoutingFeignInterceptor.java
@@ -0,0 +1,83 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.aop.interceptor;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.annotation.Resource;
+
+import com.alibaba.cloud.commons.lang.StringUtils;
+import com.alibaba.cloud.routing.constant.RoutingConstants;
+import com.alibaba.cloud.routing.context.RoutingContext;
+import com.alibaba.cloud.routing.properties.RoutingProperties;
+import feign.RequestInterceptor;
+import feign.RequestTemplate;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import org.springframework.beans.factory.annotation.Value;
+
+/**
+ * @author HH
+ * @since 2.2.10-RC1
+ */
+
+public class RoutingFeignInterceptor implements RequestInterceptor {
+
+	// Whether the core policy header is passed on Feign.
+	// When the global subscription is started, you can disable the core policy header
+	// delivery,
+	// which can save the size of the transmitted data and improve performance to a
+	// certain extent.
+	@Value("${" + RoutingConstants.FEIGN_CORE_HEADER_TRANSMISSION_ENABLED + ":true}")
+	protected Boolean feignCoreHeaderTransmissionEnabled;
+
+	@Resource
+	private RoutingProperties routingProperties;
+
+	private static final Logger LOG = LoggerFactory
+			.getLogger(RoutingFeignInterceptor.class);
+
+	@Override
+	public void apply(RequestTemplate requestTemplate) {
+
+		applyHeader(requestTemplate);
+
+	}
+
+	private void applyHeader(RequestTemplate requestTemplate) {
+
+		// Use map to simplify if... else statement
+		Map<String, String> propertiesMap = new HashMap<>();
+		propertiesMap.put(RoutingConstants.SCA_ROUTING_SERVICE_ZONE,
+				routingProperties.getZone());
+		RoutingContext.getCurrentContext().setZone(routingProperties.getZone());
+		propertiesMap.put(RoutingConstants.SCA_ROUTING_SERVICE_REGION,
+				routingProperties.getRegion());
+		RoutingContext.getCurrentContext().setRegion(routingProperties.getRegion());
+
+		propertiesMap.forEach((k, v) -> {
+			if (StringUtils.isNotEmpty(k)
+					&& !StringUtils.equals(k, RoutingConstants.DEFAULT)) {
+				requestTemplate.header(k, v);
+			}
+		});
+
+	}
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/aop/interceptor/RoutingRestTemplateInterceptor.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/aop/interceptor/RoutingRestTemplateInterceptor.java
new file mode 100644
index 00000000..56858b13
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/aop/interceptor/RoutingRestTemplateInterceptor.java
@@ -0,0 +1,91 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.aop.interceptor;
+
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.annotation.Resource;
+
+import com.alibaba.cloud.routing.constant.RoutingConstants;
+import com.alibaba.cloud.routing.context.RoutingContext;
+import com.alibaba.cloud.routing.properties.RoutingProperties;
+import com.alibaba.nacos.common.utils.StringUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.http.HttpHeaders;
+import org.springframework.http.HttpRequest;
+import org.springframework.http.client.ClientHttpRequestExecution;
+import org.springframework.http.client.ClientHttpRequestInterceptor;
+import org.springframework.http.client.ClientHttpResponse;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+public class RoutingRestTemplateInterceptor implements ClientHttpRequestInterceptor {
+
+	// Whether the RestTemplate core policy header is passed.
+	// When the global subscription is started, you can disable the core policy header
+	// delivery,
+	// which can save the size of the transmitted data and improve performance to a
+	// certain extent
+	@Value("${" + RoutingConstants.REST_CORE_HEADER_TRANSMISSION_ENABLED + ":true}")
+	protected Boolean restTemplateCoreHeaderTransmissionEnabled;
+
+	private static final Logger log = LoggerFactory
+			.getLogger(RoutingRestTemplateInterceptor.class);
+
+	@Resource
+	private RoutingProperties routingProperties;
+
+	@Override
+	public ClientHttpResponse intercept(HttpRequest request, byte[] body,
+			ClientHttpRequestExecution execution) throws IOException {
+
+		applyHeader(request);
+
+		return execution.execute(request, body);
+	}
+
+	private void applyHeader(HttpRequest request) {
+
+		HttpHeaders headers = request.getHeaders();
+
+		// Use map to simplify if... else statement
+		Map<String, String> propertiesMap = new HashMap<>();
+		propertiesMap.put(RoutingConstants.SCA_ROUTING_SERVICE_ZONE,
+				routingProperties.getZone());
+		RoutingContext.getCurrentContext().setZone(routingProperties.getZone());
+		propertiesMap.put(RoutingConstants.SCA_ROUTING_SERVICE_REGION,
+				routingProperties.getRegion());
+		RoutingContext.getCurrentContext().setRegion(routingProperties.getRegion());
+
+		propertiesMap.forEach((k, v) -> {
+			if (StringUtils.isNotEmpty(k)
+					&& !StringUtils.equals(k, RoutingConstants.DEFAULT)) {
+				headers.add(k, v);
+			}
+		});
+
+	}
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/aop/interceptor/RoutingWebClientInterceptor.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/aop/interceptor/RoutingWebClientInterceptor.java
new file mode 100644
index 00000000..52ca4e75
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/aop/interceptor/RoutingWebClientInterceptor.java
@@ -0,0 +1,90 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.aop.interceptor;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.annotation.Resource;
+
+import com.alibaba.cloud.routing.constant.RoutingConstants;
+import com.alibaba.cloud.routing.context.RoutingContext;
+import com.alibaba.cloud.routing.properties.RoutingProperties;
+import com.alibaba.nacos.common.utils.StringUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import reactor.core.publisher.Mono;
+
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.web.reactive.function.client.ClientRequest;
+import org.springframework.web.reactive.function.client.ClientResponse;
+import org.springframework.web.reactive.function.client.ExchangeFilterFunction;
+import org.springframework.web.reactive.function.client.ExchangeFunction;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+public class RoutingWebClientInterceptor implements ExchangeFilterFunction {
+
+	// Whether the Web Client core policy header is delivered.
+	// When the global subscription is started, you can disable the core policy header
+	// delivery,
+	// which can save the size of the transmitted data and improve performance to a
+	// certain extent
+	@Value("${" + RoutingConstants.WEB_CLIENT_CORE_HEADER_TRANSMISSION_ENABLED + ":true}")
+	protected Boolean webClientCoreHeaderTransmissionEnabled;
+
+	@Resource
+	private RoutingProperties routingProperties;
+
+	private static final Logger log = LoggerFactory
+			.getLogger(RoutingWebClientInterceptor.class);
+
+	@Override
+	public Mono<ClientResponse> filter(ClientRequest request, ExchangeFunction next) {
+
+		ClientRequest.Builder requestBuilder = ClientRequest.from(request);
+
+		applyHeader(requestBuilder);
+
+		ClientRequest newRequest = requestBuilder.build();
+
+		return next.exchange(newRequest);
+	}
+
+	private void applyHeader(ClientRequest.Builder requestBuilder) {
+
+		// Use map to simplify if... else statement
+		Map<String, String> propertiesMap = new HashMap<>();
+		propertiesMap.put(RoutingConstants.SCA_ROUTING_SERVICE_ZONE,
+				routingProperties.getZone());
+		RoutingContext.getCurrentContext().setZone(routingProperties.getZone());
+		propertiesMap.put(RoutingConstants.SCA_ROUTING_SERVICE_REGION,
+				routingProperties.getRegion());
+		RoutingContext.getCurrentContext().setRegion(routingProperties.getRegion());
+
+		propertiesMap.forEach((k, v) -> {
+			if (StringUtils.isNotEmpty(k)
+					&& !StringUtils.equals(k, RoutingConstants.DEFAULT)) {
+				requestBuilder.header(k, v);
+			}
+		});
+	}
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/configuration/RoutingAutoConfiguration.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/configuration/RoutingAutoConfiguration.java
new file mode 100644
index 00000000..c02df339
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/configuration/RoutingAutoConfiguration.java
@@ -0,0 +1,158 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.configuration;
+
+import com.alibaba.cloud.routing.aop.RestTemplateBeanPostProcessor;
+import com.alibaba.cloud.routing.aop.WebClientBeanPostProcessor;
+import com.alibaba.cloud.routing.aop.interceptor.RoutingFeignInterceptor;
+import com.alibaba.cloud.routing.aop.interceptor.RoutingRestTemplateInterceptor;
+import com.alibaba.cloud.routing.aop.interceptor.RoutingWebClientInterceptor;
+import com.alibaba.cloud.routing.constant.RoutingConstants;
+import com.alibaba.cloud.routing.context.RoutingContextHolder;
+import com.alibaba.cloud.routing.context.defaults.DefaultRoutingContextHolder;
+import com.alibaba.cloud.routing.listener.RoutingDataListener;
+import com.alibaba.cloud.routing.publish.TargetServiceChangedPublisher;
+import com.alibaba.cloud.routing.repository.FilterService;
+import com.alibaba.cloud.routing.repository.RoutingDataRepository;
+import com.alibaba.cloud.routing.ribbon.RoutingLoadBalanceRule;
+import feign.Feign;
+
+import org.springframework.boot.autoconfigure.AutoConfigureOrder;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.web.client.RestTemplate;
+import org.springframework.web.reactive.function.client.WebClient;
+
+/**
+ * @author HH
+ * @since 2.2.10-RC1
+ */
+@Configuration(proxyBeanMethods = false)
+@AutoConfigureOrder(RoutingAutoConfiguration.ROUTING_AUTO_CONFIG_ORDER)
+public class RoutingAutoConfiguration {
+
+	/**
+	 * Order of label routing auto config.
+	 */
+	public static final int ROUTING_AUTO_CONFIG_ORDER = 10;
+
+	@Bean
+	@ConditionalOnMissingBean
+	public RoutingDataRepository routingDataRepository() {
+
+		return new RoutingDataRepository();
+	}
+
+	@Bean
+	@ConditionalOnMissingBean
+	public FilterService filterService() {
+
+		return new FilterService();
+	}
+
+	@Bean
+	public RoutingDataListener routingDataListener(
+			RoutingDataRepository routingDataRepository, FilterService filterService) {
+
+		return new RoutingDataListener(routingDataRepository, filterService);
+	}
+
+	@Bean
+	public TargetServiceChangedPublisher targetServiceChangedPublisher() {
+
+		return new TargetServiceChangedPublisher();
+	}
+
+	@Bean
+	@ConditionalOnMissingBean
+	public RoutingFeignInterceptor routingFeignInterceptor() {
+
+		return new RoutingFeignInterceptor();
+	}
+
+	@Bean
+	@ConditionalOnMissingBean
+	public RoutingLoadBalanceRule routingLoadBalanceRule() {
+
+		return new RoutingLoadBalanceRule();
+	}
+
+	@Bean
+	@ConditionalOnMissingBean
+	public RoutingContextHolder routingContextHolder() {
+
+		return new DefaultRoutingContextHolder();
+	}
+
+	@ConditionalOnClass(Feign.class)
+	protected static class FeignStrategyConfiguration {
+
+		@Bean
+		@ConditionalOnProperty(value = RoutingConstants.FEIGN_INTERCEPT_ENABLED,
+				matchIfMissing = true)
+		public RoutingFeignInterceptor feignRequestInterceptor() {
+			return new RoutingFeignInterceptor();
+		}
+
+	}
+
+	@ConditionalOnClass(RestTemplate.class)
+	protected static class RestTemplateStrategyConfiguration {
+
+		@Bean
+		@ConditionalOnProperty(value = RoutingConstants.REST_INTERCEPT_ENABLED,
+				matchIfMissing = true)
+		public RoutingRestTemplateInterceptor restTemplateRequestInterceptor() {
+			return new RoutingRestTemplateInterceptor();
+		}
+
+		@Bean
+		@ConditionalOnMissingBean
+		@ConditionalOnProperty(value = RoutingConstants.REST_INTERCEPT_ENABLED,
+				matchIfMissing = true)
+		public RestTemplateBeanPostProcessor restTemplateBeanPostProcessor() {
+			return new RestTemplateBeanPostProcessor();
+		}
+
+	}
+
+	@ConditionalOnClass(WebClient.class)
+	@ConditionalOnBean(WebClient.Builder.class)
+	protected static class WebClientStrategyConfiguration {
+
+		@Bean
+		@ConditionalOnProperty(value = RoutingConstants.REACTIVE_INTERCEPT_ENABLED,
+				matchIfMissing = true)
+		public RoutingWebClientInterceptor webClientRequestInterceptor() {
+			return new RoutingWebClientInterceptor();
+		}
+
+		@Bean
+		@ConditionalOnMissingBean
+		@ConditionalOnProperty(value = RoutingConstants.REACTIVE_INTERCEPT_ENABLED,
+				matchIfMissing = true)
+		public WebClientBeanPostProcessor webClientBeanPostProcessor() {
+			return new WebClientBeanPostProcessor();
+		}
+
+	}
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/constant/RoutingConstants.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/constant/RoutingConstants.java
new file mode 100644
index 00000000..85e6369b
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/constant/RoutingConstants.java
@@ -0,0 +1,177 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.constant;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+public final class RoutingConstants {
+
+	private RoutingConstants() {
+	}
+
+	/**
+	 * Support Parsing Rules from path,only URI at present.
+	 */
+	public static final String PATH = "path";
+
+	/**
+	 * Support Parsing Rules from header.
+	 */
+	public static final String HEADER = "header";
+
+	/**
+	 * Support Parsing Rules from parameter.
+	 */
+	public static final String PARAMETER = "parameter";
+
+	/**
+	 * Filter base on version metadata.
+	 */
+	public static final String VERSION = "version";
+
+	/**
+	 * Default.
+	 */
+	public static final String DEFAULT = "default";
+
+	/**
+	 * Sign of no match any rule.
+	 */
+	public static final int NO_MATCH = -1;
+
+	/**
+	 * Avoid loss of accuracy.
+	 */
+	public static final double KEEP_ACCURACY = 1.0;
+
+	/**
+	 * Listener execution order.
+	 */
+	public static final int LISTENER_ORDER = 200;
+
+	/**
+	 * Unknown.
+	 */
+	public static final String UNKNOWN = "unknown";
+
+	/**
+	 * Ignored.
+	 */
+	public static final String IGNORED = "ignored";
+
+	/**
+	 * Zone.
+	 */
+	public static final String ZONE = "zone";
+
+	/**
+	 * Region.
+	 */
+	public static final String REGION = "region";
+
+	/**
+	 * SEPARATE.
+	 */
+	public static final String SEPARATE = ";";
+
+	/**
+	 * Region staining labels.
+	 */
+	public static final String TRAFFIC_REGION = "X-traffic-" + REGION;
+
+	/**
+	 * Availability zone staining labels.
+	 */
+	public static final String TRAFFIC_ZONE = "X-traffic-" + ZONE;
+
+	/**
+	 * Service governance traffic stains the public prefix.
+	 */
+	public static final String PROPERTY_PREFIX = "spring.cloud.governance.routing";
+
+	/**
+	 * Turn on the zone avoidance rule.
+	 */
+	public static final String ZONE_AVOIDANCE_RULE_ENABLED = PROPERTY_PREFIX
+			+ ".zone.affinity.enabled";
+
+	/**
+	 * Turn on the RestTemplate interceptor.
+	 */
+	public static final String REST_INTERCEPT_ENABLED = PROPERTY_PREFIX
+			+ ".rest.intercept.enabled";
+
+	/**
+	 * Turn on the Feign interceptor.
+	 */
+	public static final String FEIGN_INTERCEPT_ENABLED = PROPERTY_PREFIX
+			+ ".feign.intercept.enabled";
+
+	/**
+	 * Turn on the WebClient interceptor.
+	 */
+	public static final String REACTIVE_INTERCEPT_ENABLED = PROPERTY_PREFIX
+			+ ".reactive.intercept.enabled";
+
+	/**
+	 * The feign request header is passed at the beginning.
+	 */
+	public static final String FEIGN_CORE_HEADER_TRANSMISSION_ENABLED = PROPERTY_PREFIX
+			+ ".feign.core.header.transmission.enabled";
+
+	/**
+	 * The rest request header is passed at the beginning.
+	 */
+	public static final String REST_CORE_HEADER_TRANSMISSION_ENABLED = PROPERTY_PREFIX
+			+ ".rest.template.core.header.transmission.enabled";
+
+	/**
+	 * The reactive request header is passed at the beginning.
+	 */
+	public static final String WEB_CLIENT_CORE_HEADER_TRANSMISSION_ENABLED = PROPERTY_PREFIX
+			+ ".web.client.core.header.transmission.enabled";
+
+	/**
+	 * Local Service Availability Zone staining constants.
+	 */
+	public static final String SCA_ROUTING_SERVICE_ZONE = "sca-routing-service-zone";
+
+	/**
+	 * Local Service region staining constants.
+	 */
+	public static final String SCA_ROUTING_SERVICE_REGION = "sca-routing-service-region";
+
+	/**
+	 * Other Service Availability Zone staining constants.
+	 */
+	public static final String SCA_ROUTING_ZONE = "sca-routing-zone";
+
+	/**
+	 * Other Service region staining constants.
+	 */
+	public static final String SCA_ROUTING_REGION = "sca-routing-region";
+
+	/**
+	 * Pass the request header priority constant.
+	 */
+	public static final String SERVICE_HEADER_PRIORITY = PROPERTY_PREFIX
+			+ ".service.header.priority";
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/context/AbstractRoutingContextHolder.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/context/AbstractRoutingContextHolder.java
new file mode 100644
index 00000000..49e24f0a
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/context/AbstractRoutingContextHolder.java
@@ -0,0 +1,56 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.context;
+
+import javax.servlet.http.HttpServletRequest;
+
+import com.alibaba.cloud.routing.constant.RoutingConstants;
+
+import org.springframework.http.server.reactive.ServerHttpRequest;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+public abstract class AbstractRoutingContextHolder implements RoutingContextHolder {
+
+	@Override
+	public String getRouteRegion() {
+
+		return RoutingConstants.DEFAULT;
+	}
+
+	@Override
+	public String getRoutZone() {
+
+		return RoutingConstants.DEFAULT;
+	}
+
+	@Override
+	public HttpServletRequest getgHttpServletRequest() {
+
+		return null;
+	}
+
+	@Override
+	public ServerHttpRequest getServerHttpRequest() {
+
+		return null;
+	}
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/context/RoutingContext.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/context/RoutingContext.java
new file mode 100644
index 00000000..58c57919
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/context/RoutingContext.java
@@ -0,0 +1,92 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.context;
+
+import javax.servlet.http.HttpServletRequest;
+
+import org.apache.commons.lang.builder.EqualsBuilder;
+import org.apache.commons.lang.builder.HashCodeBuilder;
+import org.apache.commons.lang.builder.ToStringBuilder;
+import org.apache.commons.lang.builder.ToStringStyle;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+public class RoutingContext {
+
+	private static final ThreadLocal<RoutingContext> THREAD_LOCAL = ThreadLocal
+			.withInitial(RoutingContext::new);
+
+	private String region;
+
+	private String zone;
+
+	private HttpServletRequest servletRequest;
+
+	public HttpServletRequest getServletRequest() {
+
+		return servletRequest;
+	}
+
+	public void setServletRequest(HttpServletRequest servletRequest) {
+		this.servletRequest = servletRequest;
+	}
+
+	public static RoutingContext getCurrentContext() {
+
+		return THREAD_LOCAL.get();
+	}
+
+	public static void clearCurrentContext() {
+
+		THREAD_LOCAL.remove();
+	}
+
+	public String getRegion() {
+		return region;
+	}
+
+	public void setRegion(String region) {
+		this.region = region;
+	}
+
+	public String getZone() {
+		return zone;
+	}
+
+	public void setZone(String zone) {
+		this.zone = zone;
+	}
+
+	@Override
+	public int hashCode() {
+		return HashCodeBuilder.reflectionHashCode(this);
+	}
+
+	@Override
+	public boolean equals(Object object) {
+		return EqualsBuilder.reflectionEquals(this, object);
+	}
+
+	@Override
+	public String toString() {
+		return ToStringBuilder.reflectionToString(this, ToStringStyle.MULTI_LINE_STYLE);
+	}
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/context/RoutingContextHolder.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/context/RoutingContextHolder.java
new file mode 100644
index 00000000..fef2b3d0
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/context/RoutingContextHolder.java
@@ -0,0 +1,38 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.context;
+
+import javax.servlet.http.HttpServletRequest;
+
+import org.springframework.http.server.reactive.ServerHttpRequest;
+
+/**
+ * @author yuluo
+ * @author <a href="1481556636@qq.com"></a>
+ */
+
+public interface RoutingContextHolder {
+
+	String getRouteRegion();
+
+	String getRoutZone();
+
+	ServerHttpRequest getServerHttpRequest();
+
+	HttpServletRequest getgHttpServletRequest();
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/context/defaults/DefaultRoutingContextHolder.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/context/defaults/DefaultRoutingContextHolder.java
new file mode 100644
index 00000000..ac669159
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/context/defaults/DefaultRoutingContextHolder.java
@@ -0,0 +1,49 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.context.defaults;
+
+import javax.servlet.http.HttpServletRequest;
+
+import com.alibaba.cloud.routing.context.AbstractRoutingContextHolder;
+import com.alibaba.cloud.routing.context.RoutingContext;
+
+/**
+ * @author yuluo
+ * @author <a href="1481556636@qq.com"></a>
+ */
+
+public class DefaultRoutingContextHolder extends AbstractRoutingContextHolder {
+
+	@Override
+	public String getRouteRegion() {
+
+		return RoutingContext.getCurrentContext().getRegion();
+	}
+
+	@Override
+	public String getRoutZone() {
+
+		return RoutingContext.getCurrentContext().getZone();
+	}
+
+	@Override
+	public HttpServletRequest getgHttpServletRequest() {
+
+		return RoutingContext.getCurrentContext().getServletRequest();
+	}
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/exception/RoutingException.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/exception/RoutingException.java
new file mode 100644
index 00000000..ff20dc7d
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/exception/RoutingException.java
@@ -0,0 +1,44 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.exception;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+public class RoutingException extends RuntimeException {
+
+	private static final long serialVersionUID = 7975167663357170658L;
+
+	public RoutingException() {
+		super();
+	}
+
+	public RoutingException(String message) {
+		super(message);
+	}
+
+	public RoutingException(String message, Throwable cause) {
+		super(message, cause);
+	}
+
+	public RoutingException(Throwable cause) {
+		super(cause);
+	}
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/listener/RoutingDataListener.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/listener/RoutingDataListener.java
new file mode 100644
index 00000000..855bb90c
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/listener/RoutingDataListener.java
@@ -0,0 +1,88 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.listener;
+
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.List;
+import java.util.stream.Collectors;
+
+import com.alibaba.cloud.commons.governance.event.RoutingDataChangedEvent;
+import com.alibaba.cloud.commons.governance.routing.UnifiedRoutingDataStructure;
+import com.alibaba.cloud.routing.constant.RoutingConstants;
+import com.alibaba.cloud.routing.repository.FilterService;
+import com.alibaba.cloud.routing.repository.RoutingDataRepository;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import org.springframework.context.ApplicationListener;
+import org.springframework.core.annotation.Order;
+
+/**
+ * @author musi
+ * @author <a href="liuziming@buaa.edu.cn"></a>
+ * @since 2.2.10-RC1
+ */
+
+@Order(RoutingConstants.LISTENER_ORDER)
+public class RoutingDataListener implements ApplicationListener<RoutingDataChangedEvent> {
+
+	private static final Logger log = LoggerFactory.getLogger(RoutingDataListener.class);
+
+	private final RoutingDataRepository routingDataRepository;
+
+	private final FilterService filterService;
+
+	private List<UnifiedRoutingDataStructure> routeDatalist;
+
+	private HashSet<String> definitionService;
+
+	public RoutingDataListener(RoutingDataRepository routeDataRepository,
+			FilterService filterService) {
+
+		this.routingDataRepository = routeDataRepository;
+		this.filterService = filterService;
+	}
+
+	@Override
+	public void onApplicationEvent(RoutingDataChangedEvent event) {
+		try {
+			Collection<UnifiedRoutingDataStructure> unifiedRoutingDataStructureList = event
+					.getUntiedRouterDataStructureList();
+
+			// Filter service.
+			// todo can cache the result
+			definitionService = filterService
+					.getDefinitionService(unifiedRoutingDataStructureList.size());
+
+			routeDatalist = unifiedRoutingDataStructureList.stream()
+					.filter(unifiedRouteDataStructure -> definitionService
+							.contains(unifiedRouteDataStructure.getTargetService()))
+					.collect(Collectors.toList());
+
+			if (routeDatalist.isEmpty()) {
+				routeDatalist.addAll(unifiedRoutingDataStructureList);
+			}
+
+			routingDataRepository.updateRouteData(routeDatalist);
+		}
+		catch (Exception e) {
+			log.error("Failed to update route data", e);
+		}
+	}
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/properties/RoutingProperties.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/properties/RoutingProperties.java
new file mode 100644
index 00000000..4d8b8869
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/properties/RoutingProperties.java
@@ -0,0 +1,85 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.properties;
+
+import java.io.Serializable;
+
+import javax.annotation.PostConstruct;
+
+import com.alibaba.cloud.commons.lang.StringUtils;
+import com.alibaba.cloud.routing.constant.RoutingConstants;
+import com.alibaba.cloud.routing.util.LoadBalanceUtil;
+
+import org.springframework.boot.context.properties.ConfigurationProperties;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+@ConfigurationProperties(prefix = RoutingConstants.PROPERTY_PREFIX)
+public class RoutingProperties implements Serializable {
+
+	private static final long serialVersionUID = 7157091468155324288L;
+
+	/**
+	 * Load Balance Rule.
+	 */
+	private String rule;
+
+	@PostConstruct
+	public void init() {
+		if (StringUtils.isEmpty(rule)) {
+			rule = LoadBalanceUtil.ZONE_AVOIDANCE_RULE;
+		}
+	}
+
+	public String getRule() {
+		return rule;
+	}
+
+	public void setRule(String rule) {
+		this.rule = rule;
+	}
+
+	/**
+	 * Region staining.
+	 */
+	private String region;
+
+	/**
+	 * Zone staining.
+	 */
+	private String zone;
+
+	public String getRegion() {
+		return region;
+	}
+
+	public void setRegion(String region) {
+		this.region = region;
+	}
+
+	public String getZone() {
+		return zone;
+	}
+
+	public void setZone(String zone) {
+		this.zone = zone;
+	}
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/properties/RoutingPropertiesAutoConfiguration.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/properties/RoutingPropertiesAutoConfiguration.java
new file mode 100644
index 00000000..ffdf2a45
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/properties/RoutingPropertiesAutoConfiguration.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.properties;
+
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+/**
+ * @author HH
+ * @since 2.2.10-RC1
+ */
+@Configuration(proxyBeanMethods = false)
+@EnableConfigurationProperties({ RoutingProperties.class })
+public class RoutingPropertiesAutoConfiguration {
+
+	@Bean
+	@ConditionalOnMissingBean
+	public RoutingProperties routingProperties() {
+
+		return new RoutingProperties();
+	}
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/publish/TargetServiceChangedPublisher.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/publish/TargetServiceChangedPublisher.java
new file mode 100644
index 00000000..313388f9
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/publish/TargetServiceChangedPublisher.java
@@ -0,0 +1,53 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.publish;
+
+import java.util.concurrent.ConcurrentHashMap;
+
+import com.alibaba.cloud.commons.governance.event.TargetServiceChangedEvent;
+
+import org.springframework.beans.BeansException;
+import org.springframework.context.ApplicationContext;
+import org.springframework.context.ApplicationContextAware;
+
+/**
+ * @author panxiaojun233
+ * @author <a href="m13201628570@163.com"></a>
+ * @since 2.2.10-RC1
+ */
+public class TargetServiceChangedPublisher implements ApplicationContextAware {
+
+	private ConcurrentHashMap<String, Object> targetServiceMap = new ConcurrentHashMap<String, Object>();
+
+	private final Object object = new Object();
+
+	public void addTargetService(String targetService) {
+		Object value = targetServiceMap.putIfAbsent(targetService, object);
+		if (value == null && applicationContext != null) {
+			applicationContext.publishEvent(new TargetServiceChangedEvent(targetService));
+		}
+	}
+
+	private ApplicationContext applicationContext;
+
+	@Override
+	public void setApplicationContext(ApplicationContext applicationContext)
+			throws BeansException {
+		this.applicationContext = applicationContext;
+	}
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/repository/FilterService.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/repository/FilterService.java
new file mode 100644
index 00000000..7df02d97
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/repository/FilterService.java
@@ -0,0 +1,127 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.repository;
+
+import java.util.HashSet;
+
+import org.springframework.context.ApplicationContext;
+import org.springframework.context.ApplicationContextAware;
+
+/**
+ * @author HH
+ * @since 2.2.10-RC1
+ */
+public class FilterService implements ApplicationContextAware {
+
+	/**
+	 * Feign bean name suffix.
+	 */
+	public static final String FEIGN_CLIENT_BEAN_SPECIFICATION = ".FeignClientSpecification";
+
+	/**
+	 * WebClient bean name suffix.
+	 */
+	public static final String REACTIVE_CLIENT_BEAN_SPECIFICATION = ".LoadBalancerClientSpecification";
+
+	/**
+	 * Feign bean name prefix.
+	 */
+	public static final String BEAN_DEFAULT = "default.";
+
+	/**
+	 * Feign bean name start char.
+	 */
+	public static final String BEAN_START = "${";
+
+	/**
+	 * Feign bean name end char.
+	 */
+	public static final String BEAN_END = "}";
+
+	/**
+	 * Spring bean Container.
+	 */
+	private static ApplicationContext applicationContext;
+
+	@Override
+	public void setApplicationContext(ApplicationContext applicationContext) {
+
+		FilterService.applicationContext = applicationContext;
+	}
+
+	/**
+	 * Find service.
+	 * @param size params
+	 * @return service name set
+	 */
+	public HashSet<String> getDefinitionService(int size) {
+
+		HashSet<String> serviceSet = new HashSet<>();
+
+		HashSet<String> serviceSet4Feign = getDefinitionFeignService(size);
+		HashSet<String> serviceSet4WebClient = getDefinitionWebClientService(size);
+
+		serviceSet.addAll(serviceSet4Feign);
+		serviceSet.addAll(serviceSet4WebClient);
+
+		return serviceSet;
+	}
+
+	/**
+	 * Find the Defined Diversity Service Provider for Feign Client.
+	 * @param size params
+	 * @return service name set
+	 */
+	private static HashSet<String> getDefinitionFeignService(int size) {
+
+		return findDefinitionService(size, FEIGN_CLIENT_BEAN_SPECIFICATION);
+	}
+
+	/**
+	 * Find the Defined Diversity Service Provider For WebClient.
+	 * @param size params
+	 * @return service name set
+	 */
+	private static HashSet<String> getDefinitionWebClientService(int size) {
+
+		return findDefinitionService(size, REACTIVE_CLIENT_BEAN_SPECIFICATION);
+	}
+
+	private static HashSet<String> findDefinitionService(int size,
+			String beanSpecification) {
+		String[] allBeanNames = applicationContext.getBeanDefinitionNames();
+
+		HashSet<String> serviceSet = new HashSet<>(size);
+
+		for (String beanName : allBeanNames) {
+			if (beanName.contains(beanSpecification)
+					&& !beanName.startsWith(beanSpecification)) {
+				String feignName = beanName.substring(0,
+						beanName.indexOf(beanSpecification));
+				if (feignName.startsWith(BEAN_START)) {
+					String resolveFeignName = feignName.replace(BEAN_START, "");
+					resolveFeignName = resolveFeignName.replace(BEAN_END, "");
+					feignName = resolveFeignName;
+				}
+				serviceSet.add(feignName);
+			}
+		}
+
+		return serviceSet;
+	}
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/repository/RoutingDataRepository.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/repository/RoutingDataRepository.java
new file mode 100644
index 00000000..43976e43
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/repository/RoutingDataRepository.java
@@ -0,0 +1,174 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.repository;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.concurrent.ConcurrentHashMap;
+
+import com.alibaba.cloud.commons.governance.routing.MatchService;
+import com.alibaba.cloud.commons.governance.routing.RoutingRule;
+import com.alibaba.cloud.commons.governance.routing.UnifiedRoutingDataStructure;
+import com.alibaba.cloud.commons.governance.routing.rule.Rule;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import org.springframework.util.CollectionUtils;
+
+/**
+ * @author HH
+ * @since 2.2.10-RC1
+ */
+
+public class RoutingDataRepository {
+
+	private static final Logger LOG = LoggerFactory
+			.getLogger(RoutingDataRepository.class);
+
+	/**
+	 * Key is service name,value is hashmap,which key is single RoutingColoringRule
+	 * key,value is match service. Use double hash index to parse route rule.
+	 */
+	private ConcurrentHashMap<String, HashMap<String, List<MatchService>>> routeCache = new ConcurrentHashMap<>();
+
+	/**
+	 * The default version of each service.
+	 */
+	private final ConcurrentHashMap<String, String> defaultRoutingVersion = new ConcurrentHashMap<>();
+
+	/**
+	 * Sign of path.
+	 */
+	private static final String PATH = "path";
+
+	/**
+	 * Contain rule of single path rule.
+	 */
+	private ConcurrentHashMap<String, List<MatchService>> pathRuleMap = new ConcurrentHashMap<>();
+
+	/**
+	 * If you do not set weight value,it will be set 100 by default.
+	 */
+	private static final int DEFAULT_WEIGHT = 100;
+
+	/**
+	 * Sum of all version's weight.
+	 */
+	public static final int SUM_WEIGHT = 100;
+
+	/**
+	 * Weight value can't less than it.
+	 */
+	public static final int MIN_WEIGHT = 0;
+
+	public void updateRouteData(final List<UnifiedRoutingDataStructure> routeDataList) {
+
+		ConcurrentHashMap<String, HashMap<String, List<MatchService>>> newRouteCache = new ConcurrentHashMap<>();
+		ConcurrentHashMap<String, List<MatchService>> newPathRuleMap = new ConcurrentHashMap<>();
+		for (UnifiedRoutingDataStructure routeData : routeDataList) {
+			nonNullCheck(routeData);
+			buildHashIndex(routeData, newRouteCache, newPathRuleMap);
+			defaultRoutingVersion.put(routeData.getTargetService(),
+					routeData.getLabelRouteRule().getDefaultRouteVersion());
+		}
+		// Replace it atomically
+		this.routeCache = newRouteCache;
+		this.pathRuleMap = newPathRuleMap;
+	}
+
+	private void nonNullCheck(UnifiedRoutingDataStructure unifiedRoutingDataStructure) {
+		String targetService = unifiedRoutingDataStructure.getTargetService();
+		if (targetService == null) {
+			LOG.error("Lose target Service name.");
+		}
+		final RoutingRule labelRouteData = unifiedRoutingDataStructure
+				.getLabelRouteRule();
+		final List<MatchService> matchServiceList = labelRouteData.getMatchRouteList();
+		for (MatchService matchService : matchServiceList) {
+			final List<Rule> ruleList = matchService.getRuleList();
+			String version = matchService.getVersion();
+			Integer weight = matchService.getWeight();
+			if (CollectionUtils.isEmpty(ruleList)) {
+				LOG.error("Rule is empty in version = {} ", version);
+			}
+			if (version == null) {
+				LOG.error("Target service = {} lose version,please check it. ",
+						targetService);
+			}
+			if (weight == null) {
+				weight = DEFAULT_WEIGHT;
+			}
+			if (weight < MIN_WEIGHT || weight > SUM_WEIGHT) {
+				LOG.error(
+						"The weight of provider = {} version = {} had set error,please check it. ",
+						targetService, version);
+			}
+		}
+	}
+
+	private void buildHashIndex(final UnifiedRoutingDataStructure routerData,
+			ConcurrentHashMap<String, HashMap<String, List<MatchService>>> newRouteCache,
+			ConcurrentHashMap<String, List<MatchService>> newPathRuleMap) {
+		final List<MatchService> matchRouteList = routerData.getLabelRouteRule()
+				.getMatchRouteList();
+		HashMap<String, List<MatchService>> singleRuleMap = new HashMap<>();
+
+		for (MatchService matchService : matchRouteList) {
+			List<Rule> ruleList = matchService.getRuleList();
+
+			// Take out the path label separately, because there is no key for hash index.
+			if (ruleList.size() == 1
+					&& PATH.equalsIgnoreCase(ruleList.get(0).getType())) {
+				List<MatchService> matchServiceList = newPathRuleMap
+						.get(routerData.getTargetService());
+				if (matchServiceList == null) {
+					matchServiceList = new ArrayList<>();
+				}
+				matchServiceList.add(matchService);
+				newPathRuleMap.put(routerData.getTargetService(), matchServiceList);
+				continue;
+			}
+			for (Rule routeRule : ruleList) {
+				List<MatchService> matchServiceList = singleRuleMap
+						.get(routeRule.getKey());
+				if (matchServiceList == null) {
+					matchServiceList = new ArrayList<>();
+				}
+				matchServiceList.add(matchService);
+				if (routeRule.getKey() != null) {
+					singleRuleMap.put(routeRule.getKey(), matchServiceList);
+				}
+			}
+		}
+		newRouteCache.put(routerData.getTargetService(), singleRuleMap);
+	}
+
+	public HashMap<String, List<MatchService>> getRouteRule(String targetService) {
+
+		return routeCache.get(targetService);
+	}
+
+	public String getDefaultRouteVersion(String targetService) {
+		return defaultRoutingVersion.get(targetService);
+	}
+
+	public List<MatchService> getPathRules(String targetService) {
+		return pathRuleMap.get(targetService);
+	}
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/ribbon/RoutingLoadBalanceRule.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/ribbon/RoutingLoadBalanceRule.java
new file mode 100644
index 00000000..b73d8bfe
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/ribbon/RoutingLoadBalanceRule.java
@@ -0,0 +1,689 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.ribbon;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Enumeration;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ThreadLocalRandom;
+
+import javax.annotation.Resource;
+import javax.servlet.http.HttpServletRequest;
+
+import com.alibaba.cloud.commons.governance.routing.MatchService;
+import com.alibaba.cloud.commons.governance.routing.rule.Rule;
+import com.alibaba.cloud.commons.lang.StringUtils;
+import com.alibaba.cloud.nacos.NacosDiscoveryProperties;
+import com.alibaba.cloud.nacos.NacosServiceManager;
+import com.alibaba.cloud.nacos.ribbon.NacosServer;
+import com.alibaba.cloud.routing.constant.RoutingConstants;
+import com.alibaba.cloud.routing.context.RoutingContext;
+import com.alibaba.cloud.routing.context.RoutingContextHolder;
+import com.alibaba.cloud.routing.properties.RoutingProperties;
+import com.alibaba.cloud.routing.publish.TargetServiceChangedPublisher;
+import com.alibaba.cloud.routing.repository.RoutingDataRepository;
+import com.alibaba.cloud.routing.util.ConditionMatchUtil;
+import com.alibaba.cloud.routing.util.LoadBalanceUtil;
+import com.alibaba.nacos.api.exception.NacosException;
+import com.alibaba.nacos.api.naming.NamingService;
+import com.alibaba.nacos.api.naming.pojo.Instance;
+import com.netflix.loadbalancer.AbstractServerPredicate;
+import com.netflix.loadbalancer.DynamicServerListLoadBalancer;
+import com.netflix.loadbalancer.PredicateBasedRule;
+import com.netflix.loadbalancer.Server;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.http.HttpHeaders;
+import org.springframework.http.server.reactive.ServerHttpRequest;
+import org.springframework.util.CollectionUtils;
+import org.springframework.web.context.request.RequestContextHolder;
+import org.springframework.web.context.request.ServletRequestAttributes;
+
+/**
+ * @author HH
+ * @since 2.2.10-RC1
+ */
+public class RoutingLoadBalanceRule extends PredicateBasedRule {
+
+	private static final Logger LOG = LoggerFactory
+			.getLogger(RoutingLoadBalanceRule.class);
+
+	/**
+	 * Composite route. todo
+	 */
+	private AbstractServerPredicate predicate;
+
+	@Resource
+	private RoutingContextHolder routingContextHolder;
+
+	@Resource
+	private RoutingContextHolder routingGatewayContextHolder;
+
+	@Resource
+	private RoutingContextHolder routingZuulGatewayContextHolder;
+
+	@Autowired
+	private NacosDiscoveryProperties nacosDiscoveryProperties;
+
+	@Autowired
+	private NacosServiceManager nacosServiceManager;
+
+	@Autowired
+	private RoutingDataRepository routingDataRepository;
+
+	@Autowired
+	private RoutingProperties routingProperties;
+
+	@Autowired
+	private TargetServiceChangedPublisher targetServiceChangedPublisher;
+
+	DynamicServerListLoadBalancer loadBalancer = null;
+
+	@Value("${" + RoutingConstants.ZONE_AVOIDANCE_RULE_ENABLED + ":true}")
+	private boolean zoneAvoidanceRuleEnabled;
+
+	@Override
+	public Server choose(Object key) {
+
+		try {
+			loadBalancer = (DynamicServerListLoadBalancer) getLoadBalancer();
+			String targetServiceName = getTargetServiceName();
+			targetServiceChangedPublisher.addTargetService(targetServiceName);
+
+			// If routeData isn't present, use normal load balance rule.
+			final HashMap<String, List<MatchService>> routeData = routingDataRepository
+					.getRouteRule(targetServiceName);
+
+			if (routeData == null) {
+
+				return LoadBalanceUtil.loadBalanceByOrdinaryRule(loadBalancer, key,
+						routingProperties.getRule());
+			}
+
+			List<Instance> instances = getInstanceFromNacos(targetServiceName);
+
+			// Filter by route rules,the result will be kept in versionSet and weightMap.
+			HashSet<String> versionSet = new HashSet<>();
+			HashMap<String, Integer> weightMap = new HashMap<>();
+			HashSet<String> fallbackVersionSet = new HashSet<>();
+			HashMap<String, Integer> fallbackWeightMap = new HashMap<>();
+
+			serviceFilterStrategy(targetServiceName, versionSet, weightMap,
+					fallbackVersionSet, fallbackWeightMap);
+
+			// Filter instances by versionSet and weightMap.
+			double[] weightArray = new double[instances.size()];
+			HashMap<String, List<Instance>> instanceMap = new HashMap<>();
+			for (Instance instance : instances) {
+				String version = instance.getMetadata().get(RoutingConstants.VERSION);
+				if (versionSet.contains(version)) {
+					List<Instance> instanceList = instanceMap.get(version);
+					if (instanceList == null) {
+						instanceList = new ArrayList<>();
+					}
+					instanceList.add(instance);
+					instanceMap.put(version, instanceList);
+				}
+			}
+
+			// None instance match rule
+			if (CollectionUtils.isEmpty(instanceMap)) {
+				LOG.warn("no instance match route rule");
+				for (Instance instance : instances) {
+					String version = instance.getMetadata().get(RoutingConstants.VERSION);
+					if (fallbackVersionSet.contains(version)) {
+						List<Instance> instanceList = instanceMap.get(version);
+						if (instanceList == null) {
+							instanceList = new ArrayList<>();
+						}
+						instanceList.add(instance);
+						instanceMap.put(version, instanceList);
+					}
+				}
+
+				return chooseServerByWeight(instanceMap, fallbackWeightMap, weightArray);
+			}
+
+			// Routing with Weight algorithm.
+			return chooseServerByWeight(instanceMap, weightMap, weightArray);
+
+		}
+		catch (Exception e) {
+			LOG.warn("LabelRouteRule error", e);
+			return null;
+		}
+	}
+
+	/**
+	 * Get targetServiceName.
+	 * @return String
+	 */
+	protected String getTargetServiceName() {
+		return loadBalancer.getName();
+	}
+
+	/**
+	 * Get instances from register-center.
+	 * @param targetServiceName target service.
+	 * @return Instance list.
+	 */
+	protected List<Instance> getInstanceFromNacos(String targetServiceName) {
+		List<Instance> instances = null;
+		String group = this.nacosDiscoveryProperties.getGroup();
+		final NamingService namingService = nacosServiceManager.getNamingService();
+
+		try {
+			instances = namingService.selectInstances(targetServiceName, group, true);
+		}
+		catch (NacosException e) {
+			LOG.warn("no instance in service {} ", targetServiceName);
+		}
+
+		if (CollectionUtils.isEmpty(instances)) {
+			LOG.warn("no instance in service {} ", targetServiceName);
+			return null;
+		}
+		return instances;
+	}
+
+	@Override
+	public AbstractServerPredicate getPredicate() {
+
+		return this.predicate;
+	}
+
+	private HashMap<String, String> getHeaderNames(ServerHttpRequest request) {
+
+		HttpHeaders headers = request.getHeaders();
+		Map<String, String> map = headers.toSingleValueMap();
+
+		HashMap<String, String> resMap = new HashMap<>();
+
+		Set<String> strings = map.keySet();
+		for (String string : strings) {
+			resMap.put(string, map.get(string));
+		}
+
+		return resMap;
+	}
+
+	private String getRequestURI(ServerHttpRequest request) {
+
+		return request.getPath().toString();
+	}
+
+	private Map<String, String> getHeaderNames(HttpServletRequest request) {
+
+		final Enumeration<String> headerNames = request.getHeaderNames();
+		HashMap<String, String> requestHeaders = new HashMap<>();
+
+		if (headerNames != null) {
+			while (headerNames.hasMoreElements()) {
+				String name = headerNames.nextElement();
+				String value = request.getHeader(name);
+				requestHeaders.put(name, value);
+			}
+		}
+
+		return requestHeaders;
+	}
+
+	private void serviceFilterStrategy(String targetServiceName,
+			HashSet<String> versionSet, HashMap<String, Integer> weightMap,
+			HashSet<String> fallbackVersionSet,
+			HashMap<String, Integer> fallbackWeightMap) {
+
+		if (Objects.nonNull(RequestContextHolder.getRequestAttributes())) {
+
+			final HttpServletRequest request = ((ServletRequestAttributes) Objects
+					.requireNonNull(RequestContextHolder.getRequestAttributes()))
+							.getRequest();
+
+			if (Objects.nonNull(request)) {
+				serviceFilter(targetServiceName, versionSet, weightMap,
+						fallbackVersionSet, fallbackWeightMap, request);
+			}
+		}
+		else {
+
+			ServerHttpRequest serverHttpRequest = routingGatewayContextHolder
+					.getServerHttpRequest();
+
+			serviceFilter(targetServiceName, versionSet, weightMap, fallbackVersionSet,
+					fallbackWeightMap, serverHttpRequest);
+
+		}
+	}
+
+	/**
+	 * For ServerHttpRequest.
+	 * @param targetServiceName target service
+	 * @param versionSet version
+	 * @param weightMap weight
+	 * @param fallbackVersionSet fallback version
+	 * @param fallbackWeightMap fallback weight
+	 * @param request ServerHttpRequest Object
+	 */
+	private void serviceFilter(String targetServiceName, HashSet<String> versionSet,
+			HashMap<String, Integer> weightMap, HashSet<String> fallbackVersionSet,
+			HashMap<String, Integer> fallbackWeightMap, ServerHttpRequest request) {
+
+		// Get request metadata.
+		HashMap<String, String> requestHeaders = getHeaderNames(request);
+
+		Map<String, String> parameterMap = request.getQueryParams().toSingleValueMap();
+
+		Map<String, String[]> buildParameterMap = new HashMap<>();
+
+		Set<String> strings = parameterMap.keySet();
+		for (String string : strings) {
+			buildParameterMap.put(string, new String[] { parameterMap.get(string) });
+		}
+
+		int defaultVersionWeight = RoutingDataRepository.SUM_WEIGHT;
+		boolean isMatch = false;
+
+		// Parse rule.
+		if (requestHeaders.size() > 0) {
+			for (String keyName : requestHeaders.keySet()) {
+				int weight = matchRule(targetServiceName, keyName, requestHeaders,
+						buildParameterMap, getRequestURI(request), versionSet, weightMap,
+						fallbackVersionSet, fallbackWeightMap);
+				if (weight != RoutingConstants.NO_MATCH) {
+					isMatch = true;
+					defaultVersionWeight -= weight;
+					break;
+				}
+			}
+		}
+
+		if (!isMatch && parameterMap != null) {
+			for (String keyName : parameterMap.keySet()) {
+				int weight = matchRule(targetServiceName, keyName, requestHeaders,
+						buildParameterMap, getRequestURI(request), versionSet, weightMap,
+						fallbackVersionSet, fallbackWeightMap);
+				if (weight != RoutingConstants.NO_MATCH) {
+					isMatch = true;
+					defaultVersionWeight -= weight;
+					break;
+				}
+			}
+		}
+
+		final List<MatchService> pathRules = routingDataRepository
+				.getPathRules(targetServiceName);
+		if (!isMatch && pathRules != null) {
+			for (MatchService matchService : pathRules) {
+				if (matchService.getRuleList().get(0).getValue()
+						.equals(getRequestURI(request))) {
+					String version = matchService.getVersion();
+					Integer weight = matchService.getWeight();
+					versionSet.add(version);
+					weightMap.put(version, weight);
+					defaultVersionWeight -= weight;
+				}
+			}
+		}
+
+		// Add default route
+		if (defaultVersionWeight > RoutingDataRepository.MIN_WEIGHT) {
+			String defaultRouteVersion = routingDataRepository
+					.getDefaultRouteVersion(targetServiceName);
+			versionSet.add(defaultRouteVersion);
+			weightMap.put(defaultRouteVersion, defaultVersionWeight);
+		}
+
+	}
+
+	/**
+	 * For HttpServletRequest.
+	 * @param targetServiceName target service
+	 * @param versionSet version
+	 * @param weightMap weight
+	 * @param fallbackVersionSet fallback version
+	 * @param fallbackWeightMap fallback weight
+	 * @param request httpServletRequest Object
+	 */
+	private void serviceFilter(String targetServiceName, HashSet<String> versionSet,
+			HashMap<String, Integer> weightMap, HashSet<String> fallbackVersionSet,
+			HashMap<String, Integer> fallbackWeightMap, HttpServletRequest request) {
+
+		// Get request metadata.
+		HashMap<String, String> requestHeaders = (HashMap<String, String>) getHeaderNames(
+				request);
+
+		final Map<String, String[]> parameterMap = request.getParameterMap();
+		int defaultVersionWeight = RoutingDataRepository.SUM_WEIGHT;
+		boolean isMatch = false;
+
+		// Parse rule.
+		if (requestHeaders.size() > 0) {
+			for (String keyName : requestHeaders.keySet()) {
+				int weight = matchRule(targetServiceName, keyName, requestHeaders,
+						parameterMap, request.getRequestURI(), versionSet, weightMap,
+						fallbackVersionSet, fallbackWeightMap);
+				if (weight != RoutingConstants.NO_MATCH) {
+					isMatch = true;
+					defaultVersionWeight -= weight;
+					break;
+				}
+			}
+		}
+
+		if (!isMatch && parameterMap != null) {
+			for (String keyName : parameterMap.keySet()) {
+				int weight = matchRule(targetServiceName, keyName, requestHeaders,
+						parameterMap, request.getRequestURI(), versionSet, weightMap,
+						fallbackVersionSet, fallbackWeightMap);
+				if (weight != RoutingConstants.NO_MATCH) {
+					isMatch = true;
+					defaultVersionWeight -= weight;
+					break;
+				}
+			}
+		}
+
+		final List<MatchService> pathRules = routingDataRepository
+				.getPathRules(targetServiceName);
+		if (!isMatch && pathRules != null) {
+			for (MatchService matchService : pathRules) {
+				if (matchService.getRuleList().get(0).getValue()
+						.equals(request.getRequestURI())) {
+					String version = matchService.getVersion();
+					Integer weight = matchService.getWeight();
+					versionSet.add(version);
+					weightMap.put(version, weight);
+					defaultVersionWeight -= weight;
+				}
+			}
+		}
+
+		// Add default route
+		if (defaultVersionWeight > RoutingDataRepository.MIN_WEIGHT) {
+			String defaultRouteVersion = routingDataRepository
+					.getDefaultRouteVersion(targetServiceName);
+			versionSet.add(defaultRouteVersion);
+			weightMap.put(defaultRouteVersion, defaultVersionWeight);
+		}
+
+	}
+
+	private int matchRule(String targetServiceName, String keyName,
+			final HashMap<String, String> requestHeaders,
+			final Map<String, String[]> parameterMap, final String uri,
+			HashSet<String> versionSet, HashMap<String, Integer> weightMap,
+			HashSet<String> fallbackVersionSet,
+			HashMap<String, Integer> fallbackWeightMap) {
+		final List<MatchService> matchServiceList = routingDataRepository
+				.getRouteRule(targetServiceName).get(keyName);
+		if (matchServiceList == null) {
+			return RoutingConstants.NO_MATCH;
+		}
+		for (MatchService matchService : matchServiceList) {
+			final List<Rule> ruleList = matchService.getRuleList();
+			String version = matchService.getVersion();
+			Integer weight = matchService.getWeight();
+			String fallback = matchService.getFallback();
+			boolean isMatchRule = true;
+			for (Rule routeRule : ruleList) {
+				String type = routeRule.getType();
+				switch (type) {
+				case RoutingConstants.PATH:
+					isMatchRule = parseRequestPath(routeRule, uri);
+					break;
+				case RoutingConstants.HEADER:
+					isMatchRule = parseRequestHeader(routeRule, requestHeaders);
+					break;
+				case RoutingConstants.PARAMETER:
+					isMatchRule = parseRequestParameter(routeRule, parameterMap);
+					break;
+				default:
+					throw new UnsupportedOperationException(
+							"unsupported string compare operation");
+				}
+				if (!isMatchRule) {
+					break;
+				}
+			}
+			if (!isMatchRule) {
+				continue;
+			}
+			versionSet.add(version);
+			fallbackVersionSet.add(fallback);
+			fallbackWeightMap.put(fallback, weight);
+			weightMap.put(version, weight);
+			return weight;
+		}
+		return RoutingConstants.NO_MATCH;
+	}
+
+	private boolean parseRequestPath(final Rule routeRule, final String uri) {
+		String condition = routeRule.getCondition();
+		String value = routeRule.getValue();
+
+		return conditionMatch(condition, value, uri);
+	}
+
+	private boolean parseRequestHeader(final Rule routeRule,
+			final HashMap<String, String> requestHeaders) {
+		if (requestHeaders.size() == 0) {
+			return false;
+		}
+		String condition = routeRule.getCondition();
+		String value = routeRule.getValue();
+		String headerValue = requestHeaders.get(routeRule.getKey());
+		return conditionMatch(condition, value, headerValue);
+	}
+
+	private boolean parseRequestParameter(final Rule routeRule,
+			final Map<String, String[]> parameterMap) {
+		if (parameterMap == null || parameterMap.size() == 0) {
+			return false;
+		}
+		String condition = routeRule.getCondition();
+		String value = routeRule.getValue();
+		String[] paramValues = parameterMap.get(routeRule.getKey());
+		String paramValue = paramValues == null ? null : paramValues[0];
+		return conditionMatch(condition, value, paramValue);
+	}
+
+	private boolean conditionMatch(String condition, String str, String comparator) {
+		switch (condition) {
+		case ConditionMatchUtil.EXACT:
+		case ConditionMatchUtil.EQUAL:
+			return ConditionMatchUtil.exactMatch(str, comparator);
+		case ConditionMatchUtil.REGEX:
+			return ConditionMatchUtil.regexMatch(str, comparator);
+		case ConditionMatchUtil.PREFIX:
+			return ConditionMatchUtil.prefixMatch(str, comparator);
+		case ConditionMatchUtil.CONTAIN:
+			return ConditionMatchUtil.containMatch(str, comparator);
+		case ConditionMatchUtil.GREATER:
+			return ConditionMatchUtil.greaterMatch(str, comparator);
+		case ConditionMatchUtil.LESS:
+			return ConditionMatchUtil.lessMatch(str, comparator);
+		case ConditionMatchUtil.NOT_EQUAL:
+			return ConditionMatchUtil.noEqualMatch(str, comparator);
+		default:
+			throw new UnsupportedOperationException(
+					"unsupported string compare operation");
+		}
+	}
+
+	private Server chooseServerByWeight(HashMap<String, List<Instance>> instanceMap,
+			HashMap<String, Integer> weightMap, double[] weightArray) {
+
+		if (zoneAvoidanceRuleEnabled) {
+
+			instanceMap = chooseServerByRegionalAffinity(instanceMap);
+		}
+
+		int index = 0;
+		double sum = 0.0D;
+		List<Instance> instances = new ArrayList<>();
+
+		for (String version : instanceMap.keySet()) {
+			int weight = weightMap.get(version);
+			List<Instance> instanceList = instanceMap.get(version);
+			for (Instance instance : instanceList) {
+				instances.add(instance);
+
+				weightArray[index] = RoutingConstants.KEEP_ACCURACY * weight
+						/ instanceList.size() + sum;
+				sum = weightArray[index];
+
+				index++;
+			}
+		}
+
+		if (instances.size() == 1) {
+			return new NacosServer(instances.get(0));
+		}
+
+		if (sum > RoutingDataRepository.SUM_WEIGHT) {
+			LOG.error("Sum of weight has over {} ", RoutingDataRepository.SUM_WEIGHT);
+		}
+
+		double random = ThreadLocalRandom.current().nextDouble(
+				RoutingDataRepository.MIN_WEIGHT, RoutingDataRepository.SUM_WEIGHT);
+
+		int chooseServiceIndex = Arrays.binarySearch(weightArray, random);
+		if (chooseServiceIndex < 0) {
+			chooseServiceIndex = -chooseServiceIndex - 1;
+		}
+
+		return new NacosServer(instances.get(chooseServiceIndex));
+	}
+
+	private HashMap<String, List<Instance>> chooseServerByRegionalAffinity(
+			HashMap<String, List<Instance>> map) {
+
+		Map<String, String> regionalAffinityLabels = getRegionalAffinityLabels();
+
+		if (CollectionUtils.isEmpty(regionalAffinityLabels)) {
+
+			return map;
+		}
+
+		String region = getRegionalAffinityLabels().get(RoutingConstants.REGION);
+		String zone = getRegionalAffinityLabels().get(RoutingConstants.ZONE);
+
+		if (StringUtils.isEmpty(region) && StringUtils.isEmpty(zone)) {
+
+			return map;
+		}
+
+		HashMap<String, List<Instance>> serverMap = new HashMap<>();
+		List<Instance> serverList = new ArrayList<>();
+		for (String version : map.keySet()) {
+			List<Instance> instances = map.get(version);
+			for (Instance instance : instances) {
+				Map<String, String> metadata = instance.getMetadata();
+				String serverRegion = metadata.get(RoutingConstants.REGION);
+				String serverZone = metadata.get(RoutingConstants.ZONE);
+				if (StringUtils.isNotEmpty(serverRegion)
+						&& StringUtils.isNotEmpty(serverZone)) {
+					if (Objects.equals(region, serverRegion)) {
+						if (Objects.equals(zone, serverZone)) {
+							serverList.add(instance);
+						}
+					}
+				}
+			}
+			serverMap.put(version, serverList);
+		}
+
+		// If there is no suitable instance, route the whole service instance
+		if (checkMap(serverMap)) {
+
+			LOG.warn(
+					"The Region Affinity Route Label Selection Service instance is empty.");
+			return map;
+		}
+
+		RoutingContext.clearCurrentContext();
+		return new HashMap<>(serverMap);
+	}
+
+	private Map<String, String> getRegionalAffinityLabels() {
+
+		Map<String, String> resMap = new ConcurrentHashMap<>();
+
+		// Get the regional affinity route label from the service
+		String region = routingContextHolder.getRouteRegion();
+		String zone = routingContextHolder.getRoutZone();
+
+		// Get the regional affinity route label from the gateway
+		if (StringUtils.isEmpty(region) && StringUtils.isEmpty(zone)) {
+
+			region = routingGatewayContextHolder.getRouteRegion();
+			zone = routingGatewayContextHolder.getRoutZone();
+		}
+
+		// Get the regional affinity route label from the zuul
+		if (StringUtils.isEmpty(region) && StringUtils.isEmpty(zone)) {
+
+			region = routingZuulGatewayContextHolder.getRouteRegion();
+			zone = routingZuulGatewayContextHolder.getRoutZone();
+		}
+
+		if (StringUtils.isEmpty(region) && StringUtils.isEmpty(zone)) {
+
+			LOG.warn("Regional affinity labels is null.");
+			return null;
+		}
+
+		resMap.put(RoutingConstants.REGION, region);
+		resMap.put(RoutingConstants.ZONE, zone);
+
+		return resMap;
+	}
+
+	private static boolean checkMap(Map<String, List<Instance>> map) {
+
+		if (CollectionUtils.isEmpty(map) || CollectionUtils.isEmpty(map.values())) {
+			return true;
+		}
+
+		Set<String> values = map.keySet();
+		for (String value : values) {
+			List<Instance> instances = map.get(value);
+			if (CollectionUtils.isEmpty(instances)) {
+				return true;
+			}
+			for (Instance instance : instances) {
+				if (Objects.isNull(instance)) {
+					return true;
+				}
+			}
+		}
+
+		return false;
+
+	}
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/util/ConditionMatchUtil.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/util/ConditionMatchUtil.java
new file mode 100644
index 00000000..7dfe1a43
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/util/ConditionMatchUtil.java
@@ -0,0 +1,98 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.util;
+
+import java.util.regex.Pattern;
+
+/**
+ * @author HH
+ * @since 2.2.10-RC1
+ */
+public final class ConditionMatchUtil {
+
+	/**
+	 * Sign of exact.
+	 */
+	public static final String EXACT = "exact";
+
+	/**
+	 * Sign of regex.
+	 */
+	public static final String REGEX = "regex";
+
+	/**
+	 * Sign of contain.
+	 */
+	public static final String PREFIX = "prefix";
+
+	/**
+	 * Sign of contain.
+	 */
+	public static final String CONTAIN = "contain";
+
+	/**
+	 * Sign of greater.
+	 */
+	public static final String GREATER = ">";
+
+	/**
+	 * Sign of less.
+	 */
+	public static final String LESS = "<";
+
+	/**
+	 * Sign of equal.
+	 */
+	public static final String EQUAL = "=";
+
+	/**
+	 * Sign of no equal.
+	 */
+	public static final String NOT_EQUAL = "not_equal";
+
+	private ConditionMatchUtil() {
+	}
+
+	public static boolean exactMatch(String one, String another) {
+		return one.equals(another);
+	}
+
+	public static boolean regexMatch(String regex, String path) {
+		return Pattern.matches(regex, path);
+	}
+
+	public static boolean containMatch(String sub, String base) {
+		return base.contains(sub);
+	}
+
+	public static boolean prefixMatch(String prefix, String str) {
+		return str.startsWith(prefix);
+	}
+
+	public static boolean greaterMatch(String str, String comparor) {
+		return Integer.parseInt(comparor) > Integer.parseInt(str);
+	}
+
+	public static boolean lessMatch(String str, String comparor) {
+		return Integer.parseInt(comparor) < Integer.parseInt(str);
+	}
+
+	public static boolean noEqualMatch(String str, String comparor) {
+		return Integer.parseInt(str) == Integer.parseInt(comparor);
+	}
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/util/LoadBalanceUtil.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/util/LoadBalanceUtil.java
new file mode 100644
index 00000000..4b1366ad
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/java/com/alibaba/cloud/routing/util/LoadBalanceUtil.java
@@ -0,0 +1,110 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.util;
+
+import com.netflix.loadbalancer.AvailabilityFilteringRule;
+import com.netflix.loadbalancer.BestAvailableRule;
+import com.netflix.loadbalancer.ILoadBalancer;
+import com.netflix.loadbalancer.RandomRule;
+import com.netflix.loadbalancer.RetryRule;
+import com.netflix.loadbalancer.RoundRobinRule;
+import com.netflix.loadbalancer.Server;
+import com.netflix.loadbalancer.WeightedResponseTimeRule;
+import com.netflix.loadbalancer.ZoneAvoidanceRule;
+
+/**
+ * @author HH
+ * @since 2.2.10-RC1
+ */
+public final class LoadBalanceUtil {
+
+	/**
+	 * Default polling.
+	 */
+	public static final String ROUND_ROBIN_RULE = "RoundRobinRule";
+
+	/**
+	 * Random choose a instance.
+	 */
+	public static final String RANDOM_RULE = "RandomRule";
+
+	/**
+	 * The weight is allocated according to the response time.
+	 */
+	public static final String WEIGHTED_RESPONSE_TIME_RULE = "WeightedResponseTimeRule";
+
+	/**
+	 * Select the method with the minimum concurrency.
+	 */
+	public static final String BEST_AVAILABLE_RULE = "BestAvailableRule";
+
+	/**
+	 * Retry when fail.
+	 */
+	public static final String RETRY_RULE = "RetryRule";
+
+	/**
+	 * Choose based on performance and availability.
+	 */
+	public static final String ZONE_AVOIDANCE_RULE = "ZoneAvoidanceRule";
+
+	/**
+	 * Filter by Availability.
+	 */
+	public static final String AVAILABILITY_FILTERING_RULE = "AvailabilityFilteringRule";
+
+	private static final RoundRobinRule roundRobinRule = new RoundRobinRule();
+
+	private static final RandomRule randomRule = new RandomRule();
+
+	private static final WeightedResponseTimeRule weightedResponseTimeRule = new WeightedResponseTimeRule();
+
+	private static final BestAvailableRule bestAvailableRule = new BestAvailableRule();
+
+	private static final RetryRule retryRule = new RetryRule();
+
+	private static final ZoneAvoidanceRule zoneAvoidanceRule = new ZoneAvoidanceRule();
+
+	private static final AvailabilityFilteringRule availabilityFilteringRule = new AvailabilityFilteringRule();
+
+	private LoadBalanceUtil() {
+	}
+
+	public static Server loadBalanceByOrdinaryRule(ILoadBalancer iLoadBalancer,
+			Object key, String rule) {
+		switch (rule) {
+		case ROUND_ROBIN_RULE:
+			return roundRobinRule.choose(iLoadBalancer, key);
+		case RANDOM_RULE:
+			return randomRule.choose(iLoadBalancer, key);
+		case WEIGHTED_RESPONSE_TIME_RULE:
+			return weightedResponseTimeRule.choose(iLoadBalancer, key);
+		case BEST_AVAILABLE_RULE:
+			bestAvailableRule.setLoadBalancer(iLoadBalancer);
+			return bestAvailableRule.choose(key);
+		case RETRY_RULE:
+			return retryRule.choose(iLoadBalancer, key);
+		case AVAILABILITY_FILTERING_RULE:
+			availabilityFilteringRule.setLoadBalancer(iLoadBalancer);
+			return availabilityFilteringRule.choose(key);
+		default:
+			zoneAvoidanceRule.setLoadBalancer(iLoadBalancer);
+			return zoneAvoidanceRule.choose(key);
+		}
+	}
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/resources/META-INF/additional-spring-configuration-metadata.json b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/resources/META-INF/additional-spring-configuration-metadata.json
new file mode 100644
index 00000000..c84040a7
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/resources/META-INF/additional-spring-configuration-metadata.json
@@ -0,0 +1,40 @@
+{
+  "properties": [
+    {
+      "name": "spring.cloud.governance.routing.rule",
+      "type": "java.lang.String",
+      "defaultValue": "ZoneAvoidanceRule",
+      "description": "LoadBalance rule for label routing, the following values are included: RoundRobinRule, RandomRule, WeightedResponseTimeRule, BestAvailableRule, RetryRule, ZoneAvoidanceRule, AvailabilityFilteringRule."
+    },
+    {
+      "name": "spring.cloud.governance.routing.zone.affinity.enabled",
+      "type": "java.lang.Boolean",
+      "defaultValue": true,
+      "description": "Whether strategy zone avoidance rul is enabled."
+    },
+    {
+      "name": "spring.cloud.governance.routing.feign.core.header.transmission.enabled",
+      "type": "java.lang.Boolean",
+      "defaultValue": true,
+      "description": "Whether strategy feign core header transmission is enabled."
+    },
+    {
+      "name": "spring.cloud.governance.routing.rest.core.header.transmission.enabled",
+      "type": "java.lang.Boolean",
+      "defaultValue": true,
+      "description": "Whether strategy rest template core header transmission is enabled."
+    },
+    {
+      "name": "spring.cloud.governance.routing.web.client.core.header.transmission.enabled",
+      "type": "java.lang.Boolean",
+      "defaultValue": true,
+      "description": "Whether strategy web client core header transmission is enabled."
+    },
+    {
+      "name": "spring.cloud.governance.routing.service.header.priority",
+      "type": "java.lang.Boolean",
+      "defaultValue": true,
+      "description": "Whether strategy service header priority is enabled."
+    }
+  ]
+}
\ No newline at end of file
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/resources/META-INF/spring.factories b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/resources/META-INF/spring.factories
new file mode 100644
index 00000000..d2f4a39a
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-starter/src/main/resources/META-INF/spring.factories
@@ -0,0 +1,3 @@
+org.springframework.boot.autoconfigure.EnableAutoConfiguration=\
+  com.alibaba.cloud.routing.configuration.RoutingAutoConfiguration,\
+  com.alibaba.cloud.routing.properties.RoutingPropertiesAutoConfiguration
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-zuul-adapter/pom.xml b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-zuul-adapter/pom.xml
new file mode 100644
index 00000000..8f17a28a
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-zuul-adapter/pom.xml
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+	<modelVersion>4.0.0</modelVersion>
+
+	<parent>
+		<groupId>com.alibaba.cloud</groupId>
+		<artifactId>spring-cloud-starter-alibaba-governance-routing</artifactId>
+		<version>${revision}</version>
+		<relativePath>../pom.xml</relativePath>
+	</parent>
+
+	<artifactId>spring-cloud-alibaba-routing-zuul-adapter</artifactId>
+	<name>Spring Cloud Alibaba Governance Label Routing Zuul Adapter</name>
+
+	<properties>
+		<maven.compiler.source>8</maven.compiler.source>
+		<maven.compiler.target>8</maven.compiler.target>
+		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+	</properties>
+
+	<dependencies>
+
+		<dependency>
+			<groupId>com.alibaba.cloud</groupId>
+			<artifactId>spring-cloud-alibaba-routing-starter</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>org.springframework.cloud</groupId>
+			<artifactId>spring-cloud-starter-netflix-zuul</artifactId>
+		</dependency>
+
+	</dependencies>
+
+</project>
\ No newline at end of file
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-zuul-adapter/src/main/java/com/alibaba/cloud/routing/zuul/configuration/RoutingZuulConfiguration.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-zuul-adapter/src/main/java/com/alibaba/cloud/routing/zuul/configuration/RoutingZuulConfiguration.java
new file mode 100644
index 00000000..83f26fea
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-zuul-adapter/src/main/java/com/alibaba/cloud/routing/zuul/configuration/RoutingZuulConfiguration.java
@@ -0,0 +1,53 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.zuul.configuration;
+
+import com.alibaba.cloud.routing.context.RoutingContextHolder;
+import com.alibaba.cloud.routing.zuul.context.defaults.DefaultRoutingZuulContextHolder;
+import com.alibaba.cloud.routing.zuul.filter.RoutingZuulFilter;
+import com.alibaba.cloud.routing.zuul.filter.defaults.DefaultRoutingZuulFilter;
+
+import org.springframework.boot.autoconfigure.AutoConfigureBefore;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.cloud.netflix.ribbon.RibbonClientConfiguration;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+@Configuration
+@AutoConfigureBefore(RibbonClientConfiguration.class)
+public class RoutingZuulConfiguration {
+
+	@Bean
+	@ConditionalOnMissingBean
+	public RoutingContextHolder routingZuulContextHolder() {
+
+		return new DefaultRoutingZuulContextHolder();
+	}
+
+	@Bean
+	@ConditionalOnMissingBean
+	public RoutingZuulFilter routingZuulFilter() {
+
+		return new DefaultRoutingZuulFilter();
+	}
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-zuul-adapter/src/main/java/com/alibaba/cloud/routing/zuul/constants/RoutingZuulConstants.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-zuul-adapter/src/main/java/com/alibaba/cloud/routing/zuul/constants/RoutingZuulConstants.java
new file mode 100644
index 00000000..062c23d1
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-zuul-adapter/src/main/java/com/alibaba/cloud/routing/zuul/constants/RoutingZuulConstants.java
@@ -0,0 +1,51 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.zuul.constants;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+public final class RoutingZuulConstants {
+
+	private RoutingZuulConstants() {
+	}
+
+	/**
+	 * Service governance traffic stains the public prefix.
+	 */
+	public static final String ZUUL_PROPERTY_PREFIX = "spring.cloud.governance.routing.zuul";
+
+	/**
+	 * zuul filter order.
+	 */
+	public static final String ZUUL_ROUTE_FILTER_ORDER = ZUUL_PROPERTY_PREFIX
+			+ ".filter.order";
+
+	/**
+	 * Zuul header priority.
+	 */
+	public static final String ZUUL_HEADER_PRIORITY = ZUUL_PROPERTY_PREFIX
+			+ ".header.priority";
+
+	/**
+	 * Zuul filter order value.
+	 */
+	public static final int ZUUL_ROUTE_FILTER_ORDER_VALUE = 0;
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-zuul-adapter/src/main/java/com/alibaba/cloud/routing/zuul/context/RoutingZuulContext.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-zuul-adapter/src/main/java/com/alibaba/cloud/routing/zuul/context/RoutingZuulContext.java
new file mode 100644
index 00000000..c2085940
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-zuul-adapter/src/main/java/com/alibaba/cloud/routing/zuul/context/RoutingZuulContext.java
@@ -0,0 +1,77 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.zuul.context;
+
+import javax.servlet.http.HttpServletRequest;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+public class RoutingZuulContext {
+
+	private static final ThreadLocal<RoutingZuulContext> THREAD_LOCAL = ThreadLocal
+			.withInitial(RoutingZuulContext::new);
+
+	public static RoutingZuulContext getCurrentContext() {
+
+		return THREAD_LOCAL.get();
+	}
+
+	public static void clearCurrentContext() {
+
+		THREAD_LOCAL.remove();
+	}
+
+	private String region;
+
+	private String zone;
+
+	private HttpServletRequest httpServletRequest;
+
+	public String getRegion() {
+
+		return region;
+	}
+
+	public void setRegion(String region) {
+
+		this.region = region;
+	}
+
+	public String getZone() {
+
+		return zone;
+	}
+
+	public void setZone(String zone) {
+
+		this.zone = zone;
+	}
+
+	public HttpServletRequest getHttpServletRequest() {
+
+		return httpServletRequest;
+	}
+
+	public void setHttpServletRequest(HttpServletRequest httpServletRequest) {
+
+		this.httpServletRequest = httpServletRequest;
+	}
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-zuul-adapter/src/main/java/com/alibaba/cloud/routing/zuul/context/defaults/DefaultRoutingZuulContextHolder.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-zuul-adapter/src/main/java/com/alibaba/cloud/routing/zuul/context/defaults/DefaultRoutingZuulContextHolder.java
new file mode 100644
index 00000000..09d20def
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-zuul-adapter/src/main/java/com/alibaba/cloud/routing/zuul/context/defaults/DefaultRoutingZuulContextHolder.java
@@ -0,0 +1,49 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.zuul.context.defaults;
+
+import javax.servlet.http.HttpServletRequest;
+
+import com.alibaba.cloud.routing.context.AbstractRoutingContextHolder;
+import com.alibaba.cloud.routing.zuul.context.RoutingZuulContext;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+public class DefaultRoutingZuulContextHolder extends AbstractRoutingContextHolder {
+
+	@Override
+	public String getRouteRegion() {
+
+		return RoutingZuulContext.getCurrentContext().getRegion();
+	}
+
+	@Override
+	public String getRoutZone() {
+
+		return RoutingZuulContext.getCurrentContext().getZone();
+	}
+
+	@Override
+	public HttpServletRequest getgHttpServletRequest() {
+
+		return RoutingZuulContext.getCurrentContext().getHttpServletRequest();
+	}
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-zuul-adapter/src/main/java/com/alibaba/cloud/routing/zuul/filter/RoutingZuulFilter.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-zuul-adapter/src/main/java/com/alibaba/cloud/routing/zuul/filter/RoutingZuulFilter.java
new file mode 100644
index 00000000..56a3fdbe
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-zuul-adapter/src/main/java/com/alibaba/cloud/routing/zuul/filter/RoutingZuulFilter.java
@@ -0,0 +1,28 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.zuul.filter;
+
+import com.netflix.zuul.ZuulFilter;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+public abstract class RoutingZuulFilter extends ZuulFilter {
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-zuul-adapter/src/main/java/com/alibaba/cloud/routing/zuul/filter/defaults/DefaultRoutingZuulFilter.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-zuul-adapter/src/main/java/com/alibaba/cloud/routing/zuul/filter/defaults/DefaultRoutingZuulFilter.java
new file mode 100644
index 00000000..a80ed1a3
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-zuul-adapter/src/main/java/com/alibaba/cloud/routing/zuul/filter/defaults/DefaultRoutingZuulFilter.java
@@ -0,0 +1,101 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.zuul.filter.defaults;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.annotation.Resource;
+
+import com.alibaba.cloud.routing.constant.RoutingConstants;
+import com.alibaba.cloud.routing.properties.RoutingProperties;
+import com.alibaba.cloud.routing.zuul.constants.RoutingZuulConstants;
+import com.alibaba.cloud.routing.zuul.context.RoutingZuulContext;
+import com.alibaba.cloud.routing.zuul.filter.RoutingZuulFilter;
+import com.alibaba.cloud.routing.zuul.util.RoutingZuulFilterResolver;
+import com.netflix.zuul.context.RequestContext;
+import com.netflix.zuul.exception.ZuulException;
+
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.cloud.netflix.zuul.filters.support.FilterConstants;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+public class DefaultRoutingZuulFilter extends RoutingZuulFilter {
+
+	// Filter order.
+	@Value("${" + RoutingZuulConstants.ZUUL_ROUTE_FILTER_ORDER + ":"
+			+ RoutingZuulConstants.ZUUL_ROUTE_FILTER_ORDER_VALUE + "}")
+	protected Integer filterOrder;
+
+	// Gateway rule priority switch.
+	@Value("${" + RoutingZuulConstants.ZUUL_HEADER_PRIORITY + ":true}")
+	protected Boolean zuulHeaderPriority;
+
+	@Resource
+	private RoutingProperties routingProperties;
+
+	@Override
+	public String filterType() {
+
+		return FilterConstants.PRE_TYPE;
+	}
+
+	@Override
+	public int filterOrder() {
+		return filterOrder;
+	}
+
+	@Override
+	public boolean shouldFilter() {
+		return true;
+	}
+
+	@Override
+	public Object run() throws ZuulException {
+
+		RequestContext context = RequestContext.getCurrentContext();
+
+		// 处理内部Header的转发
+		applyHeader(context);
+
+		return null;
+	}
+
+	private void applyHeader(RequestContext context) {
+
+		// Use map to simplify if... else statement
+		Map<String, String> propertiesMap = new HashMap<>();
+		propertiesMap.put(RoutingConstants.SCA_ROUTING_SERVICE_ZONE,
+				routingProperties.getZone());
+		RoutingZuulContext.getCurrentContext().setZone(routingProperties.getZone());
+		propertiesMap.put(RoutingConstants.SCA_ROUTING_SERVICE_REGION,
+				routingProperties.getRegion());
+		RoutingZuulContext.getCurrentContext().setRegion(routingProperties.getRegion());
+
+		RoutingZuulContext.getCurrentContext()
+				.setHttpServletRequest(context.getRequest());
+
+		propertiesMap.forEach((k, v) -> RoutingZuulFilterResolver.setHeader(context, k, v,
+				zuulHeaderPriority));
+
+	}
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-zuul-adapter/src/main/java/com/alibaba/cloud/routing/zuul/util/RoutingZuulFilterResolver.java b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-zuul-adapter/src/main/java/com/alibaba/cloud/routing/zuul/util/RoutingZuulFilterResolver.java
new file mode 100644
index 00000000..12909971
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-zuul-adapter/src/main/java/com/alibaba/cloud/routing/zuul/util/RoutingZuulFilterResolver.java
@@ -0,0 +1,54 @@
+/*
+ * Copyright 2022-2023 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.alibaba.cloud.routing.zuul.util;
+
+import com.alibaba.cloud.commons.lang.StringUtils;
+import com.netflix.zuul.context.RequestContext;
+
+/**
+ * @author yuluo
+ * @author 1481556636@qq.com
+ */
+
+public final class RoutingZuulFilterResolver {
+
+	private RoutingZuulFilterResolver() {
+	}
+
+	public static void setHeader(RequestContext context, String headerName,
+			String headerValue, Boolean zuulHeaderPriority) {
+		if (StringUtils.isEmpty(headerValue)) {
+			return;
+		}
+
+		if (zuulHeaderPriority) {
+
+			context.addZuulRequestHeader(headerName, headerValue);
+		}
+		else {
+
+			String header = context.getRequest().getHeader(headerName);
+
+			if (StringUtils.isEmpty(header)) {
+
+				context.addZuulRequestHeader(headerName, headerValue);
+			}
+
+		}
+	}
+
+}
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-zuul-adapter/src/main/resources/META-INF/additional-spring-configuration-metadata.json b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-zuul-adapter/src/main/resources/META-INF/additional-spring-configuration-metadata.json
new file mode 100644
index 00000000..a186a01d
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-zuul-adapter/src/main/resources/META-INF/additional-spring-configuration-metadata.json
@@ -0,0 +1,16 @@
+{
+  "properties": [
+    {
+      "name": "spring.cloud.governance.routing.zuul.filter.order",
+      "type": "java.lang.Integer",
+      "defaultValue": 0,
+      "description": "Strategy zuul route filter order."
+    },
+    {
+      "name": "spring.cloud.governance.routing.zuul.header.priority",
+      "type": "java.lang.Boolean",
+      "defaultValue": true,
+      "description": "Whether strategy zuul header priority is enabled."
+    }
+  ]
+}
\ No newline at end of file
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-zuul-adapter/src/main/resources/META-INF/spring.factories b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-zuul-adapter/src/main/resources/META-INF/spring.factories
new file mode 100644
index 00000000..eb9bd226
--- /dev/null
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-governance-routing/spring-cloud-alibaba-routing-zuul-adapter/src/main/resources/META-INF/spring.factories
@@ -0,0 +1,2 @@
+org.springframework.boot.autoconfigure.EnableAutoConfiguration=\
+  com.alibaba.cloud.routing.zuul.configuration.RoutingZuulConfiguration
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-opensergo-adapter/pom.xml b/spring-cloud-alibaba-starters/spring-cloud-starter-opensergo-adapter/pom.xml
index a31c1feb..9fa05397 100644
--- a/spring-cloud-alibaba-starters/spring-cloud-starter-opensergo-adapter/pom.xml
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-opensergo-adapter/pom.xml
@@ -39,7 +39,7 @@
         </dependency>
         <dependency>
             <groupId>com.alibaba.cloud</groupId>
-            <artifactId>spring-cloud-starter-alibaba-governance-routing</artifactId>
+            <artifactId>spring-cloud-alibaba-routing-starter</artifactId>
             <scope>test</scope>
         </dependency>
         <dependency>
diff --git a/spring-cloud-alibaba-starters/spring-cloud-starter-xds-adapter/pom.xml b/spring-cloud-alibaba-starters/spring-cloud-starter-xds-adapter/pom.xml
index e47afe0a..a1d7bd68 100644
--- a/spring-cloud-alibaba-starters/spring-cloud-starter-xds-adapter/pom.xml
+++ b/spring-cloud-alibaba-starters/spring-cloud-starter-xds-adapter/pom.xml
@@ -82,9 +82,10 @@
 
         <dependency>
             <groupId>com.alibaba.cloud</groupId>
-            <artifactId>spring-cloud-starter-alibaba-governance-routing</artifactId>
+            <artifactId>spring-cloud-alibaba-routing-starter</artifactId>
             <scope>test</scope>
         </dependency>
+
         <dependency>
             <groupId>org.springframework.cloud</groupId>
             <artifactId>spring-cloud-starter-openfeign</artifactId>
