diff --git a/examples/pp-example.ipynb b/examples/pp-example.ipynb
index f6efa290..f1d16e0a 100644
--- a/examples/pp-example.ipynb
+++ b/examples/pp-example.ipynb
@@ -141,6 +141,15 @@
       "names.append(\"he3\")\n",
       "names.append(\"he4\")\n",
       "\n",
+      "def to_composition(Y):\n",
+      "    \"\"\"Convert an array of molar fractions to a Composition object.\"\"\"\n",
+      "    from pynucastro import Composition, Nucleus\n",
+      "    nuclei = [Nucleus.from_cache(name) for name in names]\n",
+      "    comp = Composition(nuclei)\n",
+      "    for i, nuc in enumerate(nuclei):\n",
+      "        comp.X[nuc] = Y[i] * A[i]\n",
+      "    return comp\n",
+      "\n",
       "@jitclass([\n",
       "    (\"p_p__d__weak__electron_capture\", numba.float64),\n",
       "    (\"p_d__he3\", numba.float64),\n",
diff --git a/examples/pynet_approx_example.ipynb b/examples/pynet_approx_example.ipynb
index 1095f1d6..06cfc5ad 100644
--- a/examples/pynet_approx_example.ipynb
+++ b/examples/pynet_approx_example.ipynb
@@ -256,6 +256,15 @@
       "names.append(\"si28\")\n",
       "names.append(\"s32\")\n",
       "\n",
+      "def to_composition(Y):\n",
+      "    \"\"\"Convert an array of molar fractions to a Composition object.\"\"\"\n",
+      "    from pynucastro import Composition, Nucleus\n",
+      "    nuclei = [Nucleus.from_cache(name) for name in names]\n",
+      "    comp = Composition(nuclei)\n",
+      "    for i, nuc in enumerate(nuclei):\n",
+      "        comp.X[nuc] = Y[i] * A[i]\n",
+      "    return comp\n",
+      "\n",
       "@jitclass([\n",
       "    (\"he4_mg24__si28__removed\", numba.float64),\n",
       "    (\"he4_mg24__p_al27__removed\", numba.float64),\n",
diff --git a/examples/pynucastro-integration.ipynb b/examples/pynucastro-integration.ipynb
index 4b08fa5b..a9df137b 100644
--- a/examples/pynucastro-integration.ipynb
+++ b/examples/pynucastro-integration.ipynb
@@ -269,6 +269,15 @@
       "names.append(\"o14\")\n",
       "names.append(\"o15\")\n",
       "\n",
+      "def to_composition(Y):\n",
+      "    \"\"\"Convert an array of molar fractions to a Composition object.\"\"\"\n",
+      "    from pynucastro import Composition, Nucleus\n",
+      "    nuclei = [Nucleus.from_cache(name) for name in names]\n",
+      "    comp = Composition(nuclei)\n",
+      "    for i, nuc in enumerate(nuclei):\n",
+      "        comp.X[nuc] = Y[i] * A[i]\n",
+      "    return comp\n",
+      "\n",
       "@jitclass([\n",
       "    (\"p_c12__n13\", numba.float64),\n",
       "    (\"p_c13__n14\", numba.float64),\n",
