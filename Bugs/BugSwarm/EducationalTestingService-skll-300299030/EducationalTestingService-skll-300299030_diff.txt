diff --git a/skll/experiments.py b/skll/experiments.py
index e4e7ef9c..1d791341 100644
--- a/skll/experiments.py
+++ b/skll/experiments.py
@@ -1219,12 +1219,12 @@ def _compute_ylimits_for_featureset(df, metrics):
         # squeeze the limits to hide unnecessary parts of the graph
         # set the limits with a little buffer on either side but not too much
         if min_score < 0:
-            lower_limit = max(min_score - 0.1, math.floor(min_score))
+            lower_limit = max(min_score - 0.1, math.floor(min_score) - 0.05)
         else:
             lower_limit = 0
 
         if max_score > 0:
-            upper_limit = min(max_score + 0.1, math.ceil(max_score))
+            upper_limit = min(max_score + 0.1, math.ceil(max_score) + 0.05)
             # upper_limit = 1.1 if max_score >= 1 else math.ceil(max_score)
         else:
             upper_limit = 0
diff --git a/tests/test_output.py b/tests/test_output.py
index 997651c3..2b1930aa 100644
--- a/tests/test_output.py
+++ b/tests/test_output.py
@@ -483,7 +483,7 @@ def test_learning_curve_implementation():
 
 def test_learning_curve_output():
     """
-    Test learning output for experiment with metrics option
+    Test learning curve output for experiment with metrics option
     """
 
     # Test to validate learning curve output
@@ -520,7 +520,7 @@ def test_learning_curve_output():
 
 def test_learning_curve_output_with_objectives():
     """
-    Test learning output for experiment with objectives option
+    Test learning curve output for experiment with objectives option
     """
 
     # Test to validate learning curve output
@@ -620,5 +620,7 @@ def test_learning_curve_ylimits():
     ylimits_dict = _compute_ylimits_for_featureset(df_test, ['r2', 'neg_mean_squared_error'])
 
     eq_(len(ylimits_dict), 2)
-    eq_(ylimits_dict['neg_mean_squared_error'], (-4, 0))
-    eq_(ylimits_dict['r2'], (0, 1.1))
+    assert_almost_equal(ylimits_dict['neg_mean_squared_error'][0], -3.94, decimal=2)
+    eq_(ylimits_dict['neg_mean_squared_error'][1], 0)
+    eq_(ylimits_dict['r2'][0], 0)
+    assert_almost_equal(ylimits_dict['r2'][1], 0.67, decimal=2)
