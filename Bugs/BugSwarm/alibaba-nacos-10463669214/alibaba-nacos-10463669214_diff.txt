diff --git a/client/src/main/java/com/alibaba/nacos/client/auth/impl/process/HttpLoginProcessor.java b/client/src/main/java/com/alibaba/nacos/client/auth/impl/process/HttpLoginProcessor.java
index dde19fefd..1d6447bad 100644
--- a/client/src/main/java/com/alibaba/nacos/client/auth/impl/process/HttpLoginProcessor.java
+++ b/client/src/main/java/com/alibaba/nacos/client/auth/impl/process/HttpLoginProcessor.java
@@ -19,16 +19,16 @@ package com.alibaba.nacos.client.auth.impl.process;
 import com.alibaba.nacos.api.PropertyKeyConst;
 import com.alibaba.nacos.api.common.Constants;
 import com.alibaba.nacos.client.auth.impl.NacosAuthLoginConstant;
-import com.alibaba.nacos.client.utils.ParamUtil;
-import com.alibaba.nacos.common.utils.InternetAddressUtil;
-import com.alibaba.nacos.plugin.auth.api.LoginIdentityContext;
 import com.alibaba.nacos.client.utils.ContextPathUtil;
+import com.alibaba.nacos.client.utils.ParamUtil;
 import com.alibaba.nacos.common.http.HttpRestResult;
 import com.alibaba.nacos.common.http.client.NacosRestTemplate;
 import com.alibaba.nacos.common.http.param.Header;
 import com.alibaba.nacos.common.http.param.Query;
+import com.alibaba.nacos.common.utils.InternetAddressUtil;
 import com.alibaba.nacos.common.utils.JacksonUtils;
 import com.alibaba.nacos.common.utils.StringUtils;
+import com.alibaba.nacos.plugin.auth.api.LoginIdentityContext;
 import com.fasterxml.jackson.databind.JsonNode;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -38,6 +38,7 @@ import java.util.Map;
 import java.util.Properties;
 
 import static com.alibaba.nacos.client.naming.utils.UtilAndComs.webContext;
+import static com.alibaba.nacos.common.constant.RequestUrlConstants.HTTPS_PREFIX;
 import static com.alibaba.nacos.common.constant.RequestUrlConstants.HTTP_PREFIX;
 
 /**
@@ -63,11 +64,11 @@ public class HttpLoginProcessor implements LoginProcessor {
         String contextPath = ContextPathUtil.normalizeContextPath(
                 properties.getProperty(PropertyKeyConst.CONTEXT_PATH, webContext));
         String server = properties.getProperty(NacosAuthLoginConstant.SERVER, StringUtils.EMPTY);
-        String[] serverAddrArr = InternetAddressUtil.splitIPPortStr(server);
-        if (serverAddrArr.length == 1) {
-            server = HTTP_PREFIX + serverAddrArr[0] + InternetAddressUtil.IP_PORT_SPLITER
-                    + ParamUtil.getDefaultServerPort();
-        } else {
+        
+        if (!server.startsWith(HTTPS_PREFIX) && !server.startsWith(HTTP_PREFIX)) {
+            if (!InternetAddressUtil.containsPort(server)) {
+                server = server + InternetAddressUtil.IP_PORT_SPLITER + ParamUtil.getDefaultServerPort();
+            }
             server = HTTP_PREFIX + server;
         }
         
diff --git a/client/src/main/java/com/alibaba/nacos/client/config/impl/ServerListManager.java b/client/src/main/java/com/alibaba/nacos/client/config/impl/ServerListManager.java
index 8b973bd52..4977a9e3f 100644
--- a/client/src/main/java/com/alibaba/nacos/client/config/impl/ServerListManager.java
+++ b/client/src/main/java/com/alibaba/nacos/client/config/impl/ServerListManager.java
@@ -31,8 +31,8 @@ import com.alibaba.nacos.common.http.param.Header;
 import com.alibaba.nacos.common.http.param.Query;
 import com.alibaba.nacos.common.lifecycle.Closeable;
 import com.alibaba.nacos.common.notify.NotifyCenter;
-import com.alibaba.nacos.common.utils.InternetAddressUtil;
 import com.alibaba.nacos.common.utils.IoUtils;
+import com.alibaba.nacos.common.utils.InternetAddressUtil;
 import com.alibaba.nacos.common.utils.StringUtils;
 import com.alibaba.nacos.common.utils.ThreadUtils;
 import org.slf4j.Logger;
@@ -49,6 +49,9 @@ import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 
+import static com.alibaba.nacos.common.constant.RequestUrlConstants.HTTPS_PREFIX;
+import static com.alibaba.nacos.common.constant.RequestUrlConstants.HTTP_PREFIX;
+
 /**
  * Serverlist Manager.
  *
@@ -130,8 +133,8 @@ public class ServerListManager implements Closeable {
         for (String serverAddr : fixed) {
             String[] serverAddrArr = InternetAddressUtil.splitIPPortStr(serverAddr);
             if (serverAddrArr.length == 1) {
-                serverAddrs.add(
-                        serverAddrArr[0] + InternetAddressUtil.IP_PORT_SPLITER + ParamUtil.getDefaultServerPort());
+                serverAddrs
+                        .add(serverAddrArr[0] + InternetAddressUtil.IP_PORT_SPLITER + ParamUtil.getDefaultServerPort());
             } else {
                 serverAddrs.add(serverAddr);
             }
@@ -195,7 +198,17 @@ public class ServerListManager implements Closeable {
             StringTokenizer serverAddrsTokens = new StringTokenizer(this.serverAddrsStr, ",;");
             while (serverAddrsTokens.hasMoreTokens()) {
                 String serverAddr = serverAddrsTokens.nextToken().trim();
-                serverAddrs.add(serverAddr);
+                if (serverAddr.startsWith(HTTP_PREFIX) || serverAddr.startsWith(HTTPS_PREFIX)) {
+                    serverAddrs.add(serverAddr);
+                } else {
+                    String[] serverAddrArr = InternetAddressUtil.splitIPPortStr(serverAddr);
+                    if (serverAddrArr.length == 1) {
+                        serverAddrs.add(HTTP_PREFIX + serverAddrArr[0] + InternetAddressUtil.IP_PORT_SPLITER + ParamUtil
+                                .getDefaultServerPort());
+                    } else {
+                        serverAddrs.add(HTTP_PREFIX + serverAddr);
+                    }
+                }
             }
             this.serverUrls = serverAddrs;
             this.name = initServerName(properties);
@@ -223,9 +236,9 @@ public class ServerListManager implements Closeable {
                         : "") + getFixedNameSuffix(serverUrls.toArray(new String[0]));
             } else {
                 //if use endpoint ,  use endpoint ,content path ,serverlist name
-                serverName = CUSTOM_NAME + "-" + String.join("_", endpoint, String.valueOf(endpointPort), contentPath,
-                        serverListName) + (StringUtils.isNotBlank(namespace) ? ("_" + StringUtils.trim(namespace))
-                        : "");
+                serverName = CUSTOM_NAME + "-" + String
+                        .join("_", endpoint, String.valueOf(endpointPort), contentPath, serverListName) + (
+                        StringUtils.isNotBlank(namespace) ? ("_" + StringUtils.trim(namespace)) : "");
             }
         }
         serverName = serverName.replaceAll("\\/", "_");
@@ -247,8 +260,8 @@ public class ServerListManager implements Closeable {
             hasQueryString = true;
         }
         if (properties != null && properties.containsKey(PropertyKeyConst.ENDPOINT_QUERY_PARAMS)) {
-            addressServerUrlTem.append(
-                    hasQueryString ? "&" : "?" + properties.getProperty(PropertyKeyConst.ENDPOINT_QUERY_PARAMS));
+            addressServerUrlTem
+                    .append(hasQueryString ? "&" : "?" + properties.getProperty(PropertyKeyConst.ENDPOINT_QUERY_PARAMS));
             
         }
         
@@ -271,9 +284,9 @@ public class ServerListManager implements Closeable {
     
     private String initEndpoint(final NacosClientProperties properties) {
         
-        String endpointPortTmp = TemplateUtils.stringEmptyAndThenExecute(
-                properties.getProperty(PropertyKeyConst.SystemEnv.ALIBABA_ALIWARE_ENDPOINT_PORT),
-                () -> properties.getProperty(PropertyKeyConst.ENDPOINT_PORT));
+        String endpointPortTmp = TemplateUtils
+                .stringEmptyAndThenExecute(properties.getProperty(PropertyKeyConst.SystemEnv.ALIBABA_ALIWARE_ENDPOINT_PORT),
+                        () -> properties.getProperty(PropertyKeyConst.ENDPOINT_PORT));
         
         if (StringUtils.isNotBlank(endpointPortTmp)) {
             this.endpointPort = Integer.parseInt(endpointPortTmp);
@@ -375,7 +388,14 @@ public class ServerListManager implements Closeable {
             return;
         }
         
-        List<String> newServerAddrList = new ArrayList<>(newList);
+        List<String> newServerAddrList = new ArrayList<>();
+        for (String server : newList) {
+            if (server.startsWith(HTTP_PREFIX) || server.startsWith(HTTPS_PREFIX)) {
+                newServerAddrList.add(server);
+            } else {
+                newServerAddrList.add(HTTP_PREFIX + server);
+            }
+        }
         
         /*
          no change
