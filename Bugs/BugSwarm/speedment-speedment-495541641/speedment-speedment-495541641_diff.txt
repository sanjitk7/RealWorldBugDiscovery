diff --git a/runtime-parent/runtime-application/src/main/java/com/speedment/runtime/application/RuntimeBundle.java b/runtime-parent/runtime-application/src/main/java/com/speedment/runtime/application/RuntimeBundle.java
index d70924bb2..d877b00b6 100644
--- a/runtime-parent/runtime-application/src/main/java/com/speedment/runtime/application/RuntimeBundle.java
+++ b/runtime-parent/runtime-application/src/main/java/com/speedment/runtime/application/RuntimeBundle.java
@@ -21,15 +21,7 @@ import com.speedment.runtime.connector.mariadb.MariaDbBundle;
 import com.speedment.runtime.connector.mysql.MySqlBundle;
 import com.speedment.runtime.connector.postgres.PostgresBundle;
 import com.speedment.runtime.connector.sqlite.SqliteBundle;
-import com.speedment.runtime.core.internal.component.ConnectionPoolComponentImpl;
-import com.speedment.runtime.core.internal.component.DbmsHandlerComponentImpl;
-import com.speedment.runtime.core.internal.component.EntityManagerImpl;
-import com.speedment.runtime.core.internal.component.InfoComponentImpl;
-import com.speedment.runtime.core.internal.component.ManagerComponentImpl;
-import com.speedment.runtime.core.internal.component.PasswordComponentImpl;
-import com.speedment.runtime.core.internal.component.ProjectComponentImpl;
-import com.speedment.runtime.core.internal.component.StatisticsReporterComponentImpl;
-import com.speedment.runtime.core.internal.component.StatisticsReporterSchedulerComponentImpl;
+import com.speedment.runtime.core.internal.component.*;
 import com.speedment.runtime.core.internal.component.resultset.ResultSetMapperComponentImpl;
 import com.speedment.runtime.core.internal.component.sql.SqlPersistanceComponentImpl;
 import com.speedment.runtime.core.internal.component.sql.SqlStreamOptimizerComponentImpl;
@@ -67,7 +59,8 @@ public class RuntimeBundle implements InjectBundle {
             SqlStreamOptimizerComponentImpl.class,
             SqlStreamTerminatorComponentImpl.class,
             TransactionComponentImpl.class,
-            DriverComponentImpl.class
+            DriverComponentImpl.class,
+            DefaultConnectionDecorator.class
         )
             .withBundle(new MySqlBundle())
             .withBundle(new MariaDbBundle())
diff --git a/runtime-parent/runtime-core/src/main/java/com/speedment/runtime/core/internal/component/ConnectionPoolComponentImpl.java b/runtime-parent/runtime-core/src/main/java/com/speedment/runtime/core/internal/component/ConnectionPoolComponentImpl.java
index 527955101..8666a8572 100644
--- a/runtime-parent/runtime-core/src/main/java/com/speedment/runtime/core/internal/component/ConnectionPoolComponentImpl.java
+++ b/runtime-parent/runtime-core/src/main/java/com/speedment/runtime/core/internal/component/ConnectionPoolComponentImpl.java
@@ -76,6 +76,13 @@ public class ConnectionPoolComponentImpl implements ConnectionPoolComponent {
         leasedConnections = new ConcurrentHashMap<>();
     }
 
+    /* For testing only */
+    ConnectionPoolComponentImpl(ConnectionDecorator  connectionDecorator) {
+        this();
+        this.connectionDecorator = connectionDecorator;
+    }
+
+
     @ExecuteBefore(State.STOPPED)
     void closeOpenConnections() {
         leasedConnections.values().forEach(conn -> {
diff --git a/runtime-parent/runtime-core/src/main/java/com/speedment/runtime/core/internal/component/DefaultConnectionDecorator.java b/runtime-parent/runtime-core/src/main/java/com/speedment/runtime/core/internal/component/DefaultConnectionDecorator.java
new file mode 100644
index 000000000..b216b38c0
--- /dev/null
+++ b/runtime-parent/runtime-core/src/main/java/com/speedment/runtime/core/internal/component/DefaultConnectionDecorator.java
@@ -0,0 +1,24 @@
+package com.speedment.runtime.core.internal.component;
+
+import com.speedment.runtime.core.component.connectionpool.ConnectionDecorator;
+
+import java.sql.Connection;
+import java.sql.SQLException;
+
+/**
+ * This {@link ConnectionDecorator} does nothing with the connection and
+ * is used as the default ConnectionDecorator.
+ */
+public class DefaultConnectionDecorator implements ConnectionDecorator {
+
+    @Override
+    public void configure(Connection connection) throws SQLException {
+       // Do nothing
+    }
+
+    @Override
+    public void cleanup(Connection connection) throws SQLException {
+        // Do nothing
+    }
+
+}
diff --git a/runtime-parent/runtime-core/src/test/java/com/speedment/runtime/core/internal/component/ConnectionPoolComponentImplTest.java b/runtime-parent/runtime-core/src/test/java/com/speedment/runtime/core/internal/component/ConnectionPoolComponentImplTest.java
index c5187412b..4ae5e7bfa 100644
--- a/runtime-parent/runtime-core/src/test/java/com/speedment/runtime/core/internal/component/ConnectionPoolComponentImplTest.java
+++ b/runtime-parent/runtime-core/src/test/java/com/speedment/runtime/core/internal/component/ConnectionPoolComponentImplTest.java
@@ -14,14 +14,10 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-/*
- * To change this license header, choose License Headers in Project Properties.
- * To change this template file, choose Tools | Templates
- * and open the template in the editor.
- */
 package com.speedment.runtime.core.internal.component;
 
 
+import com.speedment.runtime.core.component.connectionpool.ConnectionDecorator;
 import com.speedment.runtime.core.component.connectionpool.PoolableConnection;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Disabled;
@@ -37,22 +33,26 @@ import static org.junit.jupiter.api.Assertions.*;
  *
  * @author pemi
  */
-public class ConnectionPoolComponentImplTest {
+final class ConnectionPoolComponentImplTest {
+
+    private static final ConnectionDecorator CONNECTION_DECORATOR = connection -> {};
 
     private ConnectionPoolComponentImpl instance;
 
     @BeforeEach
-    public void setUp() {
-        instance = new ConnectionPoolComponentImpl() {
+    void setUp() {
+        instance = new ConnectionPoolComponentImpl(CONNECTION_DECORATOR) {
+
             @Override
             public Connection newConnection(String uri, String user, char[] password) {
                 return new DummyConnectionImpl(uri, user, password);
             }
+
         };
     }
 
     @Test
-    public void testGetConnection() throws Exception {
+    void testGetConnection() throws Exception {
         String uri = "thecooldatabase";
         String user = "tryggve";
         char[] password = "arne".toCharArray();
@@ -61,7 +61,7 @@ public class ConnectionPoolComponentImplTest {
     }
 
     @Test
-    public void testReturnConnection() throws Exception {
+    void testReturnConnection() throws Exception {
         String uri = "thecooldatabase";
         String user = "tryggve";
         char[] password = "arne".toCharArray();
@@ -70,7 +70,7 @@ public class ConnectionPoolComponentImplTest {
     }
 
     @Test
-    public void testNewConnection() throws Exception {
+    void testNewConnection() throws Exception {
         String uri = "someurl";
         String user = "a";
         char[] password = "b".toCharArray();
@@ -80,7 +80,7 @@ public class ConnectionPoolComponentImplTest {
     }
 
     @Test
-    public void testGetMaxAge() {
+    void testGetMaxAge() {
         long result = instance.getMaxAge();
         assertTrue(result >= 0);
         instance.setMaxAge(60_000);
@@ -88,7 +88,7 @@ public class ConnectionPoolComponentImplTest {
     }
 
     @Test
-    public void testSetMaxAge() {
+    void testSetMaxAge() {
         instance.setMaxAge(40_000);
         assertEquals(40_000, instance.getMaxAge());
     }
@@ -104,7 +104,7 @@ public class ConnectionPoolComponentImplTest {
     // Leaking connections
     @Test
     @Disabled
-    public void testLeak() throws Exception {
+    void testLeak() throws Exception {
         String uri = "thecooldatabase";
         String user = "tryggve";
         char[] password = "arne".toCharArray();
@@ -118,7 +118,7 @@ public class ConnectionPoolComponentImplTest {
     }
 
     @Test
-    public void testMaxOutAndReturn() throws Exception {
+    void testMaxOutAndReturn() throws Exception {
         String uri = "thecooldatabase";
         String user = "tryggve";
         char[] password = "arne".toCharArray();
@@ -146,13 +146,13 @@ public class ConnectionPoolComponentImplTest {
      * Test of setPoolSize method, of class ConnectionPoolComponentImpl.
      */
     @Test
-    public void testSetPoolSize() {
+    void testSetPoolSize() {
         int poolSize = 40;
         instance.setMaxRetainSize(poolSize);
         assertEquals(instance.getMaxRetainSize(), 40);
     }
 
-    private class DummyConnectionImpl implements Connection {
+    private static final class DummyConnectionImpl implements Connection {
 
         final String uri;
         final String user;
@@ -442,7 +442,7 @@ public class ConnectionPoolComponentImplTest {
 
     }
 
-    private void log(String msg) {
+    private static void log(String msg) {
         //System.out.println(new Timestamp(System.currentTimeMillis()) + " " + msg);
     }
 
