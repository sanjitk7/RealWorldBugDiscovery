diff --git a/docs/sql/statements/alter-table.rst b/docs/sql/statements/alter-table.rst
index 77c84e9862..38d53954aa 100644
--- a/docs/sql/statements/alter-table.rst
+++ b/docs/sql/statements/alter-table.rst
@@ -26,7 +26,7 @@ Synopsis
       { SET ( parameter = value [ , ... ] )
         | RESET ( parameter [ , ... ] )
         | { ADD [ COLUMN ] column_name data_type [ column_constraint [ ... ] ] } [, ... ]
-        | { DROP [ COLUMN ] column_name } [, ... ]
+        | { DROP [ COLUMN ] [ IF EXISTS ] column_name } [, ... ]
         | OPEN
         | CLOSE
         | RENAME TO table_ident
diff --git a/server/src/main/java/io/crate/analyze/AnalyzedAlterTableDropColumn.java b/server/src/main/java/io/crate/analyze/AnalyzedAlterTableDropColumn.java
index cef183bad7..7abca4736f 100644
--- a/server/src/main/java/io/crate/analyze/AnalyzedAlterTableDropColumn.java
+++ b/server/src/main/java/io/crate/analyze/AnalyzedAlterTableDropColumn.java
@@ -29,9 +29,10 @@ import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.common.io.stream.StreamOutput;
 
 import io.crate.expression.symbol.Symbol;
-import io.crate.expression.symbol.SymbolType;
+import io.crate.expression.symbol.Symbols;
 import io.crate.metadata.Reference;
 import io.crate.metadata.doc.DocTableInfo;
+import org.elasticsearch.common.io.stream.Writeable;
 
 public record AnalyzedAlterTableDropColumn(DocTableInfo table, List<DropColumn> columns) implements DDLStatement {
 
@@ -44,15 +45,16 @@ public record AnalyzedAlterTableDropColumn(DocTableInfo table, List<DropColumn>
     public void visitSymbols(Consumer<? super Symbol> consumer) {
     }
 
-    public record DropColumn(Reference ref, boolean ifExists) {
-        public static void toStream(StreamOutput out, DropColumn dropColumn) throws IOException {
-            out.writeVInt(dropColumn.ref.symbolType().ordinal());
-            dropColumn.ref.writeTo(out);
-            out.writeBoolean(dropColumn.ifExists);
+    public record DropColumn(Reference ref, boolean ifExists) implements Writeable {
+
+        public DropColumn(StreamInput in) throws IOException {
+            this((Reference) Symbols.fromStream(in), in.readBoolean());
         }
 
-        public static DropColumn fromStream(StreamInput in) throws IOException {
-            return new DropColumn((Reference) SymbolType.VALUES.get(in.readVInt()).newInstance(in), in.readBoolean());
+        @Override
+        public void writeTo(StreamOutput out) throws IOException {
+            Symbols.toStream(ref, out);
+            out.writeBoolean(ifExists);
         }
     }
 }
diff --git a/server/src/main/java/io/crate/execution/ddl/tables/DropColumnRequest.java b/server/src/main/java/io/crate/execution/ddl/tables/DropColumnRequest.java
index 0cda8bc110..632a002ded 100644
--- a/server/src/main/java/io/crate/execution/ddl/tables/DropColumnRequest.java
+++ b/server/src/main/java/io/crate/execution/ddl/tables/DropColumnRequest.java
@@ -47,14 +47,14 @@ public class DropColumnRequest extends AcknowledgedRequest<DropColumnRequest> {
     public DropColumnRequest(StreamInput in) throws IOException {
         super(in);
         this.relationName = new RelationName(in);
-        this.colsToDrop = in.readList(DropColumn::fromStream);
+        this.colsToDrop = in.readList(DropColumn::new);
     }
 
     @Override
     public void writeTo(StreamOutput out) throws IOException {
         super.writeTo(out);
         relationName.writeTo(out);
-        out.writeCollection(colsToDrop, DropColumn::toStream);
+        out.writeCollection(colsToDrop);
     }
 
     @NotNull
diff --git a/server/src/main/java/io/crate/execution/ddl/tables/MappingUtil.java b/server/src/main/java/io/crate/execution/ddl/tables/MappingUtil.java
index d4637d1baf..8782c3b8af 100644
--- a/server/src/main/java/io/crate/execution/ddl/tables/MappingUtil.java
+++ b/server/src/main/java/io/crate/execution/ddl/tables/MappingUtil.java
@@ -29,7 +29,6 @@ import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.List;
-import java.util.Locale;
 import java.util.Map;
 import java.util.function.ToIntFunction;
 
diff --git a/server/src/main/java/io/crate/metadata/pgcatalog/PgAttributeTable.java b/server/src/main/java/io/crate/metadata/pgcatalog/PgAttributeTable.java
index c28e268b96..35fd309c9b 100644
--- a/server/src/main/java/io/crate/metadata/pgcatalog/PgAttributeTable.java
+++ b/server/src/main/java/io/crate/metadata/pgcatalog/PgAttributeTable.java
@@ -28,8 +28,6 @@ import io.crate.protocols.postgres.types.PGTypes;
 import io.crate.types.DataTypes;
 import io.crate.types.Regclass;
 
-import java.util.Locale;
-
 import static io.crate.execution.ddl.tables.MappingUtil.DROPPED_COLUMN_NAME_PREFIX;
 import static io.crate.types.DataTypes.BOOLEAN;
 import static io.crate.types.DataTypes.INTEGER;
diff --git a/server/src/test/java/io/crate/analyze/DropColumnTest.java b/server/src/test/java/io/crate/analyze/DropColumnTest.java
index 4fd3dce166..4b4e69a8f3 100644
--- a/server/src/test/java/io/crate/analyze/DropColumnTest.java
+++ b/server/src/test/java/io/crate/analyze/DropColumnTest.java
@@ -67,10 +67,10 @@ public class DropColumnTest extends ESTestCase {
         DropColumn dropColumn = new DropColumn(reference, ifExists);
 
         BytesStreamOutput out = new BytesStreamOutput();
-        DropColumn.toStream(out, dropColumn);
+        dropColumn.writeTo(out);
 
         StreamInput in = out.bytes().streamInput();
-        DropColumn dropColumn2 = DropColumn.fromStream(in);
+        DropColumn dropColumn2 = new DropColumn(in);
 
         assertThat(dropColumn2).isEqualTo(dropColumn);
     }
