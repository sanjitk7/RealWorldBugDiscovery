diff --git a/manager/src/main/java/org/dromara/hertzbeat/manager/service/impl/MonitorServiceImpl.java b/manager/src/main/java/org/dromara/hertzbeat/manager/service/impl/MonitorServiceImpl.java
index 5fe74118..9cb2d6ca 100644
--- a/manager/src/main/java/org/dromara/hertzbeat/manager/service/impl/MonitorServiceImpl.java
+++ b/manager/src/main/java/org/dromara/hertzbeat/manager/service/impl/MonitorServiceImpl.java
@@ -78,27 +78,27 @@ import java.util.stream.Collectors;
 @Slf4j
 public class MonitorServiceImpl implements MonitorService {
     private static final Long MONITOR_ID_TMP = 1000000000L;
-
+    
     public static final String HTTP = "http://";
     public static final String HTTPS = "https://";
     public static final String BLANK = "";
-    public static final String PATTERN_HTTP  = "(?i)http://";
-    public static final String PATTERN_HTTPS  = "(?i)https://";
-
+    public static final String PATTERN_HTTP = "(?i)http://";
+    public static final String PATTERN_HTTPS = "(?i)https://";
+    
     private static final Gson GSON = new Gson();
-
+    
     @Autowired
     private AppService appService;
-
+    
     @Autowired
     private TagService tagService;
     
     @Autowired
     private CollectJobScheduling collectJobScheduling;
-
+    
     @Autowired
     private MonitorDao monitorDao;
-
+    
     @Autowired
     private ParamDao paramDao;
     
@@ -107,22 +107,22 @@ public class MonitorServiceImpl implements MonitorService {
     
     @Autowired
     private CollectorMonitorBindDao collectorMonitorBindDao;
-
+    
     @Autowired
     private AlertDefineBindDao alertDefineBindDao;
-
+    
     @Autowired
     private TagMonitorBindDao tagMonitorBindDao;
     
     @Autowired
     private ApplicationContext applicationContext;
-
+    
     private final Map<String, ImExportService> imExportServiceMap = new HashMap<>();
-
+    
     public MonitorServiceImpl(List<ImExportService> imExportServiceList) {
         imExportServiceList.forEach(it -> imExportServiceMap.put(it.type(), it));
     }
-
+    
     @Override
     @Transactional(readOnly = true)
     public void detectMonitor(Monitor monitor, List<Param> params, String collector) throws MonitorDetectException {
@@ -135,12 +135,12 @@ public class MonitorServiceImpl implements MonitorService {
         appDefine.setCyclic(false);
         appDefine.setTimestamp(System.currentTimeMillis());
         List<Configmap> configmaps = params.stream().map(param ->
-                new Configmap(param.getField(), param.getValue(), param.getType())).collect(Collectors.toList());
+                                                                 new Configmap(param.getField(), param.getValue(), param.getType())).collect(Collectors.toList());
         appDefine.setConfigmap(configmaps);
         // To detect availability, you only need to collect the set of availability indicators with a priority of 0.
         // 探测可用性只需要采集优先级为0的可用性指标集合
         List<Metrics> availableMetrics = appDefine.getMetrics().stream()
-                .filter(item -> item.getPriority() == 0).collect(Collectors.toList());
+                                                 .filter(item -> item.getPriority() == 0).collect(Collectors.toList());
         appDefine.setMetrics(availableMetrics);
         List<CollectRep.MetricsData> collectRep;
         if (collector != null) {
@@ -157,7 +157,7 @@ public class MonitorServiceImpl implements MonitorService {
             throw new MonitorDetectException(collectRep.get(0).getMsg());
         }
     }
-
+    
     @Override
     @Transactional(rollbackFor = Exception.class)
     public void addMonitor(Monitor monitor, List<Param> params, String collector) throws RuntimeException {
@@ -182,16 +182,16 @@ public class MonitorServiceImpl implements MonitorService {
             return new Configmap(param.getField(), param.getValue(), param.getType());
         }).collect(Collectors.toList());
         appDefine.setConfigmap(configmaps);
-
+        
         long jobId = collector == null ? collectJobScheduling.addAsyncCollectJob(appDefine) :
-                collectJobScheduling.addAsyncCollectJob(appDefine, collector);
-
+                             collectJobScheduling.addAsyncCollectJob(appDefine, collector);
+        
         try {
             if (collector != null) {
                 CollectorMonitorBind collectorMonitorBind = CollectorMonitorBind.builder()
-                        .collector(collector)
-                        .monitorId(monitorId)
-                        .build();
+                                                                    .collector(collector)
+                                                                    .monitorId(monitorId)
+                                                                    .build();
                 collectorMonitorBindDao.save(collectorMonitorBind);
             }
             monitor.setId(monitorId);
@@ -205,7 +205,7 @@ public class MonitorServiceImpl implements MonitorService {
             throw new MonitorDatabaseException(e.getMessage());
         }
     }
-
+    
     @Override
     public void addNewMonitorOptionalMetrics(List<String> metrics, Monitor monitor, List<Param> params) {
         long monitorId = SnowFlakeIdGenerator.generateId();
@@ -220,12 +220,12 @@ public class MonitorServiceImpl implements MonitorService {
         //设置用户可选指标
         List<Metrics> metricsDefine = appDefine.getMetrics();
         Set<String> metricsDefineNamesSet = metricsDefine.stream()
-                .map(Metrics::getName)
-                .collect(Collectors.toSet());
+                                                    .map(Metrics::getName)
+                                                    .collect(Collectors.toSet());
         if (CollectionUtils.isEmpty(metrics) || !metricsDefineNamesSet.containsAll(metrics)) {
             throw new MonitorMetricsException("no select metrics or select illegal metrics");
         }
-
+        
         List<Metrics> realMetrics = metricsDefine.stream().filter(m -> metrics.contains(m.getName())).collect(Collectors.toList());
         appDefine.setMetrics(realMetrics);
         appDefine.setMonitorId(monitorId);
@@ -256,12 +256,12 @@ public class MonitorServiceImpl implements MonitorService {
             throw new MonitorDatabaseException(e.getMessage());
         }
     }
-
+    
     @Override
     public List<String> getMonitorMetrics(String app) {
         return appService.getAppDefineMetricNames(app);
     }
-
+    
     @Override
     public void export(List<Long> ids, String type, HttpServletResponse res) throws Exception {
         var imExportService = imExportServiceMap.get(type);
@@ -275,7 +275,7 @@ public class MonitorServiceImpl implements MonitorService {
         res.setHeader("Access-Control-Expose-Headers", "Content-Disposition");
         imExportService.exportConfig(res.getOutputStream(), ids);
     }
-
+    
     @Override
     public void importConfig(MultipartFile file) throws Exception {
         var fileName = file.getOriginalFilename();
@@ -298,8 +298,8 @@ public class MonitorServiceImpl implements MonitorService {
         var imExportService = imExportServiceMap.get(type);
         imExportService.importConfig(file.getInputStream());
     }
-
-
+    
+    
     @Override
     @Transactional(readOnly = true)
     public void validate(MonitorDto monitorDto, Boolean isModify) throws IllegalArgumentException {
@@ -309,13 +309,13 @@ public class MonitorServiceImpl implements MonitorService {
         monitor.setHost(monitor.getHost().trim());
         monitor.setName(monitor.getName().trim());
         Map<String, Param> paramMap = monitorDto.getParams()
-                .stream()
-                .peek(param -> {
-                    param.setMonitorId(monitor.getId());
-                    String value = param.getValue() == null ? null : param.getValue().trim();
-                    param.setValue(value);
-                })
-                .collect(Collectors.toMap(Param::getField, param -> param));
+                                              .stream()
+                                              .peek(param -> {
+                                                  param.setMonitorId(monitor.getId());
+                                                  String value = param.getValue() == null ? null : param.getValue().trim();
+                                                  param.setValue(value);
+                                              })
+                                              .collect(Collectors.toMap(Param::getField, param -> param));
         // Check name uniqueness    校验名称唯一性
         if (isModify != null) {
             Optional<Monitor> monitorOptional = monitorDao.findMonitorByNameEquals(monitor.getName());
@@ -359,13 +359,13 @@ public class MonitorServiceImpl implements MonitorService {
                                 doubleValue = Double.parseDouble(param.getValue());
                             } catch (Exception e) {
                                 throw new IllegalArgumentException("Params field " + field + " type "
-                                        + paramDefine.getType() + " is invalid.");
+                                                                           + paramDefine.getType() + " is invalid.");
                             }
                             if (paramDefine.getRange() != null) {
                                 if (!IntervalExpressionUtil.validNumberIntervalExpress(doubleValue,
                                         paramDefine.getRange())) {
                                     throw new IllegalArgumentException("Params field " + field + " type "
-                                            + paramDefine.getType() + " over range " + paramDefine.getRange());
+                                                                               + paramDefine.getType() + " over range " + paramDefine.getRange());
                                 }
                             }
                             param.setType(CommonConstants.PARAM_TYPE_NUMBER);
@@ -374,27 +374,27 @@ public class MonitorServiceImpl implements MonitorService {
                             Short textareaLimit = paramDefine.getLimit();
                             if (textareaLimit != null && param.getValue().length() > textareaLimit) {
                                 throw new IllegalArgumentException("Params field " + field + " type "
-                                        + paramDefine.getType() + " over limit " + param.getValue());
+                                                                           + paramDefine.getType() + " over limit " + param.getValue());
                             }
                             break;
                         case "text":
                             Short textLimit = paramDefine.getLimit();
                             if (textLimit != null && param.getValue().length() > textLimit) {
                                 throw new IllegalArgumentException("Params field " + field + " type "
-                                        + paramDefine.getType() + " over limit " + textLimit);
+                                                                           + paramDefine.getType() + " over limit " + textLimit);
                             }
                             break;
                         case "host":
                             String hostValue = param.getValue();
-                            if(hostValue.toLowerCase().contains(HTTP)){
+                            if (hostValue.toLowerCase().contains(HTTP)) {
                                 hostValue = hostValue.replaceAll(PATTERN_HTTP, BLANK);
                             }
-                            if(hostValue.toLowerCase().contains(HTTPS)){
+                            if (hostValue.toLowerCase().contains(HTTPS)) {
                                 hostValue = hostValue.replace(PATTERN_HTTPS, BLANK);
                             }
                             if (!IpDomainUtil.validateIpDomain(hostValue)) {
                                 throw new IllegalArgumentException("Params field " + field + " value "
-                                        + hostValue + " is invalid host value.");
+                                                                           + hostValue + " is invalid host value.");
                             }
                             break;
                         case "password":
@@ -412,7 +412,7 @@ public class MonitorServiceImpl implements MonitorService {
                             String booleanValue = param.getValue();
                             if (!"true".equalsIgnoreCase(booleanValue) && !"false".equalsIgnoreCase(booleanValue)) {
                                 throw new IllegalArgumentException("Params field " + field + " value "
-                                        + booleanValue + " is invalid boolean value.");
+                                                                           + booleanValue + " is invalid boolean value.");
                             }
                             break;
                         case "radio":
@@ -429,7 +429,7 @@ public class MonitorServiceImpl implements MonitorService {
                             }
                             if (invalid) {
                                 throw new IllegalArgumentException("Params field " + field + " value "
-                                        + param.getValue() + " is invalid option value");
+                                                                           + param.getValue() + " is invalid option value");
                             }
                             break;
                         case "checkbox":
@@ -445,21 +445,21 @@ public class MonitorServiceImpl implements MonitorService {
                             }
                             if (checkboxInvalid) {
                                 throw new IllegalArgumentException("Params field " + field + " value "
-                                        + param.getValue() + " is invalid checkbox value");
+                                                                           + param.getValue() + " is invalid checkbox value");
                             }
                             break;
                         case "key-value":
                             if (JsonUtil.fromJson(param.getValue(), new TypeReference<>() {
                             }) == null) {
                                 throw new IllegalArgumentException("Params field " + field + " value "
-                                        + param.getValue() + " is invalid key-value value");
+                                                                           + param.getValue() + " is invalid key-value value");
                             }
                             break;
                         case "array":
                             String[] arrays = param.getValue().split(",");
                             if (arrays.length == 0) {
                                 throw new IllegalArgumentException("Param field" + field + " value "
-                                        + param.getValue() + " is invalid arrays value");
+                                                                           + param.getValue() + " is invalid arrays value");
                             }
                             if (param.getValue().startsWith("[") && param.getValue().endsWith("]")) {
                                 param.setValue(param.getValue().substring(1, param.getValue().length() - 1));
@@ -474,7 +474,7 @@ public class MonitorServiceImpl implements MonitorService {
             }
         }
     }
-
+    
     @Override
     @Transactional(rollbackFor = Exception.class)
     public void modifyMonitor(Monitor monitor, List<Param> params, String collector) throws RuntimeException {
@@ -514,7 +514,7 @@ public class MonitorServiceImpl implements MonitorService {
             appDefine.setTimestamp(System.currentTimeMillis());
             if (params != null) {
                 List<Configmap> configmaps = params.stream().map(param ->
-                        new Configmap(param.getField(), param.getValue(), param.getType())).collect(Collectors.toList());
+                                                                         new Configmap(param.getField(), param.getValue(), param.getType())).collect(Collectors.toList());
                 appDefine.setConfigmap(configmaps);
             }
             long newJobId;
@@ -550,7 +550,7 @@ public class MonitorServiceImpl implements MonitorService {
             throw new MonitorDatabaseException(e.getMessage());
         }
     }
-
+    
     @Override
     @Transactional(rollbackFor = Exception.class)
     public void deleteMonitor(long id) throws RuntimeException {
@@ -567,7 +567,7 @@ public class MonitorServiceImpl implements MonitorService {
             applicationContext.publishEvent(new MonitorDeletedEvent(applicationContext, monitor.getId()));
         }
     }
-
+    
     @Override
     @Transactional(rollbackFor = Exception.class)
     public void deleteMonitors(Set<Long> ids) throws RuntimeException {
@@ -586,7 +586,7 @@ public class MonitorServiceImpl implements MonitorService {
             }
         }
     }
-
+    
     @Override
     @Transactional(readOnly = true)
     public MonitorDto getMonitorDto(long id) throws RuntimeException {
@@ -599,8 +599,8 @@ public class MonitorServiceImpl implements MonitorService {
             monitorDto.setParams(params);
             Job job = appService.getAppDefine(monitor.getApp());
             List<String> metrics = job.getMetrics().stream()
-                    .filter(Metrics::isVisible)
-                    .map(Metrics::getName).collect(Collectors.toList());
+                                           .filter(Metrics::isVisible)
+                                           .map(Metrics::getName).collect(Collectors.toList());
             monitorDto.setMetrics(metrics);
             Optional<CollectorMonitorBind> bindOptional = collectorMonitorBindDao.findCollectorMonitorBindByMonitorId(monitor.getId());
             bindOptional.ifPresent(bind -> monitorDto.setCollector(bind.getCollector()));
@@ -609,12 +609,12 @@ public class MonitorServiceImpl implements MonitorService {
             return null;
         }
     }
-
+    
     @Override
     public Page<Monitor> getMonitors(Specification<Monitor> specification, PageRequest pageRequest) {
         return monitorDao.findAll(specification, pageRequest);
     }
-
+    
     @Override
     public void cancelManageMonitors(HashSet<Long> ids) {
         // Update monitoring status Delete corresponding monitoring periodic task
@@ -622,10 +622,10 @@ public class MonitorServiceImpl implements MonitorService {
         // The jobId is not deleted, and the jobId is reused again after the management is started.
         // jobId不删除 待启动纳管之后再次复用jobId
         List<Monitor> managedMonitors = monitorDao.findMonitorsByIdIn(ids)
-                .stream().filter(monitor ->
-                        monitor.getStatus() != CommonConstants.UN_MANAGE_CODE)
-                .peek(monitor -> monitor.setStatus(CommonConstants.UN_MANAGE_CODE))
-                .collect(Collectors.toList());
+                                                .stream().filter(monitor ->
+                                                                         monitor.getStatus() != CommonConstants.UN_MANAGE_CODE)
+                                                .peek(monitor -> monitor.setStatus(CommonConstants.UN_MANAGE_CODE))
+                                                .collect(Collectors.toList());
         if (!managedMonitors.isEmpty()) {
             for (Monitor monitor : managedMonitors) {
                 collectJobScheduling.cancelAsyncCollectJob(monitor.getJobId());
@@ -634,16 +634,16 @@ public class MonitorServiceImpl implements MonitorService {
             monitorDao.saveAll(managedMonitors);
         }
     }
-
+    
     @Override
     public void enableManageMonitors(HashSet<Long> ids) {
         // Update monitoring status Add corresponding monitoring periodic task
         // 更新监控状态 新增对应的监控周期性任务
         List<Monitor> unManagedMonitors = monitorDao.findMonitorsByIdIn(ids)
-                .stream().filter(monitor ->
-                        monitor.getStatus() == CommonConstants.UN_MANAGE_CODE)
-                .peek(monitor -> monitor.setStatus(CommonConstants.AVAILABLE_CODE))
-                .collect(Collectors.toList());
+                                                  .stream().filter(monitor ->
+                                                                           monitor.getStatus() == CommonConstants.UN_MANAGE_CODE)
+                                                  .peek(monitor -> monitor.setStatus(CommonConstants.AVAILABLE_CODE))
+                                                  .collect(Collectors.toList());
         if (!unManagedMonitors.isEmpty()) {
             for (Monitor monitor : unManagedMonitors) {
                 // Construct the collection task Job entity
@@ -655,7 +655,7 @@ public class MonitorServiceImpl implements MonitorService {
                 appDefine.setTimestamp(System.currentTimeMillis());
                 List<Param> params = paramDao.findParamsByMonitorId(monitor.getId());
                 List<Configmap> configmaps = params.stream().map(param ->
-                        new Configmap(param.getField(), param.getValue(), param.getType())).collect(Collectors.toList());
+                                                                         new Configmap(param.getField(), param.getValue(), param.getType())).collect(Collectors.toList());
                 List<ParamDefine> paramDefaultValue = appDefine.getParams().stream()
                                                               .filter(item -> StringUtils.hasText(item.getDefaultValue()))
                                                               .collect(Collectors.toList());
@@ -675,7 +675,7 @@ public class MonitorServiceImpl implements MonitorService {
             monitorDao.saveAll(unManagedMonitors);
         }
     }
-
+    
     @Override
     public List<AppCount> getAllAppMonitorsCount() {
         List<AppCount> appCounts = monitorDao.findAppsStatusCount();
@@ -716,26 +716,21 @@ public class MonitorServiceImpl implements MonitorService {
             return item;
         }).filter(Objects::nonNull).collect(Collectors.toList());
     }
-
+    
     @Override
     @Transactional(rollbackFor = Exception.class)
     public void copyMonitors(List<Long> ids) {
-
+        
         ids.stream().parallel().forEach(id -> {
-            //get monitor and Params according id
+            // get monitor and Params according id
             Optional<Monitor> monitorOpt = monitorDao.findById(id);
             List<Param> params = paramDao.findParamsByMonitorId(id);
-
+            
             monitorOpt.ifPresentOrElse(monitor -> {
-                //deep copy original monitor to achieve persist in JPA
-                Monitor newMonitor=GSON.fromJson(GSON.toJson(monitor), Monitor.class);
+                // deep copy original monitor to achieve persist in JPA
+                Monitor newMonitor = GSON.fromJson(GSON.toJson(monitor), Monitor.class);
                 copyMonitor(newMonitor, params);
-            }, new Runnable() {
-                @Override
-                public void run() {
-                    log.warn("can not find the monitor for id ：{}", id);
-                }
-            });
+            }, () -> log.warn("can not find the monitor for id ：{}", id));
         });
     }
     
@@ -778,32 +773,33 @@ public class MonitorServiceImpl implements MonitorService {
     public Monitor getMonitor(Long monitorId) {
         return monitorDao.findById(monitorId).orElse(null);
     }
-
+    
     @Override
     public void updateMonitorStatus(Long monitorId, byte status) {
         monitorDao.updateMonitorStatus(monitorId, status);
     }
-
+    
     @Override
     public List<Monitor> getAppMonitors(String app) {
         return monitorDao.findMonitorsByAppEquals(app);
     }
-
+    
     private void copyMonitor(Monitor monitor, List<Param> params) {
         List<Tag> oldTags = monitor.getTags();
         List<Tag> newTags = filterTags(oldTags);
-
+        
         monitor.setTags(newTags);
-
+        
         monitor.setName(String.format("%s - copy", monitor.getName()));
         addMonitor(monitor, params, null);
     }
+    
     private List<Tag> filterTags(List<Tag> tags) {
         if (tags == null || tags.isEmpty()) {
-            return Collections.emptyList();
+            return new LinkedList<>();
         }
         return tags.stream()
-                .filter(tag -> !(tag.getName().equals(CommonConstants.TAG_MONITOR_ID) || tag.getName().equals(CommonConstants.TAG_MONITOR_NAME)))
-                .collect(Collectors.toList());
+                       .filter(tag -> !(tag.getName().equals(CommonConstants.TAG_MONITOR_ID) || tag.getName().equals(CommonConstants.TAG_MONITOR_NAME)))
+                       .collect(Collectors.toList());
     }
 }
diff --git a/manager/src/test/java/org/dromara/hertzbeat/manager/service/MonitorServiceTest.java b/manager/src/test/java/org/dromara/hertzbeat/manager/service/MonitorServiceTest.java
index 205493c6..71dc9227 100644
--- a/manager/src/test/java/org/dromara/hertzbeat/manager/service/MonitorServiceTest.java
+++ b/manager/src/test/java/org/dromara/hertzbeat/manager/service/MonitorServiceTest.java
@@ -64,25 +64,25 @@ import static org.mockito.Mockito.*;
  */
 @ExtendWith(MockitoExtension.class)
 class MonitorServiceTest {
-
+    
     @InjectMocks
     private MonitorServiceImpl monitorService = new MonitorServiceImpl(List.of());
     
     @Mock
     private MonitorDao monitorDao;
-
+    
     @Mock
     private ParamDao paramDao;
-
+    
     @Mock
     private AppService appService;
-
+    
     @Mock
     private TagService tagService;
-
+    
     @Mock
     private CollectJobScheduling collectJobScheduling;
-
+    
     @Mock
     private AlertDefineBindDao alertDefineBindDao;
     
@@ -97,68 +97,69 @@ class MonitorServiceTest {
     
     @Mock
     private ApplicationContext applicationContext;
-
+    
     @Mock
     Map<String, Alert> triggeredAlertMap = spy(new HashMap<>());
-
+    
     /**
      * 属性无法直接mock,测试执行前-手动赋值
      */
     @BeforeEach
-    public void setUp() {}
-
+    public void setUp() {
+    }
+    
     @Test
     void detectMonitorEmpty() {
         Monitor monitor = Monitor.builder()
-                .id(1L)
-                .intervals(1)
-                .name("memory")
-                .app("demoApp")
-                .build();
+                                  .id(1L)
+                                  .intervals(1)
+                                  .name("memory")
+                                  .app("demoApp")
+                                  .build();
         Job job = new Job();
         job.setMetrics(new ArrayList<>());
         when(appService.getAppDefine(monitor.getApp())).thenReturn(job);
-
+        
         List<CollectRep.MetricsData> collectRep = new ArrayList<>();
         when(collectJobScheduling.collectSyncJobData(job)).thenReturn(collectRep);
-
+        
         List<Param> params = Collections.singletonList(new Param());
         assertThrows(MonitorDetectException.class, () -> monitorService.detectMonitor(monitor, params, null));
     }
-
+    
     /**
      * 探测失败-超时
      */
     @Test
     void detectMonitorFail() {
         Monitor monitor = Monitor.builder()
-                .id(1L)
-                .intervals(1)
-                .name("memory")
-                .app("demoApp")
-                .build();
+                                  .id(1L)
+                                  .intervals(1)
+                                  .name("memory")
+                                  .app("demoApp")
+                                  .build();
         Job job = new Job();
         job.setMetrics(new ArrayList<>());
         when(appService.getAppDefine(monitor.getApp())).thenReturn(job);
-
+        
         List<CollectRep.MetricsData> collectRep = new ArrayList<>();
-
+        
         CollectRep.MetricsData failCode = CollectRep.MetricsData.newBuilder()
-                .setCode(CollectRep.Code.TIMEOUT).setMsg("collect timeout").build();
+                                                  .setCode(CollectRep.Code.TIMEOUT).setMsg("collect timeout").build();
         collectRep.add(failCode);
         when(collectJobScheduling.collectSyncJobData(job)).thenReturn(collectRep);
-
+        
         List<Param> params = Collections.singletonList(new Param());
         assertThrows(MonitorDetectException.class, () -> monitorService.detectMonitor(monitor, params, null));
     }
-
+    
     @Test
     void addMonitorSuccess() {
         Monitor monitor = Monitor.builder()
-                .intervals(1)
-                .name("memory")
-                .app("demoApp")
-                .build();
+                                  .intervals(1)
+                                  .name("memory")
+                                  .app("demoApp")
+                                  .build();
         Job job = new Job();
         when(appService.getAppDefine(monitor.getApp())).thenReturn(job);
         when(collectJobScheduling.addAsyncCollectJob(job)).thenReturn(1L);
@@ -167,14 +168,14 @@ class MonitorServiceTest {
         when(paramDao.saveAll(params)).thenReturn(params);
         assertDoesNotThrow(() -> monitorService.addMonitor(monitor, params, null));
     }
-
+    
     @Test
     void addMonitorException() {
         Monitor monitor = Monitor.builder()
-                .intervals(1)
-                .name("memory")
-                .app("demoApp")
-                .build();
+                                  .intervals(1)
+                                  .name("memory")
+                                  .app("demoApp")
+                                  .build();
         Job job = new Job();
         when(appService.getAppDefine(monitor.getApp())).thenReturn(job);
         when(collectJobScheduling.addAsyncCollectJob(job)).thenReturn(1L);
@@ -182,7 +183,7 @@ class MonitorServiceTest {
         when(monitorDao.save(monitor)).thenThrow(RuntimeException.class);
         assertThrows(MonitorDatabaseException.class, () -> monitorService.addMonitor(monitor, params, null));
     }
-
+    
     /**
      * 参数校验-数据库已经存在相同的监控名称
      */
@@ -202,7 +203,7 @@ class MonitorServiceTest {
             assertEquals("Monitoring name cannot be repeated!", e.getMessage());
         }
     }
-
+    
     /**
      * 参数校验-为必填的参数没有填
      */
@@ -212,9 +213,9 @@ class MonitorServiceTest {
         List<Param> params = new ArrayList<>();
         String field = "field";
         Param param = Param.builder()
-                .field(field)
-                .value(null)
-                .build();
+                              .field(field)
+                              .value(null)
+                              .build();
         params.add(param);
         dto.setParams(params);
         Monitor monitor = Monitor.builder().name("memory").host("host").id(1L).build();
@@ -224,9 +225,9 @@ class MonitorServiceTest {
         when(monitorDao.findMonitorByNameEquals(monitor.getName())).thenReturn(Optional.of(existMonitor));
         List<ParamDefine> paramDefines = new ArrayList<>();
         ParamDefine pd = ParamDefine.builder()
-                .required(true)
-                .field(field)
-                .build();
+                                 .required(true)
+                                 .field(field)
+                                 .build();
         paramDefines.add(pd);
         when(appService.getAppParamDefines(monitor.getApp())).thenReturn(paramDefines);
         try {
@@ -235,7 +236,7 @@ class MonitorServiceTest {
             assertEquals("Params field " + field + " is required.", e.getMessage());
         }
     }
-
+    
     /**
      * 参数校验-为必填的参数类型错误
      */
@@ -245,9 +246,9 @@ class MonitorServiceTest {
         List<Param> params = new ArrayList<>();
         String field = "field";
         Param param = Param.builder()
-                .field(field)
-                .value("str")
-                .build();
+                              .field(field)
+                              .value("str")
+                              .build();
         params.add(param);
         dto.setParams(params);
         Monitor monitor = Monitor.builder().name("memory").host("host").id(1L).build();
@@ -257,21 +258,21 @@ class MonitorServiceTest {
         when(monitorDao.findMonitorByNameEquals(monitor.getName())).thenReturn(Optional.of(existMonitor));
         List<ParamDefine> paramDefines = new ArrayList<>();
         ParamDefine paramDefine = ParamDefine.builder()
-                .required(true)
-                .type("number")
-                .range("[0,233]")
-                .field(field)
-                .build();
+                                          .required(true)
+                                          .type("number")
+                                          .range("[0,233]")
+                                          .field(field)
+                                          .build();
         paramDefines.add(paramDefine);
         when(appService.getAppParamDefines(monitor.getApp())).thenReturn(paramDefines);
         try {
             monitorService.validate(dto, isModify);
         } catch (IllegalArgumentException e) {
             assertEquals("Params field " + field + " type "
-                    + paramDefine.getType() + " is invalid.", e.getMessage());
+                                 + paramDefine.getType() + " is invalid.", e.getMessage());
         }
     }
-
+    
     /**
      * 参数校验-为必填的-整形参数范围
      */
@@ -281,9 +282,9 @@ class MonitorServiceTest {
         List<Param> params = new ArrayList<>();
         String field = "field";
         Param param = Param.builder()
-                .field(field)
-                .value("1150")
-                .build();
+                              .field(field)
+                              .value("1150")
+                              .build();
         params.add(param);
         dto.setParams(params);
         Monitor monitor = Monitor.builder().name("memory").host("host").id(1L).build();
@@ -293,21 +294,21 @@ class MonitorServiceTest {
         when(monitorDao.findMonitorByNameEquals(monitor.getName())).thenReturn(Optional.of(existMonitor));
         List<ParamDefine> paramDefines = new ArrayList<>();
         ParamDefine paramDefine = ParamDefine.builder()
-                .required(true)
-                .type("number")
-                .range("[0,233]")
-                .field(field)
-                .build();
+                                          .required(true)
+                                          .type("number")
+                                          .range("[0,233]")
+                                          .field(field)
+                                          .build();
         paramDefines.add(paramDefine);
         when(appService.getAppParamDefines(monitor.getApp())).thenReturn(paramDefines);
         try {
             monitorService.validate(dto, isModify);
         } catch (IllegalArgumentException e) {
             assertEquals("Params field " + field + " type "
-                    + paramDefine.getType() + " over range " + paramDefine.getRange(), e.getMessage());
+                                 + paramDefine.getType() + " over range " + paramDefine.getRange(), e.getMessage());
         }
     }
-
+    
     /**
      * 参数校验-为必填的-文本参数长度
      */
@@ -317,9 +318,9 @@ class MonitorServiceTest {
         List<Param> params = new ArrayList<>();
         String field = "field";
         Param param = Param.builder()
-                .field(field)
-                .value("1150")
-                .build();
+                              .field(field)
+                              .value("1150")
+                              .build();
         params.add(param);
         dto.setParams(params);
         Monitor monitor = Monitor.builder().name("memory").host("host").id(1L).build();
@@ -330,21 +331,21 @@ class MonitorServiceTest {
         List<ParamDefine> paramDefines = new ArrayList<>();
         Short limit = 3;
         ParamDefine paramDefine = ParamDefine.builder()
-                .required(true)
-                .type("text")
-                .limit(limit)
-                .field(field)
-                .build();
+                                          .required(true)
+                                          .type("text")
+                                          .limit(limit)
+                                          .field(field)
+                                          .build();
         paramDefines.add(paramDefine);
         when(appService.getAppParamDefines(monitor.getApp())).thenReturn(paramDefines);
         try {
             monitorService.validate(dto, isModify);
         } catch (IllegalArgumentException e) {
             assertEquals("Params field " + field + " type "
-                    + paramDefine.getType() + " over limit " + limit, e.getMessage());
+                                 + paramDefine.getType() + " over limit " + limit, e.getMessage());
         }
     }
-
+    
     /**
      * 参数校验-主机IP参数格式
      */
@@ -356,14 +357,14 @@ class MonitorServiceTest {
     void validateMonitorParamsHost(ArgumentsAccessor arguments) {
         String value = arguments.getString(0);
         Boolean checkException = arguments.getBoolean(1);
-
+        
         MonitorDto dto = new MonitorDto();
         List<Param> params = new ArrayList<>();
         String field = "field";
         Param param = Param.builder()
-                .field(field)
-                .value(value)
-                .build();
+                              .field(field)
+                              .value(value)
+                              .build();
         params.add(param);
         dto.setParams(params);
         Monitor monitor = Monitor.builder().name("memory").host("host").id(1L).build();
@@ -374,11 +375,11 @@ class MonitorServiceTest {
         List<ParamDefine> paramDefines = new ArrayList<>();
         Short limit = 3;
         ParamDefine paramDefine = ParamDefine.builder()
-                .required(true)
-                .type("host")
-                .limit(limit)
-                .field(field)
-                .build();
+                                          .required(true)
+                                          .type("host")
+                                          .limit(limit)
+                                          .field(field)
+                                          .build();
         paramDefines.add(paramDefine);
         when(appService.getAppParamDefines(monitor.getApp())).thenReturn(paramDefines);
         try {
@@ -389,7 +390,7 @@ class MonitorServiceTest {
             }
         }
     }
-
+    
     /**
      * 参数校验-布尔类型
      */
@@ -401,14 +402,14 @@ class MonitorServiceTest {
     void validateMonitorParamsBoolean(ArgumentsAccessor arguments) {
         String value = arguments.getString(0);
         Boolean checkException = arguments.getBoolean(1);
-
+        
         MonitorDto dto = new MonitorDto();
         List<Param> params = new ArrayList<>();
         String field = "field";
         Param param = Param.builder()
-                .field(field)
-                .value(value)
-                .build();
+                              .field(field)
+                              .value(value)
+                              .build();
         params.add(param);
         dto.setParams(params);
         Monitor monitor = Monitor.builder().name("memory").host("host").id(1L).build();
@@ -420,11 +421,11 @@ class MonitorServiceTest {
         Short limit = 3;
         String type = "boolean";
         ParamDefine paramDefine = ParamDefine.builder()
-                .required(true)
-                .type(type)
-                .limit(limit)
-                .field(field)
-                .build();
+                                          .required(true)
+                                          .type(type)
+                                          .limit(limit)
+                                          .field(field)
+                                          .build();
         paramDefines.add(paramDefine);
         when(appService.getAppParamDefines(monitor.getApp())).thenReturn(paramDefines);
         try {
@@ -432,11 +433,11 @@ class MonitorServiceTest {
         } catch (IllegalArgumentException e) {
             if (checkException) {
                 assertEquals("Params field " + field + " value "
-                        + value + " is invalid boolean value.", e.getMessage());
+                                     + value + " is invalid boolean value.", e.getMessage());
             }
         }
     }
-
+    
     /**
      * 参数校验-布尔类型
      */
@@ -448,14 +449,14 @@ class MonitorServiceTest {
     void validateMonitorParamsRadio(ArgumentsAccessor arguments) {
         String value = arguments.getString(0);
         Boolean checkException = arguments.getBoolean(1);
-
+        
         MonitorDto dto = new MonitorDto();
         List<Param> params = new ArrayList<>();
         String field = "field";
         Param param = Param.builder()
-                .field(field)
-                .value(value)
-                .build();
+                              .field(field)
+                              .value(value)
+                              .build();
         params.add(param);
         dto.setParams(params);
         Monitor monitor = Monitor.builder().name("memory").host("host").id(1L).build();
@@ -466,16 +467,16 @@ class MonitorServiceTest {
         List<ParamDefine> paramDefines = new ArrayList<>();
         Short limit = 3;
         String type = "radio";
-
+        
         List<ParamDefine.Option> options = new ArrayList<>();
         options.add(new ParamDefine.Option("language", "zh"));
         ParamDefine paramDefine = ParamDefine.builder()
-                .required(true)
-                .type(type)
-                .limit(limit)
-                .field(field)
-                .options(options)
-                .build();
+                                          .required(true)
+                                          .type(type)
+                                          .limit(limit)
+                                          .field(field)
+                                          .options(options)
+                                          .build();
         paramDefines.add(paramDefine);
         when(appService.getAppParamDefines(monitor.getApp())).thenReturn(paramDefines);
         try {
@@ -483,11 +484,11 @@ class MonitorServiceTest {
         } catch (IllegalArgumentException e) {
             if (checkException) {
                 assertEquals("Params field " + field + " value "
-                        + param.getValue() + " is invalid option value", e.getMessage());
+                                     + param.getValue() + " is invalid option value", e.getMessage());
             }
         }
     }
-
+    
     /**
      * 参数校验-没有定义的类型
      */
@@ -499,14 +500,14 @@ class MonitorServiceTest {
     void validateMonitorParamsNone(ArgumentsAccessor arguments) {
         String value = arguments.getString(0);
         Boolean checkException = arguments.getBoolean(1);
-
+        
         MonitorDto dto = new MonitorDto();
         List<Param> params = new ArrayList<>();
         String field = "field";
         Param param = Param.builder()
-                .field(field)
-                .value(value)
-                .build();
+                              .field(field)
+                              .value(value)
+                              .build();
         params.add(param);
         dto.setParams(params);
         Monitor monitor = Monitor.builder().name("memory").host("host").id(1L).build();
@@ -517,16 +518,16 @@ class MonitorServiceTest {
         List<ParamDefine> paramDefines = new ArrayList<>();
         Short limit = 3;
         String type = "none";
-
+        
         List<ParamDefine.Option> options = new ArrayList<>();
         options.add(new ParamDefine.Option("language", "zh"));
         ParamDefine paramDefine = ParamDefine.builder()
-                .required(true)
-                .type(type)
-                .limit(limit)
-                .field(field)
-                .options(options)
-                .build();
+                                          .required(true)
+                                          .type(type)
+                                          .limit(limit)
+                                          .field(field)
+                                          .options(options)
+                                          .build();
         paramDefines.add(paramDefine);
         when(appService.getAppParamDefines(monitor.getApp())).thenReturn(paramDefines);
         try {
@@ -537,21 +538,21 @@ class MonitorServiceTest {
             }
         }
     }
-
+    
     @Test
     void modifyMonitor() {
         /**
          * 修改一个DB中不存在的的monitor
          */
         String value = "value";
-
+        
         MonitorDto dto = new MonitorDto();
         List<Param> params = new ArrayList<>();
         String field = "field";
         Param param = Param.builder()
-                .field(field)
-                .value(value)
-                .build();
+                              .field(field)
+                              .value(value)
+                              .build();
         params.add(param);
         dto.setParams(params);
         long monitorId = 1L;
@@ -578,10 +579,10 @@ class MonitorServiceTest {
         Monitor existOKMonitor = Monitor.builder().jobId(1L).intervals(1).app("app").name("memory").host("host").id(monitorId).build();
         when(monitorDao.findById(monitorId)).thenReturn(Optional.of(existOKMonitor));
         when(monitorDao.save(monitor)).thenThrow(RuntimeException.class);
-
+        
         assertThrows(MonitorDatabaseException.class, () -> monitorService.modifyMonitor(dto.getMonitor(), dto.getParams(), null));
     }
-
+    
     @Test
     void deleteMonitor() {
         long id = 1L;
@@ -591,13 +592,13 @@ class MonitorServiceTest {
         doNothing().when(tagMonitorBindDao).deleteTagMonitorBindsByMonitorId(id);
         assertDoesNotThrow(() -> monitorService.deleteMonitor(id));
     }
-
+    
     @Test
     void deleteMonitors() {
         Set<Long> ids = new HashSet<>();
         ids.add(1L);
         ids.add(2L);
-
+        
         List<Monitor> monitors = new ArrayList<>();
         for (Long id : ids) {
             Monitor monitor = Monitor.builder().jobId(id).intervals(1).app("app").name("memory").host("host").id(id).build();
@@ -606,7 +607,7 @@ class MonitorServiceTest {
         when(monitorDao.findMonitorsByIdIn(ids)).thenReturn(monitors);
         assertDoesNotThrow(() -> monitorService.deleteMonitors(ids));
     }
-
+    
     @Test
     void getMonitorDto() {
         long id = 1L;
@@ -621,20 +622,20 @@ class MonitorServiceTest {
         MonitorDto monitorDto = monitorService.getMonitorDto(id);
         assertNotNull(monitorDto);
     }
-
+    
     @Test
     void getMonitors() {
         Specification<Monitor> specification = mock(Specification.class);
         when(monitorDao.findAll(specification, PageRequest.of(1, 1))).thenReturn(Page.empty());
         assertNotNull(monitorService.getMonitors(specification, PageRequest.of(1, 1)));
     }
-
+    
     @Test
     void cancelManageMonitors() {
         HashSet<Long> ids = new HashSet<>();
         ids.add(1L);
         ids.add(2L);
-
+        
         List<Monitor> monitors = new ArrayList<>();
         for (Long id : ids) {
             Monitor monitor = Monitor.builder().jobId(id).intervals(1).app("app").name("memory").host("host").id(id).build();
@@ -643,13 +644,13 @@ class MonitorServiceTest {
         when(monitorDao.findMonitorsByIdIn(ids)).thenReturn(monitors);
         assertDoesNotThrow(() -> monitorService.cancelManageMonitors(ids));
     }
-
+    
     @Test
     void enableManageMonitors() {
         HashSet<Long> ids = new HashSet<>();
         ids.add(1L);
         ids.add(2L);
-
+        
         List<Monitor> monitors = new ArrayList<>();
         for (Long id : ids) {
             Monitor monitor = Monitor.builder().jobId(id).intervals(1).app("app").name("memory").host("host").id(id).build();
@@ -665,54 +666,54 @@ class MonitorServiceTest {
         when(paramDao.findParamsByMonitorId(monitors.get(0).getId())).thenReturn(params);
         assertDoesNotThrow(() -> monitorService.enableManageMonitors(ids));
     }
-
+    
     @Test
     void getAllAppMonitorsCount() {
-
+        
         List<AppCount> appCounts = new ArrayList<>();
         AppCount appCount = new AppCount();
         appCount.setApp("test");
         appCount.setStatus(CommonConstants.AVAILABLE_CODE);
         appCounts.add(appCount);
         when(monitorDao.findAppsStatusCount()).thenReturn(appCounts);
-
-
+        
+        
         Job job = new Job();
         job.setMetrics(new ArrayList<>());
         when(appService.getAppDefine(appCounts.get(0).getApp())).thenReturn(job);
-
+        
         assertDoesNotThrow(() -> monitorService.getAllAppMonitorsCount());
     }
-
+    
     @Test
     void getMonitor() {
         long monitorId = 1L;
         when(monitorDao.findById(monitorId)).thenReturn(Optional.empty());
         assertDoesNotThrow(() -> monitorService.getMonitor(monitorId));
     }
-
+    
     @Test
     void updateMonitorStatus() {
         assertDoesNotThrow(() -> monitorService.updateMonitorStatus(1L, CommonConstants.AVAILABLE_CODE));
     }
-
+    
     @Test
     void getAppMonitors() {
         assertDoesNotThrow(() -> monitorDao.findMonitorsByAppEquals("test"));
     }
-
+    
     @Test
     void addNewMonitorOptionalMetrics() {
         Monitor monitor = Monitor.builder()
-                .id(1L)
-                .intervals(1)
-                .name("memory")
-                .app("demoApp")
-                .build();
+                                  .id(1L)
+                                  .intervals(1)
+                                  .name("memory")
+                                  .app("demoApp")
+                                  .build();
         Job job = new Job();
         job.setMetrics(new ArrayList<>());
         when(appService.getAppDefine(monitor.getApp())).thenReturn(job);
-
+        
         List<Param> params = Collections.singletonList(new Param());
         List<String> metrics = Arrays.asList();
         try {
@@ -730,28 +731,28 @@ class MonitorServiceTest {
         job.setMetrics(metricsDefine);
         List<String> finalMetrics = metrics;
         assertThrows(MonitorDatabaseException.class, () -> monitorService.addNewMonitorOptionalMetrics(finalMetrics, monitor, params));
-
+        
     }
-
+    
     @Test
     void getMonitorMetrics() {
         Assertions.assertDoesNotThrow(() -> appService.getAppDefineMetricNames("test"));
     }
-
-
+    
+    
     @Test
-    void copyMonitors(){
+    void copyMonitors() {
         Monitor monitor = Monitor.builder()
-                .intervals(1)
-                .name("memory")
-                .app("demoApp")
-                .build();
+                                  .intervals(1)
+                                  .name("memory")
+                                  .app("demoApp")
+                                  .build();
         Job job = new Job();
         when(appService.getAppDefine(monitor.getApp())).thenReturn(job);
         List<Param> params = Collections.singletonList(new Param());
         when(monitorDao.findById(1L)).thenReturn(Optional.of(monitor));
         when(paramDao.findParamsByMonitorId(1L)).thenReturn(params);
-        assertDoesNotThrow(()->monitorService.copyMonitors(Arrays.asList(new Long[]{1L})));
-
+        assertDoesNotThrow(() -> monitorService.copyMonitors(List.of(1L)));
+        
     }
 }
