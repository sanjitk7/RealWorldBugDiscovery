diff --git a/src/main/java/edu/harvard/iq/dataverse/api/imports/ImportServiceBean.java b/src/main/java/edu/harvard/iq/dataverse/api/imports/ImportServiceBean.java
index f63c7bc94f..75dc4b6399 100644
--- a/src/main/java/edu/harvard/iq/dataverse/api/imports/ImportServiceBean.java
+++ b/src/main/java/edu/harvard/iq/dataverse/api/imports/ImportServiceBean.java
@@ -552,9 +552,12 @@ public class ImportServiceBean {
 
             JsonParser parser = new JsonParser(datasetfieldService, metadataBlockService, settingsService);
             parser.setLenient(false);
+            
+            logger.log(Level.INFO, "dataset={0}",xstream.toXML(obj));
+            logger.log(Level.INFO, "parsing the received dataset");
             Dataset ds = parser.parseDataset(obj);
             
-            logger.log(Level.INFO, "dataset={0}", ds);
+            logger.log(Level.INFO, "dataset={0}",xstream.toXML(ds));
 
             // For ImportType.NEW, if the user supplies a global identifier, and it's not a protocol
             // we support, it will be rejected.
diff --git a/src/main/java/edu/harvard/iq/dataverse/util/json/JsonParser.java b/src/main/java/edu/harvard/iq/dataverse/util/json/JsonParser.java
index e49184551d..51df5e9e5f 100644
--- a/src/main/java/edu/harvard/iq/dataverse/util/json/JsonParser.java
+++ b/src/main/java/edu/harvard/iq/dataverse/util/json/JsonParser.java
@@ -258,6 +258,7 @@ public class JsonParser {
     }
 
     public Dataset parseDataset(JsonObject obj) throws JsonParseException {
+        logger.log(Level.INFO, "parseDataset is called");
         Dataset dataset = new Dataset();
 
         dataset.setAuthority(obj.getString("authority", null) == null ? settingsService.getValueForKey(SettingsServiceBean.Key.Authority) : obj.getString("authority"));
@@ -275,6 +276,7 @@ public class JsonParser {
     }
 
     public DatasetVersion parseDatasetVersion(JsonObject obj, DatasetVersion dsv) throws JsonParseException {
+            logger.log(Level.INFO, "parseDatasetVersion is called");
         try {
 
             String archiveNote = obj.getString("archiveNote", null);
@@ -332,6 +334,7 @@ public class JsonParser {
                 filesJson = obj.getJsonArray("fileMetadatas");
             }
             if (filesJson != null) {
+                logger.log(Level.INFO, "parseFiles to be called");
                 dsv.setFileMetadatas(parseFiles(filesJson, dsv));
             }
             return dsv;
@@ -400,6 +403,7 @@ public class JsonParser {
     }
     
     public List<FileMetadata> parseFiles(JsonArray metadatasJson, DatasetVersion dsv) throws JsonParseException {
+        logger.log(Level.INFO, "parseFiles is called");
         List<FileMetadata> fileMetadatas = new LinkedList<>();
 
         if (metadatasJson != null) {
@@ -415,7 +419,7 @@ public class JsonParser {
                 fileMetadata.setDirectoryLabel(directoryLabel);
                 fileMetadata.setDescription(description);
                 fileMetadata.setDatasetVersion(dsv);
-
+                logger.log(Level.INFO, "parseDataFile is to be called");
                 DataFile dataFile = parseDataFile(filemetadataJson.getJsonObject("dataFile"));
 
                 fileMetadata.setDataFile(dataFile);
@@ -437,6 +441,7 @@ public class JsonParser {
     }
     
     public DataFile parseDataFile(JsonObject datafileJson) {
+        logger.log(Level.INFO, "parseDataFile is called");
         DataFile dataFile = new DataFile();
         
         Timestamp timestamp = new Timestamp(new Date().getTime());
@@ -514,8 +519,9 @@ public class JsonParser {
         logger.log(Level.INFO, "parsing DataTable");
         // parse DataTable
         JsonArray dataTablesJson = datafileJson.getJsonArray("dataTables");
-        logger.log(Level.INFO, "dataTablesJson=-{0}", dataTablesJson.size());
+        
         if ((dataTablesJson != null ) && (!dataTablesJson.isEmpty())){
+            logger.log(Level.INFO, "dataTablesJson:size={0}", dataTablesJson.size());
             // get parsing results of a DataTable
             List<DataTable> dataTables = parseDataTables(dataTablesJson);
             logger.log(Level.INFO, "dataTables:size={0}", dataTables.size());
