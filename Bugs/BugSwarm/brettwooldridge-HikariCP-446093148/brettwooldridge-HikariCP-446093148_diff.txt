diff --git a/src/main/java/com/zaxxer/hikari/metrics/prometheus/PrometheusHistogramMetricsTracker.java b/src/main/java/com/zaxxer/hikari/metrics/prometheus/PrometheusHistogramMetricsTracker.java
index ad3342f3..4b7befce 100644
--- a/src/main/java/com/zaxxer/hikari/metrics/prometheus/PrometheusHistogramMetricsTracker.java
+++ b/src/main/java/com/zaxxer/hikari/metrics/prometheus/PrometheusHistogramMetricsTracker.java
@@ -37,22 +37,22 @@ class PrometheusHistogramMetricsTracker implements IMetricsTracker
       .create();
 
    private static final Histogram ELAPSED_ACQUIRED_HISTOGRAM =
-      registerHistogram("hikaricp_connection_acquired_nanos", "Connection acquired time (ns)");
+      registerHistogram("hikaricp_connection_acquired_nanos", "Connection acquired time (ns)", 1_000);
 
    private static final Histogram ELAPSED_BORROWED_HISTOGRAM =
-      registerHistogram("hikaricp_connection_usage_millis", "Connection usage (ms)");
+      registerHistogram("hikaricp_connection_usage_millis", "Connection usage (ms)", 1);
 
    private static final Histogram ELAPSED_CREATION_HISTOGRAM =
-      registerHistogram("hikaricp_connection_creation_millis", "Connection creation (ms)");
+      registerHistogram("hikaricp_connection_creation_millis", "Connection creation (ms)", 1);
 
    private final Counter.Child connectionTimeoutCounterChild;
 
-   private static Histogram registerHistogram(String name, String help) {
+   private static Histogram registerHistogram(String name, String help, double bucketStart) {
       return Histogram.build()
          .name(name)
          .labelNames("pool")
          .help(help)
-         .exponentialBuckets(0.001, 2.0, 11)
+         .exponentialBuckets(bucketStart, 2.0, 11)
          .create();
    }
 
diff --git a/src/main/java/com/zaxxer/hikari/pool/PoolBase.java b/src/main/java/com/zaxxer/hikari/pool/PoolBase.java
index a777fd74..1356a4ee 100644
--- a/src/main/java/com/zaxxer/hikari/pool/PoolBase.java
+++ b/src/main/java/com/zaxxer/hikari/pool/PoolBase.java
@@ -443,7 +443,8 @@ abstract class PoolBase
     * @param connection a Connection to check
     * @throws SQLException rethrown from the driver
     */
-   private void checkValidationSupport(final Connection connection) throws SQLException {
+   private void checkValidationSupport(final Connection connection) throws SQLException
+   {
       try {
          if (isUseJdbc4Validation) {
             connection.isValid(1);
@@ -452,7 +453,7 @@ abstract class PoolBase
             executeSql(connection, config.getConnectionTestQuery(), false);
          }
       }
-      catch (Exception e) {
+      catch (Exception | AbstractMethodError e) {
          logger.error("{} - Failed to execute{} connection test query ({}).", poolName, (isUseJdbc4Validation ? " isValid() for connection, configure" : ""), e.getMessage());
          throw e;
       }
@@ -464,7 +465,8 @@ abstract class PoolBase
     * @param connection a Connection to check
     * @throws SQLException rethrown from the driver
     */
-   private void checkDefaultIsolation(final Connection connection) throws SQLException {
+   private void checkDefaultIsolation(final Connection connection) throws SQLException
+   {
       try {
          defaultTransactionIsolation = connection.getTransactionIsolation();
          if (transactionIsolation == -1) {
@@ -518,7 +520,7 @@ abstract class PoolBase
             isNetworkTimeoutSupported = TRUE;
             return originalTimeout;
          }
-         catch (Exception e) {
+         catch (Exception | AbstractMethodError e) {
             if (isNetworkTimeoutSupported == UNINITIALIZED) {
                isNetworkTimeoutSupported = FALSE;
 
diff --git a/src/main/java/com/zaxxer/hikari/util/JavassistProxyFactory.java b/src/main/java/com/zaxxer/hikari/util/JavassistProxyFactory.java
index b7ee5382..5a09e271 100644
--- a/src/main/java/com/zaxxer/hikari/util/JavassistProxyFactory.java
+++ b/src/main/java/com/zaxxer/hikari/util/JavassistProxyFactory.java
@@ -109,7 +109,8 @@ public final class JavassistProxyFactory
    /**
     *  Generate Javassist Proxy Classes
     */
-   private static <T> void generateProxyClass(Class<T> primaryInterface, String superClassName, String methodBody) throws Exception {
+   private static <T> void generateProxyClass(Class<T> primaryInterface, String superClassName, String methodBody) throws Exception
+   {
       String newClassName = superClassName.replaceAll("(.+)\\.(\\w+)", "$1.Hikari$2");
 
       CtClass superCt = classPool.getCtClass(superClassName);
@@ -200,7 +201,8 @@ public final class JavassistProxyFactory
       return false;
    }
 
-   private static boolean isDefaultMethod(Class<?> intf, CtMethod intfMethod) throws Exception {
+   private static boolean isDefaultMethod(Class<?> intf, CtMethod intfMethod) throws Exception
+   {
       List<Class<?>> paramTypes = new ArrayList<>();
 
       for (CtClass pt : intfMethod.getParameterTypes()) {
diff --git a/src/test/java/com/zaxxer/hikari/metrics/dropwizard/CodaHaleMetricsTrackerTest.java b/src/test/java/com/zaxxer/hikari/metrics/dropwizard/CodaHaleMetricsTrackerTest.java
index 0da6baef..6a7ed1a1 100644
--- a/src/test/java/com/zaxxer/hikari/metrics/dropwizard/CodaHaleMetricsTrackerTest.java
+++ b/src/test/java/com/zaxxer/hikari/metrics/dropwizard/CodaHaleMetricsTrackerTest.java
@@ -2,6 +2,7 @@ package com.zaxxer.hikari.metrics.dropwizard;
 
 import static org.mockito.Mockito.verify;
 
+import com.zaxxer.hikari.metrics.PoolStats;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -19,8 +20,8 @@ public class CodaHaleMetricsTrackerTest {
    private CodaHaleMetricsTracker testee;
 
    @Before
-   public void setup(){
-      testee = new CodaHaleMetricsTracker("mypool", null, mockMetricRegistry);
+   public void setup() {
+      testee = new CodaHaleMetricsTracker("mypool", poolStats(), mockMetricRegistry);
    }
 
    @Test
@@ -38,4 +39,13 @@ public class CodaHaleMetricsTrackerTest {
       verify(mockMetricRegistry).remove("mypool.pool.MaxConnections");
       verify(mockMetricRegistry).remove("mypool.pool.MinConnections");
    }
+
+   private PoolStats poolStats() {
+      return new PoolStats(0) {
+         @Override
+         protected void update() {
+            // do nothing
+         }
+      };
+   }
 }
diff --git a/src/test/java/com/zaxxer/hikari/pool/TestConnections.java b/src/test/java/com/zaxxer/hikari/pool/TestConnections.java
index 8f91de9c..92b80b2e 100644
--- a/src/test/java/com/zaxxer/hikari/pool/TestConnections.java
+++ b/src/test/java/com/zaxxer/hikari/pool/TestConnections.java
@@ -745,7 +745,7 @@ public class TestConnections
             return new StubConnection();
          }
 
-         throw new Error("Bad thing happens on datasource.");
+         throw new RuntimeException("Bad thing happens on datasource.");
       }
 
       public void setErrorOnConnection(boolean errorOnConnection) {
