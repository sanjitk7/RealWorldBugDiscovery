diff --git a/project_euler/problem_007/sol4.py b/project_euler/problem_007/sol4.py
index f3f52042..2e9222f4 100644
--- a/project_euler/problem_007/sol4.py
+++ b/project_euler/problem_007/sol4.py
@@ -14,7 +14,7 @@ References:
 
 
 # Function to find the nth prime number
-def nth_prime(n: int) -> Optional[int]:
+def nth_prime(n: int) -> [int]:
     """
     Returns the nth prime number.
 
@@ -28,19 +28,19 @@ def nth_prime(n: int) -> Optional[int]:
         return None
 
     prime_counter = (
-        2  # Initialize the prime counter to 2 since 2 is the first prime number
+        2  # Initialize the prime counter to 2 since 2 is the first prime 
     )
     for num in range(3, n**2, 2):  # Loop through odd numbers starting from 3
         divisor = 1  # Initialize the divisor to 1
         while (
             divisor * divisor < num
         ):  # Loop through divisors up to the square root of the current number
-            divisor += 2  # Increment the divisor by 2 since even numbers are not prime
+            divisor += 2  
             if (
                 num % divisor == 0
-            ):  # If the current number is divisible by the divisor, it is not prime
+            ):  # If the current number is divisible by the divisor
                 break  # Exit the loop
-        else:  # If the loop completes without finding a divisor, the current number is prime
+        else:  
             prime_counter += 1  # Increment the prime counter
         if prime_counter == n:  # If we have found the nth prime number
             return num  # Return the current number
