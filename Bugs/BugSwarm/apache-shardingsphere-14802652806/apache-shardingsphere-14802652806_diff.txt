diff --git a/features/readwrite-splitting/core/src/test/java/org/apache/shardingsphere/readwritesplitting/event/ReadwriteSplittingRuleChangedEventCreatorTest.java b/features/readwrite-splitting/core/src/test/java/org/apache/shardingsphere/readwritesplitting/event/ReadwriteSplittingRuleChangedEventCreatorTest.java
index 200f5770bc5..8d1191dfeb9 100644
--- a/features/readwrite-splitting/core/src/test/java/org/apache/shardingsphere/readwritesplitting/event/ReadwriteSplittingRuleChangedEventCreatorTest.java
+++ b/features/readwrite-splitting/core/src/test/java/org/apache/shardingsphere/readwritesplitting/event/ReadwriteSplittingRuleChangedEventCreatorTest.java
@@ -18,10 +18,10 @@
 package org.apache.shardingsphere.readwritesplitting.event;
 
 import org.apache.shardingsphere.mode.event.DataChangedEvent;
-import org.apache.shardingsphere.readwritesplitting.event.datasource.AddReadwriteSplittingDataSourceEvent;
-import org.apache.shardingsphere.readwritesplitting.event.datasource.DeleteReadwriteSplittingDataSourceEvent;
+import org.apache.shardingsphere.readwritesplitting.event.datasource.AlterReadwriteSplittingDataSourceEvent;
+import org.apache.shardingsphere.readwritesplitting.event.datasource.DropReadwriteSplittingDataSourceEvent;
 import org.apache.shardingsphere.readwritesplitting.event.loadbalance.AlterReadwriteSplittingLoadBalancerEvent;
-import org.apache.shardingsphere.readwritesplitting.event.loadbalance.DeleteReadwriteSplittingLoadBalancerEvent;
+import org.apache.shardingsphere.readwritesplitting.event.loadbalance.DropReadwriteSplittingLoadBalancerEvent;
 import org.apache.shardingsphere.readwritesplitting.metadata.nodepath.ReadwriteSplittingRuleNodePathProvider;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -45,17 +45,17 @@ class ReadwriteSplittingRuleChangedEventCreatorTest {
     void assertReadWriteSplittingRuleChangeEventForDataSource() {
         assertThat(readwriteSplittingRuleChangedEventCreator.create("test",
                 new DataChangedEvent("RANDOM", "RANDOM", DataChangedEvent.Type.DELETED),
-                ReadwriteSplittingRuleNodePathProvider.DATA_SOURCES, "test"), instanceOf(DeleteReadwriteSplittingDataSourceEvent.class));
+                ReadwriteSplittingRuleNodePathProvider.DATA_SOURCES, "test"), instanceOf(DropReadwriteSplittingDataSourceEvent.class));
         assertThat(readwriteSplittingRuleChangedEventCreator.create("test",
                 new DataChangedEvent("RANDOM", "RANDOM", DataChangedEvent.Type.ADDED),
-                ReadwriteSplittingRuleNodePathProvider.DATA_SOURCES, "test"), instanceOf(AddReadwriteSplittingDataSourceEvent.class));
+                ReadwriteSplittingRuleNodePathProvider.DATA_SOURCES, "test"), instanceOf(AlterReadwriteSplittingDataSourceEvent.class));
     }
     
     @Test
     void assertReadWriteEventsRuleChangeCreatorForLoadBalancers() {
         assertThat(readwriteSplittingRuleChangedEventCreator.create("test",
                 new DataChangedEvent("RANDOM", "RANDOM", DataChangedEvent.Type.DELETED),
-                ReadwriteSplittingRuleNodePathProvider.LOAD_BALANCERS, "test"), instanceOf(DeleteReadwriteSplittingLoadBalancerEvent.class));
+                ReadwriteSplittingRuleNodePathProvider.LOAD_BALANCERS, "test"), instanceOf(DropReadwriteSplittingLoadBalancerEvent.class));
         assertThat(readwriteSplittingRuleChangedEventCreator.create("test",
                 new DataChangedEvent("RANDOM", "RANDOM", DataChangedEvent.Type.ADDED),
                 ReadwriteSplittingRuleNodePathProvider.LOAD_BALANCERS, "test"), instanceOf(AlterReadwriteSplittingLoadBalancerEvent.class));
diff --git a/features/shadow/core/src/test/java/org/apache/shardingsphere/shadow/event/ShadowRuleChangedEventCreatorTest.java b/features/shadow/core/src/test/java/org/apache/shardingsphere/shadow/event/ShadowRuleChangedEventCreatorTest.java
index ebbb390f828..fbc9c990fe1 100644
--- a/features/shadow/core/src/test/java/org/apache/shardingsphere/shadow/event/ShadowRuleChangedEventCreatorTest.java
+++ b/features/shadow/core/src/test/java/org/apache/shardingsphere/shadow/event/ShadowRuleChangedEventCreatorTest.java
@@ -23,10 +23,8 @@ import org.apache.shardingsphere.shadow.event.algorithm.AlterShadowAlgorithmEven
 import org.apache.shardingsphere.shadow.event.algorithm.DropDefaultShadowAlgorithmEvent;
 import org.apache.shardingsphere.shadow.event.algorithm.DropShadowAlgorithmEvent;
 import org.apache.shardingsphere.shadow.event.datasource.AlterShadowDataSourceEvent;
-import org.apache.shardingsphere.shadow.event.datasource.CreateShadowDataSourceEvent;
 import org.apache.shardingsphere.shadow.event.datasource.DropShadowDataSourceEvent;
 import org.apache.shardingsphere.shadow.event.table.AlterShadowTableEvent;
-import org.apache.shardingsphere.shadow.event.table.CreateShadowTableEvent;
 import org.apache.shardingsphere.shadow.event.table.DropShadowTableEvent;
 import org.apache.shardingsphere.shadow.metadata.nodepath.ShadowRuleNodePathProvider;
 import org.junit.jupiter.api.BeforeEach;
@@ -51,7 +49,7 @@ class ShadowRuleChangedEventCreatorTest {
                 ShadowRuleNodePathProvider.DATA_SOURCES, "test"), instanceOf(DropShadowDataSourceEvent.class));
         assertThat(shadowRuleChangedEventCreator.create("test",
                 new DataChangedEvent("RANDOM", "RANDOM", DataChangedEvent.Type.ADDED),
-                ShadowRuleNodePathProvider.DATA_SOURCES, "test"), instanceOf(CreateShadowDataSourceEvent.class));
+                ShadowRuleNodePathProvider.DATA_SOURCES, "test"), instanceOf(AlterShadowDataSourceEvent.class));
         assertThat(shadowRuleChangedEventCreator.create("test",
                 new DataChangedEvent("RANDOM", "RANDOM", DataChangedEvent.Type.UPDATED),
                 ShadowRuleNodePathProvider.DATA_SOURCES, "test"), instanceOf(AlterShadowDataSourceEvent.class));
@@ -74,7 +72,7 @@ class ShadowRuleChangedEventCreatorTest {
                 ShadowRuleNodePathProvider.TABLES, "test"), instanceOf(DropShadowTableEvent.class));
         assertThat(shadowRuleChangedEventCreator.create("test",
                 new DataChangedEvent("RANDOM", "RANDOM", DataChangedEvent.Type.ADDED),
-                ShadowRuleNodePathProvider.TABLES, "test"), instanceOf(CreateShadowTableEvent.class));
+                ShadowRuleNodePathProvider.TABLES, "test"), instanceOf(AlterShadowTableEvent.class));
         assertThat(shadowRuleChangedEventCreator.create("test",
                 new DataChangedEvent("RANDOM", "RANDOM", DataChangedEvent.Type.UPDATED),
                 ShadowRuleNodePathProvider.TABLES, "test"), instanceOf(AlterShadowTableEvent.class));
