diff --git a/doc/structs.asciidoc b/doc/structs.asciidoc
index c7cd76be..98baafc8 100644
--- a/doc/structs.asciidoc
+++ b/doc/structs.asciidoc
@@ -22,7 +22,7 @@ function main = |args| {
 }
 ----
 
-When declaring a structure, it also defines two factory functions: one with no argument, and one
+When declaring a structure, it also defines two factory functions: one with no arguments, and one
 with all arguments in their order of declaration in the `struct` statement. When not initialized,
 member values are `null`.
 
@@ -72,6 +72,7 @@ function main = |args| {
 
 running it prints the following console output:
 
+[source,golo]
 ----
 struct Point{x=1, y=2}
 ----
@@ -101,71 +102,6 @@ function main = |args| {
 }
 ----
 
-=== Custom factories
-
-Golo generates two factories for structures. One for the initial values of each member and
-a second one with no parameters:
-
-[source,golo]
-----
-module test
-
-struct Point = { x, y }
-
-function main = |args| {
-  println(Point(1, 2))
-  println(Point())
-}
-----
-
-running it prints the following console output:
-
-----
-struct Point{x=1, y=2}
-struct Point{x=null, y=null}
-----
-
-NOTE: By default the no-argument factory sets every member to `null`
-
-The Factories generated by Golo can be overloaded by custom ones:
-
-[source,golo]
-----
-module test
-
-struct Point = { x, y }
-
-function Point = -> test.types.Point(0,0)
-
-function main = |args| {
-  println(Point(1, 2))
-  println(Point())
-}
-----
-
-running it prints the following console output:
-
-----
-struct Point{x=1, y=2}
-struct Point{x=0, y=0}
-----
-
-NOTE: Immutable factories can be easily overloaded by returning a forzen copy.
-
-[source,golo]
-----
-module test
-
-struct Point = { x, y }
-
-function ImmutablePoint = |a,b| -> test.types.Point(a,b): frozenCopy()
-
-function main = |args| {
-  println(ImmutablePoint(1, 2): isFrozen()) # prints true
-}
-----
-
-
 === Copying
 
 Instances of a structure provide copying methods:
@@ -217,6 +153,7 @@ function main = |args| {
 
 the console output is the following:
 
+[source,golo]
 ----
 p1 == p2 false
 p1 == p3 false
@@ -258,6 +195,7 @@ function main = |args| {
 
 will output:
 
+[source]
 ----
 true
 true
diff --git a/src/main/java/org/eclipse/golo/compiler/GoloCompilationException.java b/src/main/java/org/eclipse/golo/compiler/GoloCompilationException.java
index 0cd95f40..c7b48ecd 100644
--- a/src/main/java/org/eclipse/golo/compiler/GoloCompilationException.java
+++ b/src/main/java/org/eclipse/golo/compiler/GoloCompilationException.java
@@ -41,8 +41,7 @@ public class GoloCompilationException extends RuntimeException {
       REFERENCE_ALREADY_DECLARED_IN_BLOCK,
       UNINITIALIZED_REFERENCE_ACCESS,
       INVALID_ENCODING,
-      INCOMPLETE_NAMED_ARGUMENTS_USAGE,
-      AMBIGUOUS_DECLARATION
+      INCOMPLETE_NAMED_ARGUMENTS_USAGE
     }
 
     private final Type type;
diff --git a/src/main/java/org/eclipse/golo/compiler/GoloCompiler.java b/src/main/java/org/eclipse/golo/compiler/GoloCompiler.java
index 941b1036..959bfcad 100644
--- a/src/main/java/org/eclipse/golo/compiler/GoloCompiler.java
+++ b/src/main/java/org/eclipse/golo/compiler/GoloCompiler.java
@@ -188,7 +188,7 @@ public class GoloCompiler {
   }
 
   public final GoloModule transform(ASTCompilationUnit compilationUnit) {
-    return new ParseTreeToGoloIrVisitor().transform(compilationUnit,exceptionBuilder);
+    return new ParseTreeToGoloIrVisitor(exceptionBuilder).transform(compilationUnit);
   }
 
   public final void refine(GoloModule goloModule) {
diff --git a/src/main/java/org/eclipse/golo/compiler/ParseTreeToGoloIrVisitor.java b/src/main/java/org/eclipse/golo/compiler/ParseTreeToGoloIrVisitor.java
index 12bdc6d0..900298e0 100644
--- a/src/main/java/org/eclipse/golo/compiler/ParseTreeToGoloIrVisitor.java
+++ b/src/main/java/org/eclipse/golo/compiler/ParseTreeToGoloIrVisitor.java
@@ -17,16 +17,48 @@ import java.util.Collections;
 import java.util.Deque;
 import java.util.LinkedList;
 import java.util.List;
+import java.util.Collection;
 import java.util.stream.Collectors;
 
 import static org.eclipse.golo.compiler.ir.Builders.*;
 import static java.util.Collections.nCopies;
-import static org.eclipse.golo.compiler.GoloCompilationException.Problem.Type.AMBIGUOUS_DECLARATION;
 
 public class ParseTreeToGoloIrVisitor implements GoloParserVisitor {
 
+  private GoloCompilationException.Builder exceptionBuilder;
+
   public ParseTreeToGoloIrVisitor() { }
 
+  public ParseTreeToGoloIrVisitor(GoloCompilationException.Builder builder) {
+    this();
+    setExceptionBuilder(builder);
+  }
+
+  public void setExceptionBuilder(GoloCompilationException.Builder builder) {
+    exceptionBuilder = builder;
+  }
+
+  public GoloCompilationException.Builder getExceptionBuilder() {
+    return exceptionBuilder;
+  }
+
+  private GoloCompilationException.Builder getOrCreateExceptionBuilder(Context context) {
+    if (exceptionBuilder == null) {
+      exceptionBuilder = new GoloCompilationException.Builder(context.module.getPackageAndClass().toString());
+    }
+    return exceptionBuilder;
+  }
+
+  private void errorMessage(Context context,
+                            GoloCompilationException.Problem.Type type,
+                            GoloASTNode node,
+                            String message) {
+    String errorMessage = String.format(
+        "%s at (line=%d, column=%d)",
+        message, node.getLineInSourceCode(), node.getColumnInSourceCode());
+    getOrCreateExceptionBuilder(context).report(type, node, errorMessage);
+  }
+
   @Override
   public Object visit(ASTerror node, Object data) {
     return null;
@@ -37,7 +69,6 @@ public class ParseTreeToGoloIrVisitor implements GoloParserVisitor {
     private Deque<FunctionContainer> functionContainersStack = new LinkedList<>();
     private Deque<Object> objectStack = new LinkedList<>();
     private Deque<ReferenceTable> referenceTableStack = new LinkedList<>();
-    private GoloCompilationException.Builder exceptionBuilder;
 
     public void push(Object object) {
       objectStack.push(object);
@@ -89,20 +120,7 @@ public class ParseTreeToGoloIrVisitor implements GoloParserVisitor {
     }
 
     public void addFunction(GoloFunction function) {
-      FunctionContainer container = this.functionContainersStack.peek();
-      if(container.getFunctions().contains(function)) {
-        GoloFunction firstDeclaration = null;
-        for (GoloFunction f : container.getFunctions()) {
-          if (function.equals(f)) {
-            firstDeclaration = f;
-          }
-        }
-        errorMessage(AMBIGUOUS_DECLARATION, function.getASTNode(),
-            String.format("Declaring a function `%s` twice (declared first here: %s)",
-                function.getName(),
-                firstDeclaration == null ? "unknown" : firstDeclaration.getASTNode().getPositionInSourceCode()));
-      }
-      container.addFunction(function);
+      this.functionContainersStack.peek().addFunction(function);
     }
 
     public GoloFunction getOrCreateFunction() {
@@ -144,36 +162,10 @@ public class ParseTreeToGoloIrVisitor implements GoloParserVisitor {
       }
       return getReference(name, node);
     }
-
-    public void setExceptionBuilder(GoloCompilationException.Builder builder) {
-      exceptionBuilder = builder;
-    }
-
-    public GoloCompilationException.Builder getExceptionBuilder() {
-      return exceptionBuilder;
-    }
-
-    private GoloCompilationException.Builder getOrCreateExceptionBuilder() {
-      if (exceptionBuilder == null) {
-        exceptionBuilder = new GoloCompilationException.Builder(module.getPackageAndClass().toString());
-      }
-      return exceptionBuilder;
-    }
-
-    public void errorMessage(GoloCompilationException.Problem.Type type,
-                              GoloASTNode node,
-                              String message) {
-      String errorMessage = String.format(
-          "%s at %s",
-          message, node.getPositionInSourceCode());
-      getOrCreateExceptionBuilder().report(type, node, errorMessage);
-    }
-
   }
 
-  public GoloModule transform(ASTCompilationUnit compilationUnit, GoloCompilationException.Builder builder) {
+  public GoloModule transform(ASTCompilationUnit compilationUnit) {
     Context context = new Context();
-    context.setExceptionBuilder(builder);
     visit(compilationUnit, context);
     return context.module;
   }
@@ -408,7 +400,7 @@ public class ParseTreeToGoloIrVisitor implements GoloParserVisitor {
     LocalReference reference = context.getReference(node.getName(), node);
     node.childrenAccept(this, data);
     if (reference == null) {
-      context.errorMessage(GoloCompilationException.Problem.Type.UNDECLARED_REFERENCE, node,
+      errorMessage(context, GoloCompilationException.Problem.Type.UNDECLARED_REFERENCE, node,
           "Assigning to either a parameter or an undeclared reference `" + node.getName() + "`");
     } else {
       AssignmentStatement assignmentStatement = assign(context.pop()).to(reference).ofAST(node);
@@ -531,7 +523,7 @@ public class ParseTreeToGoloIrVisitor implements GoloParserVisitor {
       ExpressionStatement statement = (ExpressionStatement) context.pop();
       if (statement instanceof NamedArgument) {
         if (!invocation.namedArgumentsComplete()) {
-          context.errorMessage(GoloCompilationException.Problem.Type.INCOMPLETE_NAMED_ARGUMENTS_USAGE, node,
+          errorMessage(context, GoloCompilationException.Problem.Type.INCOMPLETE_NAMED_ARGUMENTS_USAGE, node,
               invocation.getClass() + " `" + invocation.getName()
               + "` invocation should name either all or none of its arguments");
         }
@@ -662,7 +654,7 @@ public class ParseTreeToGoloIrVisitor implements GoloParserVisitor {
       } else if (child instanceof ExpressionStatement) {
         foreach.when(child);
       } else {
-        context.errorMessage( GoloCompilationException.Problem.Type.PARSING, node, "Malformed `foreach` loop");
+        errorMessage(context, GoloCompilationException.Problem.Type.PARSING, node, "Malformed `foreach` loop");
       }
     }
     context.push(block.add(foreach));
diff --git a/src/main/java/org/eclipse/golo/compiler/SugarExpansionVisitor.java b/src/main/java/org/eclipse/golo/compiler/SugarExpansionVisitor.java
index 8c970b1b..f34b4be9 100644
--- a/src/main/java/org/eclipse/golo/compiler/SugarExpansionVisitor.java
+++ b/src/main/java/org/eclipse/golo/compiler/SugarExpansionVisitor.java
@@ -315,14 +315,4 @@ class SugarExpansionVisitor extends AbstractGoloIrVisitor {
     assignment.replaceInParentBy(block);
     block.accept(this);
   }
-
-  /**
-   * Add struct factories if they don't already exists
-   *
-   */
-  @Override
-  public void visitStruct(Struct struct) {
-    module.addFunctions(struct.createFactories());
-  }
-
 }
diff --git a/src/main/java/org/eclipse/golo/compiler/ir/GoloFunction.java b/src/main/java/org/eclipse/golo/compiler/ir/GoloFunction.java
index 6c50172f..db12df96 100644
--- a/src/main/java/org/eclipse/golo/compiler/ir/GoloFunction.java
+++ b/src/main/java/org/eclipse/golo/compiler/ir/GoloFunction.java
@@ -19,7 +19,6 @@ import org.eclipse.golo.compiler.parser.GoloASTNode;
 
 import static java.util.Collections.unmodifiableList;
 import static java.util.Arrays.asList;
-import java.util.Objects;
 import static org.eclipse.golo.compiler.ir.Builders.*;
 import static java.util.Objects.requireNonNull;
 
@@ -345,30 +344,4 @@ public final class GoloFunction extends ExpressionStatement implements Scope {
   protected void replaceElement(GoloElement original, GoloElement newElement) {
     throw cantReplace();
   }
-
-  @Override
-  public int hashCode() {
-    return Objects.hash(this.name, this.getArity(), this.varargs);
-  }
-
-  @Override
-  public boolean equals(Object obj) {
-    if (obj == this) {
-      return true;
-    }
-    if (obj == null) {
-      return false;
-    }
-    if (getClass() != obj.getClass()) {
-      return false;
-    }
-    final GoloFunction other = (GoloFunction) obj;
-    if (!Objects.equals(this.name, other.name)) {
-      return false;
-    }
-    if (this.varargs != other.varargs) {
-      return false;
-    }
-    return this.getArity() == other.getArity();
-  }
 }
diff --git a/src/main/java/org/eclipse/golo/compiler/ir/GoloModule.java b/src/main/java/org/eclipse/golo/compiler/ir/GoloModule.java
index d926c226..653378f2 100644
--- a/src/main/java/org/eclipse/golo/compiler/ir/GoloModule.java
+++ b/src/main/java/org/eclipse/golo/compiler/ir/GoloModule.java
@@ -133,6 +133,7 @@ public final class GoloModule extends GoloElement implements FunctionContainer {
     structs.add(struct);
     makeParentOf(struct);
     struct.setModuleName(getPackageAndClass());
+    this.addFunctions(struct.createFactories());
   }
 
   public void addUnion(Union union) {
diff --git a/src/main/java/org/eclipse/golo/compiler/ir/NamedAugmentation.java b/src/main/java/org/eclipse/golo/compiler/ir/NamedAugmentation.java
index 5170ca37..20e3572e 100644
--- a/src/main/java/org/eclipse/golo/compiler/ir/NamedAugmentation.java
+++ b/src/main/java/org/eclipse/golo/compiler/ir/NamedAugmentation.java
@@ -78,7 +78,7 @@ public final class NamedAugmentation extends GoloElement implements FunctionCont
 
   @Override
   public void walk(GoloIrVisitor visitor) {
-    for (GoloFunction fun : new LinkedList<>(functions)) {
+    for (GoloFunction fun : new LinkedList<GoloFunction>(functions)) {
       fun.accept(visitor);
     }
   }
diff --git a/src/main/java/org/eclipse/golo/runtime/FunctionCallSupport.java b/src/main/java/org/eclipse/golo/runtime/FunctionCallSupport.java
index 1eab8a59..a4374ab8 100644
--- a/src/main/java/org/eclipse/golo/runtime/FunctionCallSupport.java
+++ b/src/main/java/org/eclipse/golo/runtime/FunctionCallSupport.java
@@ -340,22 +340,12 @@ public final class FunctionCallSupport {
 
   private static Object findStaticMethodOrField(Class<?> klass, String name, Object[] arguments) {
     for (Method method : klass.getDeclaredMethods()) {
-      if (methodMatches(name, arguments, method, false)) {
+      if (methodMatches(name, arguments, method)) {
         return method;
       }
     }
     for (Method method : klass.getMethods()) {
-      if (methodMatches(name, arguments, method, false)) {
-        return method;
-      }
-    }
-    for (Method method : klass.getDeclaredMethods()) {
-      if (methodMatches(name, arguments, method, true)) {
-        return method;
-      }
-    }
-    for (Method method : klass.getMethods()) {
-      if (methodMatches(name, arguments, method, true)) {
+      if (methodMatches(name, arguments, method)) {
         return method;
       }
     }
@@ -374,14 +364,14 @@ public final class FunctionCallSupport {
     return null;
   }
 
-  private static boolean methodMatches(String name, Object[] arguments, Method method, boolean varargs) {
+  private static boolean methodMatches(String name, Object[] arguments, Method method) {
     if (method.getName().equals(name) && isStatic(method.getModifiers())) {
       if (isMethodDecorated(method)) {
         return true;
       } else {
         Class<?>[] parameterTypes = method.getParameterTypes();
         if (TypeMatching.argumentsNumberMatch(arguments, method, parameterTypes)) {
-          if (TypeMatching.canAssign(parameterTypes, arguments, varargs)) {
+          if (TypeMatching.canAssign(parameterTypes, arguments, method.isVarArgs())) {
             return true;
           }
         }
diff --git a/src/main/java/org/eclipse/golo/runtime/RegularMethodFinder.java b/src/main/java/org/eclipse/golo/runtime/RegularMethodFinder.java
index fcb4f594..1b5f89f1 100644
--- a/src/main/java/org/eclipse/golo/runtime/RegularMethodFinder.java
+++ b/src/main/java/org/eclipse/golo/runtime/RegularMethodFinder.java
@@ -119,16 +119,9 @@ class RegularMethodFinder implements MethodFinder {
     Collections.addAll(methods, receiverClass.getMethods());
     Collections.addAll(methods, receiverClass.getDeclaredMethods());
     for (Method method : methods) {
-      if (isCandidateMethod(method) && !method.isVarArgs()) {
+      if (isCandidateMethod(method)) {
         candidates.add(method);
-      } else if (isValidPrivateStructAccess(method) && !method.isVarArgs()) {
-        candidates.add(method);
-      }
-    }
-    for (Method method : methods) {
-      if (isCandidateMethod(method) && method.isVarArgs()) {
-        candidates.add(method);
-      } else if (isValidPrivateStructAccess(method) && method.isVarArgs()) {
+      } else if (isValidPrivateStructAccess(method)) {
         candidates.add(method);
       }
     }
diff --git a/src/test/java/org/eclipse/golo/compiler/CompileAndRunTest.java b/src/test/java/org/eclipse/golo/compiler/CompileAndRunTest.java
index d6f1c616..27dc4298 100644
--- a/src/test/java/org/eclipse/golo/compiler/CompileAndRunTest.java
+++ b/src/test/java/org/eclipse/golo/compiler/CompileAndRunTest.java
@@ -585,13 +585,6 @@ public class CompileAndRunTest {
 
     Method test_arrays = moduleClass.getMethod("test_arrays");
     assertThat((String) test_arrays.invoke(null), is("[foo][[1, 2, 3, 4], [5, 6, 7], [8, 9], 0]"));
-
-    Method test_order_fixed = moduleClass.getMethod("test_order_fixed");
-    assertThat((String) test_order_fixed.invoke(null), is("fixed"));
-
-    Method test_order_var = moduleClass.getMethod("test_order_var");
-    assertThat((String) test_order_var.invoke(null), is("variable"));
-
   }
 
   @Test
@@ -671,13 +664,6 @@ public class CompileAndRunTest {
 
     Method funky = moduleClass.getMethod("funky");
     assertThat((Integer) funky.invoke(null), is(6));
-
-    Method test_order_fixed = moduleClass.getMethod("test_order_fixed");
-    assertThat((String) test_order_fixed.invoke(null), is("fixed"));
-
-    Method test_order_var = moduleClass.getMethod("test_order_var");
-    assertThat((String) test_order_var.invoke(null), is("variable"));
-
   }
 
   @Test
@@ -1396,12 +1382,6 @@ public class CompileAndRunTest {
     Method augmented_foo_bar_baz = moduleClass.getMethod("augmented_foo_bar_baz");
     result = augmented_foo_bar_baz.invoke(null);
     assertThat(result, is((Object) 2));
-
-    Method overloaded = moduleClass.getMethod("check_overload_factory");
-    result = overloaded.invoke(null);
-    assertThat(result, instanceOf(Integer.class));
-    assertThat(result, is(0));
-
   }
 
   @Test
@@ -1944,22 +1924,4 @@ public class CompileAndRunTest {
     }
   }
 
-  @Test(expectedExceptions = GoloCompilationException.class)
-  public void test_error_shadowing_function() throws Throwable {
-    try {
-      compileAndLoadGoloModule(SRC, "failure-error-shadowing-function.golo");
-      fail("A GoloCompilationException was expected");
-    } catch (GoloCompilationException expected) {
-      List<GoloCompilationException.Problem> problems = expected.getProblems();
-      assertThat(problems.size(), is(1));
-      MatcherAssert.assertThat(problems.get(0).getFirstToken(), notNullValue());
-      assertThat(problems.get(0).getFirstToken().startOffset, greaterThan(-1));
-      assertThat(problems.get(0).getFirstToken().endOffset, greaterThan(-1));
-      MatcherAssert.assertThat(problems.get(0).getLastToken(), notNullValue());
-      assertThat(problems.get(0).getLastToken().startOffset, greaterThan(-1));
-      assertThat(problems.get(0).getLastToken().endOffset, greaterThan(-1));
-      throw expected;
-    }
-  }
-
 }
diff --git a/src/test/java/org/eclipse/golo/compiler/ParseTreeToGoloIrAndVisitorsTest.java b/src/test/java/org/eclipse/golo/compiler/ParseTreeToGoloIrAndVisitorsTest.java
index e862efce..d35742c0 100644
--- a/src/test/java/org/eclipse/golo/compiler/ParseTreeToGoloIrAndVisitorsTest.java
+++ b/src/test/java/org/eclipse/golo/compiler/ParseTreeToGoloIrAndVisitorsTest.java
@@ -55,7 +55,7 @@ public class ParseTreeToGoloIrAndVisitorsTest {
 
     GoloModule module = null;
     try {
-      module = visitor.transform(compilationUnit, null);
+      module = visitor.transform(compilationUnit);
     } catch (GoloCompilationException e) {
       for (GoloCompilationException.Problem problem : e.getProblems()) {
         Tracing.println("[Problem] " + problem.getDescription());
@@ -73,7 +73,7 @@ public class ParseTreeToGoloIrAndVisitorsTest {
 
     GoloModule module = null;
     try {
-      module = visitor.transform(compilationUnit, null);
+      module = visitor.transform(compilationUnit);
     } catch (GoloCompilationException e) {
       for (GoloCompilationException.Problem problem : e.getProblems()) {
         Tracing.println("[Problem] " + problem.getDescription());
diff --git a/src/test/resources/for-execution/failure-error-shadowing-function.golo b/src/test/resources/for-execution/failure-error-shadowing-function.golo
deleted file mode 100644
index 5625cdc9..00000000
--- a/src/test/resources/for-execution/failure-error-shadowing-function.golo
+++ /dev/null
@@ -1,9 +0,0 @@
-module golotest.execution.ShadowingFunction
-
-function foo = |a| {
-  return null
-}
-
-function foo = |x| {
-  return null
-}
\ No newline at end of file
diff --git a/src/test/resources/for-execution/method-invocations.golo b/src/test/resources/for-execution/method-invocations.golo
index 40423346..e030dade 100644
--- a/src/test/resources/for-execution/method-invocations.golo
+++ b/src/test/resources/for-execution/method-invocations.golo
@@ -74,12 +74,3 @@ function funky = {
     define("adder", |this, x| -> |y| -> |z| -> x + y + z)
   return obj: adder(1)(2)(3)
 }
-
-augment java.lang.String {
-  function test = |this, a...| -> "variable"
-  function test = |this, a| -> "fixed"
-}
-
-function test_order_fixed = -> "":test(1)
-
-function test_order_var = -> "":test(1,2)
\ No newline at end of file
diff --git a/src/test/resources/for-execution/structs.golo b/src/test/resources/for-execution/structs.golo
index 52889ab0..fbd9b91f 100644
--- a/src/test/resources/for-execution/structs.golo
+++ b/src/test/resources/for-execution/structs.golo
@@ -1,7 +1,5 @@
 module golotest.execution.Structs
 
-import java.util.ArrayList
-
 # ............................................................................................... #
 
 struct Contact = { name, email }
@@ -82,14 +80,3 @@ function check_equals = ->
   and ImmutableCouple(1, 2) == ImmutableCouple(1, 2)
 
 function check_not_comparable = -> Couple(1, 2) < Point(1, 3)
-
-struct AList = { _holder }
-
-augment golotest.execution.Structs.types.AList {
-  function add = |this, value| -> this: _holder(): add(value)
-  function size = |this| -> this: _holder(): size()
-}
-
-function AList = -> golotest.execution.Structs.types.AList(ArrayList())
-
-function check_overload_factory = -> AList(): size()
diff --git a/src/test/resources/for-execution/varargs.golo b/src/test/resources/for-execution/varargs.golo
index 86754c87..50d0dc60 100644
--- a/src/test/resources/for-execution/varargs.golo
+++ b/src/test/resources/for-execution/varargs.golo
@@ -36,21 +36,4 @@ function test_array = {
 function test_arrays = {
   let bar = array[array[1, 2, 3, 4], array[5, 6, 7], array[8, 9], 0]
   return var_args_test("foo", bar)
-}
-
-function order_test = |a...| {
-  return "variable"
-}
-
-function order_test = |a| {
-  return "fixed"
-}
-
-function test_order_var = {
-  return order_test(1,2)
-}
-
-function test_order_fixed = {
-  return order_test(1)
-}
-
+}
\ No newline at end of file
