diff --git a/pom.xml b/pom.xml
index afbca829c..5a2d9b064 100644
--- a/pom.xml
+++ b/pom.xml
@@ -160,7 +160,7 @@
         <activation.version>1.2.2</activation.version>
         <assertj.version>3.24.2</assertj.version>
         <beanutils.version>1.9.4</beanutils.version>
-        <bind-api.version>2.3.3</bind-api.version>
+        <byte-buddy.version>1.14.9</byte-buddy.version>
         <c3p0.version>0.9.5.5</c3p0.version>
         <checker.version>3.40.0</checker.version>
         <collections.version>3.2.2</collections.version>
@@ -176,7 +176,7 @@
         <io.version>2.15.0</io.version>
         <j2objc.version>2.8</j2objc.version>
         <jackson.version>2.16.0</jackson.version>
-        <javabean-tester.version>2.6.0</javabean-tester.version>
+        <javabean-tester.version>2.6.1</javabean-tester.version>
         <jfreechart.version>1.5.4</jfreechart.version>
         <jhighlight.version>1.1.0</jhighlight.version>
         <jmockit.version>1.51.0</jmockit.version>
@@ -191,8 +191,6 @@
         <mchange.version>0.2.20</mchange.version>
         <ojdbc.version>19.21.0.0</ojdbc.version>
         <oshi.version>6.4.7</oshi.version>
-        <openejb.version>8.0.16</openejb.version>
-        <persistence.version>2.2.3</persistence.version>
         <quartz.version>2.4.0-rc2</quartz.version>
         <servlet-api.version>4.0.4</servlet-api.version>
         <sitemesh.version>2.5.1</sitemesh.version>
@@ -202,6 +200,7 @@
         <spring-security.version>5.8.8</spring-security.version>
         <text.version>1.11.0</text.version>
         <tomcat.version>9.0.83</tomcat.version>
+        <tomee.version>8.0.16</tomee.version>
         <transaction-api.version>2.0.1</transaction-api.version>
         <ucp.version>21.11.0.0</ucp.version>
         <wrapper.version>3.2.3</wrapper.version>
@@ -213,10 +212,9 @@
         <assembly.plugin>3.6.0</assembly.plugin>
         <build-helper.plugin>3.4.0</build-helper.plugin>
         <checkstyle.plugin>3.3.1</checkstyle.plugin>
-        <changelog.plugin>2.3</changelog.plugin>
         <clean.plugin>3.3.2</clean.plugin>
         <compiler.plugin>3.11.0</compiler.plugin>
-        <coveralls.plugin>4.4.1</coveralls.plugin>
+        <coveralls.plugin>4.5.0-M2</coveralls.plugin>
         <dependency.plugin>3.6.1</dependency.plugin>
         <dependency-check.plugin>8.4.3</dependency-check.plugin>
         <deploy.plugin>3.1.1</deploy.plugin>
@@ -242,7 +240,7 @@
         <resources.plugin>3.3.1</resources.plugin>
         <rewrite.plugin>5.13.0</rewrite.plugin>
         <scm-publish.plugin>3.2.1</scm-publish.plugin>
-        <site.plugin>3.12.1</site.plugin>
+        <site.plugin>4.0.0-M11</site.plugin>
         <sonar.plugin>3.10.0.2594</sonar.plugin>
         <sortpom.plugin>3.3.0</sortpom.plugin>
         <source.plugin>3.3.0</source.plugin>
@@ -257,7 +255,7 @@
         <build-tools.version>1.3.1</build-tools.version>
         <bugpattern.version>1.5.0</bugpattern.version>
         <checkstyle.version>10.12.5</checkstyle.version>
-        <ecj.version>3.33.0</ecj.version>
+        <ecj.version>3.35.0</ecj.version>
         <extra-enforcer-rules.version>1.7.0</extra-enforcer-rules.version>
         <sb-contrib.version>7.6.0</sb-contrib.version>
         <findsecbugs.version>1.12.0</findsecbugs.version>
@@ -292,6 +290,11 @@
                 <artifactId>assertj-core</artifactId>
                 <version>${assertj.version}</version>
             </dependency>
+            <dependency>
+                <groupId>net.bytebuddy</groupId>
+                <artifactId>byte-buddy</artifactId>
+                <version>${byte-buddy.version}</version>
+            </dependency>
             <dependency>
                 <groupId>com.github.hazendaz.jmockit</groupId>
                 <artifactId>jmockit</artifactId>
@@ -361,11 +364,6 @@
                 <artifactId>jakarta.transaction-api</artifactId>
                 <version>${transaction-api.version}</version>
             </dependency>
-            <dependency>
-                <groupId>org.eclipse.persistence</groupId>
-                <artifactId>jakarta.persistence</artifactId>
-                <version>${persistence.version}</version>
-            </dependency>
 
             <!-- JDBC / Connection Pools -->
             <dependency>
@@ -411,51 +409,36 @@
             </dependency>
             <dependency>
                 <groupId>org.apache.tomee</groupId>
-                <artifactId>openejb-core</artifactId>
-                <version>${openejb.version}</version>
+                <artifactId>openejb-api</artifactId>
+                <version>${tomee.version}</version>
                 <exclusions>
-                    <exclusion>
-                        <groupId>commons-logging</groupId>
-                        <artifactId>commons-logging</artifactId>
-                    </exclusion>
-                    <exclusion>
-                        <groupId>org.apache.geronimo.components</groupId>
-                        <artifactId>geronimo-connector</artifactId>
-                    </exclusion>
-                    <exclusion>
-                        <groupId>org.apache.geronimo.specs</groupId>
-                        <artifactId>geronimo-j2ee-connector_1.6_spec</artifactId>
-                    </exclusion>
-                    <exclusion>
-                        <groupId>org.apache.geronimo.javamail</groupId>
-                        <artifactId>geronimo-javamail_1.6_mail</artifactId>
-                    </exclusion>
-                    <exclusion>
-                        <groupId>org.apache.geronimo.components</groupId>
-                        <artifactId>geronimo-transaction</artifactId>
-                    </exclusion>
-                    <exclusion>
-                        <groupId>org.apache.openejb.shade</groupId>
-                        <artifactId>quartz-openejb-shade</artifactId>
-                    </exclusion>
                     <exclusion>
                         <groupId>org.apache.tomee</groupId>
-                        <artifactId>javaee-api</artifactId>
-                    </exclusion>
-                    <exclusion>
-                        <groupId>org.hsqldb</groupId>
-                        <artifactId>hsqldb</artifactId>
-                    </exclusion>
-                    <exclusion>
-                        <groupId>org.objectweb.howl</groupId>
-                        <artifactId>howl</artifactId>
+                        <artifactId>mbean-annotation-api</artifactId>
                     </exclusion>
+                </exclusions>
+            </dependency>
+            <dependency>
+                <groupId>org.apache.tomee</groupId>
+                <artifactId>openejb-core</artifactId>
+                <version>${tomee.version}</version>
+                <exclusions>
                     <exclusion>
-                        <groupId>org.slf4j</groupId>
-                        <artifactId>slf4j-jdk14</artifactId>
+                        <groupId>*</groupId>
+                        <artifactId>*</artifactId>
                     </exclusion>
                 </exclusions>
             </dependency>
+            <dependency>
+                <groupId>org.apache.tomee</groupId>
+                <artifactId>openejb-loader</artifactId>
+                <version>${tomee.version}</version>
+            </dependency>
+            <dependency>
+                <groupId>org.apache.tomee</groupId>
+                <artifactId>tomee-jdbc</artifactId>
+                <version>${tomee.version}</version>
+            </dependency>
             <dependency>
                 <groupId>org.vibur</groupId>
                 <artifactId>vibur-dbcp</artifactId>
@@ -803,11 +786,6 @@
                         </gitDescribe>
                     </configuration>
                 </plugin>
-                <plugin>
-                    <groupId>org.apache.maven.plugins</groupId>
-                    <artifactId>maven-changelog-plugin</artifactId>
-                    <version>${changelog.plugin}</version>
-                </plugin>
                 <plugin>
                     <groupId>org.apache.maven.plugins</groupId>
                     <artifactId>maven-project-info-reports-plugin</artifactId>
@@ -1040,16 +1018,9 @@
                     </executions>
                 </plugin>
                 <plugin>
-                    <groupId>io.jsonwebtoken.coveralls</groupId>
+                    <groupId>com.github.hazendaz.maven</groupId>
                     <artifactId>coveralls-maven-plugin</artifactId>
                     <version>${coveralls.plugin}</version>
-                    <dependencies>
-                        <dependency>
-                            <groupId>jakarta.xml.bind</groupId>
-                            <artifactId>jakarta.xml.bind-api</artifactId>
-                            <version>${bind-api.version}</version>
-                        </dependency>
-                    </dependencies>
                 </plugin>
                 <plugin>
                     <groupId>net.revelc.code.formatter</groupId>
@@ -1544,6 +1515,16 @@
             </build>
         </profile>
 
+        <profile>
+            <id>pre17</id>
+            <activation>
+                <jdk>(,17)</jdk>
+            </activation>
+            <properties>
+                <ecj.version>3.33.0</ecj.version>
+            </properties>
+        </profile>
+
         <profile>
             <id>jdk17on</id>
             <activation>
@@ -1632,7 +1613,7 @@
         </profile>
 
         <profile>
-            <id>rewrite-checkstyle</id>
+            <id>rewrite-common</id>
             <build>
                 <plugins>
                     <plugin>
@@ -1640,15 +1621,24 @@
                         <artifactId>rewrite-maven-plugin</artifactId>
                         <configuration>
                             <activeRecipes>
-                                <recipe>org.openrewrite.java.cleanup.Cleanup</recipe>
+                                <recipe>org.openrewrite.staticanalysis.CodeCleanup</recipe>
+                                <recipe>org.openrewrite.staticanalysis.CommonStaticAnalysis</recipe>
                                 <recipe>org.openrewrite.java.RemoveUnusedImports</recipe>
                             </activeRecipes>
                         </configuration>
+                        <dependencies>
+                            <dependency>
+                                <groupId>org.openrewrite.recipe</groupId>
+                                <artifactId>rewrite-static-analysis</artifactId>
+                                <version>1.1.0</version>
+                            </dependency>
+                        </dependencies>
                         <executions>
                             <execution>
                                 <goals>
                                     <goal>run</goal>
                                 </goals>
+                                <phase>process-sources</phase>
                             </execution>
                         </executions>
                     </plugin>
@@ -1657,7 +1647,7 @@
         </profile>
 
         <profile>
-            <id>rewrite-common</id>
+            <id>rewrite-java</id>
             <build>
                 <plugins>
                     <plugin>
@@ -1665,15 +1655,23 @@
                         <artifactId>rewrite-maven-plugin</artifactId>
                         <configuration>
                             <activeRecipes>
-                                <recipe>org.openrewrite.java.cleanup.CommonStaticAnalysis</recipe>
+                                <recipe>org.openrewrite.java.migrate.UpgradeToJava8</recipe>
                                 <recipe>org.openrewrite.java.RemoveUnusedImports</recipe>
                             </activeRecipes>
                         </configuration>
+                        <dependencies>
+                            <dependency>
+                                <groupId>org.openrewrite.recipe</groupId>
+                                <artifactId>rewrite-migrate-java</artifactId>
+                                <version>2.3.0</version>
+                            </dependency>
+                        </dependencies>
                         <executions>
                             <execution>
                                 <goals>
                                     <goal>run</goal>
                                 </goals>
+                                <phase>process-sources</phase>
                             </execution>
                         </executions>
                     </plugin>
@@ -1682,7 +1680,7 @@
         </profile>
 
         <profile>
-            <id>rewrite-java</id>
+            <id>rewrite-junit</id>
             <build>
                 <plugins>
                     <plugin>
@@ -1690,15 +1688,15 @@
                         <artifactId>rewrite-maven-plugin</artifactId>
                         <configuration>
                             <activeRecipes>
-                                <recipe>org.openrewrite.java.migrate.Java8toJava11</recipe>
+                                <recipe>org.openrewrite.java.testing.junit5.JUnit5BestPractices</recipe>
                                 <recipe>org.openrewrite.java.RemoveUnusedImports</recipe>
                             </activeRecipes>
                         </configuration>
                         <dependencies>
                             <dependency>
                                 <groupId>org.openrewrite.recipe</groupId>
-                                <artifactId>rewrite-migrate-java</artifactId>
-                                <version>2.3.0</version>
+                                <artifactId>rewrite-testing-frameworks</artifactId>
+                                <version>2.1.0</version>
                             </dependency>
                         </dependencies>
                         <executions>
@@ -1706,6 +1704,7 @@
                                 <goals>
                                     <goal>run</goal>
                                 </goals>
+                                <phase>process-sources</phase>
                             </execution>
                         </executions>
                     </plugin>
@@ -1738,6 +1737,41 @@
                                 <goals>
                                     <goal>run</goal>
                                 </goals>
+                                <phase>process-sources</phase>
+                            </execution>
+                        </executions>
+                    </plugin>
+                </plugins>
+            </build>
+        </profile>
+
+        <profile>
+            <id>rewrite-spring</id>
+            <build>
+                <plugins>
+                    <plugin>
+                        <groupId>org.openrewrite.maven</groupId>
+                        <artifactId>rewrite-maven-plugin</artifactId>
+                        <configuration>
+                            <activeRecipes>
+                                <recipe>org.openrewrite.java.spring.framework.UpgradeSpringFramework_5_3</recipe>
+                                <recipe>org.openrewrite.java.spring.security5.UpgradeSpringSecurity_5_8</recipe>
+                                <recipe>org.openrewrite.java.RemoveUnusedImports</recipe>
+                            </activeRecipes>
+                        </configuration>
+                        <dependencies>
+                            <dependency>
+                                <groupId>org.openrewrite.recipe</groupId>
+                                <artifactId>rewrite-spring</artifactId>
+                                <version>5.1.1</version>
+                            </dependency>
+                        </dependencies>
+                        <executions>
+                            <execution>
+                                <goals>
+                                    <goal>run</goal>
+                                </goals>
+                                <phase>process-sources</phase>
                             </execution>
                         </executions>
                     </plugin>
diff --git a/psi-probe-core/pom.xml b/psi-probe-core/pom.xml
index 526bc5cf6..e9f75b980 100644
--- a/psi-probe-core/pom.xml
+++ b/psi-probe-core/pom.xml
@@ -111,11 +111,26 @@
             <artifactId>tomcat-jdbc</artifactId>
             <scope>provided</scope>
         </dependency>
+        <dependency>
+            <groupId>org.apache.tomee</groupId>
+            <artifactId>openejb-api</artifactId>
+            <scope>provided</scope>
+        </dependency>
         <dependency>
             <groupId>org.apache.tomee</groupId>
             <artifactId>openejb-core</artifactId>
             <scope>provided</scope>
         </dependency>
+        <dependency>
+            <groupId>org.apache.tomee</groupId>
+            <artifactId>openejb-loader</artifactId>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.tomee</groupId>
+            <artifactId>tomee-jdbc</artifactId>
+            <scope>provided</scope>
+        </dependency>
         <dependency>
             <groupId>org.vibur</groupId>
             <artifactId>vibur-dbcp</artifactId>
diff --git a/psi-probe-core/src/main/java/psiprobe/AbstractTomcatContainer.java b/psi-probe-core/src/main/java/psiprobe/AbstractTomcatContainer.java
index 159ecd6e6..ec1091238 100644
--- a/psi-probe-core/src/main/java/psiprobe/AbstractTomcatContainer.java
+++ b/psi-probe-core/src/main/java/psiprobe/AbstractTomcatContainer.java
@@ -45,6 +45,7 @@ import org.apache.catalina.core.StandardContext;
 import org.apache.jasper.EmbeddedServletOptions;
 import org.apache.jasper.JspCompilationContext;
 import org.apache.jasper.Options;
+import org.apache.jasper.compiler.Compiler;
 import org.apache.jasper.compiler.JspRuntimeContext;
 import org.apache.naming.ContextBindings;
 import org.apache.naming.factory.ResourceLinkFactory;
@@ -262,7 +263,7 @@ public abstract class AbstractTomcatContainer implements TomcatContainer {
       return null;
     }
     Context result = findContextInternal(safeName);
-    if (result == null && "".equals(safeName)) {
+    if (result == null && safeName.isEmpty()) {
       result = findContextInternal("/");
     }
     return result;
@@ -296,7 +297,7 @@ public abstract class AbstractTomcatContainer implements TomcatContainer {
     if (contextName == null) {
       return null;
     }
-    if ("".equals(contextName)) {
+    if (contextName.isEmpty()) {
       return "ROOT";
     }
     if (contextName.startsWith("/")) {
@@ -360,7 +361,7 @@ public abstract class AbstractTomcatContainer implements TomcatContainer {
                 Item item = summary.getItems().get(name);
                 if (item != null) {
                   try {
-                    org.apache.jasper.compiler.Compiler compiler = jcctx.createCompiler();
+                    Compiler compiler = jcctx.createCompiler();
                     compiler.compile();
                     item.setState(Item.STATE_READY);
                     item.setException(null);
@@ -547,7 +548,7 @@ public abstract class AbstractTomcatContainer implements TomcatContainer {
 
             long time = System.currentTimeMillis();
             try {
-              org.apache.jasper.compiler.Compiler compiler = jcctx.createCompiler();
+              Compiler compiler = jcctx.createCompiler();
               if (compile) {
                 compiler.compile();
                 item.setState(Item.STATE_READY);
diff --git a/psi-probe-core/src/main/java/psiprobe/Utils.java b/psi-probe-core/src/main/java/psiprobe/Utils.java
index baeb2ced8..e1f2bf69a 100644
--- a/psi-probe-core/src/main/java/psiprobe/Utils.java
+++ b/psi-probe-core/src/main/java/psiprobe/Utils.java
@@ -11,8 +11,6 @@
 package psiprobe;
 
 import com.google.common.base.Strings;
-import com.uwyn.jhighlight.renderer.Renderer;
-import com.uwyn.jhighlight.renderer.XhtmlRendererFactory;
 
 import java.io.BufferedInputStream;
 import java.io.BufferedReader;
@@ -44,6 +42,8 @@ import javax.management.ObjectName;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
+import org.codelibs.jhighlight.renderer.Renderer;
+import org.codelibs.jhighlight.renderer.XhtmlRendererFactory;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -264,7 +264,7 @@ public final class Utils {
     contentTypeTokenizer.addSymbol(" ", true);
     contentTypeTokenizer.addSymbol(";", true);
 
-    try (Reader reader = new InputStreamReader(is, StandardCharsets.ISO_8859_1)) {
+    try (Reader reader = new InputStreamReader(is, StandardCharsets.UTF_8)) {
       jspTokenizer.setReader(reader);
       while (jspTokenizer.hasMore()) {
         Token token = jspTokenizer.nextToken();
@@ -304,7 +304,7 @@ public final class Utils {
       }
     }
 
-    return encoding != null ? encoding : "ISO-8859-1";
+    return encoding != null ? encoding : StandardCharsets.UTF_8.name();
   }
 
   /**
diff --git a/psi-probe-core/src/main/java/psiprobe/UtilsBase.java b/psi-probe-core/src/main/java/psiprobe/UtilsBase.java
index e455a9ca6..67865e50f 100644
--- a/psi-probe-core/src/main/java/psiprobe/UtilsBase.java
+++ b/psi-probe-core/src/main/java/psiprobe/UtilsBase.java
@@ -15,7 +15,7 @@ import java.util.Scanner;
 /**
  * Misc. static helper methods.
  */
-public class UtilsBase {
+public final class UtilsBase {
 
   /**
    * Prevent Instantiation.
diff --git a/psi-probe-core/src/main/java/psiprobe/beans/LogResolverBean.java b/psi-probe-core/src/main/java/psiprobe/beans/LogResolverBean.java
index fb498f1bd..b5bc4363c 100644
--- a/psi-probe-core/src/main/java/psiprobe/beans/LogResolverBean.java
+++ b/psi-probe-core/src/main/java/psiprobe/beans/LogResolverBean.java
@@ -271,7 +271,7 @@ public class LogResolverBean {
           cl = Thread.currentThread().getContextClassLoader().getParent();
         }
         try {
-          if ((root || logName != null)) {
+          if (root || logName != null) {
             if ("jdk".equals(logType)) {
               result = getJdk14LogDestination(cl, application, root, logName, logIndex);
             } else if ("log4j".equals(logType)) {
diff --git a/psi-probe-core/src/main/java/psiprobe/beans/ResourceResolverBean.java b/psi-probe-core/src/main/java/psiprobe/beans/ResourceResolverBean.java
index 20911a1a4..389dae131 100644
--- a/psi-probe-core/src/main/java/psiprobe/beans/ResourceResolverBean.java
+++ b/psi-probe-core/src/main/java/psiprobe/beans/ResourceResolverBean.java
@@ -189,12 +189,15 @@ public class ResourceResolverBean implements ResourceResolver {
     try {
       javax.naming.Context ctx = context != null ? new InitialContext() : getGlobalNamingContext();
       String jndiName = resolveJndiName(resourceName, context == null);
-      Object obj = ctx.lookup(jndiName);
       try {
         for (String accessorString : datasourceMappers) {
           logger.debug("Resetting datasource adapter: {}", accessorString);
           DatasourceAccessor accessor = Class.forName(accessorString)
               .asSubclass(DatasourceAccessor.class).getDeclaredConstructor().newInstance();
+          if (ctx == null) {
+            return false;
+          }
+          Object obj = ctx.lookup(jndiName);
           if (accessor.reset(obj)) {
             return true;
           }
@@ -221,6 +224,9 @@ public class ResourceResolverBean implements ResourceResolver {
     try {
       javax.naming.Context ctx = context != null ? new InitialContext() : getGlobalNamingContext();
       String jndiName = resolveJndiName(resourceName, context == null);
+      if (ctx == null) {
+        return null;
+      }
       Object obj = ctx.lookup(jndiName);
 
       if (obj instanceof DataSource) {
diff --git a/psi-probe-core/src/main/java/psiprobe/beans/accessors/Dbcp2DatasourceAccessor.java b/psi-probe-core/src/main/java/psiprobe/beans/accessors/Dbcp2DatasourceAccessor.java
index 17586c1f8..e4bb12ce4 100644
--- a/psi-probe-core/src/main/java/psiprobe/beans/accessors/Dbcp2DatasourceAccessor.java
+++ b/psi-probe-core/src/main/java/psiprobe/beans/accessors/Dbcp2DatasourceAccessor.java
@@ -29,7 +29,7 @@ public class Dbcp2DatasourceAccessor implements DatasourceAccessor {
       dataSourceInfo.setEstablishedConnections(source.getNumIdle() + source.getNumActive());
       dataSourceInfo.setMaxConnections(source.getMaxTotal());
       dataSourceInfo.setJdbcUrl(source.getUrl());
-      dataSourceInfo.setUsername(source.getUsername());
+      dataSourceInfo.setUsername(source.getUserName());
       dataSourceInfo.setResettable(false);
       dataSourceInfo.setType("commons-dbcp2");
     }
diff --git a/psi-probe-core/src/main/java/psiprobe/beans/accessors/OpenEjbBasicDatasourceAccessor.java b/psi-probe-core/src/main/java/psiprobe/beans/accessors/OpenEjbBasicDatasourceAccessor.java
index aea1b57df..03f7026a6 100644
--- a/psi-probe-core/src/main/java/psiprobe/beans/accessors/OpenEjbBasicDatasourceAccessor.java
+++ b/psi-probe-core/src/main/java/psiprobe/beans/accessors/OpenEjbBasicDatasourceAccessor.java
@@ -29,7 +29,7 @@ public class OpenEjbBasicDatasourceAccessor implements DatasourceAccessor {
       dataSourceInfo.setEstablishedConnections(source.getNumIdle() + source.getNumActive());
       dataSourceInfo.setMaxConnections(source.getMaxTotal());
       dataSourceInfo.setJdbcUrl(source.getUrl());
-      dataSourceInfo.setUsername(source.getUsername());
+      dataSourceInfo.setUsername(source.getUserName());
       dataSourceInfo.setResettable(false);
       dataSourceInfo.setType("commons-dbcp2");
     }
diff --git a/psi-probe-core/src/main/java/psiprobe/beans/accessors/TomEeJdbcPoolDatasourceAccessor.java b/psi-probe-core/src/main/java/psiprobe/beans/accessors/TomEeJdbcPoolDatasourceAccessor.java
index 4d0ff81a8..183de0b19 100644
--- a/psi-probe-core/src/main/java/psiprobe/beans/accessors/TomEeJdbcPoolDatasourceAccessor.java
+++ b/psi-probe-core/src/main/java/psiprobe/beans/accessors/TomEeJdbcPoolDatasourceAccessor.java
@@ -10,7 +10,7 @@
  */
 package psiprobe.beans.accessors;
 
-import org.apache.tomcat.jdbc.pool.DataSource;
+import org.apache.tomee.jdbc.TomEEDataSourceCreator;
 
 import psiprobe.model.DataSourceInfo;
 
@@ -24,7 +24,8 @@ public class TomEeJdbcPoolDatasourceAccessor implements DatasourceAccessor {
   public DataSourceInfo getInfo(Object resource) {
     DataSourceInfo dataSourceInfo = null;
     if (canMap(resource)) {
-      DataSource source = (DataSource) resource;
+      TomEEDataSourceCreator.TomEEDataSource source =
+          (TomEEDataSourceCreator.TomEEDataSource) resource;
       dataSourceInfo = new DataSourceInfo();
       dataSourceInfo.setBusyConnections(source.getNumActive());
       dataSourceInfo.setEstablishedConnections(source.getNumIdle() + source.getNumActive());
@@ -45,7 +46,8 @@ public class TomEeJdbcPoolDatasourceAccessor implements DatasourceAccessor {
   @Override
   public boolean canMap(Object resource) {
     return "org.apache.tomee.jdbc.TomEEDataSourceCreator$TomEEDataSource"
-        .equals(resource.getClass().getName()) && resource instanceof DataSource;
+        .equals(resource.getClass().getName())
+        && resource instanceof TomEEDataSourceCreator.TomEEDataSource;
   }
 
 }
diff --git a/psi-probe-core/src/main/java/psiprobe/beans/stats/collectors/AppStatsCollectorBean.java b/psi-probe-core/src/main/java/psiprobe/beans/stats/collectors/AppStatsCollectorBean.java
index 23ed12ed9..2f1e62040 100644
--- a/psi-probe-core/src/main/java/psiprobe/beans/stats/collectors/AppStatsCollectorBean.java
+++ b/psi-probe-core/src/main/java/psiprobe/beans/stats/collectors/AppStatsCollectorBean.java
@@ -118,7 +118,7 @@ public class AppStatsCollectorBean extends AbstractStatsCollectorBean
             Application app = new Application();
             ApplicationUtils.collectApplicationServletStats(ctx, app);
 
-            String appName = "".equals(ctx.getName()) ? "/" : ctx.getName();
+            String appName = ctx.getName().isEmpty() ? "/" : ctx.getName();
 
             long reqDelta =
                 buildDeltaStats("app.requests." + appName, app.getRequestCount(), currentTime);
@@ -173,7 +173,7 @@ public class AppStatsCollectorBean extends AbstractStatsCollectorBean
       if (tomcatContainer != null) {
         for (Context ctx : tomcatContainer.findContexts()) {
           if (ctx != null && ctx.getName() != null) {
-            String appName = "".equals(ctx.getName()) ? "/" : ctx.getName();
+            String appName = ctx.getName().isEmpty() ? "/" : ctx.getName();
             reset(appName);
           }
         }
diff --git a/psi-probe-core/src/main/java/psiprobe/beans/stats/providers/AbstractSeriesProvider.java b/psi-probe-core/src/main/java/psiprobe/beans/stats/providers/AbstractSeriesProvider.java
index 9e473ffee..a9df2fa23 100644
--- a/psi-probe-core/src/main/java/psiprobe/beans/stats/providers/AbstractSeriesProvider.java
+++ b/psi-probe-core/src/main/java/psiprobe/beans/stats/providers/AbstractSeriesProvider.java
@@ -25,6 +25,9 @@ public abstract class AbstractSeriesProvider implements SeriesProvider {
   /** The logger. */
   protected final Logger logger = LoggerFactory.getLogger(getClass());
 
+  /** The lock. */
+  private final Object lockObj = new Object();
+
   /**
    * To series.
    *
@@ -35,7 +38,7 @@ public abstract class AbstractSeriesProvider implements SeriesProvider {
    */
   protected XYSeries toSeries(String legend, List<XYDataItem> stats) {
     XYSeries xySeries = new XYSeries(legend, true, false);
-    synchronized (stats) {
+    synchronized (lockObj) {
       for (XYDataItem item : stats) {
         xySeries.addOrUpdate(item.getX(), item.getY());
       }
diff --git a/psi-probe-core/src/main/java/psiprobe/beans/stats/providers/ConnectorSeriesProvider.java b/psi-probe-core/src/main/java/psiprobe/beans/stats/providers/ConnectorSeriesProvider.java
index 7513cbd20..d94ddc933 100644
--- a/psi-probe-core/src/main/java/psiprobe/beans/stats/providers/ConnectorSeriesProvider.java
+++ b/psi-probe-core/src/main/java/psiprobe/beans/stats/providers/ConnectorSeriesProvider.java
@@ -16,6 +16,7 @@ import javax.servlet.http.HttpServletRequest;
 
 import org.jfree.data.xy.DefaultTableXYDataset;
 import org.jfree.data.xy.XYDataItem;
+import org.springframework.web.bind.ServletRequestBindingException;
 import org.springframework.web.bind.ServletRequestUtils;
 
 import psiprobe.model.stats.StatsCollection;
@@ -29,21 +30,24 @@ public class ConnectorSeriesProvider extends AbstractSeriesProvider {
   public void populate(DefaultTableXYDataset dataset, StatsCollection statsCollection,
       HttpServletRequest request) {
 
-    // get Connector name from the request
-    String connectorName = ServletRequestUtils.getStringParameter(request, "cn", null);
-
-    // type of statistic to be displayed
-    String statType = ServletRequestUtils.getStringParameter(request, "st", null);
-
-    // Series legend
-    String series1Legend = ServletRequestUtils.getStringParameter(request, "sl", "");
-
-    if (connectorName != null && statType != null) {
-      List<XYDataItem> stats =
-          statsCollection.getStats("stat.connector." + connectorName + "." + statType);
-      if (stats != null) {
-        dataset.addSeries(toSeries(series1Legend, stats));
+    try {
+      // get Connector name from the request
+      String connectorName = ServletRequestUtils.getStringParameter(request, "cn");
+
+      // type of statistic to be displayed
+      String statType = ServletRequestUtils.getStringParameter(request, "st");
+
+      if (connectorName != null && statType != null) {
+        List<XYDataItem> stats =
+            statsCollection.getStats("stat.connector." + connectorName + "." + statType);
+        if (stats != null) {
+          // Series legend
+          String series1Legend = ServletRequestUtils.getStringParameter(request, "sl", "");
+          dataset.addSeries(toSeries(series1Legend, stats));
+        }
       }
+    } catch (ServletRequestBindingException e) {
+      logger.error("", e);
     }
   }
 }
diff --git a/psi-probe-core/src/main/java/psiprobe/beans/stats/providers/StandardSeriesProvider.java b/psi-probe-core/src/main/java/psiprobe/beans/stats/providers/StandardSeriesProvider.java
index 30139f4fd..0567ff40d 100644
--- a/psi-probe-core/src/main/java/psiprobe/beans/stats/providers/StandardSeriesProvider.java
+++ b/psi-probe-core/src/main/java/psiprobe/beans/stats/providers/StandardSeriesProvider.java
@@ -18,6 +18,7 @@ import javax.servlet.http.HttpServletRequest;
 
 import org.jfree.data.xy.DefaultTableXYDataset;
 import org.jfree.data.xy.XYDataItem;
+import org.springframework.web.bind.ServletRequestBindingException;
 import org.springframework.web.bind.ServletRequestUtils;
 
 import psiprobe.model.stats.StatsCollection;
@@ -52,7 +53,12 @@ public class StandardSeriesProvider extends AbstractSeriesProvider {
   public void populate(DefaultTableXYDataset dataset, StatsCollection statsCollection,
       HttpServletRequest request) {
 
-    String seriesParam = ServletRequestUtils.getStringParameter(request, "sp", null);
+    String seriesParam = null;
+    try {
+      seriesParam = ServletRequestUtils.getStringParameter(request, "sp");
+    } catch (ServletRequestBindingException e) {
+      logger.error("", e);
+    }
     for (int i = 0; i < statNames.size(); i++) {
       String statName = statNames.get(i);
       if (seriesParam != null) {
diff --git a/psi-probe-core/src/main/java/psiprobe/controllers/AbstractContextHandlerController.java b/psi-probe-core/src/main/java/psiprobe/controllers/AbstractContextHandlerController.java
index 5397022dd..aeee76c8a 100644
--- a/psi-probe-core/src/main/java/psiprobe/controllers/AbstractContextHandlerController.java
+++ b/psi-probe-core/src/main/java/psiprobe/controllers/AbstractContextHandlerController.java
@@ -26,7 +26,7 @@ public abstract class AbstractContextHandlerController extends AbstractTomcatCon
   protected ModelAndView handleRequestInternal(HttpServletRequest request,
       HttpServletResponse response) throws Exception {
 
-    String contextName = ServletRequestUtils.getStringParameter(request, "webapp", null);
+    String contextName = ServletRequestUtils.getStringParameter(request, "webapp");
     Context context = null;
     if (contextName != null) {
       contextName = getContainerWrapper().getTomcatContainer().formatContextName(contextName);
diff --git a/psi-probe-core/src/main/java/psiprobe/controllers/RenderChartController.java b/psi-probe-core/src/main/java/psiprobe/controllers/RenderChartController.java
index 599a58baf..3c907ff0e 100644
--- a/psi-probe-core/src/main/java/psiprobe/controllers/RenderChartController.java
+++ b/psi-probe-core/src/main/java/psiprobe/controllers/RenderChartController.java
@@ -135,7 +135,7 @@ public class RenderChartController extends AbstractController {
     boolean showLegend = ServletRequestUtils.getBooleanParameter(request, "l", true);
 
     // Series provider
-    String provider = ServletRequestUtils.getStringParameter(request, "p", null);
+    String provider = ServletRequestUtils.getStringParameter(request, "p");
 
     // Chart type
     String chartType = ServletRequestUtils.getStringParameter(request, "ct", "area");
diff --git a/psi-probe-core/src/main/java/psiprobe/controllers/apps/BaseViewXmlConfController.java b/psi-probe-core/src/main/java/psiprobe/controllers/apps/BaseViewXmlConfController.java
index 6b1dce076..3d8e1240c 100644
--- a/psi-probe-core/src/main/java/psiprobe/controllers/apps/BaseViewXmlConfController.java
+++ b/psi-probe-core/src/main/java/psiprobe/controllers/apps/BaseViewXmlConfController.java
@@ -13,6 +13,7 @@ package psiprobe.controllers.apps;
 import java.io.File;
 import java.io.InputStream;
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 
 import javax.servlet.ServletContext;
@@ -124,7 +125,7 @@ public class BaseViewXmlConfController extends AbstractContextHandlerController
         try (InputStream fis = Files.newInputStream(xmlFile.toPath())) {
           String encoding = Charset.defaultCharset().displayName();
           mv.addObject("content", Utils.highlightStream(TARGET_WEB_XML, fis, "xml",
-              encoding == null ? "ISO-8859-1" : encoding));
+              encoding == null ? StandardCharsets.UTF_8.name() : encoding));
         }
       } else {
         logger.debug("File {} of {} application does not exists.", xmlPath, contextName);
diff --git a/psi-probe-core/src/main/java/psiprobe/controllers/connectors/BaseGetConnectorController.java b/psi-probe-core/src/main/java/psiprobe/controllers/connectors/BaseGetConnectorController.java
index 0ca519b19..177e851da 100644
--- a/psi-probe-core/src/main/java/psiprobe/controllers/connectors/BaseGetConnectorController.java
+++ b/psi-probe-core/src/main/java/psiprobe/controllers/connectors/BaseGetConnectorController.java
@@ -53,7 +53,7 @@ public class BaseGetConnectorController extends AbstractTomcatContainerControlle
   @Override
   protected ModelAndView handleRequestInternal(HttpServletRequest request,
       HttpServletResponse response) throws Exception {
-    String connectorName = ServletRequestUtils.getStringParameter(request, "cn", null);
+    String connectorName = ServletRequestUtils.getStringParameter(request, "cn");
     Connector connector = null;
 
     if (connectorName != null) {
diff --git a/psi-probe-core/src/main/java/psiprobe/controllers/datasources/ResetDataSourceController.java b/psi-probe-core/src/main/java/psiprobe/controllers/datasources/ResetDataSourceController.java
index d04faf786..2c6d2bf09 100644
--- a/psi-probe-core/src/main/java/psiprobe/controllers/datasources/ResetDataSourceController.java
+++ b/psi-probe-core/src/main/java/psiprobe/controllers/datasources/ResetDataSourceController.java
@@ -68,7 +68,7 @@ public class ResetDataSourceController extends AbstractContextHandlerController
   protected ModelAndView handleContext(String contextName, Context context,
       HttpServletRequest request, HttpServletResponse response) throws Exception {
 
-    String resourceName = ServletRequestUtils.getStringParameter(request, "resource", null);
+    String resourceName = ServletRequestUtils.getStringParameter(request, "resource");
     String referer = request.getHeader("Referer");
     String redirectUrl;
     if (referer != null) {
diff --git a/psi-probe-core/src/main/java/psiprobe/controllers/deploy/CopySingleFileController.java b/psi-probe-core/src/main/java/psiprobe/controllers/deploy/CopySingleFileController.java
index b375eb980..d5591fc48 100644
--- a/psi-probe-core/src/main/java/psiprobe/controllers/deploy/CopySingleFileController.java
+++ b/psi-probe-core/src/main/java/psiprobe/controllers/deploy/CopySingleFileController.java
@@ -26,9 +26,9 @@ import javax.servlet.http.HttpServletResponse;
 import org.apache.catalina.Context;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.FilenameUtils;
+import org.apache.openejb.loader.Files;
 import org.apache.tomcat.util.http.fileupload.FileItem;
 import org.apache.tomcat.util.http.fileupload.FileItemFactory;
-import org.apache.tomcat.util.http.fileupload.FileUploadBase;
 import org.apache.tomcat.util.http.fileupload.disk.DiskFileItemFactory;
 import org.apache.tomcat.util.http.fileupload.servlet.ServletFileUpload;
 import org.apache.tomcat.util.http.fileupload.servlet.ServletRequestContext;
@@ -64,6 +64,11 @@ public class CopySingleFileController extends AbstractTomcatContainerController
   protected ModelAndView handleRequestInternal(HttpServletRequest request,
       HttpServletResponse response) throws Exception {
 
+    // If not multi-part content, exit
+    if (!ServletFileUpload.isMultipartContent(request)) {
+      return new ModelAndView(new InternalResourceView(getViewName()));
+    }
+
     List<Context> apps;
     try {
       apps = getContainerWrapper().getTomcatContainer().findContexts();
@@ -84,121 +89,114 @@ public class CopySingleFileController extends AbstractTomcatContainerController
     }
     request.setAttribute("apps", applications);
 
-    if (FileUploadBase.isMultipartContent(new ServletRequestContext(request))) {
-
-      File tmpFile = null;
-      String contextName = null;
-      String where = null;
-      boolean reload = false;
-      boolean discard = false;
-
-      // parse multipart request and extract the file
-      FileItemFactory factory =
-          new DiskFileItemFactory(1048000, new File(System.getProperty("java.io.tmpdir")));
-      ServletFileUpload upload = new ServletFileUpload(factory);
-      upload.setSizeMax(-1);
-      upload.setHeaderEncoding(StandardCharsets.UTF_8.name());
-      try {
-        List<FileItem> fileItems = upload.parseRequest(new ServletRequestContext(request));
-        for (FileItem fi : fileItems) {
-          if (!fi.isFormField()) {
-            if (fi.getName() != null && fi.getName().length() > 0) {
-              tmpFile = new File(System.getProperty("java.io.tmpdir"),
-                  FilenameUtils.getName(fi.getName()));
-              fi.write(tmpFile);
-            }
-          } else if ("context".equals(fi.getFieldName())) {
-            contextName = fi.getString();
-          } else if ("where".equals(fi.getFieldName())) {
-            where = fi.getString();
-          } else if ("reload".equals(fi.getFieldName()) && "yes".equals(fi.getString())) {
-            reload = true;
-          } else if ("discard".equals(fi.getFieldName()) && "yes".equals(fi.getString())) {
-            discard = true;
+    File tmpFile = null;
+    String contextName = null;
+    String where = null;
+    boolean reload = false;
+    boolean discard = false;
+
+    // parse multipart request and extract the file
+    FileItemFactory factory =
+        new DiskFileItemFactory(1048000, new File(System.getProperty("java.io.tmpdir")));
+    ServletFileUpload upload = new ServletFileUpload(factory);
+    upload.setSizeMax(-1);
+    upload.setHeaderEncoding(StandardCharsets.UTF_8.name());
+    try {
+      List<FileItem> fileItems = upload.parseRequest(new ServletRequestContext(request));
+      for (FileItem fi : fileItems) {
+        if (!fi.isFormField()) {
+          if (fi.getName() != null && fi.getName().length() > 0) {
+            tmpFile =
+                new File(System.getProperty("java.io.tmpdir"), FilenameUtils.getName(fi.getName()));
+            fi.write(tmpFile);
           }
+        } else if ("context".equals(fi.getFieldName())) {
+          contextName = fi.getString();
+        } else if ("where".equals(fi.getFieldName())) {
+          where = fi.getString();
+        } else if ("reload".equals(fi.getFieldName()) && "yes".equals(fi.getString())) {
+          reload = true;
+        } else if ("discard".equals(fi.getFieldName()) && "yes".equals(fi.getString())) {
+          discard = true;
         }
-      } catch (Exception e) {
-        logger.error("Could not process file upload", e);
-        request.setAttribute("errorMessage", getMessageSourceAccessor()
-            .getMessage("probe.src.deploy.file.uploadfailure", new Object[] {e.getMessage()}));
-        if (tmpFile != null && tmpFile.exists() && !tmpFile.delete()) {
-          logger.error("Unable to delete temp upload file");
-        }
-        tmpFile = null;
       }
+    } catch (Exception e) {
+      logger.error("Could not process file upload", e);
+      request.setAttribute("errorMessage", getMessageSourceAccessor()
+          .getMessage("probe.src.deploy.file.uploadfailure", new Object[] {e.getMessage()}));
+      Files.delete(tmpFile);
+      tmpFile = null;
+    }
+
+    String errMsg = null;
 
-      String errMsg = null;
-
-      if (tmpFile != null) {
-        try {
-          if (!Strings.isNullOrEmpty(tmpFile.getName())) {
-
-            contextName = getContainerWrapper().getTomcatContainer().formatContextName(contextName);
-
-            String visibleContextName = "".equals(contextName) ? "/" : contextName;
-            request.setAttribute("contextName", visibleContextName);
-
-            // Check if context is already deployed
-            if (getContainerWrapper().getTomcatContainer().findContext(contextName) != null) {
-
-              File destFile = new File(getContainerWrapper().getTomcatContainer().getAppBase(),
-                  contextName + where);
-
-              // Checks if the destination path exists
-              if (destFile.exists()) {
-                if (!destFile.getAbsolutePath().contains("..")) {
-                  // Copy the file overwriting it if it already exists
-                  FileUtils.copyFileToDirectory(tmpFile, destFile);
-
-                  request.setAttribute("successFile", Boolean.TRUE);
-                  // Logging action
-                  Authentication auth = SecurityContextHolder.getContext().getAuthentication();
-                  // get username logger
-                  String name = auth.getName();
-                  logger.info(getMessageSourceAccessor().getMessage("probe.src.log.copyfile"), name,
-                      contextName);
-                  Context context =
-                      getContainerWrapper().getTomcatContainer().findContext(contextName);
-                  // Checks if DISCARD "work" directory is selected
-                  if (discard) {
-                    getContainerWrapper().getTomcatContainer().discardWorkDir(context);
-                    logger.info(getMessageSourceAccessor().getMessage("probe.src.log.discardwork"),
-                        name, contextName);
-                  }
-                  // Checks if RELOAD option is selected
-                  if (reload && context != null) {
-                    context.reload();
-                    request.setAttribute("reloadContext", Boolean.TRUE);
-                    logger.info(getMessageSourceAccessor().getMessage("probe.src.log.reload"), name,
-                        contextName);
-                  }
-                } else {
-                  errMsg =
-                      getMessageSourceAccessor().getMessage("probe.src.deploy.file.pathNotValid");
-                }
-              } else {
-                errMsg = getMessageSourceAccessor().getMessage("probe.src.deploy.file.notPath");
+    if (tmpFile == null) {
+      return new ModelAndView(new InternalResourceView(getViewName()));
+    }
+
+    try {
+      if (!Strings.isNullOrEmpty(tmpFile.getName())) {
+
+        contextName = getContainerWrapper().getTomcatContainer().formatContextName(contextName);
+
+        String visibleContextName = contextName.isEmpty() ? "/" : contextName;
+        request.setAttribute("contextName", visibleContextName);
+
+        // Check if context is already deployed
+        if (getContainerWrapper().getTomcatContainer().findContext(contextName) != null) {
+
+          File destFile = new File(getContainerWrapper().getTomcatContainer().getAppBase(),
+              contextName + where);
+
+          // Checks if the destination path exists
+          if (destFile.exists()) {
+            if (!destFile.getAbsolutePath().contains("..")) {
+              // Copy the file overwriting it if it already exists
+              FileUtils.copyFileToDirectory(tmpFile, destFile);
+
+              request.setAttribute("successFile", Boolean.TRUE);
+              // Logging action
+              Authentication auth = SecurityContextHolder.getContext().getAuthentication();
+              // get username logger
+              String name = auth.getName();
+              logger.info(getMessageSourceAccessor().getMessage("probe.src.log.copyfile"), name,
+                  contextName);
+              Context context = getContainerWrapper().getTomcatContainer().findContext(contextName);
+              // Checks if DISCARD "work" directory is selected
+              if (discard) {
+                getContainerWrapper().getTomcatContainer().discardWorkDir(context);
+                logger.info(getMessageSourceAccessor().getMessage("probe.src.log.discardwork"),
+                    name, contextName);
+              }
+              // Checks if RELOAD option is selected
+              if (reload && context != null) {
+                context.reload();
+                request.setAttribute("reloadContext", Boolean.TRUE);
+                logger.info(getMessageSourceAccessor().getMessage("probe.src.log.reload"), name,
+                    contextName);
               }
             } else {
-              errMsg = getMessageSourceAccessor().getMessage("probe.src.deploy.file.notExists",
-                  new Object[] {visibleContextName});
+              errMsg = getMessageSourceAccessor().getMessage("probe.src.deploy.file.pathNotValid");
             }
           } else {
-            errMsg = getMessageSourceAccessor().getMessage("probe.src.deploy.file.notFile.failure");
-          }
-        } catch (IOException e) {
-          errMsg = getMessageSourceAccessor().getMessage("probe.src.deploy.file.failure",
-              new Object[] {e.getMessage()});
-          logger.error("Tomcat throw an exception when trying to deploy", e);
-        } finally {
-          if (errMsg != null) {
-            request.setAttribute("errorMessage", errMsg);
-          }
-          if (!tmpFile.delete()) {
-            logger.error("Unable to delete temp upload file");
+            errMsg = getMessageSourceAccessor().getMessage("probe.src.deploy.file.notPath");
           }
+        } else {
+          errMsg = getMessageSourceAccessor().getMessage("probe.src.deploy.file.notExists",
+              new Object[] {visibleContextName});
         }
+      } else {
+        errMsg = getMessageSourceAccessor().getMessage("probe.src.deploy.file.notFile.failure");
+      }
+    } catch (IOException e) {
+      errMsg = getMessageSourceAccessor().getMessage("probe.src.deploy.file.failure",
+          new Object[] {e.getMessage()});
+      logger.error("Tomcat threw an exception when trying to deploy", e);
+    } finally {
+      if (errMsg != null) {
+        request.setAttribute("errorMessage", errMsg);
       }
+      Files.delete(tmpFile);
     }
     return new ModelAndView(new InternalResourceView(getViewName()));
   }
diff --git a/psi-probe-core/src/main/java/psiprobe/controllers/deploy/DeployContextController.java b/psi-probe-core/src/main/java/psiprobe/controllers/deploy/DeployContextController.java
index 119b5e90d..76736b979 100644
--- a/psi-probe-core/src/main/java/psiprobe/controllers/deploy/DeployContextController.java
+++ b/psi-probe-core/src/main/java/psiprobe/controllers/deploy/DeployContextController.java
@@ -41,7 +41,7 @@ public class DeployContextController extends AbstractTomcatContainerController {
   public ModelAndView handleRequestInternal(HttpServletRequest request,
       HttpServletResponse response) throws Exception {
 
-    String contextName = ServletRequestUtils.getStringParameter(request, "context", null);
+    String contextName = ServletRequestUtils.getStringParameter(request, "context");
 
     if (contextName != null) {
       try {
diff --git a/psi-probe-core/src/main/java/psiprobe/controllers/deploy/UploadWarController.java b/psi-probe-core/src/main/java/psiprobe/controllers/deploy/UploadWarController.java
index 9137c2ed3..fc577d750 100644
--- a/psi-probe-core/src/main/java/psiprobe/controllers/deploy/UploadWarController.java
+++ b/psi-probe-core/src/main/java/psiprobe/controllers/deploy/UploadWarController.java
@@ -22,9 +22,9 @@ import javax.servlet.http.HttpServletResponse;
 import org.apache.catalina.Context;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.FilenameUtils;
+import org.apache.openejb.loader.Files;
 import org.apache.tomcat.util.http.fileupload.FileItem;
 import org.apache.tomcat.util.http.fileupload.FileItemFactory;
-import org.apache.tomcat.util.http.fileupload.FileUploadBase;
 import org.apache.tomcat.util.http.fileupload.disk.DiskFileItemFactory;
 import org.apache.tomcat.util.http.fileupload.servlet.ServletFileUpload;
 import org.apache.tomcat.util.http.fileupload.servlet.ServletRequestContext;
@@ -62,136 +62,133 @@ public class UploadWarController extends AbstractTomcatContainerController {
   protected ModelAndView handleRequestInternal(HttpServletRequest request,
       HttpServletResponse response) throws Exception {
 
-    if (FileUploadBase.isMultipartContent(new ServletRequestContext(request))) {
-
-      File tmpWar = null;
-      String contextName = null;
-      boolean update = false;
-      boolean compile = false;
-      boolean discard = false;
-
-      // parse multipart request and extract the file
-      FileItemFactory factory =
-          new DiskFileItemFactory(1048000, new File(System.getProperty("java.io.tmpdir")));
-      ServletFileUpload upload = new ServletFileUpload(factory);
-      upload.setSizeMax(-1);
-      upload.setHeaderEncoding(StandardCharsets.UTF_8.name());
-      try {
-        List<FileItem> fileItems = upload.parseRequest(new ServletRequestContext(request));
-        for (FileItem fi : fileItems) {
-          if (!fi.isFormField()) {
-            if (fi.getName() != null && fi.getName().length() > 0) {
-              tmpWar = new File(System.getProperty("java.io.tmpdir"),
-                  FilenameUtils.getName(fi.getName()));
-              fi.write(tmpWar);
-            }
-          } else if ("context".equals(fi.getFieldName())) {
-            contextName = fi.getString();
-          } else if ("update".equals(fi.getFieldName()) && "yes".equals(fi.getString())) {
-            update = true;
-          } else if ("compile".equals(fi.getFieldName()) && "yes".equals(fi.getString())) {
-            compile = true;
-          } else if ("discard".equals(fi.getFieldName()) && "yes".equals(fi.getString())) {
-            discard = true;
+    // If not multi-part content, exit
+    if (!ServletFileUpload.isMultipartContent(request)) {
+      return new ModelAndView(new InternalResourceView(getViewName()));
+    }
+
+    File tmpWar = null;
+    String contextName = null;
+    boolean update = false;
+    boolean compile = false;
+    boolean discard = false;
+
+    // parse multipart request and extract the file
+    FileItemFactory factory =
+        new DiskFileItemFactory(1048000, new File(System.getProperty("java.io.tmpdir")));
+    ServletFileUpload upload = new ServletFileUpload(factory);
+    upload.setSizeMax(-1);
+    upload.setHeaderEncoding(StandardCharsets.UTF_8.name());
+    try {
+      List<FileItem> fileItems = upload.parseRequest(new ServletRequestContext(request));
+      for (FileItem fi : fileItems) {
+        if (!fi.isFormField()) {
+          if (fi.getName() != null && fi.getName().length() > 0) {
+            tmpWar =
+                new File(System.getProperty("java.io.tmpdir"), FilenameUtils.getName(fi.getName()));
+            fi.write(tmpWar);
           }
+        } else if ("context".equals(fi.getFieldName())) {
+          contextName = fi.getString();
+        } else if ("update".equals(fi.getFieldName()) && "yes".equals(fi.getString())) {
+          update = true;
+        } else if ("compile".equals(fi.getFieldName()) && "yes".equals(fi.getString())) {
+          compile = true;
+        } else if ("discard".equals(fi.getFieldName()) && "yes".equals(fi.getString())) {
+          discard = true;
         }
-      } catch (Exception e) {
-        logger.error("Could not process file upload", e);
-        request.setAttribute("errorMessage", getMessageSourceAccessor()
-            .getMessage("probe.src.deploy.war.uploadfailure", new Object[] {e.getMessage()}));
-        if (tmpWar != null && tmpWar.exists() && !tmpWar.delete()) {
-          logger.error("Unable to delete temp war file");
-        }
-        tmpWar = null;
       }
+    } catch (Exception e) {
+      logger.error("Could not process file upload", e);
+      request.setAttribute("errorMessage", getMessageSourceAccessor()
+          .getMessage("probe.src.deploy.war.uploadfailure", new Object[] {e.getMessage()}));
+      Files.delete(tmpWar);
+      tmpWar = null;
+    }
 
-      String errMsg = null;
+    String errMsg = null;
 
-      if (tmpWar != null) {
-        try {
-          if (tmpWar.getName().endsWith(".war")) {
+    if (tmpWar == null) {
+      return new ModelAndView(new InternalResourceView(getViewName()));
+    }
 
-            if (contextName == null || contextName.length() == 0) {
-              String warFileName = tmpWar.getName().replaceAll("\\.war$", "");
-              contextName = "/" + warFileName;
-            }
+    try {
+      if (tmpWar.getName().endsWith(".war")) {
 
-            contextName = getContainerWrapper().getTomcatContainer().formatContextName(contextName);
+        if (contextName == null || contextName.length() == 0) {
+          String warFileName = tmpWar.getName().replaceAll("\\.war$", "");
+          contextName = "/" + warFileName;
+        }
 
-            /*
-             * pass the name of the newly deployed context to the presentation layer using this name
-             * the presentation layer can render a url to view compilation details
-             */
-            String visibleContextName = "".equals(contextName) ? "/" : contextName;
-            request.setAttribute("contextName", visibleContextName);
+        contextName = getContainerWrapper().getTomcatContainer().formatContextName(contextName);
 
-            if (update
-                && getContainerWrapper().getTomcatContainer().findContext(contextName) != null) {
+        /*
+         * pass the name of the newly deployed context to the presentation layer using this name the
+         * presentation layer can render a url to view compilation details
+         */
+        String visibleContextName = contextName.isEmpty() ? "/" : contextName;
+        request.setAttribute("contextName", visibleContextName);
 
-              logger.debug("updating {}: removing the old copy", contextName);
-              getContainerWrapper().getTomcatContainer().remove(contextName);
-            }
+        if (update && getContainerWrapper().getTomcatContainer().findContext(contextName) != null) {
+          logger.debug("updating {}: removing the old copy", contextName);
+          getContainerWrapper().getTomcatContainer().remove(contextName);
+        }
 
-            if (getContainerWrapper().getTomcatContainer().findContext(contextName) == null) {
-              // move the .war to tomcat application base dir
-              String destWarFilename =
-                  getContainerWrapper().getTomcatContainer().formatContextFilename(contextName);
-              File destWar = new File(getContainerWrapper().getTomcatContainer().getAppBase(),
-                  destWarFilename + ".war");
-
-              FileUtils.moveFile(tmpWar, destWar);
-
-              // let Tomcat know that the file is there
-              getContainerWrapper().getTomcatContainer().installWar(contextName,
-                  new URL("jar:" + destWar.toURI().toURL() + "!/"));
-
-              Context ctx = getContainerWrapper().getTomcatContainer().findContext(contextName);
-              if (ctx == null) {
-                errMsg = getMessageSourceAccessor().getMessage("probe.src.deploy.war.notinstalled",
-                    new Object[] {visibleContextName});
-              } else {
-                request.setAttribute("success", Boolean.TRUE);
-                // Logging action
-                Authentication auth = SecurityContextHolder.getContext().getAuthentication();
-                // get username logger
-                String name = auth.getName();
-                logger.info(getMessageSourceAccessor().getMessage("probe.src.log.deploywar"), name,
-                    contextName);
-                if (discard) {
-                  getContainerWrapper().getTomcatContainer().discardWorkDir(ctx);
-                  logger.info(getMessageSourceAccessor().getMessage("probe.src.log.discardwork"),
-                      name, contextName);
-                }
-                if (compile) {
-                  Summary summary = new Summary();
-                  summary.setName(ctx.getName());
-                  getContainerWrapper().getTomcatContainer().listContextJsps(ctx, summary, true);
-                  request.getSession(false).setAttribute(DisplayJspController.SUMMARY_ATTRIBUTE,
-                      summary);
-                  request.setAttribute("compileSuccess", Boolean.TRUE);
-                }
-              }
-
-            } else {
-              errMsg = getMessageSourceAccessor().getMessage("probe.src.deploy.war.alreadyExists",
-                  new Object[] {visibleContextName});
-            }
+        if (getContainerWrapper().getTomcatContainer().findContext(contextName) == null) {
+          // move the .war to tomcat application base dir
+          String destWarFilename =
+              getContainerWrapper().getTomcatContainer().formatContextFilename(contextName);
+          File destWar = new File(getContainerWrapper().getTomcatContainer().getAppBase(),
+              destWarFilename + ".war");
+
+          FileUtils.moveFile(tmpWar, destWar);
+
+          // let Tomcat know that the file is there
+          getContainerWrapper().getTomcatContainer().installWar(contextName,
+              new URL("jar:" + destWar.toURI().toURL() + "!/"));
+
+          Context ctx = getContainerWrapper().getTomcatContainer().findContext(contextName);
+          if (ctx == null) {
+            errMsg = getMessageSourceAccessor().getMessage("probe.src.deploy.war.notinstalled",
+                new Object[] {visibleContextName});
           } else {
-            errMsg = getMessageSourceAccessor().getMessage("probe.src.deploy.war.notWar.failure");
-          }
-        } catch (IOException e) {
-          errMsg = getMessageSourceAccessor().getMessage("probe.src.deploy.war.failure",
-              new Object[] {e.getMessage()});
-          logger.error("Tomcat throw an exception when trying to deploy", e);
-        } finally {
-          if (errMsg != null) {
-            request.setAttribute("errorMessage", errMsg);
-          }
-          if (tmpWar.exists() && !tmpWar.delete()) {
-            logger.error("Unable to delete temp war file");
+            request.setAttribute("success", Boolean.TRUE);
+            // Logging action
+            Authentication auth = SecurityContextHolder.getContext().getAuthentication();
+            // get username logger
+            String name = auth.getName();
+            logger.info(getMessageSourceAccessor().getMessage("probe.src.log.deploywar"), name,
+                contextName);
+            if (discard) {
+              getContainerWrapper().getTomcatContainer().discardWorkDir(ctx);
+              logger.info(getMessageSourceAccessor().getMessage("probe.src.log.discardwork"), name,
+                  contextName);
+            }
+            if (compile) {
+              Summary summary = new Summary();
+              summary.setName(ctx.getName());
+              getContainerWrapper().getTomcatContainer().listContextJsps(ctx, summary, true);
+              request.getSession(false).setAttribute(DisplayJspController.SUMMARY_ATTRIBUTE,
+                  summary);
+              request.setAttribute("compileSuccess", Boolean.TRUE);
+            }
           }
+        } else {
+          errMsg = getMessageSourceAccessor().getMessage("probe.src.deploy.war.alreadyExists",
+              new Object[] {visibleContextName});
         }
+      } else {
+        errMsg = getMessageSourceAccessor().getMessage("probe.src.deploy.war.notWar.failure");
+      }
+    } catch (IOException e) {
+      errMsg = getMessageSourceAccessor().getMessage("probe.src.deploy.war.failure",
+          new Object[] {e.getMessage()});
+      logger.error("Tomcat threw an exception when trying to deploy", e);
+    } finally {
+      if (errMsg != null) {
+        request.setAttribute("errorMessage", errMsg);
       }
+      Files.delete(tmpWar);
     }
     return new ModelAndView(new InternalResourceView(getViewName()));
   }
diff --git a/psi-probe-core/src/main/java/psiprobe/controllers/jsp/DownloadServletController.java b/psi-probe-core/src/main/java/psiprobe/controllers/jsp/DownloadServletController.java
index 05810d9c9..c3706700d 100644
--- a/psi-probe-core/src/main/java/psiprobe/controllers/jsp/DownloadServletController.java
+++ b/psi-probe-core/src/main/java/psiprobe/controllers/jsp/DownloadServletController.java
@@ -41,7 +41,7 @@ public class DownloadServletController extends AbstractContextHandlerController
   protected ModelAndView handleContext(String contextName, Context context,
       HttpServletRequest request, HttpServletResponse response) throws Exception {
 
-    String jspName = ServletRequestUtils.getStringParameter(request, "source", null);
+    String jspName = ServletRequestUtils.getStringParameter(request, "source");
 
     if (jspName != null) {
       String servletName =
diff --git a/psi-probe-core/src/main/java/psiprobe/controllers/jsp/RecompileJspController.java b/psi-probe-core/src/main/java/psiprobe/controllers/jsp/RecompileJspController.java
index 39f678f3f..e6c47324f 100644
--- a/psi-probe-core/src/main/java/psiprobe/controllers/jsp/RecompileJspController.java
+++ b/psi-probe-core/src/main/java/psiprobe/controllers/jsp/RecompileJspController.java
@@ -64,7 +64,7 @@ public class RecompileJspController extends AbstractContextHandlerController {
       getContainerWrapper().getTomcatContainer().recompileJsps(context, summary, names);
       request.getSession(false).setAttribute(DisplayJspController.SUMMARY_ATTRIBUTE, summary);
     } else if (summary != null && contextName.equals(summary.getName())) {
-      String name = ServletRequestUtils.getStringParameter(request, "source", null);
+      String name = ServletRequestUtils.getStringParameter(request, "source");
       if (name != null) {
         List<String> names = new ArrayList<>();
         names.add(name);
diff --git a/psi-probe-core/src/main/java/psiprobe/controllers/jsp/ViewServletSourceController.java b/psi-probe-core/src/main/java/psiprobe/controllers/jsp/ViewServletSourceController.java
index 59d04f6fc..d70a04676 100644
--- a/psi-probe-core/src/main/java/psiprobe/controllers/jsp/ViewServletSourceController.java
+++ b/psi-probe-core/src/main/java/psiprobe/controllers/jsp/ViewServletSourceController.java
@@ -48,7 +48,7 @@ public class ViewServletSourceController extends AbstractContextHandlerControlle
   protected ModelAndView handleContext(String contextName, Context context,
       HttpServletRequest request, HttpServletResponse response) throws Exception {
 
-    String jspName = ServletRequestUtils.getStringParameter(request, "source", null);
+    String jspName = ServletRequestUtils.getStringParameter(request, "source");
     ServletContext sctx = context.getServletContext();
     ServletConfig scfg = (ServletConfig) context.findChild("jsp");
     Options opt = new EmbeddedServletOptions(scfg, sctx);
diff --git a/psi-probe-core/src/main/java/psiprobe/controllers/jsp/ViewSourceController.java b/psi-probe-core/src/main/java/psiprobe/controllers/jsp/ViewSourceController.java
index edbd9b61d..446385fcc 100644
--- a/psi-probe-core/src/main/java/psiprobe/controllers/jsp/ViewSourceController.java
+++ b/psi-probe-core/src/main/java/psiprobe/controllers/jsp/ViewSourceController.java
@@ -53,7 +53,7 @@ public class ViewSourceController extends AbstractContextHandlerController {
   protected ModelAndView handleContext(String contextName, Context context,
       HttpServletRequest request, HttpServletResponse response) throws Exception {
 
-    String jspName = ServletRequestUtils.getStringParameter(request, "source", null);
+    String jspName = ServletRequestUtils.getStringParameter(request, "source");
     boolean highlight = ServletRequestUtils.getBooleanParameter(request, "highlight", true);
     Summary summary = (Summary) (request.getSession(false) != null
         ? request.getSession(false).getAttribute(DisplayJspController.SUMMARY_ATTRIBUTE)
diff --git a/psi-probe-core/src/main/java/psiprobe/controllers/sql/ExecuteSqlController.java b/psi-probe-core/src/main/java/psiprobe/controllers/sql/ExecuteSqlController.java
index 0d02bfe2c..b763cc926 100644
--- a/psi-probe-core/src/main/java/psiprobe/controllers/sql/ExecuteSqlController.java
+++ b/psi-probe-core/src/main/java/psiprobe/controllers/sql/ExecuteSqlController.java
@@ -61,7 +61,7 @@ public class ExecuteSqlController extends AbstractContextHandlerController {
       HttpServletRequest request, HttpServletResponse response) throws Exception {
 
     String resourceName = ServletRequestUtils.getStringParameter(request, "resource");
-    String sql = ServletRequestUtils.getStringParameter(request, "sql", null);
+    String sql = ServletRequestUtils.getStringParameter(request, "sql");
 
     if (sql == null || sql.isEmpty() || sql.trim().isEmpty()) {
       request.setAttribute("errorMessage",
diff --git a/psi-probe-core/src/main/java/psiprobe/controllers/threads/GetClassLoaderUrlsController.java b/psi-probe-core/src/main/java/psiprobe/controllers/threads/GetClassLoaderUrlsController.java
index 275621daa..3fdfec3db 100644
--- a/psi-probe-core/src/main/java/psiprobe/controllers/threads/GetClassLoaderUrlsController.java
+++ b/psi-probe-core/src/main/java/psiprobe/controllers/threads/GetClassLoaderUrlsController.java
@@ -47,7 +47,7 @@ public class GetClassLoaderUrlsController extends ParameterizableViewController
   protected ModelAndView handleRequestInternal(HttpServletRequest request,
       HttpServletResponse response) throws Exception {
 
-    String threadName = ServletRequestUtils.getStringParameter(request, "thread", null);
+    String threadName = ServletRequestUtils.getStringParameter(request, "thread");
 
     Thread thread = Utils.getThreadByName(threadName);
 
diff --git a/psi-probe-core/src/main/java/psiprobe/controllers/threads/ThreadStackController.java b/psi-probe-core/src/main/java/psiprobe/controllers/threads/ThreadStackController.java
index 538f13969..d9f2d9511 100644
--- a/psi-probe-core/src/main/java/psiprobe/controllers/threads/ThreadStackController.java
+++ b/psi-probe-core/src/main/java/psiprobe/controllers/threads/ThreadStackController.java
@@ -70,7 +70,7 @@ public class ThreadStackController extends ParameterizableViewController {
       HttpServletResponse response) throws Exception {
 
     long threadId = ServletRequestUtils.getLongParameter(request, "id", -1);
-    String threadName = ServletRequestUtils.getStringParameter(request, "name", null);
+    String threadName = ServletRequestUtils.getStringParameter(request, "name");
 
     List<ThreadStackElement> stack = null;
     MBeanServer mbeanServer = ManagementFactory.getPlatformMBeanServer();
diff --git a/psi-probe-core/src/main/java/psiprobe/tools/LogOutputStream.java b/psi-probe-core/src/main/java/psiprobe/tools/LogOutputStream.java
index 84b837ad2..ee9021d18 100644
--- a/psi-probe-core/src/main/java/psiprobe/tools/LogOutputStream.java
+++ b/psi-probe-core/src/main/java/psiprobe/tools/LogOutputStream.java
@@ -161,7 +161,7 @@ public final class LogOutputStream extends OutputStream {
    * @param message the message to be written
    */
   private void log(String message) {
-    if (message == null || "".equals(message)) {
+    if (message == null || message.isEmpty()) {
       return;
     }
     switch (level) {
diff --git a/psi-probe-core/src/main/java/psiprobe/tools/logging/jdk/Jdk14LoggerAccessor.java b/psi-probe-core/src/main/java/psiprobe/tools/logging/jdk/Jdk14LoggerAccessor.java
index 188a47961..cbcb38e33 100644
--- a/psi-probe-core/src/main/java/psiprobe/tools/logging/jdk/Jdk14LoggerAccessor.java
+++ b/psi-probe-core/src/main/java/psiprobe/tools/logging/jdk/Jdk14LoggerAccessor.java
@@ -10,6 +10,8 @@
  */
 package psiprobe.tools.logging.jdk;
 
+import com.google.common.base.Strings;
+
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.List;
@@ -73,7 +75,7 @@ public class Jdk14LoggerAccessor extends DefaultAccessor {
    * @return true, if is root
    */
   public boolean isRoot() {
-    return "".equals(getName()) || isJuliRoot();
+    return Strings.isNullOrEmpty(getName()) || isJuliRoot();
   }
 
   /**
diff --git a/psi-probe-core/src/main/java/psiprobe/tools/logging/log4j2/Log4J2LoggerConfigAccessor.java b/psi-probe-core/src/main/java/psiprobe/tools/logging/log4j2/Log4J2LoggerConfigAccessor.java
index bcdd4bd2d..03f685330 100644
--- a/psi-probe-core/src/main/java/psiprobe/tools/logging/log4j2/Log4J2LoggerConfigAccessor.java
+++ b/psi-probe-core/src/main/java/psiprobe/tools/logging/log4j2/Log4J2LoggerConfigAccessor.java
@@ -10,6 +10,8 @@
  */
 package psiprobe.tools.logging.log4j2;
 
+import com.google.common.base.Strings;
+
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
@@ -115,7 +117,7 @@ public class Log4J2LoggerConfigAccessor extends DefaultAccessor {
    * @return true, if is root
    */
   public boolean isRoot() {
-    return "".equals(getName());
+    return Strings.isNullOrEmpty(getName());
   }
 
   /**
diff --git a/psi-probe-core/src/site/site.xml b/psi-probe-core/src/site/site.xml
index 4ae516fd3..668300ca0 100644
--- a/psi-probe-core/src/site/site.xml
+++ b/psi-probe-core/src/site/site.xml
@@ -24,7 +24,7 @@
     <skin>
         <groupId>org.apache.maven.skins</groupId>
         <artifactId>maven-fluido-skin</artifactId>
-        <version>1.11.2</version>
+        <version>2.0.0-M8</version>
     </skin>
     <custom>
         <fluidoSkin>
diff --git a/psi-probe-core/src/test/java/psiprobe/beans/accessors/C3P0DatasourceAccessorTest.java b/psi-probe-core/src/test/java/psiprobe/beans/accessors/C3P0DatasourceAccessorTest.java
index fd8d8e75f..e88568770 100644
--- a/psi-probe-core/src/test/java/psiprobe/beans/accessors/C3P0DatasourceAccessorTest.java
+++ b/psi-probe-core/src/test/java/psiprobe/beans/accessors/C3P0DatasourceAccessorTest.java
@@ -64,7 +64,7 @@ class C3P0DatasourceAccessorTest {
    */
   @Test
   void getInfoTest() throws Exception {
-    accessor.getInfo(source);
+    Assertions.assertNotNull(accessor.getInfo(source));
   }
 
 }
diff --git a/psi-probe-core/src/test/java/psiprobe/beans/accessors/Dbcp2DatasourceAccessorTest.java b/psi-probe-core/src/test/java/psiprobe/beans/accessors/Dbcp2DatasourceAccessorTest.java
index 73cb2f03e..1cae1c736 100644
--- a/psi-probe-core/src/test/java/psiprobe/beans/accessors/Dbcp2DatasourceAccessorTest.java
+++ b/psi-probe-core/src/test/java/psiprobe/beans/accessors/Dbcp2DatasourceAccessorTest.java
@@ -10,7 +10,7 @@
  */
 package psiprobe.beans.accessors;
 
-import com.mchange.v2.c3p0.ComboPooledDataSource;
+import com.zaxxer.hikari.HikariDataSource;
 
 import org.apache.commons.dbcp2.BasicDataSource;
 import org.junit.jupiter.api.Assertions;
@@ -29,7 +29,7 @@ class Dbcp2DatasourceAccessorTest {
   BasicDataSource source;
 
   /** The bad source. */
-  ComboPooledDataSource badSource;
+  HikariDataSource badSource;
 
   /**
    * Before.
@@ -38,7 +38,7 @@ class Dbcp2DatasourceAccessorTest {
   void before() {
     accessor = new Dbcp2DatasourceAccessor();
     source = new BasicDataSource();
-    badSource = new ComboPooledDataSource();
+    badSource = new HikariDataSource();
   }
 
   /**
@@ -64,7 +64,7 @@ class Dbcp2DatasourceAccessorTest {
    */
   @Test
   void getInfoTest() throws Exception {
-    accessor.getInfo(source);
+    Assertions.assertNotNull(accessor.getInfo(source));
   }
 
 }
diff --git a/psi-probe-core/src/test/java/psiprobe/beans/accessors/HikariCpDatasourceAccessorTest.java b/psi-probe-core/src/test/java/psiprobe/beans/accessors/HikariCpDatasourceAccessorTest.java
index a65042880..015ce9068 100644
--- a/psi-probe-core/src/test/java/psiprobe/beans/accessors/HikariCpDatasourceAccessorTest.java
+++ b/psi-probe-core/src/test/java/psiprobe/beans/accessors/HikariCpDatasourceAccessorTest.java
@@ -10,7 +10,6 @@
  */
 package psiprobe.beans.accessors;
 
-import com.mchange.v2.c3p0.ComboPooledDataSource;
 import com.zaxxer.hikari.HikariDataSource;
 
 import mockit.Mocked;
@@ -19,6 +18,7 @@ import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
+import org.vibur.dbcp.ViburDBCPDataSource;
 
 /**
  * The Class HikariCpDatasourceAccessorTest.
@@ -33,7 +33,7 @@ class HikariCpDatasourceAccessorTest {
   HikariDataSource source;
 
   /** The bad source. */
-  ComboPooledDataSource badSource;
+  ViburDBCPDataSource badSource;
 
   /**
    * Before.
@@ -41,7 +41,7 @@ class HikariCpDatasourceAccessorTest {
   @BeforeEach
   void before() {
     accessor = new HikariCpDatasourceAccessor();
-    badSource = new ComboPooledDataSource();
+    badSource = new ViburDBCPDataSource();
   }
 
   /**
@@ -68,7 +68,7 @@ class HikariCpDatasourceAccessorTest {
   @Disabled
   @Test
   void getInfoTest() throws Exception {
-    accessor.getInfo(source);
+    Assertions.assertNotNull(accessor.getInfo(source));
   }
 
 }
diff --git a/psi-probe-core/src/test/java/psiprobe/beans/accessors/OpenEjbBasicDatasourceAccessorTest.java b/psi-probe-core/src/test/java/psiprobe/beans/accessors/OpenEjbBasicDatasourceAccessorTest.java
index 1fad76d07..45e1ab745 100644
--- a/psi-probe-core/src/test/java/psiprobe/beans/accessors/OpenEjbBasicDatasourceAccessorTest.java
+++ b/psi-probe-core/src/test/java/psiprobe/beans/accessors/OpenEjbBasicDatasourceAccessorTest.java
@@ -10,7 +10,7 @@
  */
 package psiprobe.beans.accessors;
 
-import com.mchange.v2.c3p0.ComboPooledDataSource;
+import com.zaxxer.hikari.HikariDataSource;
 
 import mockit.Mocked;
 import mockit.Tested;
@@ -18,7 +18,6 @@ import mockit.Tested;
 import org.apache.openejb.resource.jdbc.dbcp.BasicDataSource;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -35,7 +34,7 @@ class OpenEjbBasicDatasourceAccessorTest {
   BasicDataSource source;
 
   /** The bad source. */
-  ComboPooledDataSource badSource;
+  HikariDataSource badSource;
 
   /**
    * Before.
@@ -43,13 +42,12 @@ class OpenEjbBasicDatasourceAccessorTest {
   @BeforeEach
   void before() {
     accessor = new OpenEjbBasicDatasourceAccessor();
-    badSource = new ComboPooledDataSource();
+    badSource = new HikariDataSource();
   }
 
   /**
    * Can map test.
    */
-  @Disabled
   @Test
   void canMapTest() {
     Assertions.assertTrue(accessor.canMap(source));
@@ -70,7 +68,7 @@ class OpenEjbBasicDatasourceAccessorTest {
    */
   @Test
   void getInfoTest() throws Exception {
-    accessor.getInfo(source);
+    Assertions.assertNotNull(accessor.getInfo(source));
   }
 
 }
diff --git a/psi-probe-core/src/test/java/psiprobe/beans/accessors/OpenEjbManagedDatasourceAccessorTest.java b/psi-probe-core/src/test/java/psiprobe/beans/accessors/OpenEjbManagedDatasourceAccessorTest.java
index bf5a81a57..5fe58577c 100644
--- a/psi-probe-core/src/test/java/psiprobe/beans/accessors/OpenEjbManagedDatasourceAccessorTest.java
+++ b/psi-probe-core/src/test/java/psiprobe/beans/accessors/OpenEjbManagedDatasourceAccessorTest.java
@@ -10,7 +10,7 @@
  */
 package psiprobe.beans.accessors;
 
-import com.mchange.v2.c3p0.ComboPooledDataSource;
+import com.zaxxer.hikari.HikariDataSource;
 
 import mockit.Mocked;
 import mockit.Tested;
@@ -35,7 +35,7 @@ class OpenEjbManagedDatasourceAccessorTest {
   ManagedDataSource source;
 
   /** The bad source. */
-  ComboPooledDataSource badSource;
+  HikariDataSource badSource;
 
   /**
    * Before.
@@ -43,7 +43,7 @@ class OpenEjbManagedDatasourceAccessorTest {
   @BeforeEach
   void before() {
     accessor = new OpenEjbManagedDatasourceAccessor();
-    badSource = new ComboPooledDataSource();
+    badSource = new HikariDataSource();
   }
 
   /**
diff --git a/psi-probe-core/src/test/java/psiprobe/beans/accessors/OracleDatasourceAccessorTest.java b/psi-probe-core/src/test/java/psiprobe/beans/accessors/OracleDatasourceAccessorTest.java
index 9dfbdde72..afebce010 100644
--- a/psi-probe-core/src/test/java/psiprobe/beans/accessors/OracleDatasourceAccessorTest.java
+++ b/psi-probe-core/src/test/java/psiprobe/beans/accessors/OracleDatasourceAccessorTest.java
@@ -10,7 +10,7 @@
  */
 package psiprobe.beans.accessors;
 
-import com.mchange.v2.c3p0.ComboPooledDataSource;
+import com.zaxxer.hikari.HikariDataSource;
 
 import java.sql.SQLException;
 import java.util.Properties;
@@ -37,7 +37,7 @@ class OracleDatasourceAccessorTest {
   OracleDataSource source;
 
   /** The bad source. */
-  ComboPooledDataSource badSource;
+  HikariDataSource badSource;
 
   /**
    * Before.
@@ -47,7 +47,7 @@ class OracleDatasourceAccessorTest {
   @BeforeEach
   void before() throws SQLException {
     accessor = new OracleDatasourceAccessor();
-    badSource = new ComboPooledDataSource();
+    badSource = new HikariDataSource();
   }
 
   /**
@@ -79,7 +79,7 @@ class OracleDatasourceAccessorTest {
         result = new Properties();
       }
     };
-    accessor.getInfo(source);
+    Assertions.assertNotNull(accessor.getInfo(source));
   }
 
 }
diff --git a/psi-probe-core/src/test/java/psiprobe/beans/accessors/OracleUcpDatasourceAccessorTest.java b/psi-probe-core/src/test/java/psiprobe/beans/accessors/OracleUcpDatasourceAccessorTest.java
index 5b92895b6..6f385b075 100644
--- a/psi-probe-core/src/test/java/psiprobe/beans/accessors/OracleUcpDatasourceAccessorTest.java
+++ b/psi-probe-core/src/test/java/psiprobe/beans/accessors/OracleUcpDatasourceAccessorTest.java
@@ -10,7 +10,7 @@
  */
 package psiprobe.beans.accessors;
 
-import com.mchange.v2.c3p0.ComboPooledDataSource;
+import com.zaxxer.hikari.HikariDataSource;
 
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
@@ -33,7 +33,7 @@ class OracleUcpDatasourceAccessorTest {
   PoolXADataSourceImpl xaSource;
 
   /** The bad source. */
-  ComboPooledDataSource badSource;
+  HikariDataSource badSource;
 
   /**
    * Before.
@@ -43,7 +43,7 @@ class OracleUcpDatasourceAccessorTest {
     accessor = new OracleUcpDatasourceAccessor();
     source = new PoolDataSourceImpl();
     xaSource = new PoolXADataSourceImpl();
-    badSource = new ComboPooledDataSource();
+    badSource = new HikariDataSource();
   }
 
   /**
@@ -77,7 +77,7 @@ class OracleUcpDatasourceAccessorTest {
    */
   @Test
   void getInfoTest() throws Exception {
-    accessor.getInfo(source);
+    Assertions.assertNotNull(accessor.getInfo(source));
   }
 
 }
diff --git a/psi-probe-core/src/test/java/psiprobe/beans/accessors/TomcatJdbcPoolDatasourceAccessorTest.java b/psi-probe-core/src/test/java/psiprobe/beans/accessors/TomcatJdbcPoolDatasourceAccessorTest.java
index 0e9e9e8c6..36c978c6a 100644
--- a/psi-probe-core/src/test/java/psiprobe/beans/accessors/TomcatJdbcPoolDatasourceAccessorTest.java
+++ b/psi-probe-core/src/test/java/psiprobe/beans/accessors/TomcatJdbcPoolDatasourceAccessorTest.java
@@ -10,7 +10,7 @@
  */
 package psiprobe.beans.accessors;
 
-import com.mchange.v2.c3p0.ComboPooledDataSource;
+import com.zaxxer.hikari.HikariDataSource;
 
 import mockit.Mocked;
 
@@ -32,7 +32,7 @@ class TomcatJdbcPoolDatasourceAccessorTest {
   DataSource source;
 
   /** The bad source. */
-  ComboPooledDataSource badSource;
+  HikariDataSource badSource;
 
   /**
    * Before.
@@ -40,7 +40,7 @@ class TomcatJdbcPoolDatasourceAccessorTest {
   @BeforeEach
   void before() {
     accessor = new TomcatJdbcPoolDatasourceAccessor();
-    badSource = new ComboPooledDataSource();
+    badSource = new HikariDataSource();
   }
 
   /**
@@ -66,7 +66,7 @@ class TomcatJdbcPoolDatasourceAccessorTest {
    */
   @Test
   void getInfoTest() throws Exception {
-    accessor.getInfo(source);
+    Assertions.assertNotNull(accessor.getInfo(source));
   }
 
 }
diff --git a/psi-probe-core/src/test/java/psiprobe/beans/accessors/ViburCpDatasourceAccessorTest.java b/psi-probe-core/src/test/java/psiprobe/beans/accessors/ViburCpDatasourceAccessorTest.java
index 283b510cc..8a950bed2 100644
--- a/psi-probe-core/src/test/java/psiprobe/beans/accessors/ViburCpDatasourceAccessorTest.java
+++ b/psi-probe-core/src/test/java/psiprobe/beans/accessors/ViburCpDatasourceAccessorTest.java
@@ -10,7 +10,7 @@
  */
 package psiprobe.beans.accessors;
 
-import com.mchange.v2.c3p0.ComboPooledDataSource;
+import com.zaxxer.hikari.HikariDataSource;
 
 import mockit.Expectations;
 import mockit.Mocked;
@@ -34,7 +34,7 @@ class ViburCpDatasourceAccessorTest {
   ViburDBCPDataSource source;
 
   /** The bad source. */
-  ComboPooledDataSource badSource;
+  HikariDataSource badSource;
 
   /**
    * Before.
@@ -42,7 +42,7 @@ class ViburCpDatasourceAccessorTest {
   @BeforeEach
   void before() {
     accessor = new ViburCpDatasourceAccessor();
-    badSource = new ComboPooledDataSource();
+    badSource = new HikariDataSource();
   }
 
   /**
@@ -75,7 +75,7 @@ class ViburCpDatasourceAccessorTest {
         result = "viburJmx";
       }
     };
-    accessor.getInfo(source);
+    Assertions.assertNotNull(accessor.getInfo(source));
   }
 
 }
diff --git a/psi-probe-core/src/test/java/psiprobe/controllers/certificates/ListCertificatesControllerTest.java b/psi-probe-core/src/test/java/psiprobe/controllers/certificates/ListCertificatesControllerTest.java
index 747f77b04..bccf6b890 100644
--- a/psi-probe-core/src/test/java/psiprobe/controllers/certificates/ListCertificatesControllerTest.java
+++ b/psi-probe-core/src/test/java/psiprobe/controllers/certificates/ListCertificatesControllerTest.java
@@ -65,8 +65,7 @@ class ListCertificatesControllerTest {
 
     List<Cert> certs = controller.getCertificates(storeType, storeFile.toString(), storePassword);
 
-    assertThat(certs).doesNotContainNull();
-    assertThat(certs.size()).isEqualTo(2);
+    assertThat(certs).doesNotContainNull().hasSize(2);
     assertThat(certs.get(0).getAlias()).isEqualTo("*.google.com");
     assertThat(certs.get(1).getAlias()).isEqualTo("google_g2_2017");
   }
@@ -89,8 +88,7 @@ class ListCertificatesControllerTest {
     List<Cert> certs =
         controller.getCertificates(storeType, "localhost-truststore.jks", storePassword);
 
-    assertThat(certs).doesNotContainNull();
-    assertThat(certs.size()).isEqualTo(2);
+    assertThat(certs).doesNotContainNull().hasSize(2);
     assertThat(certs.get(0).getAlias()).isEqualTo("*.google.com");
     assertThat(certs.get(1).getAlias()).isEqualTo("google_g2_2017");
   }
@@ -114,8 +112,7 @@ class ListCertificatesControllerTest {
     List<Cert> certs =
         controller.getCertificates(storeType, storeFile.toURI().toString(), storePassword);
 
-    assertThat(certs).doesNotContainNull();
-    assertThat(certs.size()).isEqualTo(2);
+    assertThat(certs).doesNotContainNull().hasSize(2);
     assertThat(certs.get(0).getAlias()).isEqualTo("*.google.com");
     assertThat(certs.get(1).getAlias()).isEqualTo("google_g2_2017");
   }
@@ -138,8 +135,7 @@ class ListCertificatesControllerTest {
     List<Cert> certs =
         controller.getCertificates(storeType, "./localhost-truststore.jks", storePassword);
 
-    assertThat(certs).doesNotContainNull();
-    assertThat(certs.size()).isEqualTo(2);
+    assertThat(certs).doesNotContainNull().hasSize(2);
     assertThat(certs.get(0).getAlias()).isEqualTo("*.google.com");
     assertThat(certs.get(1).getAlias()).isEqualTo("google_g2_2017");
   }
diff --git a/psi-probe-rest/src/site/site.xml b/psi-probe-rest/src/site/site.xml
index 4ae516fd3..668300ca0 100644
--- a/psi-probe-rest/src/site/site.xml
+++ b/psi-probe-rest/src/site/site.xml
@@ -24,7 +24,7 @@
     <skin>
         <groupId>org.apache.maven.skins</groupId>
         <artifactId>maven-fluido-skin</artifactId>
-        <version>1.11.2</version>
+        <version>2.0.0-M8</version>
     </skin>
     <custom>
         <fluidoSkin>
diff --git a/psi-probe-tomcat10/src/site/site.xml b/psi-probe-tomcat10/src/site/site.xml
index 4ae516fd3..668300ca0 100644
--- a/psi-probe-tomcat10/src/site/site.xml
+++ b/psi-probe-tomcat10/src/site/site.xml
@@ -24,7 +24,7 @@
     <skin>
         <groupId>org.apache.maven.skins</groupId>
         <artifactId>maven-fluido-skin</artifactId>
-        <version>1.11.2</version>
+        <version>2.0.0-M8</version>
     </skin>
     <custom>
         <fluidoSkin>
diff --git a/psi-probe-tomcat10/src/test/java/psiprobe/Tomcat10ContainerAdapterTest.java b/psi-probe-tomcat10/src/test/java/psiprobe/Tomcat10ContainerAdapterTest.java
index f4ddafa9a..2c7960d43 100644
--- a/psi-probe-tomcat10/src/test/java/psiprobe/Tomcat10ContainerAdapterTest.java
+++ b/psi-probe-tomcat10/src/test/java/psiprobe/Tomcat10ContainerAdapterTest.java
@@ -69,22 +69,31 @@ class Tomcat10ContainerAdapterTest {
     assertTrue(adapter.canBoundTo("Apache Tomcat/10.1"));
   }
 
+  /**
+   * Can bound to nsjsp10.
+   */
+  @Test
+  void canBoundToNsJsp10() {
+    final Tomcat10ContainerAdapter adapter = new Tomcat10ContainerAdapter();
+    assertTrue(adapter.canBoundTo("NonStop(tm) Servlets For JavaServer Pages(tm) v10.1"));
+  }
+
   /**
    * Can bound to tomEE10.
    */
   @Test
   void canBoundToTomEE10() {
     final Tomcat10ContainerAdapter adapter = new Tomcat10ContainerAdapter();
-    assertTrue(adapter.canBoundTo("Apache Tomcat (TomEE)/10.1"));
+    assertTrue(adapter.canBoundTo("Apache Tomcat (TomEE)/10.0"));
   }
 
   /**
-   * Can bound to pivotal10.
+   * Can bound to vmware10.
    */
   @Test
-  void canBoundToPivotal10() {
+  void canBoundToVmware10() {
     final Tomcat10ContainerAdapter adapter = new Tomcat10ContainerAdapter();
-    assertTrue(adapter.canBoundTo("Pivotal tc..../10.1"));
+    assertTrue(adapter.canBoundTo("Vmware tc..../10.1"));
   }
 
   /**
diff --git a/psi-probe-tomcat11/src/site/site.xml b/psi-probe-tomcat11/src/site/site.xml
index 4ae516fd3..668300ca0 100644
--- a/psi-probe-tomcat11/src/site/site.xml
+++ b/psi-probe-tomcat11/src/site/site.xml
@@ -24,7 +24,7 @@
     <skin>
         <groupId>org.apache.maven.skins</groupId>
         <artifactId>maven-fluido-skin</artifactId>
-        <version>1.11.2</version>
+        <version>2.0.0-M8</version>
     </skin>
     <custom>
         <fluidoSkin>
diff --git a/psi-probe-tomcat11/src/test/java/psiprobe/Tomcat11ContainerAdapterTest.java b/psi-probe-tomcat11/src/test/java/psiprobe/Tomcat11ContainerAdapterTest.java
index 014fd2e77..5528956ac 100644
--- a/psi-probe-tomcat11/src/test/java/psiprobe/Tomcat11ContainerAdapterTest.java
+++ b/psi-probe-tomcat11/src/test/java/psiprobe/Tomcat11ContainerAdapterTest.java
@@ -28,6 +28,7 @@ import org.apache.tomcat.util.descriptor.web.ApplicationParameter;
 import org.apache.tomcat.util.descriptor.web.FilterDef;
 import org.apache.tomcat.util.descriptor.web.FilterMap;
 import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import psiprobe.model.ApplicationResource;
@@ -48,7 +49,7 @@ class Tomcat11ContainerAdapterTest {
   void createValve() {
     final Tomcat11ContainerAdapter adapter = new Tomcat11ContainerAdapter();
     Valve valve = adapter.createValve();
-    assertEquals("Tomcat10AgentValve[Container is null]", valve.toString());
+    assertEquals("Tomcat11AgentValve[Container is null]", valve.toString());
   }
 
   /**
@@ -66,25 +67,29 @@ class Tomcat11ContainerAdapterTest {
   @Test
   void canBoundToTomcat11() {
     final Tomcat11ContainerAdapter adapter = new Tomcat11ContainerAdapter();
-    assertTrue(adapter.canBoundTo("Apache Tomcat/10.1"));
+    assertTrue(adapter.canBoundTo("Apache Tomcat/11.0"));
   }
 
   /**
    * Can bound to tomEE11.
    */
+  // TODO Not yet supported
+  @Disabled
   @Test
   void canBoundToTomEE11() {
     final Tomcat11ContainerAdapter adapter = new Tomcat11ContainerAdapter();
-    assertTrue(adapter.canBoundTo("Apache Tomcat (TomEE)/10.1"));
+    assertTrue(adapter.canBoundTo("Apache Tomcat (TomEE)/11.0"));
   }
 
   /**
-   * Can bound to pivotal11.
+   * Can bound to vmware11.
    */
+  // TODO Not yet supported
+  @Disabled
   @Test
-  void canBoundToPivotal11() {
+  void canBoundToVmware11() {
     final Tomcat11ContainerAdapter adapter = new Tomcat11ContainerAdapter();
-    assertTrue(adapter.canBoundTo("Pivotal tc..../10.1"));
+    assertTrue(adapter.canBoundTo("Vmware tc..../11.0"));
   }
 
   /**
diff --git a/psi-probe-tomcat85/src/site/site.xml b/psi-probe-tomcat85/src/site/site.xml
index 4ae516fd3..668300ca0 100644
--- a/psi-probe-tomcat85/src/site/site.xml
+++ b/psi-probe-tomcat85/src/site/site.xml
@@ -24,7 +24,7 @@
     <skin>
         <groupId>org.apache.maven.skins</groupId>
         <artifactId>maven-fluido-skin</artifactId>
-        <version>1.11.2</version>
+        <version>2.0.0-M8</version>
     </skin>
     <custom>
         <fluidoSkin>
diff --git a/psi-probe-tomcat9/src/main/java/psiprobe/Tomcat90ContainerAdapter.java b/psi-probe-tomcat9/src/main/java/psiprobe/Tomcat90ContainerAdapter.java
index fa184e10a..975f5fd75 100644
--- a/psi-probe-tomcat9/src/main/java/psiprobe/Tomcat90ContainerAdapter.java
+++ b/psi-probe-tomcat9/src/main/java/psiprobe/Tomcat90ContainerAdapter.java
@@ -55,8 +55,7 @@ public class Tomcat90ContainerAdapter extends AbstractTomcatContainer {
       return false;
     }
     return binding.startsWith("Apache Tomcat/9.0")
-        || binding.startsWith("Apache Tomcat (TomEE)/9.0")
-        || binding.startsWith("Pivotal tc")
+        || binding.startsWith("Apache Tomcat (TomEE)/9.0") || binding.startsWith("Pivotal tc")
         || binding.startsWith("Vmware tc") && binding.contains("/9.0");
   }
 
diff --git a/psi-probe-tomcat9/src/site/site.xml b/psi-probe-tomcat9/src/site/site.xml
index 4ae516fd3..668300ca0 100644
--- a/psi-probe-tomcat9/src/site/site.xml
+++ b/psi-probe-tomcat9/src/site/site.xml
@@ -24,7 +24,7 @@
     <skin>
         <groupId>org.apache.maven.skins</groupId>
         <artifactId>maven-fluido-skin</artifactId>
-        <version>1.11.2</version>
+        <version>2.0.0-M8</version>
     </skin>
     <custom>
         <fluidoSkin>
diff --git a/psi-probe-tomcat9/src/test/java/psiprobe/Tomcat90ContainerAdapterTest.java b/psi-probe-tomcat9/src/test/java/psiprobe/Tomcat90ContainerAdapterTest.java
index 3d7378e59..05761a17b 100644
--- a/psi-probe-tomcat9/src/test/java/psiprobe/Tomcat90ContainerAdapterTest.java
+++ b/psi-probe-tomcat9/src/test/java/psiprobe/Tomcat90ContainerAdapterTest.java
@@ -87,6 +87,15 @@ class Tomcat90ContainerAdapterTest {
     assertTrue(adapter.canBoundTo("Pivotal tc..../9.0"));
   }
 
+  /**
+   * Can bound to vmware9.
+   */
+  @Test
+  void canBoundToVmware9() {
+    final Tomcat90ContainerAdapter adapter = new Tomcat90ContainerAdapter();
+    assertTrue(adapter.canBoundTo("Vmware tc..../9.0"));
+  }
+
   /**
    * Can bound to other.
    */
diff --git a/psi-probe-web/src/site/site.xml b/psi-probe-web/src/site/site.xml
index 4ae516fd3..668300ca0 100644
--- a/psi-probe-web/src/site/site.xml
+++ b/psi-probe-web/src/site/site.xml
@@ -24,7 +24,7 @@
     <skin>
         <groupId>org.apache.maven.skins</groupId>
         <artifactId>maven-fluido-skin</artifactId>
-        <version>1.11.2</version>
+        <version>2.0.0-M8</version>
     </skin>
     <custom>
         <fluidoSkin>
diff --git a/src/site/site.xml b/src/site/site.xml
index 5acadc535..51d0e2dff 100644
--- a/src/site/site.xml
+++ b/src/site/site.xml
@@ -24,7 +24,7 @@
     <skin>
         <groupId>org.apache.maven.skins</groupId>
         <artifactId>maven-fluido-skin</artifactId>
-        <version>1.11.2</version>
+        <version>2.0.0-M8</version>
     </skin>
     <custom>
         <fluidoSkin>
