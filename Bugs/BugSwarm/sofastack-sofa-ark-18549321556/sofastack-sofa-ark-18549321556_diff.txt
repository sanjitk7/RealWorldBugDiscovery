diff --git a/sofa-ark-parent/support/ark-tools/appDest b/sofa-ark-parent/support/ark-tools/appDest
deleted file mode 100644
index ac33de8f..00000000
Binary files a/sofa-ark-parent/support/ark-tools/appDest and /dev/null differ
diff --git a/sofa-ark-parent/support/ark-tools/dest b/sofa-ark-parent/support/ark-tools/dest
deleted file mode 100644
index 29803ad0..00000000
Binary files a/sofa-ark-parent/support/ark-tools/dest and /dev/null differ
diff --git a/sofa-ark-parent/support/ark-tools/src/main/java/com/alipay/sofa/ark/tools/Repackager.java b/sofa-ark-parent/support/ark-tools/src/main/java/com/alipay/sofa/ark/tools/Repackager.java
index 13b3a141..6ecdd1d0 100644
--- a/sofa-ark-parent/support/ark-tools/src/main/java/com/alipay/sofa/ark/tools/Repackager.java
+++ b/sofa-ark-parent/support/ark-tools/src/main/java/com/alipay/sofa/ark/tools/Repackager.java
@@ -563,7 +563,7 @@ public class Repackager {
     /**
      * An {@code EntryTransformer} that renames entries by applying a prefix.
      */
-     static final class RenamingEntryTransformer implements JarWriter.EntryTransformer {
+    static final class RenamingEntryTransformer implements JarWriter.EntryTransformer {
 
         private final String namePrefix;
 
diff --git a/sofa-ark-parent/support/ark-tools/src/test/java/com/alipay/sofa/ark/tools/JarWriterTest.java b/sofa-ark-parent/support/ark-tools/src/test/java/com/alipay/sofa/ark/tools/JarWriterTest.java
index c53d1a7a..fbba2e96 100644
--- a/sofa-ark-parent/support/ark-tools/src/test/java/com/alipay/sofa/ark/tools/JarWriterTest.java
+++ b/sofa-ark-parent/support/ark-tools/src/test/java/com/alipay/sofa/ark/tools/JarWriterTest.java
@@ -29,6 +29,7 @@ import java.util.jar.JarInputStream;
 import java.util.jar.Manifest;
 
 import static com.alipay.sofa.ark.tools.LibraryScope.MODULE;
+import static org.junit.Assert.assertEquals;
 
 /**
  * @author lylingzhen
@@ -38,9 +39,10 @@ public class JarWriterTest {
 
     private JarWriter jarWriter;
 
-    private File file = new File("./JarWriterTest");
+    private File      file        = new File("./JarWriterTest");
 
-    private String jarFilePath = this.getClass().getClassLoader().getResource("test-jar.jar").getFile();
+    private String    jarFilePath = this.getClass().getClassLoader().getResource("test-jar.jar")
+                                      .getFile();
 
     @Before
     public void setUp() throws IOException {
@@ -71,7 +73,8 @@ public class JarWriterTest {
         jarWriter.writeNestedLibrary("./", library);
         jarWriter.writeLoaderClasses(new JarInputStream(new FileInputStream(jarFilePath)));
 
-        ZipHeaderPeekInputStream zipHeaderPeekInputStream = new ZipHeaderPeekInputStream(new FileInputStream(jarFilePath));
-        zipHeaderPeekInputStream.read();
+        ZipHeaderPeekInputStream zipHeaderPeekInputStream = new ZipHeaderPeekInputStream(
+            new FileInputStream(jarFilePath));
+        assertEquals(80, zipHeaderPeekInputStream.read());
     }
 }
diff --git a/sofa-ark-parent/support/ark-tools/src/test/java/com/alipay/sofa/ark/tools/MainClassFinderTest.java b/sofa-ark-parent/support/ark-tools/src/test/java/com/alipay/sofa/ark/tools/MainClassFinderTest.java
index afdfb119..07e85b78 100644
--- a/sofa-ark-parent/support/ark-tools/src/test/java/com/alipay/sofa/ark/tools/MainClassFinderTest.java
+++ b/sofa-ark-parent/support/ark-tools/src/test/java/com/alipay/sofa/ark/tools/MainClassFinderTest.java
@@ -1,3 +1,19 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package com.alipay.sofa.ark.tools;
 
 import org.junit.Before;
@@ -11,7 +27,8 @@ import static org.junit.Assert.assertEquals;
 
 public class MainClassFinderTest {
 
-    private String jarFilePath = this.getClass().getClassLoader().getResource("test-jar.jar").getFile();
+    private String  jarFilePath = this.getClass().getClassLoader().getResource("test-jar.jar")
+                                    .getFile();
 
     private JarFile jarFile;
 
@@ -23,6 +40,6 @@ public class MainClassFinderTest {
     @Test
     public void testFindSingleMainClass() throws IOException {
         assertEquals("com.alipay.sofa.ark.sample.springbootdemo.SpringbootDemoApplication",
-                findSingleMainClass(jarFile, "", ""));
+            findSingleMainClass(jarFile, "", ""));
     }
 }
diff --git a/sofa-ark-parent/support/ark-tools/src/test/java/com/alipay/sofa/ark/tools/RepackagerTest.java b/sofa-ark-parent/support/ark-tools/src/test/java/com/alipay/sofa/ark/tools/RepackagerTest.java
index 90be900b..7315d889 100644
--- a/sofa-ark-parent/support/ark-tools/src/test/java/com/alipay/sofa/ark/tools/RepackagerTest.java
+++ b/sofa-ark-parent/support/ark-tools/src/test/java/com/alipay/sofa/ark/tools/RepackagerTest.java
@@ -25,11 +25,11 @@ import java.io.File;
 import java.lang.reflect.Field;
 import java.net.URL;
 import java.util.LinkedHashSet;
+import java.util.List;
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
 
-import static com.alipay.sofa.ark.tools.LibraryScope.CONTAINER;
-import static com.alipay.sofa.ark.tools.LibraryScope.MODULE;
+import static com.alipay.sofa.ark.tools.LibraryScope.*;
 import static com.alipay.sofa.ark.tools.Repackager.isZip;
 import static com.google.common.collect.Lists.newArrayList;
 import static com.google.common.collect.Sets.newHashSet;
@@ -44,9 +44,10 @@ public class RepackagerTest {
 
     private Repackager repackager;
 
-    private String jarFilePath = this.getClass().getClassLoader().getResource("test-jar.jar").getFile();
+    private String     jarFilePath = this.getClass().getClassLoader().getResource("test-jar.jar")
+                                       .getFile();
 
-    private File jarFile = new File(jarFilePath);
+    private File       jarFile     = new File(jarFilePath);
 
     @Before
     public void setUp() {
@@ -78,7 +79,7 @@ public class RepackagerTest {
 
         Field field = Repackager.class.getDeclaredField("arkContainerLibrary");
         field.setAccessible(true);
-        field.set(repackager, new Library("sofa-ark-2.0.jar", jarFile, CONTAINER,true));
+        field.set(repackager, new Library("sofa-ark-2.0.jar", jarFile, CONTAINER, true));
 
         repackager.setArkVersion("2.0");
         repackager.setBaseDir(new File(this.getClass().getClassLoader().getResource("").getFile()));
@@ -91,11 +92,15 @@ public class RepackagerTest {
         field.setAccessible(true);
         field.set(repackager, new GitInfo());
 
-        repackager.repackage(new File("./dest"), new File("./module"), callback -> {
-            Library library = new Library(jarFile, MODULE);
+        Library library = new Library(jarFile, PLUGIN);
+        repackager.repackage(new File("./target/dest"), new File("./target/module"), callback -> {
             callback.library(library);
         });
 
+        field = Repackager.class.getDeclaredField("arkModuleLibraries");
+        field.setAccessible(true);
+        assertEquals(newArrayList(library), field.get(repackager));
+        assertEquals(MODULE, ((List<Library>) field.get(repackager)).get(0).getScope());
         assertEquals("com.alipay.sofa.ark.sample.springbootdemo.SpringbootDemoApplication",
                 repackager.findMainMethodWithTimeoutWarning(new JarFile(jarFile)));
     }
@@ -134,10 +139,11 @@ public class RepackagerTest {
 
     @Test
     public void testRenamingEntryTransformer() {
-        RenamingEntryTransformer renamingEntryTransformer = new RenamingEntryTransformer("my-prefix");
+        RenamingEntryTransformer renamingEntryTransformer = new RenamingEntryTransformer(
+            "my-prefix");
         JarEntry jarEntry = new JarEntry("my-entry");
         jarEntry.setComment("xxx");
-        jarEntry.setExtra(new byte[]{});
+        jarEntry.setExtra(new byte[] {});
         jarEntry.setSize(1);
         jarEntry.setMethod(STORED);
         jarEntry.setCrc(1);
@@ -157,4 +163,4 @@ public class RepackagerTest {
         repackager.setDenyImportResources(null);
         repackager.setInjectPluginExportPackages(null);
     }
-}
+}
\ No newline at end of file
