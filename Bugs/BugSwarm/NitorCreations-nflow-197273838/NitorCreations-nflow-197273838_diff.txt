diff --git a/nflow-engine/src/main/java/io/nflow/engine/internal/dao/ExecutorDao.java b/nflow-engine/src/main/java/io/nflow/engine/internal/dao/ExecutorDao.java
index 83905f13..56a86e64 100644
--- a/nflow-engine/src/main/java/io/nflow/engine/internal/dao/ExecutorDao.java
+++ b/nflow-engine/src/main/java/io/nflow/engine/internal/dao/ExecutorDao.java
@@ -17,7 +17,9 @@ import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.util.List;
 
+import javax.annotation.PostConstruct;
 import javax.inject.Inject;
+import javax.inject.Singleton;
 
 import org.joda.time.DateTime;
 import org.slf4j.Logger;
@@ -41,6 +43,7 @@ import io.nflow.engine.workflow.executor.WorkflowExecutor;
  * Use setter injection because constructor injection may not work when nFlow is used in some legacy systems.
  */
 @Component
+@Singleton
 @SuppressFBWarnings(value = "SIC_INNER_SHOULD_BE_STATIC_ANON", justification = "common jdbctemplate practice")
 public class ExecutorDao {
   private static final Logger logger = getLogger(ExecutorDao.class);
@@ -72,12 +75,10 @@ public class ExecutorDao {
   @Inject
   public void setJdbcTemplate(@NFlow JdbcTemplate nflowJdbcTemplate) {
     this.jdbc = nflowJdbcTemplate;
-    if (this.jdbc != null) {
-      findHostMaxLength();
-    }
   }
 
-  private void findHostMaxLength() {
+  @PostConstruct
+  public void findHostMaxLength() {
     hostMaxLength = jdbc.query("select host from nflow_executor where 1 = 0", firstColumnLengthExtractor);
   }
 
diff --git a/nflow-engine/src/main/java/io/nflow/engine/internal/dao/WorkflowInstanceDao.java b/nflow-engine/src/main/java/io/nflow/engine/internal/dao/WorkflowInstanceDao.java
index f8b07368..dba18e12 100644
--- a/nflow-engine/src/main/java/io/nflow/engine/internal/dao/WorkflowInstanceDao.java
+++ b/nflow-engine/src/main/java/io/nflow/engine/internal/dao/WorkflowInstanceDao.java
@@ -33,7 +33,9 @@ import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
 
+import javax.annotation.PostConstruct;
 import javax.inject.Inject;
+import javax.inject.Singleton;
 
 import org.slf4j.Logger;
 import org.springframework.core.env.Environment;
@@ -72,6 +74,7 @@ import io.nflow.engine.workflow.instance.WorkflowInstanceAction.WorkflowActionTy
  * Use setter injection because constructor injection may not work when nFlow is used in some legacy systems.
  */
 @Component
+@Singleton
 @SuppressFBWarnings(value = "SIC_INNER_SHOULD_BE_STATIC_ANON", justification = "common jdbctemplate practice")
 public class WorkflowInstanceDao {
 
@@ -100,9 +103,6 @@ public class WorkflowInstanceDao {
   @Inject
   public void setJdbcTemplate(@NFlow JdbcTemplate nflowJdbcTemplate) {
     this.jdbc = nflowJdbcTemplate;
-    if (this.jdbc != null) {
-      findColumnMaxLengths();
-    }
   }
 
   @Inject
@@ -135,7 +135,8 @@ public class WorkflowInstanceDao {
     this.workflowInstanceExecutor = workflowInstanceExecutor;
   }
 
-  private void findColumnMaxLengths() {
+  @PostConstruct
+  public void findColumnMaxLengths() {
     instanceStateTextLength = jdbc.query("select state_text from nflow_workflow where 1 = 0", firstColumnLengthExtractor);
     actionStateTextLength = jdbc.query("select state_text from nflow_workflow_action where 1 = 0", firstColumnLengthExtractor);
   }
diff --git a/nflow-guice/src/main/java/io/nflow/config/guice/EngineModule.java b/nflow-guice/src/main/java/io/nflow/config/guice/EngineModule.java
index c2ebf55b..1aee5e36 100644
--- a/nflow-guice/src/main/java/io/nflow/config/guice/EngineModule.java
+++ b/nflow-guice/src/main/java/io/nflow/config/guice/EngineModule.java
@@ -28,6 +28,8 @@ import com.google.inject.util.Providers;
 
 import io.nflow.engine.internal.config.EngineConfiguration;
 import io.nflow.engine.internal.config.NFlow;
+import io.nflow.engine.internal.dao.ExecutorDao;
+import io.nflow.engine.internal.dao.WorkflowInstanceDao;
 import io.nflow.engine.internal.executor.WorkflowInstanceExecutor;
 import io.nflow.engine.internal.storage.db.DatabaseConfiguration;
 import io.nflow.engine.internal.storage.db.DatabaseInitializer;
@@ -122,7 +124,10 @@ public class EngineModule extends AbstractModule {
   }
 
   @Inject
-  void initPostConstruct(WorkflowDefinitionService workflowDefinitionService) throws Exception {
+  void initPostConstruct(WorkflowInstanceDao workflowInstanceDao, ExecutorDao executorDao,
+      WorkflowDefinitionService workflowDefinitionService) throws Exception {
+    workflowInstanceDao.findColumnMaxLengths();
+    executorDao.findHostMaxLength();
     workflowDefinitionService.postProcessWorkflowDefinitions();
   }
 }
