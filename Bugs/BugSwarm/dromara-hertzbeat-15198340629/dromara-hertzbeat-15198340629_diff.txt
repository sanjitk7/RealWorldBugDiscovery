diff --git a/alerter/src/main/java/org/dromara/hertzbeat/alert/controller/AlertReportController.java b/alerter/src/main/java/org/dromara/hertzbeat/alert/controller/AlertReportController.java
new file mode 100644
index 00000000..54a879ae
--- /dev/null
+++ b/alerter/src/main/java/org/dromara/hertzbeat/alert/controller/AlertReportController.java
@@ -0,0 +1,52 @@
+package org.dromara.hertzbeat.alert.controller;
+
+import io.swagger.v3.oas.annotations.Operation;
+import io.swagger.v3.oas.annotations.tags.Tag;
+import org.dromara.hertzbeat.alert.service.AlertService;
+import org.dromara.hertzbeat.alert.service.impl.AlertConvertTenCloudServiceImpl;
+import org.dromara.hertzbeat.common.entity.dto.AlertReport;
+import org.dromara.hertzbeat.common.entity.dto.Message;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+import javax.validation.Valid;
+
+import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
+
+/**
+ * @author zqr10159
+ * 第三方告警上报接口
+ */
+@Tag(name = "Extern Alarm Manage API | 第三方告警管理API")
+@RestController
+@RequestMapping(path = "/api/alerts/report", produces = {APPLICATION_JSON_VALUE})
+public class AlertReportController {
+    
+    @Autowired
+    AlertConvertTenCloudServiceImpl alertConvertTenCloudService;
+    
+    @Autowired
+    private AlertService alertService;
+    
+    @PostMapping("/tencloud")
+    @Operation(summary = "Interface for reporting external alarm information of tencloud ｜ 对外上报告警信息 接口",
+            description = "对外 新增一个腾讯云告警")
+    public ResponseEntity<Message<Void>> addNewAlertReportTencent(@Valid @RequestBody String alertReport) {
+        AlertReport convert = alertConvertTenCloudService.convert(alertReport);
+        alertService.addNewAlertReport(convert);
+        return ResponseEntity.ok(new Message<>("Add report success"));
+    }
+    
+    @PostMapping
+    @Operation(summary = "Interface for reporting external alarm information ｜ 对外上报告警信息 接口",
+            description = "对外 新增一个告警")
+    public ResponseEntity<Message<Void>> addNewAlertReport(@Valid @RequestBody AlertReport alertReport) {
+        // 校验请求数据 TODO
+        alertService.addNewAlertReport(alertReport);
+        return ResponseEntity.ok(new Message<>("Add report success"));
+    }
+}
diff --git a/alerter/src/main/java/org/dromara/hertzbeat/alert/dto/TenCloudAlertReport.java b/alerter/src/main/java/org/dromara/hertzbeat/alert/dto/TenCloudAlertReport.java
index 125009d7..c36bc90f 100644
--- a/alerter/src/main/java/org/dromara/hertzbeat/alert/dto/TenCloudAlertReport.java
+++ b/alerter/src/main/java/org/dromara/hertzbeat/alert/dto/TenCloudAlertReport.java
@@ -3,6 +3,8 @@ package org.dromara.hertzbeat.alert.dto;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
 import lombok.NoArgsConstructor;
 
 import java.io.Serializable;
@@ -11,9 +13,10 @@ import java.io.Serializable;
  * @author zqr10159
  * 腾讯云告警实体类
  */
-@lombok.Data
+@Data
 @AllArgsConstructor
 @NoArgsConstructor
+@Builder
 public class TenCloudAlertReport implements Serializable {
     @JsonProperty("sessionID")
     private String sessionId;
@@ -25,7 +28,7 @@ public class TenCloudAlertReport implements Serializable {
     private int durationTime;
     private String recoverTime;
 
-    @lombok.Data
+    @Data
     @AllArgsConstructor
     @NoArgsConstructor
     public static class AlarmObjInfo {
@@ -37,7 +40,7 @@ public class TenCloudAlertReport implements Serializable {
         private Dimensions dimensions;
     }
 
-    @lombok.Data
+    @Data
     @AllArgsConstructor
     @NoArgsConstructor
     public static class Dimensions {
@@ -46,7 +49,7 @@ public class TenCloudAlertReport implements Serializable {
         @JsonProperty("objID")
         private String objId;
     }
-    @lombok.Data
+    @Data
     @AllArgsConstructor
     @NoArgsConstructor
     public static class AlarmPolicyInfo {
@@ -58,7 +61,7 @@ public class TenCloudAlertReport implements Serializable {
         private String policyTypeCname;
         private Conditions conditions;
     }
-    @lombok.Data
+    @Data
     @AllArgsConstructor
     @NoArgsConstructor
     public static class Conditions {
diff --git a/alerter/src/test/java/org/dromara/hertzbeat/alert/controller/AlertReportControllerTest.java b/alerter/src/test/java/org/dromara/hertzbeat/alert/controller/AlertReportControllerTest.java
new file mode 100644
index 00000000..b04faffd
--- /dev/null
+++ b/alerter/src/test/java/org/dromara/hertzbeat/alert/controller/AlertReportControllerTest.java
@@ -0,0 +1,79 @@
+package org.dromara.hertzbeat.alert.controller;
+
+import org.dromara.hertzbeat.alert.dto.TenCloudAlertReport;
+import org.dromara.hertzbeat.alert.service.AlertService;
+import org.dromara.hertzbeat.alert.service.impl.AlertConvertTenCloudServiceImpl;
+import org.dromara.hertzbeat.common.constants.CommonConstants;
+import org.dromara.hertzbeat.common.entity.dto.AlertReport;
+import org.dromara.hertzbeat.common.util.JsonUtil;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
+import org.mockito.InjectMocks;
+import org.mockito.Mock;
+import org.mockito.junit.jupiter.MockitoExtension;
+import org.springframework.http.MediaType;
+import org.springframework.test.web.servlet.MockMvc;
+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
+import org.springframework.test.web.servlet.setup.MockMvcBuilders;
+
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
+
+/**
+ * unit test for {@link AlertReportController }
+ * @author tom
+ */
+@ExtendWith(MockitoExtension.class)
+class AlertReportControllerTest {
+    
+    private MockMvc mockMvc;
+    
+    @InjectMocks
+    private AlertReportController alertReportController;
+    
+    @Mock
+    private AlertService alertService;
+    
+    @Mock
+    AlertConvertTenCloudServiceImpl alertConvertTenCloudService;
+    
+    @BeforeEach
+    void setUp() {
+        this.mockMvc = MockMvcBuilders.standaloneSetup(alertReportController).build();
+    }
+    
+    @Test
+    void addNewAlertReportTencent() throws Exception {
+        TenCloudAlertReport report = TenCloudAlertReport.builder()
+                                             .sessionId("xxxxxxxx")
+                                             .alarmStatus("1")
+                                             .alarmType("metric")
+                                             .build();
+        mockMvc.perform(
+                        MockMvcRequestBuilders
+                                .post("/api/alerts/report/tencloud")
+                                .contentType(MediaType.APPLICATION_JSON)
+                                .content(JsonUtil.toJson(report))
+                )
+                .andExpect(status().isOk())
+                .andExpect(jsonPath("$.code").value((int) CommonConstants.SUCCESS_CODE))
+                .andExpect(content().json("{\"data\":null,\"msg\":\"Add report success\",\"code\":0}"))
+                .andReturn();
+    }
+    
+    @Test
+    void addNewAlertReport() throws Exception {
+        mockMvc.perform(
+                        MockMvcRequestBuilders
+                                .post("/api/alerts/report")
+                                .contentType(MediaType.APPLICATION_JSON)
+                                .content(JsonUtil.toJson(AlertReport.builder().build()))
+                )
+                .andExpect(status().isOk())
+                .andExpect(jsonPath("$.code").value((int) CommonConstants.SUCCESS_CODE))
+                .andExpect(content().json("{\"data\":null,\"msg\":\"Add report success\",\"code\":0}"))
+                .andReturn();
+    }
+}
diff --git a/alerter/src/test/java/org/dromara/hertzbeat/alert/controller/AlertsControllerTest.java b/alerter/src/test/java/org/dromara/hertzbeat/alert/controller/AlertsControllerTest.java
index 736360bb..5ac075ca 100644
--- a/alerter/src/test/java/org/dromara/hertzbeat/alert/controller/AlertsControllerTest.java
+++ b/alerter/src/test/java/org/dromara/hertzbeat/alert/controller/AlertsControllerTest.java
@@ -150,19 +150,4 @@ class AlertsControllerTest {
                 .andExpect(content().json("{\"data\":{\"total\":0,\"dealNum\":0,\"rate\":0.0,\"priorityWarningNum\":0,\"priorityCriticalNum\":0,\"priorityEmergencyNum\":0},\"msg\":null,\"code\":0}"))
                 .andReturn();
     }
-
-    @Test
-    void addNewAlertReport() throws Exception {
-
-        mockMvc.perform(
-                        MockMvcRequestBuilders
-                                .post("/api/alerts/report")
-                                .contentType(MediaType.APPLICATION_JSON)
-                                .content(JsonUtil.toJson(AlertReport.builder().build()))
-                )
-                .andExpect(status().isOk())
-                .andExpect(jsonPath("$.code").value((int) CommonConstants.SUCCESS_CODE))
-                .andExpect(content().json("{\"data\":null,\"msg\":\"Add report success\",\"code\":0}"))
-                .andReturn();
-    }
 }
