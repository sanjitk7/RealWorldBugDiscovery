diff --git a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractPythonCodegen.java b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractPythonCodegen.java
index dae3b400ae9..ee8b428f92d 100644
--- a/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractPythonCodegen.java
+++ b/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractPythonCodegen.java
@@ -946,16 +946,17 @@ public abstract class AbstractPythonCodegen extends DefaultCodegen implements Co
                 }
             }
 
-            // if model_generic.mustache is used and support additionalProperties
-            if (model.oneOf.isEmpty() && model.anyOf.isEmpty()
-                    && !model.isEnum
-                    && !this.disallowAdditionalPropertiesIfNotPresent) {
+            // if model_generic.mustache is used
+            if (model.oneOf.isEmpty() && model.anyOf.isEmpty() && !model.isEnum) {
+                typingImports.add("ClassVar");
                 typingImports.add("Dict");
-                typingImports.add("List");
                 typingImports.add("Any");
-                typingImports.add("ClassVar");
+                if(this.disallowAdditionalPropertiesIfNotPresent || model.isAdditionalPropertiesTrue) {
+                    typingImports.add("List");
+                }
             }
 
+
             //loop through properties/schemas to set up typing, pydantic
             for (CodegenProperty cp : codegenProperties) {
                 // is readOnly?
diff --git a/modules/openapi-generator/src/main/resources/python/api.mustache b/modules/openapi-generator/src/main/resources/python/api.mustache
index bf333649779..5adca12c2e6 100644
--- a/modules/openapi-generator/src/main/resources/python/api.mustache
+++ b/modules/openapi-generator/src/main/resources/python/api.mustache
@@ -2,12 +2,16 @@
 
 {{>partial_header}}
 
-import re  # noqa: F401
 import io
 import warnings
 
-from pydantic import validate_call, ValidationError, Field
-from typing import Dict, List, Optional, Tuple, Union, Any, Annotated
+from pydantic import validate_call, Field
+from typing import Dict, List, Optional, Tuple, Union, Any
+
+try:
+    from typing import Annotated
+except ImportError:
+    from typing_extensions import Annotated
 
 {{#imports}}
 {{import}}
@@ -15,10 +19,6 @@ from typing import Dict, List, Optional, Tuple, Union, Any, Annotated
 
 from {{packageName}}.api_client import ApiClient
 from {{packageName}}.api_response import ApiResponse
-from {{packageName}}.exceptions import (  # noqa: F401
-    ApiTypeError,
-    ApiValueError
-)
 from {{packageName}}.rest import RESTResponseType
 
 {{^asyncio}}
@@ -40,11 +40,10 @@ class {{classname}}:
         self.api_client = api_client
 {{#operation}}
 
+
     @validate_call
     {{#asyncio}}async {{/asyncio}}def {{operationId}}{{>partial_api_args}} -> {{{returnType}}}{{^returnType}}None{{/returnType}}:
-
 {{>partial_api}}
-
         response_data = {{#asyncio}}await {{/asyncio}}self.api_client.call_api(*param, _request_timeout=_request_timeout)
         {{#asyncio}}await {{/asyncio}}response_data.read()
         return self.api_client.response_deserialize(
@@ -54,19 +53,27 @@ class {{classname}}:
 
 
     @validate_call
-    {{#asyncio}}async {{/asyncio}}def {{operationId}}_without_preload_content{{>partial_api_args}} -> RESTResponseType:
-
+    {{#asyncio}}async {{/asyncio}}def {{operationId}}_with_http_info{{>partial_api_args}} -> ApiResponse[{{{returnType}}}{{^returnType}}None{{/returnType}}]:
 {{>partial_api}}
+        response_data = {{#asyncio}}await {{/asyncio}}self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        {{#asyncio}}await {{/asyncio}}response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
+    @validate_call
+    {{#asyncio}}async {{/asyncio}}def {{operationId}}_without_preload_content{{>partial_api_args}} -> RESTResponseType:
+{{>partial_api}}
         response_data = {{#asyncio}}await {{/asyncio}}self.api_client.call_api(*param, _request_timeout=_request_timeout)
         return response_data.response
 
+
     {{^asyncio}}
     @validate_call
     def {{operationId}}_with_async{{>partial_api_args}} -> ApplyResult:
-
 {{>partial_api}}
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
@@ -76,11 +83,10 @@ class {{classname}}:
             ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
+
     @validate_call
     def {{operationId}}_with_http_info_async{{>partial_api_args}} -> ApplyResult:
-
 {{>partial_api}}
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
@@ -88,24 +94,10 @@ class {{classname}}:
                 response_data=response_data,
                 response_types_map=_response_types_map,
             )
-
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
     {{/asyncio}}
 
 
-    @validate_call
-    {{#asyncio}}async {{/asyncio}}def {{operationId}}_with_http_info{{>partial_api_args}} -> {{{returnType}}}{{^returnType}}None{{/returnType}}:
-
-{{>partial_api}}
-
-        response_data = {{#asyncio}}await {{/asyncio}}self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        {{#asyncio}}await {{/asyncio}}response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
-
-
     def _{{operationId}}_serialize(
         self,
         {{#allParams}}
@@ -179,15 +171,28 @@ class {{classname}}:
         if {{paramName}} is not None:
             {{#isBinary}}
             # convert to byte array if the input is a file name (str)
-            if isinstance(_body_params, str):
-                with io.open(_body_params, "rb", encoding="utf-8") as _fp:
+            if isinstance({{paramName}}, str):
+                with io.open({{paramName}}, "rb") as _fp:
                     _body_params = _fp.read()
+            else:
+                _body_params = {{paramName}}
             {{/isBinary}}
             {{^isBinary}}
             _body_params = {{paramName}}
             {{/isBinary}}
 {{/bodyParam}}
 
+        {{#constantParams}}
+        {{#isQueryParam}}
+        # Set client side default value of Query Param "{{baseName}}".
+        _query_params['{{baseName}}'] = {{#_enum}}'{{{.}}}'{{/_enum}}
+        {{/isQueryParam}}
+        {{#isHeaderParam}}
+        # Set client side default value of Header Param "{{baseName}}".
+        _header_params['{{baseName}}'] = {{#_enum}}'{{{.}}}'{{/_enum}}
+        {{/isHeaderParam}}
+        {{/constantParams}}
+
         {{#hasProduces}}
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
diff --git a/modules/openapi-generator/src/main/resources/python/api_response.mustache b/modules/openapi-generator/src/main/resources/python/api_response.mustache
index a8d7d49812d..2ac1ada6e9b 100644
--- a/modules/openapi-generator/src/main/resources/python/api_response.mustache
+++ b/modules/openapi-generator/src/main/resources/python/api_response.mustache
@@ -15,3 +15,7 @@ class ApiResponse(BaseModel, Generic[T]):
     headers: Optional[Dict[StrictStr, StrictStr]] = Field(None, description="HTTP headers")
     data: T = Field(description="Deserialized data given the data type")
     raw_data: StrictBytes = Field(description="Raw data (HTTP response body)")
+
+    model_config = {
+        "arbitrary_types_allowed": True
+    }
diff --git a/modules/openapi-generator/src/main/resources/python/asyncio/rest.mustache b/modules/openapi-generator/src/main/resources/python/asyncio/rest.mustache
index d44ef7b0594..3d94036300c 100644
--- a/modules/openapi-generator/src/main/resources/python/asyncio/rest.mustache
+++ b/modules/openapi-generator/src/main/resources/python/asyncio/rest.mustache
@@ -4,7 +4,6 @@
 
 import io
 import json
-import logging
 import re
 import ssl
 
@@ -23,9 +22,9 @@ class RESTResponse(io.IOBase):
         self.reason = resp.reason
         self.data = None
 
-    async read(self, response):
+    async def read(self):
         if self.data is None:
-            self.data = await response.read()
+            self.data = await self.response.read()
         return self.data
 
     def getheaders(self):
diff --git a/modules/openapi-generator/src/main/resources/python/model_anyof.mustache b/modules/openapi-generator/src/main/resources/python/model_anyof.mustache
index 0c391c0071f..874886b2ed1 100644
--- a/modules/openapi-generator/src/main/resources/python/model_anyof.mustache
+++ b/modules/openapi-generator/src/main/resources/python/model_anyof.mustache
@@ -166,7 +166,7 @@ class {{classname}}({{#parent}}{{{.}}}{{/parent}}{{^parent}}BaseModel{{/parent}}
         else:
             return json.dumps(self.actual_instance)
 
-    def to_dict(self) -> dict:
+    def to_dict(self) -> Dict:
         """Returns the dict representation of the actual instance"""
         if self.actual_instance is None:
             return "null"
diff --git a/modules/openapi-generator/src/main/resources/python/model_generic.mustache b/modules/openapi-generator/src/main/resources/python/model_generic.mustache
index ca6372d2d90..9e8c84f9aec 100644
--- a/modules/openapi-generator/src/main/resources/python/model_generic.mustache
+++ b/modules/openapi-generator/src/main/resources/python/model_generic.mustache
@@ -12,7 +12,6 @@ import json
 {{#vendorExtensions.x-py-model-imports}}
 {{{.}}}
 {{/vendorExtensions.x-py-model-imports}}
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -98,7 +97,7 @@ class {{classname}}({{#parent}}{{{.}}}{{/parent}}{{^parent}}BaseModel{{/parent}}
     }
 
     @classmethod
-    def get_discriminator_value(cls, obj: dict) -> str:
+    def get_discriminator_value(cls, obj: Dict) -> str:
         """Returns the discriminator value (object type) of the data"""
         discriminator_value = obj[cls.__discriminator_property_name]
         if discriminator_value:
@@ -238,7 +237,7 @@ class {{classname}}({{#parent}}{{{.}}}{{/parent}}{{^parent}}BaseModel{{/parent}}
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> {{^hasChildren}}Self{{/hasChildren}}{{#hasChildren}}{{#discriminator}}Union[{{#children}}Self{{^-last}}, {{/-last}}{{/children}}]{{/discriminator}}{{^discriminator}}Self{{/discriminator}}{{/hasChildren}}:
+    def from_dict(cls, obj: Dict) -> {{^hasChildren}}Self{{/hasChildren}}{{#hasChildren}}{{#discriminator}}Union[{{#children}}Self{{^-last}}, {{/-last}}{{/children}}]{{/discriminator}}{{^discriminator}}Self{{/discriminator}}{{/hasChildren}}:
         """Create an instance of {{{classname}}} from a dict"""
         {{#hasChildren}}
         {{#discriminator}}
diff --git a/modules/openapi-generator/src/main/resources/python/model_oneof.mustache b/modules/openapi-generator/src/main/resources/python/model_oneof.mustache
index 36c46e5c4f2..4c26feccf65 100644
--- a/modules/openapi-generator/src/main/resources/python/model_oneof.mustache
+++ b/modules/openapi-generator/src/main/resources/python/model_oneof.mustache
@@ -189,7 +189,7 @@ class {{classname}}({{#parent}}{{{.}}}{{/parent}}{{^parent}}BaseModel{{/parent}}
         else:
             return json.dumps(self.actual_instance)
 
-    def to_dict(self) -> dict:
+    def to_dict(self) -> Dict:
         """Returns the dict representation of the actual instance"""
         if self.actual_instance is None:
             return None
diff --git a/modules/openapi-generator/src/main/resources/python/partial_api.mustache b/modules/openapi-generator/src/main/resources/python/partial_api.mustache
index 3ad1e712e9a..c98e4e035f1 100644
--- a/modules/openapi-generator/src/main/resources/python/partial_api.mustache
+++ b/modules/openapi-generator/src/main/resources/python/partial_api.mustache
@@ -13,18 +13,24 @@
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[{{{returnType}}}{{^returnType}}None{{/returnType}}]
         """
         {{#isDeprecated}}
         warnings.warn("{{{httpMethod}}} {{{path}}} is deprecated.", DeprecationWarning)
diff --git a/modules/openapi-generator/src/main/resources/python/rest.mustache b/modules/openapi-generator/src/main/resources/python/rest.mustache
index 5d6e96d0a44..c837465b88d 100644
--- a/modules/openapi-generator/src/main/resources/python/rest.mustache
+++ b/modules/openapi-generator/src/main/resources/python/rest.mustache
@@ -4,14 +4,13 @@
 
 import io
 import json
-import logging
 import re
 import ssl
 
 from urllib.parse import urlencode, quote_plus
 import urllib3
 
-from {{packageName}}.exceptions import ApiException
+from {{packageName}}.exceptions import ApiException, ApiValueError
 
 RESTResponseType = urllib3.HTTPResponse
 
diff --git a/modules/openapi-generator/src/main/resources/python/tornado/rest.mustache b/modules/openapi-generator/src/main/resources/python/tornado/rest.mustache
index 62873102432..8dd1c63a482 100644
--- a/modules/openapi-generator/src/main/resources/python/tornado/rest.mustache
+++ b/modules/openapi-generator/src/main/resources/python/tornado/rest.mustache
@@ -4,7 +4,6 @@
 
 import io
 import json
-import logging
 import re
 
 from urllib.parse import urlencode, quote_plus
diff --git a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/api/auth_api.py b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/api/auth_api.py
index e48900987db..2d961e5ece8 100644
--- a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/api/auth_api.py
+++ b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/api/auth_api.py
@@ -13,20 +13,20 @@
 """  # noqa: E501
 
 
-import re  # noqa: F401
 import io
 import warnings
 
-from pydantic import validate_call, ValidationError, Field
-from typing import Dict, List, Optional, Tuple, Union, Any, Annotated
+from pydantic import validate_call, Field
+from typing import Dict, List, Optional, Tuple, Union, Any
+
+try:
+    from typing import Annotated
+except ImportError:
+    from typing_extensions import Annotated
 
 
 from openapi_client.api_client import ApiClient
 from openapi_client.api_response import ApiResponse
-from openapi_client.exceptions import (  # noqa: F401
-    ApiTypeError,
-    ApiValueError
-)
 from openapi_client.rest import RESTResponseType
 
 from multiprocessing.pool import ApplyResult
@@ -44,6 +44,7 @@ class AuthApi:
             api_client = ApiClient.get_default()
         self.api_client = api_client
 
+
     @validate_call
     def test_auth_http_basic(
         self,
@@ -65,7 +66,6 @@ class AuthApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """To test HTTP basic authentication
         To test HTTP basic authentication
                 This method makes a synchronous HTTP request by default.
@@ -73,18 +73,24 @@ class AuthApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_auth_http_basic_serialize(
@@ -98,7 +104,6 @@ class AuthApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -108,7 +113,7 @@ class AuthApi:
 
 
     @validate_call
-    def test_auth_http_basic_without_preload_content(
+    def test_auth_http_basic_with_http_info(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -127,8 +132,7 @@ class AuthApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """To test HTTP basic authentication
         To test HTTP basic authentication
                 This method makes a synchronous HTTP request by default.
@@ -136,18 +140,24 @@ class AuthApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_auth_http_basic_serialize(
@@ -161,12 +171,16 @@ class AuthApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_auth_http_basic_with_async(
+    def test_auth_http_basic_without_preload_content(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -185,8 +199,7 @@ class AuthApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """To test HTTP basic authentication
         To test HTTP basic authentication
                 This method makes a synchronous HTTP request by default.
@@ -194,18 +207,24 @@ class AuthApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_auth_http_basic_serialize(
@@ -219,18 +238,12 @@ class AuthApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_auth_http_basic_with_http_info_async(
+    def test_auth_http_basic_with_async(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -250,7 +263,6 @@ class AuthApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """To test HTTP basic authentication
         To test HTTP basic authentication
                 This method makes a synchronous HTTP request by default.
@@ -258,18 +270,24 @@ class AuthApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_auth_http_basic_serialize(
@@ -283,20 +301,18 @@ class AuthApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_auth_http_basic_with_http_info(
+    def test_auth_http_basic_with_http_info_async(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -315,8 +331,7 @@ class AuthApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """To test HTTP basic authentication
         To test HTTP basic authentication
                 This method makes a synchronous HTTP request by default.
@@ -324,18 +339,24 @@ class AuthApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_auth_http_basic_serialize(
@@ -349,13 +370,14 @@ class AuthApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_auth_http_basic_serialize(
@@ -388,6 +410,7 @@ class AuthApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
diff --git a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/api/body_api.py b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/api/body_api.py
index 554f4b1f690..eb2369324b8 100644
--- a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/api/body_api.py
+++ b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/api/body_api.py
@@ -13,12 +13,16 @@
 """  # noqa: E501
 
 
-import re  # noqa: F401
 import io
 import warnings
 
-from pydantic import validate_call, ValidationError, Field
-from typing import Dict, List, Optional, Tuple, Union, Any, Annotated
+from pydantic import validate_call, Field
+from typing import Dict, List, Optional, Tuple, Union, Any
+
+try:
+    from typing import Annotated
+except ImportError:
+    from typing_extensions import Annotated
 
 from pydantic import Field
 from typing_extensions import Annotated
@@ -31,10 +35,6 @@ from openapi_client.models.tag import Tag
 
 from openapi_client.api_client import ApiClient
 from openapi_client.api_response import ApiResponse
-from openapi_client.exceptions import (  # noqa: F401
-    ApiTypeError,
-    ApiValueError
-)
 from openapi_client.rest import RESTResponseType
 
 from multiprocessing.pool import ApplyResult
@@ -52,6 +52,7 @@ class BodyApi:
             api_client = ApiClient.get_default()
         self.api_client = api_client
 
+
     @validate_call
     def test_binary_gif(
         self,
@@ -73,7 +74,6 @@ class BodyApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> bytearray:
-
         """Test binary (gif) response body
         Test binary (gif) response body
                 This method makes a synchronous HTTP request by default.
@@ -81,18 +81,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[bytearray]
         """
 
         param = self._test_binary_gif_serialize(
@@ -106,7 +112,6 @@ class BodyApi:
             '200': "bytearray"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -116,7 +121,7 @@ class BodyApi:
 
 
     @validate_call
-    def test_binary_gif_without_preload_content(
+    def test_binary_gif_with_http_info(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -135,8 +140,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[bytearray]:
         """Test binary (gif) response body
         Test binary (gif) response body
                 This method makes a synchronous HTTP request by default.
@@ -144,18 +148,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[bytearray]
         """
 
         param = self._test_binary_gif_serialize(
@@ -169,12 +179,16 @@ class BodyApi:
             '200': "bytearray"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_binary_gif_with_async(
+    def test_binary_gif_without_preload_content(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -193,8 +207,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test binary (gif) response body
         Test binary (gif) response body
                 This method makes a synchronous HTTP request by default.
@@ -202,18 +215,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[bytearray]
         """
 
         param = self._test_binary_gif_serialize(
@@ -227,18 +246,12 @@ class BodyApi:
             '200': "bytearray"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_binary_gif_with_http_info_async(
+    def test_binary_gif_with_async(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -258,7 +271,6 @@ class BodyApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test binary (gif) response body
         Test binary (gif) response body
                 This method makes a synchronous HTTP request by default.
@@ -266,18 +278,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[bytearray]
         """
 
         param = self._test_binary_gif_serialize(
@@ -291,20 +309,18 @@ class BodyApi:
             '200': "bytearray"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_binary_gif_with_http_info(
+    def test_binary_gif_with_http_info_async(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -323,8 +339,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> bytearray:
-
+    ) -> ApplyResult:
         """Test binary (gif) response body
         Test binary (gif) response body
                 This method makes a synchronous HTTP request by default.
@@ -332,18 +347,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[bytearray]
         """
 
         param = self._test_binary_gif_serialize(
@@ -357,13 +378,14 @@ class BodyApi:
             '200': "bytearray"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_binary_gif_serialize(
@@ -396,6 +418,7 @@ class BodyApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['image/gif'])  # noqa: E501
@@ -421,6 +444,7 @@ class BodyApi:
 
 
 
+
     @validate_call
     def test_body_application_octetstream_binary(
         self,
@@ -443,7 +467,6 @@ class BodyApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test body parameter(s)
         Test body parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -453,18 +476,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_body_application_octetstream_binary_serialize(
@@ -479,7 +508,6 @@ class BodyApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -489,7 +517,7 @@ class BodyApi:
 
 
     @validate_call
-    def test_body_application_octetstream_binary_without_preload_content(
+    def test_body_application_octetstream_binary_with_http_info(
         self,
         body: Optional[Union[StrictBytes, StrictStr]] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -509,8 +537,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test body parameter(s)
         Test body parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -520,18 +547,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_body_application_octetstream_binary_serialize(
@@ -546,12 +579,16 @@ class BodyApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_body_application_octetstream_binary_with_async(
+    def test_body_application_octetstream_binary_without_preload_content(
         self,
         body: Optional[Union[StrictBytes, StrictStr]] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -571,8 +608,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test body parameter(s)
         Test body parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -582,18 +618,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_body_application_octetstream_binary_serialize(
@@ -608,18 +650,12 @@ class BodyApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_body_application_octetstream_binary_with_http_info_async(
+    def test_body_application_octetstream_binary_with_async(
         self,
         body: Optional[Union[StrictBytes, StrictStr]] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -640,7 +676,6 @@ class BodyApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test body parameter(s)
         Test body parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -650,18 +685,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_body_application_octetstream_binary_serialize(
@@ -676,20 +717,18 @@ class BodyApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_body_application_octetstream_binary_with_http_info(
+    def test_body_application_octetstream_binary_with_http_info_async(
         self,
         body: Optional[Union[StrictBytes, StrictStr]] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -709,8 +748,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test body parameter(s)
         Test body parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -720,18 +758,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_body_application_octetstream_binary_serialize(
@@ -746,13 +790,14 @@ class BodyApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_body_application_octetstream_binary_serialize(
@@ -787,9 +832,12 @@ class BodyApi:
         # process the body parameter
         if body is not None:
             # convert to byte array if the input is a file name (str)
-            if isinstance(_body_params, str):
-                with io.open(_body_params, "rb", encoding="utf-8") as _fp:
+            if isinstance(body, str):
+                with io.open(body, "rb") as _fp:
                     _body_params = _fp.read()
+            else:
+                _body_params = body
+
 
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
@@ -823,6 +871,7 @@ class BodyApi:
 
 
 
+
     @validate_call
     def test_body_multipart_formdata_array_of_binary(
         self,
@@ -845,7 +894,6 @@ class BodyApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test array of binary in multipart mime
         Test array of binary in multipart mime
                 This method makes a synchronous HTTP request by default.
@@ -855,18 +903,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_body_multipart_formdata_array_of_binary_serialize(
@@ -881,7 +935,6 @@ class BodyApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -891,7 +944,7 @@ class BodyApi:
 
 
     @validate_call
-    def test_body_multipart_formdata_array_of_binary_without_preload_content(
+    def test_body_multipart_formdata_array_of_binary_with_http_info(
         self,
         files: List[Union[StrictBytes, StrictStr]],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -911,8 +964,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test array of binary in multipart mime
         Test array of binary in multipart mime
                 This method makes a synchronous HTTP request by default.
@@ -922,18 +974,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_body_multipart_formdata_array_of_binary_serialize(
@@ -948,12 +1006,16 @@ class BodyApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_body_multipart_formdata_array_of_binary_with_async(
+    def test_body_multipart_formdata_array_of_binary_without_preload_content(
         self,
         files: List[Union[StrictBytes, StrictStr]],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -973,8 +1035,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test array of binary in multipart mime
         Test array of binary in multipart mime
                 This method makes a synchronous HTTP request by default.
@@ -984,18 +1045,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_body_multipart_formdata_array_of_binary_serialize(
@@ -1010,18 +1077,12 @@ class BodyApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_body_multipart_formdata_array_of_binary_with_http_info_async(
+    def test_body_multipart_formdata_array_of_binary_with_async(
         self,
         files: List[Union[StrictBytes, StrictStr]],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1042,7 +1103,6 @@ class BodyApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test array of binary in multipart mime
         Test array of binary in multipart mime
                 This method makes a synchronous HTTP request by default.
@@ -1052,18 +1112,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_body_multipart_formdata_array_of_binary_serialize(
@@ -1078,20 +1144,18 @@ class BodyApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_body_multipart_formdata_array_of_binary_with_http_info(
+    def test_body_multipart_formdata_array_of_binary_with_http_info_async(
         self,
         files: List[Union[StrictBytes, StrictStr]],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1111,8 +1175,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test array of binary in multipart mime
         Test array of binary in multipart mime
                 This method makes a synchronous HTTP request by default.
@@ -1122,18 +1185,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_body_multipart_formdata_array_of_binary_serialize(
@@ -1148,13 +1217,14 @@ class BodyApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_body_multipart_formdata_array_of_binary_serialize(
@@ -1191,6 +1261,7 @@ class BodyApi:
             _files['files'] = files
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
@@ -1223,6 +1294,7 @@ class BodyApi:
 
 
 
+
     @validate_call
     def test_echo_body_free_form_object_response_string(
         self,
@@ -1245,7 +1317,6 @@ class BodyApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test free form object
         Test free form object
                 This method makes a synchronous HTTP request by default.
@@ -1255,18 +1326,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_echo_body_free_form_object_response_string_serialize(
@@ -1281,7 +1358,6 @@ class BodyApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -1291,7 +1367,7 @@ class BodyApi:
 
 
     @validate_call
-    def test_echo_body_free_form_object_response_string_without_preload_content(
+    def test_echo_body_free_form_object_response_string_with_http_info(
         self,
         body: Annotated[Optional[Dict[str, Any]], Field(description="Free form object")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1311,8 +1387,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test free form object
         Test free form object
                 This method makes a synchronous HTTP request by default.
@@ -1322,18 +1397,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_echo_body_free_form_object_response_string_serialize(
@@ -1348,12 +1429,16 @@ class BodyApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_echo_body_free_form_object_response_string_with_async(
+    def test_echo_body_free_form_object_response_string_without_preload_content(
         self,
         body: Annotated[Optional[Dict[str, Any]], Field(description="Free form object")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1373,8 +1458,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test free form object
         Test free form object
                 This method makes a synchronous HTTP request by default.
@@ -1384,18 +1468,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_echo_body_free_form_object_response_string_serialize(
@@ -1410,18 +1500,12 @@ class BodyApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_echo_body_free_form_object_response_string_with_http_info_async(
+    def test_echo_body_free_form_object_response_string_with_async(
         self,
         body: Annotated[Optional[Dict[str, Any]], Field(description="Free form object")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1442,7 +1526,6 @@ class BodyApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test free form object
         Test free form object
                 This method makes a synchronous HTTP request by default.
@@ -1452,18 +1535,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_echo_body_free_form_object_response_string_serialize(
@@ -1478,20 +1567,18 @@ class BodyApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_echo_body_free_form_object_response_string_with_http_info(
+    def test_echo_body_free_form_object_response_string_with_http_info_async(
         self,
         body: Annotated[Optional[Dict[str, Any]], Field(description="Free form object")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1511,8 +1598,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test free form object
         Test free form object
                 This method makes a synchronous HTTP request by default.
@@ -1522,18 +1608,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_echo_body_free_form_object_response_string_serialize(
@@ -1548,13 +1640,14 @@ class BodyApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_echo_body_free_form_object_response_string_serialize(
@@ -1590,6 +1683,7 @@ class BodyApi:
         if body is not None:
             _body_params = body
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
@@ -1622,6 +1716,7 @@ class BodyApi:
 
 
 
+
     @validate_call
     def test_echo_body_pet(
         self,
@@ -1644,7 +1739,6 @@ class BodyApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> Pet:
-
         """Test body parameter(s)
         Test body parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1654,18 +1748,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Pet]
         """
 
         param = self._test_echo_body_pet_serialize(
@@ -1680,7 +1780,6 @@ class BodyApi:
             '200': "Pet"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -1690,7 +1789,7 @@ class BodyApi:
 
 
     @validate_call
-    def test_echo_body_pet_without_preload_content(
+    def test_echo_body_pet_with_http_info(
         self,
         pet: Annotated[Optional[Pet], Field(description="Pet object that needs to be added to the store")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1710,8 +1809,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[Pet]:
         """Test body parameter(s)
         Test body parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1721,18 +1819,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Pet]
         """
 
         param = self._test_echo_body_pet_serialize(
@@ -1747,12 +1851,16 @@ class BodyApi:
             '200': "Pet"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_echo_body_pet_with_async(
+    def test_echo_body_pet_without_preload_content(
         self,
         pet: Annotated[Optional[Pet], Field(description="Pet object that needs to be added to the store")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1772,8 +1880,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test body parameter(s)
         Test body parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1783,18 +1890,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Pet]
         """
 
         param = self._test_echo_body_pet_serialize(
@@ -1809,18 +1922,12 @@ class BodyApi:
             '200': "Pet"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_echo_body_pet_with_http_info_async(
+    def test_echo_body_pet_with_async(
         self,
         pet: Annotated[Optional[Pet], Field(description="Pet object that needs to be added to the store")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1841,7 +1948,6 @@ class BodyApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test body parameter(s)
         Test body parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1851,18 +1957,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Pet]
         """
 
         param = self._test_echo_body_pet_serialize(
@@ -1877,20 +1989,18 @@ class BodyApi:
             '200': "Pet"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_echo_body_pet_with_http_info(
+    def test_echo_body_pet_with_http_info_async(
         self,
         pet: Annotated[Optional[Pet], Field(description="Pet object that needs to be added to the store")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1910,8 +2020,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> Pet:
-
+    ) -> ApplyResult:
         """Test body parameter(s)
         Test body parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1921,18 +2030,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Pet]
         """
 
         param = self._test_echo_body_pet_serialize(
@@ -1947,13 +2062,14 @@ class BodyApi:
             '200': "Pet"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_echo_body_pet_serialize(
@@ -1989,6 +2105,7 @@ class BodyApi:
         if pet is not None:
             _body_params = pet
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/json'])  # noqa: E501
@@ -2021,6 +2138,7 @@ class BodyApi:
 
 
 
+
     @validate_call
     def test_echo_body_pet_response_string(
         self,
@@ -2043,7 +2161,6 @@ class BodyApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test empty response body
         Test empty response body
                 This method makes a synchronous HTTP request by default.
@@ -2053,18 +2170,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_echo_body_pet_response_string_serialize(
@@ -2079,7 +2202,6 @@ class BodyApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -2089,7 +2211,7 @@ class BodyApi:
 
 
     @validate_call
-    def test_echo_body_pet_response_string_without_preload_content(
+    def test_echo_body_pet_response_string_with_http_info(
         self,
         pet: Annotated[Optional[Pet], Field(description="Pet object that needs to be added to the store")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2109,8 +2231,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test empty response body
         Test empty response body
                 This method makes a synchronous HTTP request by default.
@@ -2120,18 +2241,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_echo_body_pet_response_string_serialize(
@@ -2146,12 +2273,16 @@ class BodyApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_echo_body_pet_response_string_with_async(
+    def test_echo_body_pet_response_string_without_preload_content(
         self,
         pet: Annotated[Optional[Pet], Field(description="Pet object that needs to be added to the store")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2171,8 +2302,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test empty response body
         Test empty response body
                 This method makes a synchronous HTTP request by default.
@@ -2182,18 +2312,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_echo_body_pet_response_string_serialize(
@@ -2208,18 +2344,12 @@ class BodyApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_echo_body_pet_response_string_with_http_info_async(
+    def test_echo_body_pet_response_string_with_async(
         self,
         pet: Annotated[Optional[Pet], Field(description="Pet object that needs to be added to the store")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2240,7 +2370,6 @@ class BodyApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test empty response body
         Test empty response body
                 This method makes a synchronous HTTP request by default.
@@ -2250,18 +2379,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_echo_body_pet_response_string_serialize(
@@ -2276,20 +2411,18 @@ class BodyApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_echo_body_pet_response_string_with_http_info(
+    def test_echo_body_pet_response_string_with_http_info_async(
         self,
         pet: Annotated[Optional[Pet], Field(description="Pet object that needs to be added to the store")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2309,8 +2442,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test empty response body
         Test empty response body
                 This method makes a synchronous HTTP request by default.
@@ -2320,18 +2452,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_echo_body_pet_response_string_serialize(
@@ -2346,13 +2484,14 @@ class BodyApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_echo_body_pet_response_string_serialize(
@@ -2388,6 +2527,7 @@ class BodyApi:
         if pet is not None:
             _body_params = pet
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
@@ -2420,6 +2560,7 @@ class BodyApi:
 
 
 
+
     @validate_call
     def test_echo_body_tag_response_string(
         self,
@@ -2442,7 +2583,6 @@ class BodyApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test empty json (request body)
         Test empty json (request body)
                 This method makes a synchronous HTTP request by default.
@@ -2452,18 +2592,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_echo_body_tag_response_string_serialize(
@@ -2478,7 +2624,6 @@ class BodyApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -2488,7 +2633,7 @@ class BodyApi:
 
 
     @validate_call
-    def test_echo_body_tag_response_string_without_preload_content(
+    def test_echo_body_tag_response_string_with_http_info(
         self,
         tag: Annotated[Optional[Tag], Field(description="Tag object")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2508,8 +2653,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test empty json (request body)
         Test empty json (request body)
                 This method makes a synchronous HTTP request by default.
@@ -2519,18 +2663,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_echo_body_tag_response_string_serialize(
@@ -2545,12 +2695,16 @@ class BodyApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_echo_body_tag_response_string_with_async(
+    def test_echo_body_tag_response_string_without_preload_content(
         self,
         tag: Annotated[Optional[Tag], Field(description="Tag object")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2570,8 +2724,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test empty json (request body)
         Test empty json (request body)
                 This method makes a synchronous HTTP request by default.
@@ -2581,18 +2734,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_echo_body_tag_response_string_serialize(
@@ -2607,18 +2766,12 @@ class BodyApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_echo_body_tag_response_string_with_http_info_async(
+    def test_echo_body_tag_response_string_with_async(
         self,
         tag: Annotated[Optional[Tag], Field(description="Tag object")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2639,7 +2792,6 @@ class BodyApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test empty json (request body)
         Test empty json (request body)
                 This method makes a synchronous HTTP request by default.
@@ -2649,18 +2801,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_echo_body_tag_response_string_serialize(
@@ -2675,20 +2833,18 @@ class BodyApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_echo_body_tag_response_string_with_http_info(
+    def test_echo_body_tag_response_string_with_http_info_async(
         self,
         tag: Annotated[Optional[Tag], Field(description="Tag object")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2708,8 +2864,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test empty json (request body)
         Test empty json (request body)
                 This method makes a synchronous HTTP request by default.
@@ -2719,18 +2874,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_echo_body_tag_response_string_serialize(
@@ -2745,13 +2906,14 @@ class BodyApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_echo_body_tag_response_string_serialize(
@@ -2787,6 +2949,7 @@ class BodyApi:
         if tag is not None:
             _body_params = tag
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
diff --git a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/api/form_api.py b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/api/form_api.py
index 8a2cd2cfdd1..c27fe1e95dd 100644
--- a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/api/form_api.py
+++ b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/api/form_api.py
@@ -13,12 +13,16 @@
 """  # noqa: E501
 
 
-import re  # noqa: F401
 import io
 import warnings
 
-from pydantic import validate_call, ValidationError, Field
-from typing import Dict, List, Optional, Tuple, Union, Any, Annotated
+from pydantic import validate_call, Field
+from typing import Dict, List, Optional, Tuple, Union, Any
+
+try:
+    from typing import Annotated
+except ImportError:
+    from typing_extensions import Annotated
 
 from pydantic import StrictBool, StrictInt, StrictStr
 
@@ -27,10 +31,6 @@ from typing import Optional
 
 from openapi_client.api_client import ApiClient
 from openapi_client.api_response import ApiResponse
-from openapi_client.exceptions import (  # noqa: F401
-    ApiTypeError,
-    ApiValueError
-)
 from openapi_client.rest import RESTResponseType
 
 from multiprocessing.pool import ApplyResult
@@ -48,6 +48,7 @@ class FormApi:
             api_client = ApiClient.get_default()
         self.api_client = api_client
 
+
     @validate_call
     def test_form_integer_boolean_string(
         self,
@@ -72,7 +73,6 @@ class FormApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test form parameter(s)
         Test form parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -86,18 +86,24 @@ class FormApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_form_integer_boolean_string_serialize(
@@ -114,7 +120,6 @@ class FormApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -124,7 +129,7 @@ class FormApi:
 
 
     @validate_call
-    def test_form_integer_boolean_string_without_preload_content(
+    def test_form_integer_boolean_string_with_http_info(
         self,
         integer_form: Optional[StrictInt] = None,
         boolean_form: Optional[StrictBool] = None,
@@ -146,8 +151,7 @@ class FormApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test form parameter(s)
         Test form parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -161,18 +165,24 @@ class FormApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_form_integer_boolean_string_serialize(
@@ -189,12 +199,16 @@ class FormApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_form_integer_boolean_string_with_async(
+    def test_form_integer_boolean_string_without_preload_content(
         self,
         integer_form: Optional[StrictInt] = None,
         boolean_form: Optional[StrictBool] = None,
@@ -216,8 +230,7 @@ class FormApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test form parameter(s)
         Test form parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -231,18 +244,24 @@ class FormApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_form_integer_boolean_string_serialize(
@@ -259,18 +278,12 @@ class FormApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_form_integer_boolean_string_with_http_info_async(
+    def test_form_integer_boolean_string_with_async(
         self,
         integer_form: Optional[StrictInt] = None,
         boolean_form: Optional[StrictBool] = None,
@@ -293,7 +306,6 @@ class FormApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test form parameter(s)
         Test form parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -307,18 +319,24 @@ class FormApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_form_integer_boolean_string_serialize(
@@ -335,20 +353,18 @@ class FormApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_form_integer_boolean_string_with_http_info(
+    def test_form_integer_boolean_string_with_http_info_async(
         self,
         integer_form: Optional[StrictInt] = None,
         boolean_form: Optional[StrictBool] = None,
@@ -370,8 +386,7 @@ class FormApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test form parameter(s)
         Test form parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -385,18 +400,24 @@ class FormApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_form_integer_boolean_string_serialize(
@@ -413,13 +434,14 @@ class FormApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_form_integer_boolean_string_serialize(
@@ -461,6 +483,7 @@ class FormApi:
             _form_params.append(('string_form', string_form))
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
@@ -493,6 +516,7 @@ class FormApi:
 
 
 
+
     @validate_call
     def test_form_oneof(
         self,
@@ -520,7 +544,6 @@ class FormApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test form parameter(s) for oneOf schema
         Test form parameter(s) for oneOf schema
                 This method makes a synchronous HTTP request by default.
@@ -540,18 +563,24 @@ class FormApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_form_oneof_serialize(
@@ -571,7 +600,6 @@ class FormApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -581,7 +609,7 @@ class FormApi:
 
 
     @validate_call
-    def test_form_oneof_without_preload_content(
+    def test_form_oneof_with_http_info(
         self,
         form1: Optional[StrictStr] = None,
         form2: Optional[StrictInt] = None,
@@ -606,8 +634,7 @@ class FormApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test form parameter(s) for oneOf schema
         Test form parameter(s) for oneOf schema
                 This method makes a synchronous HTTP request by default.
@@ -627,18 +654,24 @@ class FormApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_form_oneof_serialize(
@@ -658,12 +691,16 @@ class FormApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_form_oneof_with_async(
+    def test_form_oneof_without_preload_content(
         self,
         form1: Optional[StrictStr] = None,
         form2: Optional[StrictInt] = None,
@@ -688,8 +725,7 @@ class FormApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test form parameter(s) for oneOf schema
         Test form parameter(s) for oneOf schema
                 This method makes a synchronous HTTP request by default.
@@ -709,18 +745,24 @@ class FormApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_form_oneof_serialize(
@@ -740,18 +782,12 @@ class FormApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_form_oneof_with_http_info_async(
+    def test_form_oneof_with_async(
         self,
         form1: Optional[StrictStr] = None,
         form2: Optional[StrictInt] = None,
@@ -777,7 +813,6 @@ class FormApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test form parameter(s) for oneOf schema
         Test form parameter(s) for oneOf schema
                 This method makes a synchronous HTTP request by default.
@@ -797,18 +832,24 @@ class FormApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_form_oneof_serialize(
@@ -828,20 +869,18 @@ class FormApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_form_oneof_with_http_info(
+    def test_form_oneof_with_http_info_async(
         self,
         form1: Optional[StrictStr] = None,
         form2: Optional[StrictInt] = None,
@@ -866,8 +905,7 @@ class FormApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test form parameter(s) for oneOf schema
         Test form parameter(s) for oneOf schema
                 This method makes a synchronous HTTP request by default.
@@ -887,18 +925,24 @@ class FormApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_form_oneof_serialize(
@@ -918,13 +962,14 @@ class FormApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_form_oneof_serialize(
@@ -975,6 +1020,7 @@ class FormApi:
             _form_params.append(('name', name))
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
diff --git a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/api/header_api.py b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/api/header_api.py
index b606566c112..f03bdf7cd3e 100644
--- a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/api/header_api.py
+++ b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/api/header_api.py
@@ -13,12 +13,16 @@
 """  # noqa: E501
 
 
-import re  # noqa: F401
 import io
 import warnings
 
-from pydantic import validate_call, ValidationError, Field
-from typing import Dict, List, Optional, Tuple, Union, Any, Annotated
+from pydantic import validate_call, Field
+from typing import Dict, List, Optional, Tuple, Union, Any
+
+try:
+    from typing import Annotated
+except ImportError:
+    from typing_extensions import Annotated
 
 from pydantic import StrictBool, StrictInt, StrictStr, field_validator
 
@@ -28,10 +32,6 @@ from openapi_client.models.string_enum_ref import StringEnumRef
 
 from openapi_client.api_client import ApiClient
 from openapi_client.api_response import ApiResponse
-from openapi_client.exceptions import (  # noqa: F401
-    ApiTypeError,
-    ApiValueError
-)
 from openapi_client.rest import RESTResponseType
 
 from multiprocessing.pool import ApplyResult
@@ -49,6 +49,7 @@ class HeaderApi:
             api_client = ApiClient.get_default()
         self.api_client = api_client
 
+
     @validate_call
     def test_header_integer_boolean_string_enums(
         self,
@@ -75,7 +76,6 @@ class HeaderApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test header parameter(s)
         Test header parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -93,18 +93,24 @@ class HeaderApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_header_integer_boolean_string_enums_serialize(
@@ -123,7 +129,6 @@ class HeaderApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -133,7 +138,7 @@ class HeaderApi:
 
 
     @validate_call
-    def test_header_integer_boolean_string_enums_without_preload_content(
+    def test_header_integer_boolean_string_enums_with_http_info(
         self,
         integer_header: Optional[StrictInt] = None,
         boolean_header: Optional[StrictBool] = None,
@@ -157,8 +162,7 @@ class HeaderApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test header parameter(s)
         Test header parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -176,18 +180,24 @@ class HeaderApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_header_integer_boolean_string_enums_serialize(
@@ -206,12 +216,16 @@ class HeaderApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_header_integer_boolean_string_enums_with_async(
+    def test_header_integer_boolean_string_enums_without_preload_content(
         self,
         integer_header: Optional[StrictInt] = None,
         boolean_header: Optional[StrictBool] = None,
@@ -235,8 +249,7 @@ class HeaderApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test header parameter(s)
         Test header parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -254,18 +267,24 @@ class HeaderApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_header_integer_boolean_string_enums_serialize(
@@ -284,18 +303,12 @@ class HeaderApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_header_integer_boolean_string_enums_with_http_info_async(
+    def test_header_integer_boolean_string_enums_with_async(
         self,
         integer_header: Optional[StrictInt] = None,
         boolean_header: Optional[StrictBool] = None,
@@ -320,7 +333,6 @@ class HeaderApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test header parameter(s)
         Test header parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -338,18 +350,24 @@ class HeaderApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_header_integer_boolean_string_enums_serialize(
@@ -368,20 +386,18 @@ class HeaderApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_header_integer_boolean_string_enums_with_http_info(
+    def test_header_integer_boolean_string_enums_with_http_info_async(
         self,
         integer_header: Optional[StrictInt] = None,
         boolean_header: Optional[StrictBool] = None,
@@ -405,8 +421,7 @@ class HeaderApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test header parameter(s)
         Test header parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -424,18 +439,24 @@ class HeaderApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_header_integer_boolean_string_enums_serialize(
@@ -454,13 +475,14 @@ class HeaderApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_header_integer_boolean_string_enums_serialize(
@@ -508,6 +530,7 @@ class HeaderApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
diff --git a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/api/path_api.py b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/api/path_api.py
index 1db368a4691..e7425967ecb 100644
--- a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/api/path_api.py
+++ b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/api/path_api.py
@@ -13,12 +13,16 @@
 """  # noqa: E501
 
 
-import re  # noqa: F401
 import io
 import warnings
 
-from pydantic import validate_call, ValidationError, Field
-from typing import Dict, List, Optional, Tuple, Union, Any, Annotated
+from pydantic import validate_call, Field
+from typing import Dict, List, Optional, Tuple, Union, Any
+
+try:
+    from typing import Annotated
+except ImportError:
+    from typing_extensions import Annotated
 
 from pydantic import StrictInt, StrictStr, field_validator
 
@@ -26,10 +30,6 @@ from openapi_client.models.string_enum_ref import StringEnumRef
 
 from openapi_client.api_client import ApiClient
 from openapi_client.api_response import ApiResponse
-from openapi_client.exceptions import (  # noqa: F401
-    ApiTypeError,
-    ApiValueError
-)
 from openapi_client.rest import RESTResponseType
 
 from multiprocessing.pool import ApplyResult
@@ -47,6 +47,7 @@ class PathApi:
             api_client = ApiClient.get_default()
         self.api_client = api_client
 
+
     @validate_call
     def tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path(
         self,
@@ -72,7 +73,6 @@ class PathApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test path parameter(s)
         Test path parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -88,18 +88,24 @@ class PathApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_serialize(
@@ -117,7 +123,6 @@ class PathApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -127,7 +132,7 @@ class PathApi:
 
 
     @validate_call
-    def tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_without_preload_content(
+    def tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_with_http_info(
         self,
         path_string: StrictStr,
         path_integer: StrictInt,
@@ -150,8 +155,7 @@ class PathApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test path parameter(s)
         Test path parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -167,18 +171,24 @@ class PathApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_serialize(
@@ -196,12 +206,16 @@ class PathApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_with_async(
+    def tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_without_preload_content(
         self,
         path_string: StrictStr,
         path_integer: StrictInt,
@@ -224,8 +238,7 @@ class PathApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test path parameter(s)
         Test path parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -241,18 +254,24 @@ class PathApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_serialize(
@@ -270,18 +289,12 @@ class PathApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_with_http_info_async(
+    def tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_with_async(
         self,
         path_string: StrictStr,
         path_integer: StrictInt,
@@ -305,7 +318,6 @@ class PathApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test path parameter(s)
         Test path parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -321,18 +333,24 @@ class PathApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_serialize(
@@ -350,20 +368,18 @@ class PathApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_with_http_info(
+    def tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_with_http_info_async(
         self,
         path_string: StrictStr,
         path_integer: StrictInt,
@@ -386,8 +402,7 @@ class PathApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test path parameter(s)
         Test path parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -403,18 +418,24 @@ class PathApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_serialize(
@@ -432,13 +453,14 @@ class PathApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_serialize(
@@ -483,6 +505,7 @@ class PathApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
diff --git a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/api/query_api.py b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/api/query_api.py
index e59e997e0e1..c070f6bfca6 100644
--- a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/api/query_api.py
+++ b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/api/query_api.py
@@ -13,12 +13,16 @@
 """  # noqa: E501
 
 
-import re  # noqa: F401
 import io
 import warnings
 
-from pydantic import validate_call, ValidationError, Field
-from typing import Dict, List, Optional, Tuple, Union, Any, Annotated
+from pydantic import validate_call, Field
+from typing import Dict, List, Optional, Tuple, Union, Any
+
+try:
+    from typing import Annotated
+except ImportError:
+    from typing_extensions import Annotated
 
 from datetime import date, datetime
 
@@ -32,10 +36,6 @@ from openapi_client.models.test_query_style_form_explode_true_array_string_query
 
 from openapi_client.api_client import ApiClient
 from openapi_client.api_response import ApiResponse
-from openapi_client.exceptions import (  # noqa: F401
-    ApiTypeError,
-    ApiValueError
-)
 from openapi_client.rest import RESTResponseType
 
 from multiprocessing.pool import ApplyResult
@@ -53,6 +53,7 @@ class QueryApi:
             api_client = ApiClient.get_default()
         self.api_client = api_client
 
+
     @validate_call
     def test_enum_ref_string(
         self,
@@ -76,7 +77,6 @@ class QueryApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -88,18 +88,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_enum_ref_string_serialize(
@@ -115,7 +121,6 @@ class QueryApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -125,7 +130,7 @@ class QueryApi:
 
 
     @validate_call
-    def test_enum_ref_string_without_preload_content(
+    def test_enum_ref_string_with_http_info(
         self,
         enum_nonref_string_query: Optional[StrictStr] = None,
         enum_ref_string_query: Optional[StringEnumRef] = None,
@@ -146,8 +151,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -159,18 +163,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_enum_ref_string_serialize(
@@ -186,12 +196,16 @@ class QueryApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_enum_ref_string_with_async(
+    def test_enum_ref_string_without_preload_content(
         self,
         enum_nonref_string_query: Optional[StrictStr] = None,
         enum_ref_string_query: Optional[StringEnumRef] = None,
@@ -212,8 +226,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -225,18 +238,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_enum_ref_string_serialize(
@@ -252,18 +271,12 @@ class QueryApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_enum_ref_string_with_http_info_async(
+    def test_enum_ref_string_with_async(
         self,
         enum_nonref_string_query: Optional[StrictStr] = None,
         enum_ref_string_query: Optional[StringEnumRef] = None,
@@ -285,7 +298,6 @@ class QueryApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -297,18 +309,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_enum_ref_string_serialize(
@@ -324,20 +342,18 @@ class QueryApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_enum_ref_string_with_http_info(
+    def test_enum_ref_string_with_http_info_async(
         self,
         enum_nonref_string_query: Optional[StrictStr] = None,
         enum_ref_string_query: Optional[StringEnumRef] = None,
@@ -358,8 +374,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -371,18 +386,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_enum_ref_string_serialize(
@@ -398,13 +419,14 @@ class QueryApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_enum_ref_string_serialize(
@@ -447,6 +469,7 @@ class QueryApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
@@ -472,6 +495,7 @@ class QueryApi:
 
 
 
+
     @validate_call
     def test_query_datetime_date_string(
         self,
@@ -496,7 +520,6 @@ class QueryApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -510,18 +533,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_datetime_date_string_serialize(
@@ -538,7 +567,6 @@ class QueryApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -548,7 +576,7 @@ class QueryApi:
 
 
     @validate_call
-    def test_query_datetime_date_string_without_preload_content(
+    def test_query_datetime_date_string_with_http_info(
         self,
         datetime_query: Optional[datetime] = None,
         date_query: Optional[date] = None,
@@ -570,8 +598,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -585,18 +612,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_datetime_date_string_serialize(
@@ -613,12 +646,16 @@ class QueryApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_query_datetime_date_string_with_async(
+    def test_query_datetime_date_string_without_preload_content(
         self,
         datetime_query: Optional[datetime] = None,
         date_query: Optional[date] = None,
@@ -640,8 +677,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -655,18 +691,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_datetime_date_string_serialize(
@@ -683,18 +725,12 @@ class QueryApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_query_datetime_date_string_with_http_info_async(
+    def test_query_datetime_date_string_with_async(
         self,
         datetime_query: Optional[datetime] = None,
         date_query: Optional[date] = None,
@@ -717,7 +753,6 @@ class QueryApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -731,18 +766,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_datetime_date_string_serialize(
@@ -759,20 +800,18 @@ class QueryApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_query_datetime_date_string_with_http_info(
+    def test_query_datetime_date_string_with_http_info_async(
         self,
         datetime_query: Optional[datetime] = None,
         date_query: Optional[date] = None,
@@ -794,8 +833,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -809,18 +847,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_datetime_date_string_serialize(
@@ -837,13 +881,14 @@ class QueryApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_query_datetime_date_string_serialize(
@@ -895,6 +940,7 @@ class QueryApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
@@ -920,6 +966,7 @@ class QueryApi:
 
 
 
+
     @validate_call
     def test_query_integer_boolean_string(
         self,
@@ -944,7 +991,6 @@ class QueryApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -958,18 +1004,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_integer_boolean_string_serialize(
@@ -986,7 +1038,6 @@ class QueryApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -996,7 +1047,7 @@ class QueryApi:
 
 
     @validate_call
-    def test_query_integer_boolean_string_without_preload_content(
+    def test_query_integer_boolean_string_with_http_info(
         self,
         integer_query: Optional[StrictInt] = None,
         boolean_query: Optional[StrictBool] = None,
@@ -1018,8 +1069,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1033,18 +1083,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_integer_boolean_string_serialize(
@@ -1061,12 +1117,16 @@ class QueryApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_query_integer_boolean_string_with_async(
+    def test_query_integer_boolean_string_without_preload_content(
         self,
         integer_query: Optional[StrictInt] = None,
         boolean_query: Optional[StrictBool] = None,
@@ -1088,8 +1148,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1103,18 +1162,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_integer_boolean_string_serialize(
@@ -1131,18 +1196,12 @@ class QueryApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_query_integer_boolean_string_with_http_info_async(
+    def test_query_integer_boolean_string_with_async(
         self,
         integer_query: Optional[StrictInt] = None,
         boolean_query: Optional[StrictBool] = None,
@@ -1165,7 +1224,6 @@ class QueryApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1179,18 +1237,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_integer_boolean_string_serialize(
@@ -1207,20 +1271,18 @@ class QueryApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_query_integer_boolean_string_with_http_info(
+    def test_query_integer_boolean_string_with_http_info_async(
         self,
         integer_query: Optional[StrictInt] = None,
         boolean_query: Optional[StrictBool] = None,
@@ -1242,8 +1304,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1257,18 +1318,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_integer_boolean_string_serialize(
@@ -1285,13 +1352,14 @@ class QueryApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_query_integer_boolean_string_serialize(
@@ -1339,6 +1407,7 @@ class QueryApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
@@ -1364,6 +1433,7 @@ class QueryApi:
 
 
 
+
     @validate_call
     def test_query_style_deep_object_explode_true_object(
         self,
@@ -1386,7 +1456,6 @@ class QueryApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1396,18 +1465,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_deep_object_explode_true_object_serialize(
@@ -1422,7 +1497,6 @@ class QueryApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -1432,7 +1506,7 @@ class QueryApi:
 
 
     @validate_call
-    def test_query_style_deep_object_explode_true_object_without_preload_content(
+    def test_query_style_deep_object_explode_true_object_with_http_info(
         self,
         query_object: Optional[Pet] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1452,8 +1526,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1463,18 +1536,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_deep_object_explode_true_object_serialize(
@@ -1489,12 +1568,16 @@ class QueryApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_query_style_deep_object_explode_true_object_with_async(
+    def test_query_style_deep_object_explode_true_object_without_preload_content(
         self,
         query_object: Optional[Pet] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1514,8 +1597,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1525,18 +1607,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_deep_object_explode_true_object_serialize(
@@ -1551,18 +1639,12 @@ class QueryApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_query_style_deep_object_explode_true_object_with_http_info_async(
+    def test_query_style_deep_object_explode_true_object_with_async(
         self,
         query_object: Optional[Pet] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1583,7 +1665,6 @@ class QueryApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1593,18 +1674,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_deep_object_explode_true_object_serialize(
@@ -1619,20 +1706,18 @@ class QueryApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_query_style_deep_object_explode_true_object_with_http_info(
+    def test_query_style_deep_object_explode_true_object_with_http_info_async(
         self,
         query_object: Optional[Pet] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1652,8 +1737,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1663,18 +1747,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_deep_object_explode_true_object_serialize(
@@ -1689,13 +1779,14 @@ class QueryApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_query_style_deep_object_explode_true_object_serialize(
@@ -1733,6 +1824,7 @@ class QueryApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
@@ -1758,6 +1850,7 @@ class QueryApi:
 
 
 
+
     @validate_call
     def test_query_style_deep_object_explode_true_object_all_of(
         self,
@@ -1780,7 +1873,6 @@ class QueryApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1790,18 +1882,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_deep_object_explode_true_object_all_of_serialize(
@@ -1816,7 +1914,6 @@ class QueryApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -1826,7 +1923,7 @@ class QueryApi:
 
 
     @validate_call
-    def test_query_style_deep_object_explode_true_object_all_of_without_preload_content(
+    def test_query_style_deep_object_explode_true_object_all_of_with_http_info(
         self,
         query_object: Optional[Any] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1846,8 +1943,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1857,18 +1953,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_deep_object_explode_true_object_all_of_serialize(
@@ -1883,12 +1985,16 @@ class QueryApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_query_style_deep_object_explode_true_object_all_of_with_async(
+    def test_query_style_deep_object_explode_true_object_all_of_without_preload_content(
         self,
         query_object: Optional[Any] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1908,8 +2014,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1919,18 +2024,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_deep_object_explode_true_object_all_of_serialize(
@@ -1945,18 +2056,12 @@ class QueryApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_query_style_deep_object_explode_true_object_all_of_with_http_info_async(
+    def test_query_style_deep_object_explode_true_object_all_of_with_async(
         self,
         query_object: Optional[Any] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1977,7 +2082,6 @@ class QueryApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1987,18 +2091,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_deep_object_explode_true_object_all_of_serialize(
@@ -2013,20 +2123,18 @@ class QueryApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_query_style_deep_object_explode_true_object_all_of_with_http_info(
+    def test_query_style_deep_object_explode_true_object_all_of_with_http_info_async(
         self,
         query_object: Optional[Any] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2046,8 +2154,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -2057,18 +2164,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_deep_object_explode_true_object_all_of_serialize(
@@ -2083,13 +2196,14 @@ class QueryApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_query_style_deep_object_explode_true_object_all_of_serialize(
@@ -2127,6 +2241,7 @@ class QueryApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
@@ -2152,6 +2267,7 @@ class QueryApi:
 
 
 
+
     @validate_call
     def test_query_style_form_explode_true_array_string(
         self,
@@ -2174,7 +2290,6 @@ class QueryApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -2184,18 +2299,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_form_explode_true_array_string_serialize(
@@ -2210,7 +2331,6 @@ class QueryApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -2220,7 +2340,7 @@ class QueryApi:
 
 
     @validate_call
-    def test_query_style_form_explode_true_array_string_without_preload_content(
+    def test_query_style_form_explode_true_array_string_with_http_info(
         self,
         query_object: Optional[TestQueryStyleFormExplodeTrueArrayStringQueryObjectParameter] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2240,8 +2360,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -2251,18 +2370,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_form_explode_true_array_string_serialize(
@@ -2277,12 +2402,16 @@ class QueryApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_query_style_form_explode_true_array_string_with_async(
+    def test_query_style_form_explode_true_array_string_without_preload_content(
         self,
         query_object: Optional[TestQueryStyleFormExplodeTrueArrayStringQueryObjectParameter] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2302,8 +2431,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -2313,18 +2441,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_form_explode_true_array_string_serialize(
@@ -2339,18 +2473,12 @@ class QueryApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_query_style_form_explode_true_array_string_with_http_info_async(
+    def test_query_style_form_explode_true_array_string_with_async(
         self,
         query_object: Optional[TestQueryStyleFormExplodeTrueArrayStringQueryObjectParameter] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2371,7 +2499,6 @@ class QueryApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -2381,18 +2508,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_form_explode_true_array_string_serialize(
@@ -2407,20 +2540,18 @@ class QueryApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_query_style_form_explode_true_array_string_with_http_info(
+    def test_query_style_form_explode_true_array_string_with_http_info_async(
         self,
         query_object: Optional[TestQueryStyleFormExplodeTrueArrayStringQueryObjectParameter] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2440,8 +2571,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -2451,18 +2581,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_form_explode_true_array_string_serialize(
@@ -2477,13 +2613,14 @@ class QueryApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_query_style_form_explode_true_array_string_serialize(
@@ -2521,6 +2658,7 @@ class QueryApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
@@ -2546,6 +2684,7 @@ class QueryApi:
 
 
 
+
     @validate_call
     def test_query_style_form_explode_true_object(
         self,
@@ -2568,7 +2707,6 @@ class QueryApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -2578,18 +2716,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_form_explode_true_object_serialize(
@@ -2604,7 +2748,6 @@ class QueryApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -2614,7 +2757,7 @@ class QueryApi:
 
 
     @validate_call
-    def test_query_style_form_explode_true_object_without_preload_content(
+    def test_query_style_form_explode_true_object_with_http_info(
         self,
         query_object: Optional[Pet] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2634,8 +2777,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -2645,18 +2787,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_form_explode_true_object_serialize(
@@ -2671,12 +2819,16 @@ class QueryApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_query_style_form_explode_true_object_with_async(
+    def test_query_style_form_explode_true_object_without_preload_content(
         self,
         query_object: Optional[Pet] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2696,8 +2848,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -2707,18 +2858,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_form_explode_true_object_serialize(
@@ -2733,18 +2890,12 @@ class QueryApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_query_style_form_explode_true_object_with_http_info_async(
+    def test_query_style_form_explode_true_object_with_async(
         self,
         query_object: Optional[Pet] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2765,7 +2916,6 @@ class QueryApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -2775,18 +2925,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_form_explode_true_object_serialize(
@@ -2801,20 +2957,18 @@ class QueryApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_query_style_form_explode_true_object_with_http_info(
+    def test_query_style_form_explode_true_object_with_http_info_async(
         self,
         query_object: Optional[Pet] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2834,8 +2988,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -2845,18 +2998,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_form_explode_true_object_serialize(
@@ -2871,13 +3030,14 @@ class QueryApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_query_style_form_explode_true_object_serialize(
@@ -2915,6 +3075,7 @@ class QueryApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
@@ -2940,6 +3101,7 @@ class QueryApi:
 
 
 
+
     @validate_call
     def test_query_style_form_explode_true_object_all_of(
         self,
@@ -2962,7 +3124,6 @@ class QueryApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -2972,18 +3133,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_form_explode_true_object_all_of_serialize(
@@ -2998,7 +3165,6 @@ class QueryApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -3008,7 +3174,7 @@ class QueryApi:
 
 
     @validate_call
-    def test_query_style_form_explode_true_object_all_of_without_preload_content(
+    def test_query_style_form_explode_true_object_all_of_with_http_info(
         self,
         query_object: Optional[Any] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -3028,8 +3194,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -3039,18 +3204,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_form_explode_true_object_all_of_serialize(
@@ -3065,12 +3236,16 @@ class QueryApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_query_style_form_explode_true_object_all_of_with_async(
+    def test_query_style_form_explode_true_object_all_of_without_preload_content(
         self,
         query_object: Optional[Any] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -3090,8 +3265,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -3101,18 +3275,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_form_explode_true_object_all_of_serialize(
@@ -3127,18 +3307,12 @@ class QueryApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_query_style_form_explode_true_object_all_of_with_http_info_async(
+    def test_query_style_form_explode_true_object_all_of_with_async(
         self,
         query_object: Optional[Any] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -3159,7 +3333,6 @@ class QueryApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -3169,18 +3342,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_form_explode_true_object_all_of_serialize(
@@ -3195,20 +3374,18 @@ class QueryApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_query_style_form_explode_true_object_all_of_with_http_info(
+    def test_query_style_form_explode_true_object_all_of_with_http_info_async(
         self,
         query_object: Optional[Any] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -3228,8 +3405,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -3239,18 +3415,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_form_explode_true_object_all_of_serialize(
@@ -3265,13 +3447,14 @@ class QueryApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_query_style_form_explode_true_object_all_of_serialize(
@@ -3309,6 +3492,7 @@ class QueryApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
diff --git a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/api_response.py b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/api_response.py
index a8d7d49812d..2ac1ada6e9b 100644
--- a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/api_response.py
+++ b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/api_response.py
@@ -15,3 +15,7 @@ class ApiResponse(BaseModel, Generic[T]):
     headers: Optional[Dict[StrictStr, StrictStr]] = Field(None, description="HTTP headers")
     data: T = Field(description="Deserialized data given the data type")
     raw_data: StrictBytes = Field(description="Raw data (HTTP response body)")
+
+    model_config = {
+        "arbitrary_types_allowed": True
+    }
diff --git a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/bird.py b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/bird.py
index 33c7b26e848..beccd1e5b66 100644
--- a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/bird.py
+++ b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/bird.py
@@ -19,9 +19,8 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -74,7 +73,7 @@ class Bird(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Bird from a dict"""
         if obj is None:
             return None
diff --git a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/category.py b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/category.py
index 1bedf6f65d2..6f2b24d97c5 100644
--- a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/category.py
+++ b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/category.py
@@ -19,9 +19,8 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -74,7 +73,7 @@ class Category(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Category from a dict"""
         if obj is None:
             return None
diff --git a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/data_query.py b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/data_query.py
index c91e48bd59f..289a3b1d63a 100644
--- a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/data_query.py
+++ b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/data_query.py
@@ -19,11 +19,10 @@ import re  # noqa: F401
 import json
 
 from datetime import datetime
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import StrictStr
 from pydantic import Field
 from openapi_client.models.query import Query
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -77,7 +76,7 @@ class DataQuery(Query):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of DataQuery from a dict"""
         if obj is None:
             return None
diff --git a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/default_value.py b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/default_value.py
index 4de9557f2ef..cd5a281a4d6 100644
--- a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/default_value.py
+++ b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/default_value.py
@@ -19,10 +19,9 @@ import re  # noqa: F401
 import json
 
 
-from typing import List, Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt, StrictStr, field_validator
 from openapi_client.models.string_enum_ref import StringEnumRef
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -107,7 +106,7 @@ class DefaultValue(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of DefaultValue from a dict"""
         if obj is None:
             return None
diff --git a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/number_properties_only.py b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/number_properties_only.py
index 495bfaea144..613b3f12762 100644
--- a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/number_properties_only.py
+++ b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/number_properties_only.py
@@ -19,11 +19,10 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional, Union
+from typing import Any, ClassVar, Dict, List, Optional, Union
 from pydantic import BaseModel, StrictFloat, StrictInt
 from pydantic import Field
 from typing_extensions import Annotated
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -77,7 +76,7 @@ class NumberPropertiesOnly(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of NumberPropertiesOnly from a dict"""
         if obj is None:
             return None
diff --git a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/pet.py b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/pet.py
index 102f657a20b..195609af16e 100644
--- a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/pet.py
+++ b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/pet.py
@@ -19,12 +19,11 @@ import re  # noqa: F401
 import json
 
 
-from typing import List, Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt, StrictStr, field_validator
 from pydantic import Field
 from openapi_client.models.category import Category
 from openapi_client.models.tag import Tag
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -101,7 +100,7 @@ class Pet(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Pet from a dict"""
         if obj is None:
             return None
diff --git a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/query.py b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/query.py
index e6277c3fa3d..21ba854c8a0 100644
--- a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/query.py
+++ b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/query.py
@@ -19,10 +19,9 @@ import re  # noqa: F401
 import json
 
 
-from typing import List, Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt, StrictStr, field_validator
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -86,7 +85,7 @@ class Query(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Query from a dict"""
 
 
diff --git a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/tag.py b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/tag.py
index d691e053b85..80669dfc281 100644
--- a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/tag.py
+++ b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/tag.py
@@ -19,9 +19,8 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -74,7 +73,7 @@ class Tag(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Tag from a dict"""
         if obj is None:
             return None
diff --git a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/test_query_style_deep_object_explode_true_object_all_of_query_object_parameter.py b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/test_query_style_deep_object_explode_true_object_all_of_query_object_parameter.py
index 572f5c4862e..407fd0c56c0 100644
--- a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/test_query_style_deep_object_explode_true_object_all_of_query_object_parameter.py
+++ b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/test_query_style_deep_object_explode_true_object_all_of_query_object_parameter.py
@@ -19,9 +19,8 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -76,7 +75,7 @@ class TestQueryStyleDeepObjectExplodeTrueObjectAllOfQueryObjectParameter(BaseMod
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of TestQueryStyleDeepObjectExplodeTrueObjectAllOfQueryObjectParameter from a dict"""
         if obj is None:
             return None
diff --git a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/test_query_style_form_explode_true_array_string_query_object_parameter.py b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/test_query_style_form_explode_true_array_string_query_object_parameter.py
index ccc499508df..596411637e2 100644
--- a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/test_query_style_form_explode_true_array_string_query_object_parameter.py
+++ b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/models/test_query_style_form_explode_true_array_string_query_object_parameter.py
@@ -19,9 +19,8 @@ import re  # noqa: F401
 import json
 
 
-from typing import List, Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -73,7 +72,7 @@ class TestQueryStyleFormExplodeTrueArrayStringQueryObjectParameter(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of TestQueryStyleFormExplodeTrueArrayStringQueryObjectParameter from a dict"""
         if obj is None:
             return None
diff --git a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/rest.py b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/rest.py
index 4260bfb43a8..b9933b7a3b7 100644
--- a/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/rest.py
+++ b/samples/client/echo_api/python-disallowAdditionalPropertiesIfNotPresent-true/openapi_client/rest.py
@@ -15,14 +15,13 @@
 
 import io
 import json
-import logging
 import re
 import ssl
 
 from urllib.parse import urlencode, quote_plus
 import urllib3
 
-from openapi_client.exceptions import ApiException
+from openapi_client.exceptions import ApiException, ApiValueError
 
 RESTResponseType = urllib3.HTTPResponse
 
diff --git a/samples/client/echo_api/python/openapi_client/api/auth_api.py b/samples/client/echo_api/python/openapi_client/api/auth_api.py
index e48900987db..2d961e5ece8 100644
--- a/samples/client/echo_api/python/openapi_client/api/auth_api.py
+++ b/samples/client/echo_api/python/openapi_client/api/auth_api.py
@@ -13,20 +13,20 @@
 """  # noqa: E501
 
 
-import re  # noqa: F401
 import io
 import warnings
 
-from pydantic import validate_call, ValidationError, Field
-from typing import Dict, List, Optional, Tuple, Union, Any, Annotated
+from pydantic import validate_call, Field
+from typing import Dict, List, Optional, Tuple, Union, Any
+
+try:
+    from typing import Annotated
+except ImportError:
+    from typing_extensions import Annotated
 
 
 from openapi_client.api_client import ApiClient
 from openapi_client.api_response import ApiResponse
-from openapi_client.exceptions import (  # noqa: F401
-    ApiTypeError,
-    ApiValueError
-)
 from openapi_client.rest import RESTResponseType
 
 from multiprocessing.pool import ApplyResult
@@ -44,6 +44,7 @@ class AuthApi:
             api_client = ApiClient.get_default()
         self.api_client = api_client
 
+
     @validate_call
     def test_auth_http_basic(
         self,
@@ -65,7 +66,6 @@ class AuthApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """To test HTTP basic authentication
         To test HTTP basic authentication
                 This method makes a synchronous HTTP request by default.
@@ -73,18 +73,24 @@ class AuthApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_auth_http_basic_serialize(
@@ -98,7 +104,6 @@ class AuthApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -108,7 +113,7 @@ class AuthApi:
 
 
     @validate_call
-    def test_auth_http_basic_without_preload_content(
+    def test_auth_http_basic_with_http_info(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -127,8 +132,7 @@ class AuthApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """To test HTTP basic authentication
         To test HTTP basic authentication
                 This method makes a synchronous HTTP request by default.
@@ -136,18 +140,24 @@ class AuthApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_auth_http_basic_serialize(
@@ -161,12 +171,16 @@ class AuthApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_auth_http_basic_with_async(
+    def test_auth_http_basic_without_preload_content(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -185,8 +199,7 @@ class AuthApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """To test HTTP basic authentication
         To test HTTP basic authentication
                 This method makes a synchronous HTTP request by default.
@@ -194,18 +207,24 @@ class AuthApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_auth_http_basic_serialize(
@@ -219,18 +238,12 @@ class AuthApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_auth_http_basic_with_http_info_async(
+    def test_auth_http_basic_with_async(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -250,7 +263,6 @@ class AuthApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """To test HTTP basic authentication
         To test HTTP basic authentication
                 This method makes a synchronous HTTP request by default.
@@ -258,18 +270,24 @@ class AuthApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_auth_http_basic_serialize(
@@ -283,20 +301,18 @@ class AuthApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_auth_http_basic_with_http_info(
+    def test_auth_http_basic_with_http_info_async(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -315,8 +331,7 @@ class AuthApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """To test HTTP basic authentication
         To test HTTP basic authentication
                 This method makes a synchronous HTTP request by default.
@@ -324,18 +339,24 @@ class AuthApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_auth_http_basic_serialize(
@@ -349,13 +370,14 @@ class AuthApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_auth_http_basic_serialize(
@@ -388,6 +410,7 @@ class AuthApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
diff --git a/samples/client/echo_api/python/openapi_client/api/body_api.py b/samples/client/echo_api/python/openapi_client/api/body_api.py
index 554f4b1f690..eb2369324b8 100644
--- a/samples/client/echo_api/python/openapi_client/api/body_api.py
+++ b/samples/client/echo_api/python/openapi_client/api/body_api.py
@@ -13,12 +13,16 @@
 """  # noqa: E501
 
 
-import re  # noqa: F401
 import io
 import warnings
 
-from pydantic import validate_call, ValidationError, Field
-from typing import Dict, List, Optional, Tuple, Union, Any, Annotated
+from pydantic import validate_call, Field
+from typing import Dict, List, Optional, Tuple, Union, Any
+
+try:
+    from typing import Annotated
+except ImportError:
+    from typing_extensions import Annotated
 
 from pydantic import Field
 from typing_extensions import Annotated
@@ -31,10 +35,6 @@ from openapi_client.models.tag import Tag
 
 from openapi_client.api_client import ApiClient
 from openapi_client.api_response import ApiResponse
-from openapi_client.exceptions import (  # noqa: F401
-    ApiTypeError,
-    ApiValueError
-)
 from openapi_client.rest import RESTResponseType
 
 from multiprocessing.pool import ApplyResult
@@ -52,6 +52,7 @@ class BodyApi:
             api_client = ApiClient.get_default()
         self.api_client = api_client
 
+
     @validate_call
     def test_binary_gif(
         self,
@@ -73,7 +74,6 @@ class BodyApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> bytearray:
-
         """Test binary (gif) response body
         Test binary (gif) response body
                 This method makes a synchronous HTTP request by default.
@@ -81,18 +81,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[bytearray]
         """
 
         param = self._test_binary_gif_serialize(
@@ -106,7 +112,6 @@ class BodyApi:
             '200': "bytearray"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -116,7 +121,7 @@ class BodyApi:
 
 
     @validate_call
-    def test_binary_gif_without_preload_content(
+    def test_binary_gif_with_http_info(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -135,8 +140,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[bytearray]:
         """Test binary (gif) response body
         Test binary (gif) response body
                 This method makes a synchronous HTTP request by default.
@@ -144,18 +148,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[bytearray]
         """
 
         param = self._test_binary_gif_serialize(
@@ -169,12 +179,16 @@ class BodyApi:
             '200': "bytearray"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_binary_gif_with_async(
+    def test_binary_gif_without_preload_content(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -193,8 +207,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test binary (gif) response body
         Test binary (gif) response body
                 This method makes a synchronous HTTP request by default.
@@ -202,18 +215,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[bytearray]
         """
 
         param = self._test_binary_gif_serialize(
@@ -227,18 +246,12 @@ class BodyApi:
             '200': "bytearray"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_binary_gif_with_http_info_async(
+    def test_binary_gif_with_async(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -258,7 +271,6 @@ class BodyApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test binary (gif) response body
         Test binary (gif) response body
                 This method makes a synchronous HTTP request by default.
@@ -266,18 +278,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[bytearray]
         """
 
         param = self._test_binary_gif_serialize(
@@ -291,20 +309,18 @@ class BodyApi:
             '200': "bytearray"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_binary_gif_with_http_info(
+    def test_binary_gif_with_http_info_async(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -323,8 +339,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> bytearray:
-
+    ) -> ApplyResult:
         """Test binary (gif) response body
         Test binary (gif) response body
                 This method makes a synchronous HTTP request by default.
@@ -332,18 +347,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[bytearray]
         """
 
         param = self._test_binary_gif_serialize(
@@ -357,13 +378,14 @@ class BodyApi:
             '200': "bytearray"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_binary_gif_serialize(
@@ -396,6 +418,7 @@ class BodyApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['image/gif'])  # noqa: E501
@@ -421,6 +444,7 @@ class BodyApi:
 
 
 
+
     @validate_call
     def test_body_application_octetstream_binary(
         self,
@@ -443,7 +467,6 @@ class BodyApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test body parameter(s)
         Test body parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -453,18 +476,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_body_application_octetstream_binary_serialize(
@@ -479,7 +508,6 @@ class BodyApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -489,7 +517,7 @@ class BodyApi:
 
 
     @validate_call
-    def test_body_application_octetstream_binary_without_preload_content(
+    def test_body_application_octetstream_binary_with_http_info(
         self,
         body: Optional[Union[StrictBytes, StrictStr]] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -509,8 +537,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test body parameter(s)
         Test body parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -520,18 +547,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_body_application_octetstream_binary_serialize(
@@ -546,12 +579,16 @@ class BodyApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_body_application_octetstream_binary_with_async(
+    def test_body_application_octetstream_binary_without_preload_content(
         self,
         body: Optional[Union[StrictBytes, StrictStr]] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -571,8 +608,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test body parameter(s)
         Test body parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -582,18 +618,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_body_application_octetstream_binary_serialize(
@@ -608,18 +650,12 @@ class BodyApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_body_application_octetstream_binary_with_http_info_async(
+    def test_body_application_octetstream_binary_with_async(
         self,
         body: Optional[Union[StrictBytes, StrictStr]] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -640,7 +676,6 @@ class BodyApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test body parameter(s)
         Test body parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -650,18 +685,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_body_application_octetstream_binary_serialize(
@@ -676,20 +717,18 @@ class BodyApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_body_application_octetstream_binary_with_http_info(
+    def test_body_application_octetstream_binary_with_http_info_async(
         self,
         body: Optional[Union[StrictBytes, StrictStr]] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -709,8 +748,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test body parameter(s)
         Test body parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -720,18 +758,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_body_application_octetstream_binary_serialize(
@@ -746,13 +790,14 @@ class BodyApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_body_application_octetstream_binary_serialize(
@@ -787,9 +832,12 @@ class BodyApi:
         # process the body parameter
         if body is not None:
             # convert to byte array if the input is a file name (str)
-            if isinstance(_body_params, str):
-                with io.open(_body_params, "rb", encoding="utf-8") as _fp:
+            if isinstance(body, str):
+                with io.open(body, "rb") as _fp:
                     _body_params = _fp.read()
+            else:
+                _body_params = body
+
 
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
@@ -823,6 +871,7 @@ class BodyApi:
 
 
 
+
     @validate_call
     def test_body_multipart_formdata_array_of_binary(
         self,
@@ -845,7 +894,6 @@ class BodyApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test array of binary in multipart mime
         Test array of binary in multipart mime
                 This method makes a synchronous HTTP request by default.
@@ -855,18 +903,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_body_multipart_formdata_array_of_binary_serialize(
@@ -881,7 +935,6 @@ class BodyApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -891,7 +944,7 @@ class BodyApi:
 
 
     @validate_call
-    def test_body_multipart_formdata_array_of_binary_without_preload_content(
+    def test_body_multipart_formdata_array_of_binary_with_http_info(
         self,
         files: List[Union[StrictBytes, StrictStr]],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -911,8 +964,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test array of binary in multipart mime
         Test array of binary in multipart mime
                 This method makes a synchronous HTTP request by default.
@@ -922,18 +974,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_body_multipart_formdata_array_of_binary_serialize(
@@ -948,12 +1006,16 @@ class BodyApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_body_multipart_formdata_array_of_binary_with_async(
+    def test_body_multipart_formdata_array_of_binary_without_preload_content(
         self,
         files: List[Union[StrictBytes, StrictStr]],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -973,8 +1035,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test array of binary in multipart mime
         Test array of binary in multipart mime
                 This method makes a synchronous HTTP request by default.
@@ -984,18 +1045,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_body_multipart_formdata_array_of_binary_serialize(
@@ -1010,18 +1077,12 @@ class BodyApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_body_multipart_formdata_array_of_binary_with_http_info_async(
+    def test_body_multipart_formdata_array_of_binary_with_async(
         self,
         files: List[Union[StrictBytes, StrictStr]],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1042,7 +1103,6 @@ class BodyApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test array of binary in multipart mime
         Test array of binary in multipart mime
                 This method makes a synchronous HTTP request by default.
@@ -1052,18 +1112,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_body_multipart_formdata_array_of_binary_serialize(
@@ -1078,20 +1144,18 @@ class BodyApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_body_multipart_formdata_array_of_binary_with_http_info(
+    def test_body_multipart_formdata_array_of_binary_with_http_info_async(
         self,
         files: List[Union[StrictBytes, StrictStr]],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1111,8 +1175,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test array of binary in multipart mime
         Test array of binary in multipart mime
                 This method makes a synchronous HTTP request by default.
@@ -1122,18 +1185,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_body_multipart_formdata_array_of_binary_serialize(
@@ -1148,13 +1217,14 @@ class BodyApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_body_multipart_formdata_array_of_binary_serialize(
@@ -1191,6 +1261,7 @@ class BodyApi:
             _files['files'] = files
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
@@ -1223,6 +1294,7 @@ class BodyApi:
 
 
 
+
     @validate_call
     def test_echo_body_free_form_object_response_string(
         self,
@@ -1245,7 +1317,6 @@ class BodyApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test free form object
         Test free form object
                 This method makes a synchronous HTTP request by default.
@@ -1255,18 +1326,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_echo_body_free_form_object_response_string_serialize(
@@ -1281,7 +1358,6 @@ class BodyApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -1291,7 +1367,7 @@ class BodyApi:
 
 
     @validate_call
-    def test_echo_body_free_form_object_response_string_without_preload_content(
+    def test_echo_body_free_form_object_response_string_with_http_info(
         self,
         body: Annotated[Optional[Dict[str, Any]], Field(description="Free form object")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1311,8 +1387,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test free form object
         Test free form object
                 This method makes a synchronous HTTP request by default.
@@ -1322,18 +1397,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_echo_body_free_form_object_response_string_serialize(
@@ -1348,12 +1429,16 @@ class BodyApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_echo_body_free_form_object_response_string_with_async(
+    def test_echo_body_free_form_object_response_string_without_preload_content(
         self,
         body: Annotated[Optional[Dict[str, Any]], Field(description="Free form object")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1373,8 +1458,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test free form object
         Test free form object
                 This method makes a synchronous HTTP request by default.
@@ -1384,18 +1468,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_echo_body_free_form_object_response_string_serialize(
@@ -1410,18 +1500,12 @@ class BodyApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_echo_body_free_form_object_response_string_with_http_info_async(
+    def test_echo_body_free_form_object_response_string_with_async(
         self,
         body: Annotated[Optional[Dict[str, Any]], Field(description="Free form object")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1442,7 +1526,6 @@ class BodyApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test free form object
         Test free form object
                 This method makes a synchronous HTTP request by default.
@@ -1452,18 +1535,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_echo_body_free_form_object_response_string_serialize(
@@ -1478,20 +1567,18 @@ class BodyApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_echo_body_free_form_object_response_string_with_http_info(
+    def test_echo_body_free_form_object_response_string_with_http_info_async(
         self,
         body: Annotated[Optional[Dict[str, Any]], Field(description="Free form object")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1511,8 +1598,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test free form object
         Test free form object
                 This method makes a synchronous HTTP request by default.
@@ -1522,18 +1608,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_echo_body_free_form_object_response_string_serialize(
@@ -1548,13 +1640,14 @@ class BodyApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_echo_body_free_form_object_response_string_serialize(
@@ -1590,6 +1683,7 @@ class BodyApi:
         if body is not None:
             _body_params = body
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
@@ -1622,6 +1716,7 @@ class BodyApi:
 
 
 
+
     @validate_call
     def test_echo_body_pet(
         self,
@@ -1644,7 +1739,6 @@ class BodyApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> Pet:
-
         """Test body parameter(s)
         Test body parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1654,18 +1748,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Pet]
         """
 
         param = self._test_echo_body_pet_serialize(
@@ -1680,7 +1780,6 @@ class BodyApi:
             '200': "Pet"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -1690,7 +1789,7 @@ class BodyApi:
 
 
     @validate_call
-    def test_echo_body_pet_without_preload_content(
+    def test_echo_body_pet_with_http_info(
         self,
         pet: Annotated[Optional[Pet], Field(description="Pet object that needs to be added to the store")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1710,8 +1809,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[Pet]:
         """Test body parameter(s)
         Test body parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1721,18 +1819,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Pet]
         """
 
         param = self._test_echo_body_pet_serialize(
@@ -1747,12 +1851,16 @@ class BodyApi:
             '200': "Pet"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_echo_body_pet_with_async(
+    def test_echo_body_pet_without_preload_content(
         self,
         pet: Annotated[Optional[Pet], Field(description="Pet object that needs to be added to the store")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1772,8 +1880,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test body parameter(s)
         Test body parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1783,18 +1890,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Pet]
         """
 
         param = self._test_echo_body_pet_serialize(
@@ -1809,18 +1922,12 @@ class BodyApi:
             '200': "Pet"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_echo_body_pet_with_http_info_async(
+    def test_echo_body_pet_with_async(
         self,
         pet: Annotated[Optional[Pet], Field(description="Pet object that needs to be added to the store")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1841,7 +1948,6 @@ class BodyApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test body parameter(s)
         Test body parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1851,18 +1957,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Pet]
         """
 
         param = self._test_echo_body_pet_serialize(
@@ -1877,20 +1989,18 @@ class BodyApi:
             '200': "Pet"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_echo_body_pet_with_http_info(
+    def test_echo_body_pet_with_http_info_async(
         self,
         pet: Annotated[Optional[Pet], Field(description="Pet object that needs to be added to the store")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1910,8 +2020,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> Pet:
-
+    ) -> ApplyResult:
         """Test body parameter(s)
         Test body parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1921,18 +2030,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Pet]
         """
 
         param = self._test_echo_body_pet_serialize(
@@ -1947,13 +2062,14 @@ class BodyApi:
             '200': "Pet"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_echo_body_pet_serialize(
@@ -1989,6 +2105,7 @@ class BodyApi:
         if pet is not None:
             _body_params = pet
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/json'])  # noqa: E501
@@ -2021,6 +2138,7 @@ class BodyApi:
 
 
 
+
     @validate_call
     def test_echo_body_pet_response_string(
         self,
@@ -2043,7 +2161,6 @@ class BodyApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test empty response body
         Test empty response body
                 This method makes a synchronous HTTP request by default.
@@ -2053,18 +2170,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_echo_body_pet_response_string_serialize(
@@ -2079,7 +2202,6 @@ class BodyApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -2089,7 +2211,7 @@ class BodyApi:
 
 
     @validate_call
-    def test_echo_body_pet_response_string_without_preload_content(
+    def test_echo_body_pet_response_string_with_http_info(
         self,
         pet: Annotated[Optional[Pet], Field(description="Pet object that needs to be added to the store")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2109,8 +2231,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test empty response body
         Test empty response body
                 This method makes a synchronous HTTP request by default.
@@ -2120,18 +2241,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_echo_body_pet_response_string_serialize(
@@ -2146,12 +2273,16 @@ class BodyApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_echo_body_pet_response_string_with_async(
+    def test_echo_body_pet_response_string_without_preload_content(
         self,
         pet: Annotated[Optional[Pet], Field(description="Pet object that needs to be added to the store")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2171,8 +2302,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test empty response body
         Test empty response body
                 This method makes a synchronous HTTP request by default.
@@ -2182,18 +2312,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_echo_body_pet_response_string_serialize(
@@ -2208,18 +2344,12 @@ class BodyApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_echo_body_pet_response_string_with_http_info_async(
+    def test_echo_body_pet_response_string_with_async(
         self,
         pet: Annotated[Optional[Pet], Field(description="Pet object that needs to be added to the store")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2240,7 +2370,6 @@ class BodyApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test empty response body
         Test empty response body
                 This method makes a synchronous HTTP request by default.
@@ -2250,18 +2379,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_echo_body_pet_response_string_serialize(
@@ -2276,20 +2411,18 @@ class BodyApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_echo_body_pet_response_string_with_http_info(
+    def test_echo_body_pet_response_string_with_http_info_async(
         self,
         pet: Annotated[Optional[Pet], Field(description="Pet object that needs to be added to the store")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2309,8 +2442,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test empty response body
         Test empty response body
                 This method makes a synchronous HTTP request by default.
@@ -2320,18 +2452,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_echo_body_pet_response_string_serialize(
@@ -2346,13 +2484,14 @@ class BodyApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_echo_body_pet_response_string_serialize(
@@ -2388,6 +2527,7 @@ class BodyApi:
         if pet is not None:
             _body_params = pet
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
@@ -2420,6 +2560,7 @@ class BodyApi:
 
 
 
+
     @validate_call
     def test_echo_body_tag_response_string(
         self,
@@ -2442,7 +2583,6 @@ class BodyApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test empty json (request body)
         Test empty json (request body)
                 This method makes a synchronous HTTP request by default.
@@ -2452,18 +2592,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_echo_body_tag_response_string_serialize(
@@ -2478,7 +2624,6 @@ class BodyApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -2488,7 +2633,7 @@ class BodyApi:
 
 
     @validate_call
-    def test_echo_body_tag_response_string_without_preload_content(
+    def test_echo_body_tag_response_string_with_http_info(
         self,
         tag: Annotated[Optional[Tag], Field(description="Tag object")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2508,8 +2653,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test empty json (request body)
         Test empty json (request body)
                 This method makes a synchronous HTTP request by default.
@@ -2519,18 +2663,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_echo_body_tag_response_string_serialize(
@@ -2545,12 +2695,16 @@ class BodyApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_echo_body_tag_response_string_with_async(
+    def test_echo_body_tag_response_string_without_preload_content(
         self,
         tag: Annotated[Optional[Tag], Field(description="Tag object")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2570,8 +2724,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test empty json (request body)
         Test empty json (request body)
                 This method makes a synchronous HTTP request by default.
@@ -2581,18 +2734,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_echo_body_tag_response_string_serialize(
@@ -2607,18 +2766,12 @@ class BodyApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_echo_body_tag_response_string_with_http_info_async(
+    def test_echo_body_tag_response_string_with_async(
         self,
         tag: Annotated[Optional[Tag], Field(description="Tag object")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2639,7 +2792,6 @@ class BodyApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test empty json (request body)
         Test empty json (request body)
                 This method makes a synchronous HTTP request by default.
@@ -2649,18 +2801,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_echo_body_tag_response_string_serialize(
@@ -2675,20 +2833,18 @@ class BodyApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_echo_body_tag_response_string_with_http_info(
+    def test_echo_body_tag_response_string_with_http_info_async(
         self,
         tag: Annotated[Optional[Tag], Field(description="Tag object")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2708,8 +2864,7 @@ class BodyApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test empty json (request body)
         Test empty json (request body)
                 This method makes a synchronous HTTP request by default.
@@ -2719,18 +2874,24 @@ class BodyApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_echo_body_tag_response_string_serialize(
@@ -2745,13 +2906,14 @@ class BodyApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_echo_body_tag_response_string_serialize(
@@ -2787,6 +2949,7 @@ class BodyApi:
         if tag is not None:
             _body_params = tag
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
diff --git a/samples/client/echo_api/python/openapi_client/api/form_api.py b/samples/client/echo_api/python/openapi_client/api/form_api.py
index 8a2cd2cfdd1..c27fe1e95dd 100644
--- a/samples/client/echo_api/python/openapi_client/api/form_api.py
+++ b/samples/client/echo_api/python/openapi_client/api/form_api.py
@@ -13,12 +13,16 @@
 """  # noqa: E501
 
 
-import re  # noqa: F401
 import io
 import warnings
 
-from pydantic import validate_call, ValidationError, Field
-from typing import Dict, List, Optional, Tuple, Union, Any, Annotated
+from pydantic import validate_call, Field
+from typing import Dict, List, Optional, Tuple, Union, Any
+
+try:
+    from typing import Annotated
+except ImportError:
+    from typing_extensions import Annotated
 
 from pydantic import StrictBool, StrictInt, StrictStr
 
@@ -27,10 +31,6 @@ from typing import Optional
 
 from openapi_client.api_client import ApiClient
 from openapi_client.api_response import ApiResponse
-from openapi_client.exceptions import (  # noqa: F401
-    ApiTypeError,
-    ApiValueError
-)
 from openapi_client.rest import RESTResponseType
 
 from multiprocessing.pool import ApplyResult
@@ -48,6 +48,7 @@ class FormApi:
             api_client = ApiClient.get_default()
         self.api_client = api_client
 
+
     @validate_call
     def test_form_integer_boolean_string(
         self,
@@ -72,7 +73,6 @@ class FormApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test form parameter(s)
         Test form parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -86,18 +86,24 @@ class FormApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_form_integer_boolean_string_serialize(
@@ -114,7 +120,6 @@ class FormApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -124,7 +129,7 @@ class FormApi:
 
 
     @validate_call
-    def test_form_integer_boolean_string_without_preload_content(
+    def test_form_integer_boolean_string_with_http_info(
         self,
         integer_form: Optional[StrictInt] = None,
         boolean_form: Optional[StrictBool] = None,
@@ -146,8 +151,7 @@ class FormApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test form parameter(s)
         Test form parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -161,18 +165,24 @@ class FormApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_form_integer_boolean_string_serialize(
@@ -189,12 +199,16 @@ class FormApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_form_integer_boolean_string_with_async(
+    def test_form_integer_boolean_string_without_preload_content(
         self,
         integer_form: Optional[StrictInt] = None,
         boolean_form: Optional[StrictBool] = None,
@@ -216,8 +230,7 @@ class FormApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test form parameter(s)
         Test form parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -231,18 +244,24 @@ class FormApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_form_integer_boolean_string_serialize(
@@ -259,18 +278,12 @@ class FormApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_form_integer_boolean_string_with_http_info_async(
+    def test_form_integer_boolean_string_with_async(
         self,
         integer_form: Optional[StrictInt] = None,
         boolean_form: Optional[StrictBool] = None,
@@ -293,7 +306,6 @@ class FormApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test form parameter(s)
         Test form parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -307,18 +319,24 @@ class FormApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_form_integer_boolean_string_serialize(
@@ -335,20 +353,18 @@ class FormApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_form_integer_boolean_string_with_http_info(
+    def test_form_integer_boolean_string_with_http_info_async(
         self,
         integer_form: Optional[StrictInt] = None,
         boolean_form: Optional[StrictBool] = None,
@@ -370,8 +386,7 @@ class FormApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test form parameter(s)
         Test form parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -385,18 +400,24 @@ class FormApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_form_integer_boolean_string_serialize(
@@ -413,13 +434,14 @@ class FormApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_form_integer_boolean_string_serialize(
@@ -461,6 +483,7 @@ class FormApi:
             _form_params.append(('string_form', string_form))
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
@@ -493,6 +516,7 @@ class FormApi:
 
 
 
+
     @validate_call
     def test_form_oneof(
         self,
@@ -520,7 +544,6 @@ class FormApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test form parameter(s) for oneOf schema
         Test form parameter(s) for oneOf schema
                 This method makes a synchronous HTTP request by default.
@@ -540,18 +563,24 @@ class FormApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_form_oneof_serialize(
@@ -571,7 +600,6 @@ class FormApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -581,7 +609,7 @@ class FormApi:
 
 
     @validate_call
-    def test_form_oneof_without_preload_content(
+    def test_form_oneof_with_http_info(
         self,
         form1: Optional[StrictStr] = None,
         form2: Optional[StrictInt] = None,
@@ -606,8 +634,7 @@ class FormApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test form parameter(s) for oneOf schema
         Test form parameter(s) for oneOf schema
                 This method makes a synchronous HTTP request by default.
@@ -627,18 +654,24 @@ class FormApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_form_oneof_serialize(
@@ -658,12 +691,16 @@ class FormApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_form_oneof_with_async(
+    def test_form_oneof_without_preload_content(
         self,
         form1: Optional[StrictStr] = None,
         form2: Optional[StrictInt] = None,
@@ -688,8 +725,7 @@ class FormApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test form parameter(s) for oneOf schema
         Test form parameter(s) for oneOf schema
                 This method makes a synchronous HTTP request by default.
@@ -709,18 +745,24 @@ class FormApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_form_oneof_serialize(
@@ -740,18 +782,12 @@ class FormApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_form_oneof_with_http_info_async(
+    def test_form_oneof_with_async(
         self,
         form1: Optional[StrictStr] = None,
         form2: Optional[StrictInt] = None,
@@ -777,7 +813,6 @@ class FormApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test form parameter(s) for oneOf schema
         Test form parameter(s) for oneOf schema
                 This method makes a synchronous HTTP request by default.
@@ -797,18 +832,24 @@ class FormApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_form_oneof_serialize(
@@ -828,20 +869,18 @@ class FormApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_form_oneof_with_http_info(
+    def test_form_oneof_with_http_info_async(
         self,
         form1: Optional[StrictStr] = None,
         form2: Optional[StrictInt] = None,
@@ -866,8 +905,7 @@ class FormApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test form parameter(s) for oneOf schema
         Test form parameter(s) for oneOf schema
                 This method makes a synchronous HTTP request by default.
@@ -887,18 +925,24 @@ class FormApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_form_oneof_serialize(
@@ -918,13 +962,14 @@ class FormApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_form_oneof_serialize(
@@ -975,6 +1020,7 @@ class FormApi:
             _form_params.append(('name', name))
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
diff --git a/samples/client/echo_api/python/openapi_client/api/header_api.py b/samples/client/echo_api/python/openapi_client/api/header_api.py
index b606566c112..f03bdf7cd3e 100644
--- a/samples/client/echo_api/python/openapi_client/api/header_api.py
+++ b/samples/client/echo_api/python/openapi_client/api/header_api.py
@@ -13,12 +13,16 @@
 """  # noqa: E501
 
 
-import re  # noqa: F401
 import io
 import warnings
 
-from pydantic import validate_call, ValidationError, Field
-from typing import Dict, List, Optional, Tuple, Union, Any, Annotated
+from pydantic import validate_call, Field
+from typing import Dict, List, Optional, Tuple, Union, Any
+
+try:
+    from typing import Annotated
+except ImportError:
+    from typing_extensions import Annotated
 
 from pydantic import StrictBool, StrictInt, StrictStr, field_validator
 
@@ -28,10 +32,6 @@ from openapi_client.models.string_enum_ref import StringEnumRef
 
 from openapi_client.api_client import ApiClient
 from openapi_client.api_response import ApiResponse
-from openapi_client.exceptions import (  # noqa: F401
-    ApiTypeError,
-    ApiValueError
-)
 from openapi_client.rest import RESTResponseType
 
 from multiprocessing.pool import ApplyResult
@@ -49,6 +49,7 @@ class HeaderApi:
             api_client = ApiClient.get_default()
         self.api_client = api_client
 
+
     @validate_call
     def test_header_integer_boolean_string_enums(
         self,
@@ -75,7 +76,6 @@ class HeaderApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test header parameter(s)
         Test header parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -93,18 +93,24 @@ class HeaderApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_header_integer_boolean_string_enums_serialize(
@@ -123,7 +129,6 @@ class HeaderApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -133,7 +138,7 @@ class HeaderApi:
 
 
     @validate_call
-    def test_header_integer_boolean_string_enums_without_preload_content(
+    def test_header_integer_boolean_string_enums_with_http_info(
         self,
         integer_header: Optional[StrictInt] = None,
         boolean_header: Optional[StrictBool] = None,
@@ -157,8 +162,7 @@ class HeaderApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test header parameter(s)
         Test header parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -176,18 +180,24 @@ class HeaderApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_header_integer_boolean_string_enums_serialize(
@@ -206,12 +216,16 @@ class HeaderApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_header_integer_boolean_string_enums_with_async(
+    def test_header_integer_boolean_string_enums_without_preload_content(
         self,
         integer_header: Optional[StrictInt] = None,
         boolean_header: Optional[StrictBool] = None,
@@ -235,8 +249,7 @@ class HeaderApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test header parameter(s)
         Test header parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -254,18 +267,24 @@ class HeaderApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_header_integer_boolean_string_enums_serialize(
@@ -284,18 +303,12 @@ class HeaderApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_header_integer_boolean_string_enums_with_http_info_async(
+    def test_header_integer_boolean_string_enums_with_async(
         self,
         integer_header: Optional[StrictInt] = None,
         boolean_header: Optional[StrictBool] = None,
@@ -320,7 +333,6 @@ class HeaderApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test header parameter(s)
         Test header parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -338,18 +350,24 @@ class HeaderApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_header_integer_boolean_string_enums_serialize(
@@ -368,20 +386,18 @@ class HeaderApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_header_integer_boolean_string_enums_with_http_info(
+    def test_header_integer_boolean_string_enums_with_http_info_async(
         self,
         integer_header: Optional[StrictInt] = None,
         boolean_header: Optional[StrictBool] = None,
@@ -405,8 +421,7 @@ class HeaderApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test header parameter(s)
         Test header parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -424,18 +439,24 @@ class HeaderApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_header_integer_boolean_string_enums_serialize(
@@ -454,13 +475,14 @@ class HeaderApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_header_integer_boolean_string_enums_serialize(
@@ -508,6 +530,7 @@ class HeaderApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
diff --git a/samples/client/echo_api/python/openapi_client/api/path_api.py b/samples/client/echo_api/python/openapi_client/api/path_api.py
index 1db368a4691..e7425967ecb 100644
--- a/samples/client/echo_api/python/openapi_client/api/path_api.py
+++ b/samples/client/echo_api/python/openapi_client/api/path_api.py
@@ -13,12 +13,16 @@
 """  # noqa: E501
 
 
-import re  # noqa: F401
 import io
 import warnings
 
-from pydantic import validate_call, ValidationError, Field
-from typing import Dict, List, Optional, Tuple, Union, Any, Annotated
+from pydantic import validate_call, Field
+from typing import Dict, List, Optional, Tuple, Union, Any
+
+try:
+    from typing import Annotated
+except ImportError:
+    from typing_extensions import Annotated
 
 from pydantic import StrictInt, StrictStr, field_validator
 
@@ -26,10 +30,6 @@ from openapi_client.models.string_enum_ref import StringEnumRef
 
 from openapi_client.api_client import ApiClient
 from openapi_client.api_response import ApiResponse
-from openapi_client.exceptions import (  # noqa: F401
-    ApiTypeError,
-    ApiValueError
-)
 from openapi_client.rest import RESTResponseType
 
 from multiprocessing.pool import ApplyResult
@@ -47,6 +47,7 @@ class PathApi:
             api_client = ApiClient.get_default()
         self.api_client = api_client
 
+
     @validate_call
     def tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path(
         self,
@@ -72,7 +73,6 @@ class PathApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test path parameter(s)
         Test path parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -88,18 +88,24 @@ class PathApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_serialize(
@@ -117,7 +123,6 @@ class PathApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -127,7 +132,7 @@ class PathApi:
 
 
     @validate_call
-    def tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_without_preload_content(
+    def tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_with_http_info(
         self,
         path_string: StrictStr,
         path_integer: StrictInt,
@@ -150,8 +155,7 @@ class PathApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test path parameter(s)
         Test path parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -167,18 +171,24 @@ class PathApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_serialize(
@@ -196,12 +206,16 @@ class PathApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_with_async(
+    def tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_without_preload_content(
         self,
         path_string: StrictStr,
         path_integer: StrictInt,
@@ -224,8 +238,7 @@ class PathApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test path parameter(s)
         Test path parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -241,18 +254,24 @@ class PathApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_serialize(
@@ -270,18 +289,12 @@ class PathApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_with_http_info_async(
+    def tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_with_async(
         self,
         path_string: StrictStr,
         path_integer: StrictInt,
@@ -305,7 +318,6 @@ class PathApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test path parameter(s)
         Test path parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -321,18 +333,24 @@ class PathApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_serialize(
@@ -350,20 +368,18 @@ class PathApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_with_http_info(
+    def tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_with_http_info_async(
         self,
         path_string: StrictStr,
         path_integer: StrictInt,
@@ -386,8 +402,7 @@ class PathApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test path parameter(s)
         Test path parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -403,18 +418,24 @@ class PathApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_serialize(
@@ -432,13 +453,14 @@ class PathApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _tests_path_string_path_string_integer_path_integer_enum_nonref_string_path_enum_ref_string_path_serialize(
@@ -483,6 +505,7 @@ class PathApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
diff --git a/samples/client/echo_api/python/openapi_client/api/query_api.py b/samples/client/echo_api/python/openapi_client/api/query_api.py
index e59e997e0e1..c070f6bfca6 100644
--- a/samples/client/echo_api/python/openapi_client/api/query_api.py
+++ b/samples/client/echo_api/python/openapi_client/api/query_api.py
@@ -13,12 +13,16 @@
 """  # noqa: E501
 
 
-import re  # noqa: F401
 import io
 import warnings
 
-from pydantic import validate_call, ValidationError, Field
-from typing import Dict, List, Optional, Tuple, Union, Any, Annotated
+from pydantic import validate_call, Field
+from typing import Dict, List, Optional, Tuple, Union, Any
+
+try:
+    from typing import Annotated
+except ImportError:
+    from typing_extensions import Annotated
 
 from datetime import date, datetime
 
@@ -32,10 +36,6 @@ from openapi_client.models.test_query_style_form_explode_true_array_string_query
 
 from openapi_client.api_client import ApiClient
 from openapi_client.api_response import ApiResponse
-from openapi_client.exceptions import (  # noqa: F401
-    ApiTypeError,
-    ApiValueError
-)
 from openapi_client.rest import RESTResponseType
 
 from multiprocessing.pool import ApplyResult
@@ -53,6 +53,7 @@ class QueryApi:
             api_client = ApiClient.get_default()
         self.api_client = api_client
 
+
     @validate_call
     def test_enum_ref_string(
         self,
@@ -76,7 +77,6 @@ class QueryApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -88,18 +88,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_enum_ref_string_serialize(
@@ -115,7 +121,6 @@ class QueryApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -125,7 +130,7 @@ class QueryApi:
 
 
     @validate_call
-    def test_enum_ref_string_without_preload_content(
+    def test_enum_ref_string_with_http_info(
         self,
         enum_nonref_string_query: Optional[StrictStr] = None,
         enum_ref_string_query: Optional[StringEnumRef] = None,
@@ -146,8 +151,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -159,18 +163,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_enum_ref_string_serialize(
@@ -186,12 +196,16 @@ class QueryApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_enum_ref_string_with_async(
+    def test_enum_ref_string_without_preload_content(
         self,
         enum_nonref_string_query: Optional[StrictStr] = None,
         enum_ref_string_query: Optional[StringEnumRef] = None,
@@ -212,8 +226,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -225,18 +238,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_enum_ref_string_serialize(
@@ -252,18 +271,12 @@ class QueryApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_enum_ref_string_with_http_info_async(
+    def test_enum_ref_string_with_async(
         self,
         enum_nonref_string_query: Optional[StrictStr] = None,
         enum_ref_string_query: Optional[StringEnumRef] = None,
@@ -285,7 +298,6 @@ class QueryApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -297,18 +309,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_enum_ref_string_serialize(
@@ -324,20 +342,18 @@ class QueryApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_enum_ref_string_with_http_info(
+    def test_enum_ref_string_with_http_info_async(
         self,
         enum_nonref_string_query: Optional[StrictStr] = None,
         enum_ref_string_query: Optional[StringEnumRef] = None,
@@ -358,8 +374,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -371,18 +386,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_enum_ref_string_serialize(
@@ -398,13 +419,14 @@ class QueryApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_enum_ref_string_serialize(
@@ -447,6 +469,7 @@ class QueryApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
@@ -472,6 +495,7 @@ class QueryApi:
 
 
 
+
     @validate_call
     def test_query_datetime_date_string(
         self,
@@ -496,7 +520,6 @@ class QueryApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -510,18 +533,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_datetime_date_string_serialize(
@@ -538,7 +567,6 @@ class QueryApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -548,7 +576,7 @@ class QueryApi:
 
 
     @validate_call
-    def test_query_datetime_date_string_without_preload_content(
+    def test_query_datetime_date_string_with_http_info(
         self,
         datetime_query: Optional[datetime] = None,
         date_query: Optional[date] = None,
@@ -570,8 +598,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -585,18 +612,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_datetime_date_string_serialize(
@@ -613,12 +646,16 @@ class QueryApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_query_datetime_date_string_with_async(
+    def test_query_datetime_date_string_without_preload_content(
         self,
         datetime_query: Optional[datetime] = None,
         date_query: Optional[date] = None,
@@ -640,8 +677,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -655,18 +691,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_datetime_date_string_serialize(
@@ -683,18 +725,12 @@ class QueryApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_query_datetime_date_string_with_http_info_async(
+    def test_query_datetime_date_string_with_async(
         self,
         datetime_query: Optional[datetime] = None,
         date_query: Optional[date] = None,
@@ -717,7 +753,6 @@ class QueryApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -731,18 +766,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_datetime_date_string_serialize(
@@ -759,20 +800,18 @@ class QueryApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_query_datetime_date_string_with_http_info(
+    def test_query_datetime_date_string_with_http_info_async(
         self,
         datetime_query: Optional[datetime] = None,
         date_query: Optional[date] = None,
@@ -794,8 +833,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -809,18 +847,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_datetime_date_string_serialize(
@@ -837,13 +881,14 @@ class QueryApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_query_datetime_date_string_serialize(
@@ -895,6 +940,7 @@ class QueryApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
@@ -920,6 +966,7 @@ class QueryApi:
 
 
 
+
     @validate_call
     def test_query_integer_boolean_string(
         self,
@@ -944,7 +991,6 @@ class QueryApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -958,18 +1004,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_integer_boolean_string_serialize(
@@ -986,7 +1038,6 @@ class QueryApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -996,7 +1047,7 @@ class QueryApi:
 
 
     @validate_call
-    def test_query_integer_boolean_string_without_preload_content(
+    def test_query_integer_boolean_string_with_http_info(
         self,
         integer_query: Optional[StrictInt] = None,
         boolean_query: Optional[StrictBool] = None,
@@ -1018,8 +1069,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1033,18 +1083,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_integer_boolean_string_serialize(
@@ -1061,12 +1117,16 @@ class QueryApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_query_integer_boolean_string_with_async(
+    def test_query_integer_boolean_string_without_preload_content(
         self,
         integer_query: Optional[StrictInt] = None,
         boolean_query: Optional[StrictBool] = None,
@@ -1088,8 +1148,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1103,18 +1162,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_integer_boolean_string_serialize(
@@ -1131,18 +1196,12 @@ class QueryApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_query_integer_boolean_string_with_http_info_async(
+    def test_query_integer_boolean_string_with_async(
         self,
         integer_query: Optional[StrictInt] = None,
         boolean_query: Optional[StrictBool] = None,
@@ -1165,7 +1224,6 @@ class QueryApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1179,18 +1237,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_integer_boolean_string_serialize(
@@ -1207,20 +1271,18 @@ class QueryApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_query_integer_boolean_string_with_http_info(
+    def test_query_integer_boolean_string_with_http_info_async(
         self,
         integer_query: Optional[StrictInt] = None,
         boolean_query: Optional[StrictBool] = None,
@@ -1242,8 +1304,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1257,18 +1318,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_integer_boolean_string_serialize(
@@ -1285,13 +1352,14 @@ class QueryApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_query_integer_boolean_string_serialize(
@@ -1339,6 +1407,7 @@ class QueryApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
@@ -1364,6 +1433,7 @@ class QueryApi:
 
 
 
+
     @validate_call
     def test_query_style_deep_object_explode_true_object(
         self,
@@ -1386,7 +1456,6 @@ class QueryApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1396,18 +1465,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_deep_object_explode_true_object_serialize(
@@ -1422,7 +1497,6 @@ class QueryApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -1432,7 +1506,7 @@ class QueryApi:
 
 
     @validate_call
-    def test_query_style_deep_object_explode_true_object_without_preload_content(
+    def test_query_style_deep_object_explode_true_object_with_http_info(
         self,
         query_object: Optional[Pet] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1452,8 +1526,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1463,18 +1536,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_deep_object_explode_true_object_serialize(
@@ -1489,12 +1568,16 @@ class QueryApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_query_style_deep_object_explode_true_object_with_async(
+    def test_query_style_deep_object_explode_true_object_without_preload_content(
         self,
         query_object: Optional[Pet] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1514,8 +1597,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1525,18 +1607,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_deep_object_explode_true_object_serialize(
@@ -1551,18 +1639,12 @@ class QueryApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_query_style_deep_object_explode_true_object_with_http_info_async(
+    def test_query_style_deep_object_explode_true_object_with_async(
         self,
         query_object: Optional[Pet] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1583,7 +1665,6 @@ class QueryApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1593,18 +1674,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_deep_object_explode_true_object_serialize(
@@ -1619,20 +1706,18 @@ class QueryApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_query_style_deep_object_explode_true_object_with_http_info(
+    def test_query_style_deep_object_explode_true_object_with_http_info_async(
         self,
         query_object: Optional[Pet] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1652,8 +1737,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1663,18 +1747,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_deep_object_explode_true_object_serialize(
@@ -1689,13 +1779,14 @@ class QueryApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_query_style_deep_object_explode_true_object_serialize(
@@ -1733,6 +1824,7 @@ class QueryApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
@@ -1758,6 +1850,7 @@ class QueryApi:
 
 
 
+
     @validate_call
     def test_query_style_deep_object_explode_true_object_all_of(
         self,
@@ -1780,7 +1873,6 @@ class QueryApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1790,18 +1882,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_deep_object_explode_true_object_all_of_serialize(
@@ -1816,7 +1914,6 @@ class QueryApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -1826,7 +1923,7 @@ class QueryApi:
 
 
     @validate_call
-    def test_query_style_deep_object_explode_true_object_all_of_without_preload_content(
+    def test_query_style_deep_object_explode_true_object_all_of_with_http_info(
         self,
         query_object: Optional[Any] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1846,8 +1943,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1857,18 +1953,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_deep_object_explode_true_object_all_of_serialize(
@@ -1883,12 +1985,16 @@ class QueryApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_query_style_deep_object_explode_true_object_all_of_with_async(
+    def test_query_style_deep_object_explode_true_object_all_of_without_preload_content(
         self,
         query_object: Optional[Any] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1908,8 +2014,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1919,18 +2024,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_deep_object_explode_true_object_all_of_serialize(
@@ -1945,18 +2056,12 @@ class QueryApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_query_style_deep_object_explode_true_object_all_of_with_http_info_async(
+    def test_query_style_deep_object_explode_true_object_all_of_with_async(
         self,
         query_object: Optional[Any] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1977,7 +2082,6 @@ class QueryApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -1987,18 +2091,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_deep_object_explode_true_object_all_of_serialize(
@@ -2013,20 +2123,18 @@ class QueryApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_query_style_deep_object_explode_true_object_all_of_with_http_info(
+    def test_query_style_deep_object_explode_true_object_all_of_with_http_info_async(
         self,
         query_object: Optional[Any] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2046,8 +2154,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -2057,18 +2164,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_deep_object_explode_true_object_all_of_serialize(
@@ -2083,13 +2196,14 @@ class QueryApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_query_style_deep_object_explode_true_object_all_of_serialize(
@@ -2127,6 +2241,7 @@ class QueryApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
@@ -2152,6 +2267,7 @@ class QueryApi:
 
 
 
+
     @validate_call
     def test_query_style_form_explode_true_array_string(
         self,
@@ -2174,7 +2290,6 @@ class QueryApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -2184,18 +2299,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_form_explode_true_array_string_serialize(
@@ -2210,7 +2331,6 @@ class QueryApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -2220,7 +2340,7 @@ class QueryApi:
 
 
     @validate_call
-    def test_query_style_form_explode_true_array_string_without_preload_content(
+    def test_query_style_form_explode_true_array_string_with_http_info(
         self,
         query_object: Optional[TestQueryStyleFormExplodeTrueArrayStringQueryObjectParameter] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2240,8 +2360,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -2251,18 +2370,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_form_explode_true_array_string_serialize(
@@ -2277,12 +2402,16 @@ class QueryApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_query_style_form_explode_true_array_string_with_async(
+    def test_query_style_form_explode_true_array_string_without_preload_content(
         self,
         query_object: Optional[TestQueryStyleFormExplodeTrueArrayStringQueryObjectParameter] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2302,8 +2431,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -2313,18 +2441,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_form_explode_true_array_string_serialize(
@@ -2339,18 +2473,12 @@ class QueryApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_query_style_form_explode_true_array_string_with_http_info_async(
+    def test_query_style_form_explode_true_array_string_with_async(
         self,
         query_object: Optional[TestQueryStyleFormExplodeTrueArrayStringQueryObjectParameter] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2371,7 +2499,6 @@ class QueryApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -2381,18 +2508,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_form_explode_true_array_string_serialize(
@@ -2407,20 +2540,18 @@ class QueryApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_query_style_form_explode_true_array_string_with_http_info(
+    def test_query_style_form_explode_true_array_string_with_http_info_async(
         self,
         query_object: Optional[TestQueryStyleFormExplodeTrueArrayStringQueryObjectParameter] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2440,8 +2571,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -2451,18 +2581,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_form_explode_true_array_string_serialize(
@@ -2477,13 +2613,14 @@ class QueryApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_query_style_form_explode_true_array_string_serialize(
@@ -2521,6 +2658,7 @@ class QueryApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
@@ -2546,6 +2684,7 @@ class QueryApi:
 
 
 
+
     @validate_call
     def test_query_style_form_explode_true_object(
         self,
@@ -2568,7 +2707,6 @@ class QueryApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -2578,18 +2716,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_form_explode_true_object_serialize(
@@ -2604,7 +2748,6 @@ class QueryApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -2614,7 +2757,7 @@ class QueryApi:
 
 
     @validate_call
-    def test_query_style_form_explode_true_object_without_preload_content(
+    def test_query_style_form_explode_true_object_with_http_info(
         self,
         query_object: Optional[Pet] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2634,8 +2777,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -2645,18 +2787,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_form_explode_true_object_serialize(
@@ -2671,12 +2819,16 @@ class QueryApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_query_style_form_explode_true_object_with_async(
+    def test_query_style_form_explode_true_object_without_preload_content(
         self,
         query_object: Optional[Pet] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2696,8 +2848,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -2707,18 +2858,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_form_explode_true_object_serialize(
@@ -2733,18 +2890,12 @@ class QueryApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_query_style_form_explode_true_object_with_http_info_async(
+    def test_query_style_form_explode_true_object_with_async(
         self,
         query_object: Optional[Pet] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2765,7 +2916,6 @@ class QueryApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -2775,18 +2925,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_form_explode_true_object_serialize(
@@ -2801,20 +2957,18 @@ class QueryApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_query_style_form_explode_true_object_with_http_info(
+    def test_query_style_form_explode_true_object_with_http_info_async(
         self,
         query_object: Optional[Pet] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2834,8 +2988,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -2845,18 +2998,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_form_explode_true_object_serialize(
@@ -2871,13 +3030,14 @@ class QueryApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_query_style_form_explode_true_object_serialize(
@@ -2915,6 +3075,7 @@ class QueryApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
@@ -2940,6 +3101,7 @@ class QueryApi:
 
 
 
+
     @validate_call
     def test_query_style_form_explode_true_object_all_of(
         self,
@@ -2962,7 +3124,6 @@ class QueryApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -2972,18 +3133,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_form_explode_true_object_all_of_serialize(
@@ -2998,7 +3165,6 @@ class QueryApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -3008,7 +3174,7 @@ class QueryApi:
 
 
     @validate_call
-    def test_query_style_form_explode_true_object_all_of_without_preload_content(
+    def test_query_style_form_explode_true_object_all_of_with_http_info(
         self,
         query_object: Optional[Any] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -3028,8 +3194,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -3039,18 +3204,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_form_explode_true_object_all_of_serialize(
@@ -3065,12 +3236,16 @@ class QueryApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_query_style_form_explode_true_object_all_of_with_async(
+    def test_query_style_form_explode_true_object_all_of_without_preload_content(
         self,
         query_object: Optional[Any] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -3090,8 +3265,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -3101,18 +3275,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_form_explode_true_object_all_of_serialize(
@@ -3127,18 +3307,12 @@ class QueryApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_query_style_form_explode_true_object_all_of_with_http_info_async(
+    def test_query_style_form_explode_true_object_all_of_with_async(
         self,
         query_object: Optional[Any] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -3159,7 +3333,6 @@ class QueryApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -3169,18 +3342,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_form_explode_true_object_all_of_serialize(
@@ -3195,20 +3374,18 @@ class QueryApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_query_style_form_explode_true_object_all_of_with_http_info(
+    def test_query_style_form_explode_true_object_all_of_with_http_info_async(
         self,
         query_object: Optional[Any] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -3228,8 +3405,7 @@ class QueryApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Test query parameter(s)
         Test query parameter(s)
                 This method makes a synchronous HTTP request by default.
@@ -3239,18 +3415,24 @@ class QueryApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._test_query_style_form_explode_true_object_all_of_serialize(
@@ -3265,13 +3447,14 @@ class QueryApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_query_style_form_explode_true_object_all_of_serialize(
@@ -3309,6 +3492,7 @@ class QueryApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['text/plain'])  # noqa: E501
diff --git a/samples/client/echo_api/python/openapi_client/api_response.py b/samples/client/echo_api/python/openapi_client/api_response.py
index a8d7d49812d..2ac1ada6e9b 100644
--- a/samples/client/echo_api/python/openapi_client/api_response.py
+++ b/samples/client/echo_api/python/openapi_client/api_response.py
@@ -15,3 +15,7 @@ class ApiResponse(BaseModel, Generic[T]):
     headers: Optional[Dict[StrictStr, StrictStr]] = Field(None, description="HTTP headers")
     data: T = Field(description="Deserialized data given the data type")
     raw_data: StrictBytes = Field(description="Raw data (HTTP response body)")
+
+    model_config = {
+        "arbitrary_types_allowed": True
+    }
diff --git a/samples/client/echo_api/python/openapi_client/models/bird.py b/samples/client/echo_api/python/openapi_client/models/bird.py
index 54c0ee31a70..35231742caa 100644
--- a/samples/client/echo_api/python/openapi_client/models/bird.py
+++ b/samples/client/echo_api/python/openapi_client/models/bird.py
@@ -19,9 +19,8 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -74,7 +73,7 @@ class Bird(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Bird from a dict"""
         if obj is None:
             return None
diff --git a/samples/client/echo_api/python/openapi_client/models/category.py b/samples/client/echo_api/python/openapi_client/models/category.py
index 9b17e13e931..40a6a1ab065 100644
--- a/samples/client/echo_api/python/openapi_client/models/category.py
+++ b/samples/client/echo_api/python/openapi_client/models/category.py
@@ -19,9 +19,8 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -74,7 +73,7 @@ class Category(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Category from a dict"""
         if obj is None:
             return None
diff --git a/samples/client/echo_api/python/openapi_client/models/data_query.py b/samples/client/echo_api/python/openapi_client/models/data_query.py
index e13342733d3..2251b7f38af 100644
--- a/samples/client/echo_api/python/openapi_client/models/data_query.py
+++ b/samples/client/echo_api/python/openapi_client/models/data_query.py
@@ -19,11 +19,10 @@ import re  # noqa: F401
 import json
 
 from datetime import datetime
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import StrictStr
 from pydantic import Field
 from openapi_client.models.query import Query
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -77,7 +76,7 @@ class DataQuery(Query):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of DataQuery from a dict"""
         if obj is None:
             return None
diff --git a/samples/client/echo_api/python/openapi_client/models/default_value.py b/samples/client/echo_api/python/openapi_client/models/default_value.py
index 7c07bcfa89a..b0505c65711 100644
--- a/samples/client/echo_api/python/openapi_client/models/default_value.py
+++ b/samples/client/echo_api/python/openapi_client/models/default_value.py
@@ -19,10 +19,9 @@ import re  # noqa: F401
 import json
 
 
-from typing import List, Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt, StrictStr, field_validator
 from openapi_client.models.string_enum_ref import StringEnumRef
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -107,7 +106,7 @@ class DefaultValue(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of DefaultValue from a dict"""
         if obj is None:
             return None
diff --git a/samples/client/echo_api/python/openapi_client/models/number_properties_only.py b/samples/client/echo_api/python/openapi_client/models/number_properties_only.py
index cd532e0609f..8cb240f6d35 100644
--- a/samples/client/echo_api/python/openapi_client/models/number_properties_only.py
+++ b/samples/client/echo_api/python/openapi_client/models/number_properties_only.py
@@ -19,11 +19,10 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional, Union
+from typing import Any, ClassVar, Dict, List, Optional, Union
 from pydantic import BaseModel, StrictFloat, StrictInt
 from pydantic import Field
 from typing_extensions import Annotated
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -77,7 +76,7 @@ class NumberPropertiesOnly(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of NumberPropertiesOnly from a dict"""
         if obj is None:
             return None
diff --git a/samples/client/echo_api/python/openapi_client/models/pet.py b/samples/client/echo_api/python/openapi_client/models/pet.py
index 61b642b5ad4..8bdfb9ff706 100644
--- a/samples/client/echo_api/python/openapi_client/models/pet.py
+++ b/samples/client/echo_api/python/openapi_client/models/pet.py
@@ -19,12 +19,11 @@ import re  # noqa: F401
 import json
 
 
-from typing import List, Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt, StrictStr, field_validator
 from pydantic import Field
 from openapi_client.models.category import Category
 from openapi_client.models.tag import Tag
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -101,7 +100,7 @@ class Pet(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Pet from a dict"""
         if obj is None:
             return None
diff --git a/samples/client/echo_api/python/openapi_client/models/query.py b/samples/client/echo_api/python/openapi_client/models/query.py
index e6277c3fa3d..21ba854c8a0 100644
--- a/samples/client/echo_api/python/openapi_client/models/query.py
+++ b/samples/client/echo_api/python/openapi_client/models/query.py
@@ -19,10 +19,9 @@ import re  # noqa: F401
 import json
 
 
-from typing import List, Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt, StrictStr, field_validator
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -86,7 +85,7 @@ class Query(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Query from a dict"""
 
 
diff --git a/samples/client/echo_api/python/openapi_client/models/tag.py b/samples/client/echo_api/python/openapi_client/models/tag.py
index 9a0eda31e73..a80425d4bc6 100644
--- a/samples/client/echo_api/python/openapi_client/models/tag.py
+++ b/samples/client/echo_api/python/openapi_client/models/tag.py
@@ -19,9 +19,8 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -74,7 +73,7 @@ class Tag(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Tag from a dict"""
         if obj is None:
             return None
diff --git a/samples/client/echo_api/python/openapi_client/models/test_query_style_deep_object_explode_true_object_all_of_query_object_parameter.py b/samples/client/echo_api/python/openapi_client/models/test_query_style_deep_object_explode_true_object_all_of_query_object_parameter.py
index 24b4279ea4d..37b004ec8ac 100644
--- a/samples/client/echo_api/python/openapi_client/models/test_query_style_deep_object_explode_true_object_all_of_query_object_parameter.py
+++ b/samples/client/echo_api/python/openapi_client/models/test_query_style_deep_object_explode_true_object_all_of_query_object_parameter.py
@@ -19,9 +19,8 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -76,7 +75,7 @@ class TestQueryStyleDeepObjectExplodeTrueObjectAllOfQueryObjectParameter(BaseMod
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of TestQueryStyleDeepObjectExplodeTrueObjectAllOfQueryObjectParameter from a dict"""
         if obj is None:
             return None
diff --git a/samples/client/echo_api/python/openapi_client/models/test_query_style_form_explode_true_array_string_query_object_parameter.py b/samples/client/echo_api/python/openapi_client/models/test_query_style_form_explode_true_array_string_query_object_parameter.py
index d53ca53f8c0..e54c28fbaad 100644
--- a/samples/client/echo_api/python/openapi_client/models/test_query_style_form_explode_true_array_string_query_object_parameter.py
+++ b/samples/client/echo_api/python/openapi_client/models/test_query_style_form_explode_true_array_string_query_object_parameter.py
@@ -19,9 +19,8 @@ import re  # noqa: F401
 import json
 
 
-from typing import List, Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -73,7 +72,7 @@ class TestQueryStyleFormExplodeTrueArrayStringQueryObjectParameter(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of TestQueryStyleFormExplodeTrueArrayStringQueryObjectParameter from a dict"""
         if obj is None:
             return None
diff --git a/samples/client/echo_api/python/openapi_client/rest.py b/samples/client/echo_api/python/openapi_client/rest.py
index 4260bfb43a8..b9933b7a3b7 100644
--- a/samples/client/echo_api/python/openapi_client/rest.py
+++ b/samples/client/echo_api/python/openapi_client/rest.py
@@ -15,14 +15,13 @@
 
 import io
 import json
-import logging
 import re
 import ssl
 
 from urllib.parse import urlencode, quote_plus
 import urllib3
 
-from openapi_client.exceptions import ApiException
+from openapi_client.exceptions import ApiException, ApiValueError
 
 RESTResponseType = urllib3.HTTPResponse
 
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/api/another_fake_api.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/api/another_fake_api.py
index ef3d976c8a0..190d30469f5 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/api/another_fake_api.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/api/another_fake_api.py
@@ -12,12 +12,16 @@
 """  # noqa: E501
 
 
-import re  # noqa: F401
 import io
 import warnings
 
-from pydantic import validate_call, ValidationError, Field
-from typing import Dict, List, Optional, Tuple, Union, Any, Annotated
+from pydantic import validate_call, Field
+from typing import Dict, List, Optional, Tuple, Union, Any
+
+try:
+    from typing import Annotated
+except ImportError:
+    from typing_extensions import Annotated
 
 from pydantic import Field
 from typing_extensions import Annotated
@@ -25,10 +29,6 @@ from petstore_api.models.client import Client
 
 from petstore_api.api_client import ApiClient
 from petstore_api.api_response import ApiResponse
-from petstore_api.exceptions import (  # noqa: F401
-    ApiTypeError,
-    ApiValueError
-)
 from petstore_api.rest import RESTResponseType
 
 
@@ -45,6 +45,7 @@ class AnotherFakeApi:
             api_client = ApiClient.get_default()
         self.api_client = api_client
 
+
     @validate_call
     async def call_123_test_special_tags(
         self,
@@ -67,7 +68,6 @@ class AnotherFakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> Client:
-
         """To test special tags
         To test special tags and operation ID starting with number
         :param client: client model (required)
@@ -76,18 +76,24 @@ class AnotherFakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Client]
         """
 
         param = self._call_123_test_special_tags_serialize(
@@ -102,7 +108,6 @@ class AnotherFakeApi:
             '200': "Client"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -112,7 +117,7 @@ class AnotherFakeApi:
 
 
     @validate_call
-    async def call_123_test_special_tags_without_preload_content(
+    async def call_123_test_special_tags_with_http_info(
         self,
         client: Annotated[Client, Field(description="client model")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -132,8 +137,7 @@ class AnotherFakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[Client]:
         """To test special tags
         To test special tags and operation ID starting with number
         :param client: client model (required)
@@ -142,18 +146,24 @@ class AnotherFakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Client]
         """
 
         param = self._call_123_test_special_tags_serialize(
@@ -168,14 +178,16 @@ class AnotherFakeApi:
             '200': "Client"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def call_123_test_special_tags_with_http_info(
+    async def call_123_test_special_tags_without_preload_content(
         self,
         client: Annotated[Client, Field(description="client model")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -195,8 +207,7 @@ class AnotherFakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> Client:
-
+    ) -> RESTResponseType:
         """To test special tags
         To test special tags and operation ID starting with number
         :param client: client model (required)
@@ -205,18 +216,24 @@ class AnotherFakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Client]
         """
 
         param = self._call_123_test_special_tags_serialize(
@@ -231,13 +248,10 @@ class AnotherFakeApi:
             '200': "Client"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _call_123_test_special_tags_serialize(
@@ -273,6 +287,7 @@ class AnotherFakeApi:
         if client is not None:
             _body_params = client
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/json'])  # noqa: E501
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/api/default_api.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/api/default_api.py
index f9e8a7182d9..f2cfb47da87 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/api/default_api.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/api/default_api.py
@@ -12,21 +12,21 @@
 """  # noqa: E501
 
 
-import re  # noqa: F401
 import io
 import warnings
 
-from pydantic import validate_call, ValidationError, Field
-from typing import Dict, List, Optional, Tuple, Union, Any, Annotated
+from pydantic import validate_call, Field
+from typing import Dict, List, Optional, Tuple, Union, Any
+
+try:
+    from typing import Annotated
+except ImportError:
+    from typing_extensions import Annotated
 
 from petstore_api.models.foo_get_default_response import FooGetDefaultResponse
 
 from petstore_api.api_client import ApiClient
 from petstore_api.api_response import ApiResponse
-from petstore_api.exceptions import (  # noqa: F401
-    ApiTypeError,
-    ApiValueError
-)
 from petstore_api.rest import RESTResponseType
 
 
@@ -43,6 +43,7 @@ class DefaultApi:
             api_client = ApiClient.get_default()
         self.api_client = api_client
 
+
     @validate_call
     async def foo_get(
         self,
@@ -64,24 +65,29 @@ class DefaultApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> FooGetDefaultResponse:
-
         """foo_get
         :param _request_timeout: timeout setting for this request. If one
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[FooGetDefaultResponse]
         """
 
         param = self._foo_get_serialize(
@@ -95,7 +101,6 @@ class DefaultApi:
             
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -105,7 +110,7 @@ class DefaultApi:
 
 
     @validate_call
-    async def foo_get_without_preload_content(
+    async def foo_get_with_http_info(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -124,25 +129,30 @@ class DefaultApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[FooGetDefaultResponse]:
         """foo_get
         :param _request_timeout: timeout setting for this request. If one
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[FooGetDefaultResponse]
         """
 
         param = self._foo_get_serialize(
@@ -156,14 +166,16 @@ class DefaultApi:
             
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def foo_get_with_http_info(
+    async def foo_get_without_preload_content(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -182,25 +194,30 @@ class DefaultApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> FooGetDefaultResponse:
-
+    ) -> RESTResponseType:
         """foo_get
         :param _request_timeout: timeout setting for this request. If one
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[FooGetDefaultResponse]
         """
 
         param = self._foo_get_serialize(
@@ -214,13 +231,10 @@ class DefaultApi:
             
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _foo_get_serialize(
@@ -253,6 +267,7 @@ class DefaultApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/json'])  # noqa: E501
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/api/fake_api.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/api/fake_api.py
index 198fed67e24..654376c94c5 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/api/fake_api.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/api/fake_api.py
@@ -12,12 +12,16 @@
 """  # noqa: E501
 
 
-import re  # noqa: F401
 import io
 import warnings
 
-from pydantic import validate_call, ValidationError, Field
-from typing import Dict, List, Optional, Tuple, Union, Any, Annotated
+from pydantic import validate_call, Field
+from typing import Dict, List, Optional, Tuple, Union, Any
+
+try:
+    from typing import Annotated
+except ImportError:
+    from typing_extensions import Annotated
 
 from pydantic import Field
 from typing_extensions import Annotated
@@ -40,10 +44,6 @@ from petstore_api.models.user import User
 
 from petstore_api.api_client import ApiClient
 from petstore_api.api_response import ApiResponse
-from petstore_api.exceptions import (  # noqa: F401
-    ApiTypeError,
-    ApiValueError
-)
 from petstore_api.rest import RESTResponseType
 
 
@@ -60,6 +60,7 @@ class FakeApi:
             api_client = ApiClient.get_default()
         self.api_client = api_client
 
+
     @validate_call
     async def fake_any_type_request_body(
         self,
@@ -82,7 +83,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """test any type request body
         :param body:
         :type body: object
@@ -90,18 +90,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._fake_any_type_request_body_serialize(
@@ -115,7 +121,6 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -125,7 +130,7 @@ class FakeApi:
 
 
     @validate_call
-    async def fake_any_type_request_body_without_preload_content(
+    async def fake_any_type_request_body_with_http_info(
         self,
         body: Optional[Dict[str, Any]] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -145,8 +150,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """test any type request body
         :param body:
         :type body: object
@@ -154,18 +158,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._fake_any_type_request_body_serialize(
@@ -179,14 +189,16 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def fake_any_type_request_body_with_http_info(
+    async def fake_any_type_request_body_without_preload_content(
         self,
         body: Optional[Dict[str, Any]] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -206,8 +218,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> RESTResponseType:
         """test any type request body
         :param body:
         :type body: object
@@ -215,18 +226,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._fake_any_type_request_body_serialize(
@@ -240,13 +257,10 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _fake_any_type_request_body_serialize(
@@ -283,6 +297,7 @@ class FakeApi:
             _body_params = body
 
 
+
         # set the HTTP header `Content-Type`
         if _content_type:
             _header_params['Content-Type'] = _content_type
@@ -311,6 +326,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     async def fake_enum_ref_query_parameter(
         self,
@@ -333,7 +349,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """test enum reference query parameter
         :param enum_ref: enum reference
         :type enum_ref: EnumClass
@@ -341,18 +356,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._fake_enum_ref_query_parameter_serialize(
@@ -366,7 +387,6 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -376,7 +396,7 @@ class FakeApi:
 
 
     @validate_call
-    async def fake_enum_ref_query_parameter_without_preload_content(
+    async def fake_enum_ref_query_parameter_with_http_info(
         self,
         enum_ref: Annotated[Optional[EnumClass], Field(description="enum reference")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -396,8 +416,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """test enum reference query parameter
         :param enum_ref: enum reference
         :type enum_ref: EnumClass
@@ -405,18 +424,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._fake_enum_ref_query_parameter_serialize(
@@ -430,14 +455,16 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def fake_enum_ref_query_parameter_with_http_info(
+    async def fake_enum_ref_query_parameter_without_preload_content(
         self,
         enum_ref: Annotated[Optional[EnumClass], Field(description="enum reference")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -457,8 +484,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> RESTResponseType:
         """test enum reference query parameter
         :param enum_ref: enum reference
         :type enum_ref: EnumClass
@@ -466,18 +492,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._fake_enum_ref_query_parameter_serialize(
@@ -491,13 +523,10 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _fake_enum_ref_query_parameter_serialize(
@@ -537,6 +566,7 @@ class FakeApi:
 
 
 
+
         # authentication setting
         _auth_settings: List[str] = []  # noqa: E501
 
@@ -557,6 +587,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     async def fake_health_get(
         self,
@@ -578,24 +609,29 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> HealthCheckResult:
-
         """Health check endpoint
         :param _request_timeout: timeout setting for this request. If one
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[HealthCheckResult]
         """
 
         param = self._fake_health_get_serialize(
@@ -609,7 +645,6 @@ class FakeApi:
             '200': "HealthCheckResult"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -619,7 +654,7 @@ class FakeApi:
 
 
     @validate_call
-    async def fake_health_get_without_preload_content(
+    async def fake_health_get_with_http_info(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -638,25 +673,30 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[HealthCheckResult]:
         """Health check endpoint
         :param _request_timeout: timeout setting for this request. If one
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[HealthCheckResult]
         """
 
         param = self._fake_health_get_serialize(
@@ -670,14 +710,16 @@ class FakeApi:
             '200': "HealthCheckResult"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def fake_health_get_with_http_info(
+    async def fake_health_get_without_preload_content(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -696,25 +738,30 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> HealthCheckResult:
-
+    ) -> RESTResponseType:
         """Health check endpoint
         :param _request_timeout: timeout setting for this request. If one
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[HealthCheckResult]
         """
 
         param = self._fake_health_get_serialize(
@@ -728,13 +775,10 @@ class FakeApi:
             '200': "HealthCheckResult"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _fake_health_get_serialize(
@@ -767,6 +811,7 @@ class FakeApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/json'])  # noqa: E501
@@ -792,6 +837,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     async def fake_http_signature_test(
         self,
@@ -816,7 +862,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """test http signature authentication
         :param pet: Pet object that needs to be added to the store (required)
         :type pet: Pet
@@ -828,18 +873,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._fake_http_signature_test_serialize(
@@ -855,7 +906,6 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -865,7 +915,7 @@ class FakeApi:
 
 
     @validate_call
-    async def fake_http_signature_test_without_preload_content(
+    async def fake_http_signature_test_with_http_info(
         self,
         pet: Annotated[Pet, Field(description="Pet object that needs to be added to the store")],
         query_1: Annotated[Optional[StrictStr], Field(description="query parameter")] = None,
@@ -887,8 +937,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """test http signature authentication
         :param pet: Pet object that needs to be added to the store (required)
         :type pet: Pet
@@ -900,18 +949,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._fake_http_signature_test_serialize(
@@ -927,14 +982,16 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def fake_http_signature_test_with_http_info(
+    async def fake_http_signature_test_without_preload_content(
         self,
         pet: Annotated[Pet, Field(description="Pet object that needs to be added to the store")],
         query_1: Annotated[Optional[StrictStr], Field(description="query parameter")] = None,
@@ -956,8 +1013,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> RESTResponseType:
         """test http signature authentication
         :param pet: Pet object that needs to be added to the store (required)
         :type pet: Pet
@@ -969,18 +1025,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._fake_http_signature_test_serialize(
@@ -996,13 +1058,10 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _fake_http_signature_test_serialize(
@@ -1047,6 +1106,7 @@ class FakeApi:
             _body_params = pet
 
 
+
         # set the HTTP header `Content-Type`
         if _content_type:
             _header_params['Content-Type'] = _content_type
@@ -1075,6 +1135,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     async def fake_outer_boolean_serialize(
         self,
@@ -1097,7 +1158,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> bool:
-
         """fake_outer_boolean_serialize
         Test serialization of outer boolean types
         :param body: Input boolean as post body
@@ -1106,18 +1166,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[bool]
         """
 
         param = self._fake_outer_boolean_serialize_serialize(
@@ -1132,7 +1198,6 @@ class FakeApi:
             '200': "bool"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -1142,7 +1207,7 @@ class FakeApi:
 
 
     @validate_call
-    async def fake_outer_boolean_serialize_without_preload_content(
+    async def fake_outer_boolean_serialize_with_http_info(
         self,
         body: Annotated[Optional[StrictBool], Field(description="Input boolean as post body")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1162,8 +1227,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[bool]:
         """fake_outer_boolean_serialize
         Test serialization of outer boolean types
         :param body: Input boolean as post body
@@ -1172,18 +1236,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[bool]
         """
 
         param = self._fake_outer_boolean_serialize_serialize(
@@ -1198,14 +1268,16 @@ class FakeApi:
             '200': "bool"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def fake_outer_boolean_serialize_with_http_info(
+    async def fake_outer_boolean_serialize_without_preload_content(
         self,
         body: Annotated[Optional[StrictBool], Field(description="Input boolean as post body")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1225,8 +1297,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> bool:
-
+    ) -> RESTResponseType:
         """fake_outer_boolean_serialize
         Test serialization of outer boolean types
         :param body: Input boolean as post body
@@ -1235,18 +1306,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[bool]
         """
 
         param = self._fake_outer_boolean_serialize_serialize(
@@ -1261,13 +1338,10 @@ class FakeApi:
             '200': "bool"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _fake_outer_boolean_serialize_serialize(
@@ -1303,6 +1377,7 @@ class FakeApi:
         if body is not None:
             _body_params = body
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['*/*'])  # noqa: E501
@@ -1335,6 +1410,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     async def fake_outer_composite_serialize(
         self,
@@ -1357,7 +1433,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> OuterComposite:
-
         """fake_outer_composite_serialize
         Test serialization of object with outer number type
         :param outer_composite: Input composite as post body
@@ -1366,18 +1441,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[OuterComposite]
         """
 
         param = self._fake_outer_composite_serialize_serialize(
@@ -1392,7 +1473,6 @@ class FakeApi:
             '200': "OuterComposite"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -1402,7 +1482,7 @@ class FakeApi:
 
 
     @validate_call
-    async def fake_outer_composite_serialize_without_preload_content(
+    async def fake_outer_composite_serialize_with_http_info(
         self,
         outer_composite: Annotated[Optional[OuterComposite], Field(description="Input composite as post body")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1422,8 +1502,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[OuterComposite]:
         """fake_outer_composite_serialize
         Test serialization of object with outer number type
         :param outer_composite: Input composite as post body
@@ -1432,18 +1511,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[OuterComposite]
         """
 
         param = self._fake_outer_composite_serialize_serialize(
@@ -1458,14 +1543,16 @@ class FakeApi:
             '200': "OuterComposite"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def fake_outer_composite_serialize_with_http_info(
+    async def fake_outer_composite_serialize_without_preload_content(
         self,
         outer_composite: Annotated[Optional[OuterComposite], Field(description="Input composite as post body")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1485,8 +1572,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> OuterComposite:
-
+    ) -> RESTResponseType:
         """fake_outer_composite_serialize
         Test serialization of object with outer number type
         :param outer_composite: Input composite as post body
@@ -1495,18 +1581,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[OuterComposite]
         """
 
         param = self._fake_outer_composite_serialize_serialize(
@@ -1521,13 +1613,10 @@ class FakeApi:
             '200': "OuterComposite"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _fake_outer_composite_serialize_serialize(
@@ -1563,6 +1652,7 @@ class FakeApi:
         if outer_composite is not None:
             _body_params = outer_composite
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['*/*'])  # noqa: E501
@@ -1595,6 +1685,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     async def fake_outer_number_serialize(
         self,
@@ -1617,7 +1708,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> float:
-
         """fake_outer_number_serialize
         Test serialization of outer number types
         :param body: Input number as post body
@@ -1626,18 +1716,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[float]
         """
 
         param = self._fake_outer_number_serialize_serialize(
@@ -1652,7 +1748,6 @@ class FakeApi:
             '200': "float"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -1662,7 +1757,7 @@ class FakeApi:
 
 
     @validate_call
-    async def fake_outer_number_serialize_without_preload_content(
+    async def fake_outer_number_serialize_with_http_info(
         self,
         body: Annotated[Optional[float], Field(description="Input number as post body")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1682,8 +1777,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[float]:
         """fake_outer_number_serialize
         Test serialization of outer number types
         :param body: Input number as post body
@@ -1692,18 +1786,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[float]
         """
 
         param = self._fake_outer_number_serialize_serialize(
@@ -1718,14 +1818,16 @@ class FakeApi:
             '200': "float"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def fake_outer_number_serialize_with_http_info(
+    async def fake_outer_number_serialize_without_preload_content(
         self,
         body: Annotated[Optional[float], Field(description="Input number as post body")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1745,8 +1847,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> float:
-
+    ) -> RESTResponseType:
         """fake_outer_number_serialize
         Test serialization of outer number types
         :param body: Input number as post body
@@ -1755,18 +1856,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[float]
         """
 
         param = self._fake_outer_number_serialize_serialize(
@@ -1781,13 +1888,10 @@ class FakeApi:
             '200': "float"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _fake_outer_number_serialize_serialize(
@@ -1823,6 +1927,7 @@ class FakeApi:
         if body is not None:
             _body_params = body
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['*/*'])  # noqa: E501
@@ -1855,6 +1960,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     async def fake_outer_string_serialize(
         self,
@@ -1877,7 +1983,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """fake_outer_string_serialize
         Test serialization of outer string types
         :param body: Input string as post body
@@ -1886,18 +1991,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._fake_outer_string_serialize_serialize(
@@ -1912,7 +2023,6 @@ class FakeApi:
             '200': "str"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -1922,7 +2032,7 @@ class FakeApi:
 
 
     @validate_call
-    async def fake_outer_string_serialize_without_preload_content(
+    async def fake_outer_string_serialize_with_http_info(
         self,
         body: Annotated[Optional[StrictStr], Field(description="Input string as post body")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1942,8 +2052,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """fake_outer_string_serialize
         Test serialization of outer string types
         :param body: Input string as post body
@@ -1952,18 +2061,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._fake_outer_string_serialize_serialize(
@@ -1978,14 +2093,16 @@ class FakeApi:
             '200': "str"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def fake_outer_string_serialize_with_http_info(
+    async def fake_outer_string_serialize_without_preload_content(
         self,
         body: Annotated[Optional[StrictStr], Field(description="Input string as post body")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2005,8 +2122,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> RESTResponseType:
         """fake_outer_string_serialize
         Test serialization of outer string types
         :param body: Input string as post body
@@ -2015,18 +2131,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._fake_outer_string_serialize_serialize(
@@ -2041,13 +2163,10 @@ class FakeApi:
             '200': "str"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _fake_outer_string_serialize_serialize(
@@ -2083,6 +2202,7 @@ class FakeApi:
         if body is not None:
             _body_params = body
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['*/*'])  # noqa: E501
@@ -2115,6 +2235,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     async def fake_property_enum_integer_serialize(
         self,
@@ -2137,7 +2258,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> OuterObjectWithEnumProperty:
-
         """fake_property_enum_integer_serialize
         Test serialization of enum (int) properties with examples
         :param outer_object_with_enum_property: Input enum (int) as post body (required)
@@ -2146,18 +2266,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[OuterObjectWithEnumProperty]
         """
 
         param = self._fake_property_enum_integer_serialize_serialize(
@@ -2172,7 +2298,6 @@ class FakeApi:
             '200': "OuterObjectWithEnumProperty"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -2182,7 +2307,7 @@ class FakeApi:
 
 
     @validate_call
-    async def fake_property_enum_integer_serialize_without_preload_content(
+    async def fake_property_enum_integer_serialize_with_http_info(
         self,
         outer_object_with_enum_property: Annotated[OuterObjectWithEnumProperty, Field(description="Input enum (int) as post body")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2202,8 +2327,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[OuterObjectWithEnumProperty]:
         """fake_property_enum_integer_serialize
         Test serialization of enum (int) properties with examples
         :param outer_object_with_enum_property: Input enum (int) as post body (required)
@@ -2212,18 +2336,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[OuterObjectWithEnumProperty]
         """
 
         param = self._fake_property_enum_integer_serialize_serialize(
@@ -2238,14 +2368,16 @@ class FakeApi:
             '200': "OuterObjectWithEnumProperty"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def fake_property_enum_integer_serialize_with_http_info(
+    async def fake_property_enum_integer_serialize_without_preload_content(
         self,
         outer_object_with_enum_property: Annotated[OuterObjectWithEnumProperty, Field(description="Input enum (int) as post body")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2265,8 +2397,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> OuterObjectWithEnumProperty:
-
+    ) -> RESTResponseType:
         """fake_property_enum_integer_serialize
         Test serialization of enum (int) properties with examples
         :param outer_object_with_enum_property: Input enum (int) as post body (required)
@@ -2275,18 +2406,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[OuterObjectWithEnumProperty]
         """
 
         param = self._fake_property_enum_integer_serialize_serialize(
@@ -2301,13 +2438,10 @@ class FakeApi:
             '200': "OuterObjectWithEnumProperty"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _fake_property_enum_integer_serialize_serialize(
@@ -2343,6 +2477,7 @@ class FakeApi:
         if outer_object_with_enum_property is not None:
             _body_params = outer_object_with_enum_property
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['*/*'])  # noqa: E501
@@ -2375,6 +2510,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     async def fake_return_list_of_objects(
         self,
@@ -2396,24 +2532,29 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> List[List[Tag]]:
-
         """test returning list of objects
         :param _request_timeout: timeout setting for this request. If one
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[List[List[Tag]]]
         """
 
         param = self._fake_return_list_of_objects_serialize(
@@ -2427,7 +2568,6 @@ class FakeApi:
             '200': "List[List[Tag]]"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -2437,7 +2577,7 @@ class FakeApi:
 
 
     @validate_call
-    async def fake_return_list_of_objects_without_preload_content(
+    async def fake_return_list_of_objects_with_http_info(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -2456,25 +2596,30 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[List[List[Tag]]]:
         """test returning list of objects
         :param _request_timeout: timeout setting for this request. If one
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[List[List[Tag]]]
         """
 
         param = self._fake_return_list_of_objects_serialize(
@@ -2488,14 +2633,16 @@ class FakeApi:
             '200': "List[List[Tag]]"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def fake_return_list_of_objects_with_http_info(
+    async def fake_return_list_of_objects_without_preload_content(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -2514,25 +2661,30 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> List[List[Tag]]:
-
+    ) -> RESTResponseType:
         """test returning list of objects
         :param _request_timeout: timeout setting for this request. If one
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[List[List[Tag]]]
         """
 
         param = self._fake_return_list_of_objects_serialize(
@@ -2546,13 +2698,10 @@ class FakeApi:
             '200': "List[List[Tag]]"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _fake_return_list_of_objects_serialize(
@@ -2585,6 +2734,7 @@ class FakeApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/json'])  # noqa: E501
@@ -2610,6 +2760,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     async def fake_uuid_example(
         self,
@@ -2632,7 +2783,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """test uuid example
         :param uuid_example: uuid example (required)
         :type uuid_example: str
@@ -2640,18 +2790,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._fake_uuid_example_serialize(
@@ -2665,7 +2821,6 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -2675,7 +2830,7 @@ class FakeApi:
 
 
     @validate_call
-    async def fake_uuid_example_without_preload_content(
+    async def fake_uuid_example_with_http_info(
         self,
         uuid_example: Annotated[StrictStr, Field(description="uuid example")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2695,8 +2850,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """test uuid example
         :param uuid_example: uuid example (required)
         :type uuid_example: str
@@ -2704,18 +2858,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._fake_uuid_example_serialize(
@@ -2729,14 +2889,16 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def fake_uuid_example_with_http_info(
+    async def fake_uuid_example_without_preload_content(
         self,
         uuid_example: Annotated[StrictStr, Field(description="uuid example")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2756,8 +2918,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> RESTResponseType:
         """test uuid example
         :param uuid_example: uuid example (required)
         :type uuid_example: str
@@ -2765,18 +2926,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._fake_uuid_example_serialize(
@@ -2790,13 +2957,10 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _fake_uuid_example_serialize(
@@ -2836,6 +3000,7 @@ class FakeApi:
 
 
 
+
         # authentication setting
         _auth_settings: List[str] = []  # noqa: E501
 
@@ -2856,6 +3021,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     async def test_body_with_binary(
         self,
@@ -2878,7 +3044,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """test_body_with_binary
         For this test, the body has to be a binary file.
         :param body: image to upload (required)
@@ -2887,18 +3052,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_body_with_binary_serialize(
@@ -2912,7 +3083,6 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -2922,7 +3092,7 @@ class FakeApi:
 
 
     @validate_call
-    async def test_body_with_binary_without_preload_content(
+    async def test_body_with_binary_with_http_info(
         self,
         body: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="image to upload")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2942,8 +3112,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """test_body_with_binary
         For this test, the body has to be a binary file.
         :param body: image to upload (required)
@@ -2952,18 +3121,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_body_with_binary_serialize(
@@ -2977,14 +3152,16 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def test_body_with_binary_with_http_info(
+    async def test_body_with_binary_without_preload_content(
         self,
         body: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="image to upload")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -3004,8 +3181,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> RESTResponseType:
         """test_body_with_binary
         For this test, the body has to be a binary file.
         :param body: image to upload (required)
@@ -3014,18 +3190,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_body_with_binary_serialize(
@@ -3039,13 +3221,10 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _test_body_with_binary_serialize(
@@ -3080,9 +3259,12 @@ class FakeApi:
         # process the body parameter
         if body is not None:
             # convert to byte array if the input is a file name (str)
-            if isinstance(_body_params, str):
-                with io.open(_body_params, "rb", encoding="utf-8") as _fp:
+            if isinstance(body, str):
+                with io.open(body, "rb") as _fp:
                     _body_params = _fp.read()
+            else:
+                _body_params = body
+
 
 
         # set the HTTP header `Content-Type`
@@ -3113,6 +3295,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     async def test_body_with_file_schema(
         self,
@@ -3135,7 +3318,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """test_body_with_file_schema
         For this test, the body for this request must reference a schema named `File`.
         :param file_schema_test_class: (required)
@@ -3144,18 +3326,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_body_with_file_schema_serialize(
@@ -3169,7 +3357,6 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -3179,7 +3366,7 @@ class FakeApi:
 
 
     @validate_call
-    async def test_body_with_file_schema_without_preload_content(
+    async def test_body_with_file_schema_with_http_info(
         self,
         file_schema_test_class: FileSchemaTestClass,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -3199,8 +3386,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """test_body_with_file_schema
         For this test, the body for this request must reference a schema named `File`.
         :param file_schema_test_class: (required)
@@ -3209,18 +3395,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_body_with_file_schema_serialize(
@@ -3234,14 +3426,16 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def test_body_with_file_schema_with_http_info(
+    async def test_body_with_file_schema_without_preload_content(
         self,
         file_schema_test_class: FileSchemaTestClass,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -3261,8 +3455,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> RESTResponseType:
         """test_body_with_file_schema
         For this test, the body for this request must reference a schema named `File`.
         :param file_schema_test_class: (required)
@@ -3271,18 +3464,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_body_with_file_schema_serialize(
@@ -3296,13 +3495,10 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _test_body_with_file_schema_serialize(
@@ -3339,6 +3535,7 @@ class FakeApi:
             _body_params = file_schema_test_class
 
 
+
         # set the HTTP header `Content-Type`
         if _content_type:
             _header_params['Content-Type'] = _content_type
@@ -3367,6 +3564,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     async def test_body_with_query_params(
         self,
@@ -3390,7 +3588,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """test_body_with_query_params
         :param query: (required)
         :type query: str
@@ -3400,18 +3597,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_body_with_query_params_serialize(
@@ -3426,7 +3629,6 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -3436,7 +3638,7 @@ class FakeApi:
 
 
     @validate_call
-    async def test_body_with_query_params_without_preload_content(
+    async def test_body_with_query_params_with_http_info(
         self,
         query: StrictStr,
         user: User,
@@ -3457,8 +3659,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """test_body_with_query_params
         :param query: (required)
         :type query: str
@@ -3468,18 +3669,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_body_with_query_params_serialize(
@@ -3494,14 +3701,16 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def test_body_with_query_params_with_http_info(
+    async def test_body_with_query_params_without_preload_content(
         self,
         query: StrictStr,
         user: User,
@@ -3522,8 +3731,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> RESTResponseType:
         """test_body_with_query_params
         :param query: (required)
         :type query: str
@@ -3533,18 +3741,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_body_with_query_params_serialize(
@@ -3559,13 +3773,10 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _test_body_with_query_params_serialize(
@@ -3607,6 +3818,7 @@ class FakeApi:
             _body_params = user
 
 
+
         # set the HTTP header `Content-Type`
         if _content_type:
             _header_params['Content-Type'] = _content_type
@@ -3635,6 +3847,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     async def test_client_model(
         self,
@@ -3657,7 +3870,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> Client:
-
         """To test \"client\" model
         To test \"client\" model
         :param client: client model (required)
@@ -3666,18 +3878,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Client]
         """
 
         param = self._test_client_model_serialize(
@@ -3692,7 +3910,6 @@ class FakeApi:
             '200': "Client"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -3702,7 +3919,7 @@ class FakeApi:
 
 
     @validate_call
-    async def test_client_model_without_preload_content(
+    async def test_client_model_with_http_info(
         self,
         client: Annotated[Client, Field(description="client model")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -3722,8 +3939,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[Client]:
         """To test \"client\" model
         To test \"client\" model
         :param client: client model (required)
@@ -3732,18 +3948,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Client]
         """
 
         param = self._test_client_model_serialize(
@@ -3758,14 +3980,16 @@ class FakeApi:
             '200': "Client"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def test_client_model_with_http_info(
+    async def test_client_model_without_preload_content(
         self,
         client: Annotated[Client, Field(description="client model")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -3785,8 +4009,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> Client:
-
+    ) -> RESTResponseType:
         """To test \"client\" model
         To test \"client\" model
         :param client: client model (required)
@@ -3795,18 +4018,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Client]
         """
 
         param = self._test_client_model_serialize(
@@ -3821,13 +4050,10 @@ class FakeApi:
             '200': "Client"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _test_client_model_serialize(
@@ -3863,6 +4089,7 @@ class FakeApi:
         if client is not None:
             _body_params = client
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/json'])  # noqa: E501
@@ -3895,6 +4122,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     async def test_date_time_query_parameter(
         self,
@@ -3918,7 +4146,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """test_date_time_query_parameter
         :param date_time_query: (required)
         :type date_time_query: datetime
@@ -3928,18 +4155,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_date_time_query_parameter_serialize(
@@ -3954,7 +4187,6 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -3964,7 +4196,7 @@ class FakeApi:
 
 
     @validate_call
-    async def test_date_time_query_parameter_without_preload_content(
+    async def test_date_time_query_parameter_with_http_info(
         self,
         date_time_query: datetime,
         str_query: StrictStr,
@@ -3985,8 +4217,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """test_date_time_query_parameter
         :param date_time_query: (required)
         :type date_time_query: datetime
@@ -3996,18 +4227,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_date_time_query_parameter_serialize(
@@ -4022,14 +4259,16 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def test_date_time_query_parameter_with_http_info(
+    async def test_date_time_query_parameter_without_preload_content(
         self,
         date_time_query: datetime,
         str_query: StrictStr,
@@ -4050,8 +4289,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> RESTResponseType:
         """test_date_time_query_parameter
         :param date_time_query: (required)
         :type date_time_query: datetime
@@ -4061,18 +4299,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_date_time_query_parameter_serialize(
@@ -4087,13 +4331,10 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _test_date_time_query_parameter_serialize(
@@ -4140,6 +4381,7 @@ class FakeApi:
 
 
 
+
         # authentication setting
         _auth_settings: List[str] = []  # noqa: E501
 
@@ -4160,6 +4402,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     async def test_endpoint_parameters(
         self,
@@ -4196,7 +4439,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
         Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
         :param number: None (required)
@@ -4233,18 +4475,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_endpoint_parameters_serialize(
@@ -4272,7 +4520,6 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -4282,7 +4529,7 @@ class FakeApi:
 
 
     @validate_call
-    async def test_endpoint_parameters_without_preload_content(
+    async def test_endpoint_parameters_with_http_info(
         self,
         number: Annotated[float, Field(le=543.2, ge=32.1, description="None")],
         double: Annotated[float, Field(le=123.4, ge=67.8, description="None")],
@@ -4316,8 +4563,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
         Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
         :param number: None (required)
@@ -4354,18 +4600,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_endpoint_parameters_serialize(
@@ -4393,14 +4645,16 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def test_endpoint_parameters_with_http_info(
+    async def test_endpoint_parameters_without_preload_content(
         self,
         number: Annotated[float, Field(le=543.2, ge=32.1, description="None")],
         double: Annotated[float, Field(le=123.4, ge=67.8, description="None")],
@@ -4434,8 +4688,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> RESTResponseType:
         """Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
         Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
         :param number: None (required)
@@ -4472,18 +4725,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_endpoint_parameters_serialize(
@@ -4511,13 +4770,10 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _test_endpoint_parameters_serialize(
@@ -4596,6 +4852,7 @@ class FakeApi:
         # process the body parameter
 
 
+
         # set the HTTP header `Content-Type`
         if _content_type:
             _header_params['Content-Type'] = _content_type
@@ -4624,6 +4881,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     async def test_group_parameters(
         self,
@@ -4651,7 +4909,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """Fake endpoint to test group parameters (optional)
         Fake endpoint to test group parameters (optional)
         :param required_string_group: Required String in group parameters (required)
@@ -4670,18 +4927,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_group_parameters_serialize(
@@ -4700,7 +4963,6 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -4710,7 +4972,7 @@ class FakeApi:
 
 
     @validate_call
-    async def test_group_parameters_without_preload_content(
+    async def test_group_parameters_with_http_info(
         self,
         required_string_group: Annotated[StrictInt, Field(description="Required String in group parameters")],
         required_boolean_group: Annotated[StrictBool, Field(description="Required Boolean in group parameters")],
@@ -4735,8 +4997,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """Fake endpoint to test group parameters (optional)
         Fake endpoint to test group parameters (optional)
         :param required_string_group: Required String in group parameters (required)
@@ -4755,18 +5016,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_group_parameters_serialize(
@@ -4785,14 +5052,16 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def test_group_parameters_with_http_info(
+    async def test_group_parameters_without_preload_content(
         self,
         required_string_group: Annotated[StrictInt, Field(description="Required String in group parameters")],
         required_boolean_group: Annotated[StrictBool, Field(description="Required Boolean in group parameters")],
@@ -4817,8 +5086,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> RESTResponseType:
         """Fake endpoint to test group parameters (optional)
         Fake endpoint to test group parameters (optional)
         :param required_string_group: Required String in group parameters (required)
@@ -4837,18 +5105,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_group_parameters_serialize(
@@ -4867,13 +5141,10 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _test_group_parameters_serialize(
@@ -4934,6 +5205,7 @@ class FakeApi:
 
 
 
+
         # authentication setting
         _auth_settings: List[str] = ['bearer_test']  # noqa: E501
 
@@ -4954,6 +5226,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     async def test_inline_additional_properties(
         self,
@@ -4976,7 +5249,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """test inline additionalProperties
         
         :param request_body: request body (required)
@@ -4985,18 +5257,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_inline_additional_properties_serialize(
@@ -5010,7 +5288,6 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -5020,7 +5297,7 @@ class FakeApi:
 
 
     @validate_call
-    async def test_inline_additional_properties_without_preload_content(
+    async def test_inline_additional_properties_with_http_info(
         self,
         request_body: Annotated[Dict[str, StrictStr], Field(description="request body")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -5040,8 +5317,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """test inline additionalProperties
         
         :param request_body: request body (required)
@@ -5050,18 +5326,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_inline_additional_properties_serialize(
@@ -5075,14 +5357,16 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def test_inline_additional_properties_with_http_info(
+    async def test_inline_additional_properties_without_preload_content(
         self,
         request_body: Annotated[Dict[str, StrictStr], Field(description="request body")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -5102,8 +5386,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> RESTResponseType:
         """test inline additionalProperties
         
         :param request_body: request body (required)
@@ -5112,18 +5395,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_inline_additional_properties_serialize(
@@ -5137,13 +5426,10 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _test_inline_additional_properties_serialize(
@@ -5180,6 +5466,7 @@ class FakeApi:
             _body_params = request_body
 
 
+
         # set the HTTP header `Content-Type`
         if _content_type:
             _header_params['Content-Type'] = _content_type
@@ -5208,6 +5495,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     async def test_inline_freeform_additional_properties(
         self,
@@ -5230,7 +5518,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """test inline free-form additionalProperties
         
         :param test_inline_freeform_additional_properties_request: request body (required)
@@ -5239,18 +5526,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_inline_freeform_additional_properties_serialize(
@@ -5264,7 +5557,6 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -5274,7 +5566,7 @@ class FakeApi:
 
 
     @validate_call
-    async def test_inline_freeform_additional_properties_without_preload_content(
+    async def test_inline_freeform_additional_properties_with_http_info(
         self,
         test_inline_freeform_additional_properties_request: Annotated[TestInlineFreeformAdditionalPropertiesRequest, Field(description="request body")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -5294,8 +5586,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """test inline free-form additionalProperties
         
         :param test_inline_freeform_additional_properties_request: request body (required)
@@ -5304,18 +5595,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_inline_freeform_additional_properties_serialize(
@@ -5329,14 +5626,16 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def test_inline_freeform_additional_properties_with_http_info(
+    async def test_inline_freeform_additional_properties_without_preload_content(
         self,
         test_inline_freeform_additional_properties_request: Annotated[TestInlineFreeformAdditionalPropertiesRequest, Field(description="request body")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -5356,8 +5655,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> RESTResponseType:
         """test inline free-form additionalProperties
         
         :param test_inline_freeform_additional_properties_request: request body (required)
@@ -5366,18 +5664,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_inline_freeform_additional_properties_serialize(
@@ -5391,13 +5695,10 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _test_inline_freeform_additional_properties_serialize(
@@ -5434,6 +5735,7 @@ class FakeApi:
             _body_params = test_inline_freeform_additional_properties_request
 
 
+
         # set the HTTP header `Content-Type`
         if _content_type:
             _header_params['Content-Type'] = _content_type
@@ -5462,6 +5764,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     async def test_json_form_data(
         self,
@@ -5485,7 +5788,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """test json serialization of form data
         
         :param param: field1 (required)
@@ -5496,18 +5798,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_json_form_data_serialize(
@@ -5522,7 +5830,6 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -5532,7 +5839,7 @@ class FakeApi:
 
 
     @validate_call
-    async def test_json_form_data_without_preload_content(
+    async def test_json_form_data_with_http_info(
         self,
         param: Annotated[StrictStr, Field(description="field1")],
         param2: Annotated[StrictStr, Field(description="field2")],
@@ -5553,8 +5860,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """test json serialization of form data
         
         :param param: field1 (required)
@@ -5565,18 +5871,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_json_form_data_serialize(
@@ -5591,14 +5903,16 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def test_json_form_data_with_http_info(
+    async def test_json_form_data_without_preload_content(
         self,
         param: Annotated[StrictStr, Field(description="field1")],
         param2: Annotated[StrictStr, Field(description="field2")],
@@ -5619,8 +5933,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> RESTResponseType:
         """test json serialization of form data
         
         :param param: field1 (required)
@@ -5631,18 +5944,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_json_form_data_serialize(
@@ -5657,13 +5976,10 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _test_json_form_data_serialize(
@@ -5703,6 +6019,7 @@ class FakeApi:
         # process the body parameter
 
 
+
         # set the HTTP header `Content-Type`
         if _content_type:
             _header_params['Content-Type'] = _content_type
@@ -5731,6 +6048,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     async def test_query_parameter_collection_format(
         self,
@@ -5759,7 +6077,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """test_query_parameter_collection_format
         To test the collection format in query parameters
         :param pipe: (required)
@@ -5780,18 +6097,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_query_parameter_collection_format_serialize(
@@ -5811,7 +6134,6 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -5821,7 +6143,7 @@ class FakeApi:
 
 
     @validate_call
-    async def test_query_parameter_collection_format_without_preload_content(
+    async def test_query_parameter_collection_format_with_http_info(
         self,
         pipe: List[StrictStr],
         ioutil: List[StrictStr],
@@ -5847,8 +6169,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """test_query_parameter_collection_format
         To test the collection format in query parameters
         :param pipe: (required)
@@ -5869,18 +6190,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_query_parameter_collection_format_serialize(
@@ -5900,14 +6227,16 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def test_query_parameter_collection_format_with_http_info(
+    async def test_query_parameter_collection_format_without_preload_content(
         self,
         pipe: List[StrictStr],
         ioutil: List[StrictStr],
@@ -5933,8 +6262,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> RESTResponseType:
         """test_query_parameter_collection_format
         To test the collection format in query parameters
         :param pipe: (required)
@@ -5955,18 +6283,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_query_parameter_collection_format_serialize(
@@ -5986,13 +6320,10 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _test_query_parameter_collection_format_serialize(
@@ -6067,6 +6398,7 @@ class FakeApi:
 
 
 
+
         # authentication setting
         _auth_settings: List[str] = []  # noqa: E501
 
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/api/fake_classname_tags123_api.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/api/fake_classname_tags123_api.py
index 37113443c64..fb7d19585d8 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/api/fake_classname_tags123_api.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/api/fake_classname_tags123_api.py
@@ -12,12 +12,16 @@
 """  # noqa: E501
 
 
-import re  # noqa: F401
 import io
 import warnings
 
-from pydantic import validate_call, ValidationError, Field
-from typing import Dict, List, Optional, Tuple, Union, Any, Annotated
+from pydantic import validate_call, Field
+from typing import Dict, List, Optional, Tuple, Union, Any
+
+try:
+    from typing import Annotated
+except ImportError:
+    from typing_extensions import Annotated
 
 from pydantic import Field
 from typing_extensions import Annotated
@@ -25,10 +29,6 @@ from petstore_api.models.client import Client
 
 from petstore_api.api_client import ApiClient
 from petstore_api.api_response import ApiResponse
-from petstore_api.exceptions import (  # noqa: F401
-    ApiTypeError,
-    ApiValueError
-)
 from petstore_api.rest import RESTResponseType
 
 
@@ -45,6 +45,7 @@ class FakeClassnameTags123Api:
             api_client = ApiClient.get_default()
         self.api_client = api_client
 
+
     @validate_call
     async def test_classname(
         self,
@@ -67,7 +68,6 @@ class FakeClassnameTags123Api:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> Client:
-
         """To test class name in snake case
         To test class name in snake case
         :param client: client model (required)
@@ -76,18 +76,24 @@ class FakeClassnameTags123Api:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Client]
         """
 
         param = self._test_classname_serialize(
@@ -102,7 +108,6 @@ class FakeClassnameTags123Api:
             '200': "Client"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -112,7 +117,7 @@ class FakeClassnameTags123Api:
 
 
     @validate_call
-    async def test_classname_without_preload_content(
+    async def test_classname_with_http_info(
         self,
         client: Annotated[Client, Field(description="client model")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -132,8 +137,7 @@ class FakeClassnameTags123Api:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[Client]:
         """To test class name in snake case
         To test class name in snake case
         :param client: client model (required)
@@ -142,18 +146,24 @@ class FakeClassnameTags123Api:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Client]
         """
 
         param = self._test_classname_serialize(
@@ -168,14 +178,16 @@ class FakeClassnameTags123Api:
             '200': "Client"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def test_classname_with_http_info(
+    async def test_classname_without_preload_content(
         self,
         client: Annotated[Client, Field(description="client model")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -195,8 +207,7 @@ class FakeClassnameTags123Api:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> Client:
-
+    ) -> RESTResponseType:
         """To test class name in snake case
         To test class name in snake case
         :param client: client model (required)
@@ -205,18 +216,24 @@ class FakeClassnameTags123Api:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Client]
         """
 
         param = self._test_classname_serialize(
@@ -231,13 +248,10 @@ class FakeClassnameTags123Api:
             '200': "Client"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _test_classname_serialize(
@@ -273,6 +287,7 @@ class FakeClassnameTags123Api:
         if client is not None:
             _body_params = client
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/json'])  # noqa: E501
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/api/pet_api.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/api/pet_api.py
index 1c263e5ecb3..4b7e5789431 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/api/pet_api.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/api/pet_api.py
@@ -12,12 +12,16 @@
 """  # noqa: E501
 
 
-import re  # noqa: F401
 import io
 import warnings
 
-from pydantic import validate_call, ValidationError, Field
-from typing import Dict, List, Optional, Tuple, Union, Any, Annotated
+from pydantic import validate_call, Field
+from typing import Dict, List, Optional, Tuple, Union, Any
+
+try:
+    from typing import Annotated
+except ImportError:
+    from typing_extensions import Annotated
 
 from pydantic import Field
 from typing_extensions import Annotated
@@ -30,10 +34,6 @@ from petstore_api.models.pet import Pet
 
 from petstore_api.api_client import ApiClient
 from petstore_api.api_response import ApiResponse
-from petstore_api.exceptions import (  # noqa: F401
-    ApiTypeError,
-    ApiValueError
-)
 from petstore_api.rest import RESTResponseType
 
 
@@ -50,6 +50,7 @@ class PetApi:
             api_client = ApiClient.get_default()
         self.api_client = api_client
 
+
     @validate_call
     async def add_pet(
         self,
@@ -72,7 +73,6 @@ class PetApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """Add a new pet to the store
         
         :param pet: Pet object that needs to be added to the store (required)
@@ -81,18 +81,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._add_pet_serialize(
@@ -106,7 +112,6 @@ class PetApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -116,7 +121,7 @@ class PetApi:
 
 
     @validate_call
-    async def add_pet_without_preload_content(
+    async def add_pet_with_http_info(
         self,
         pet: Annotated[Pet, Field(description="Pet object that needs to be added to the store")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -136,8 +141,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """Add a new pet to the store
         
         :param pet: Pet object that needs to be added to the store (required)
@@ -146,18 +150,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._add_pet_serialize(
@@ -171,14 +181,16 @@ class PetApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def add_pet_with_http_info(
+    async def add_pet_without_preload_content(
         self,
         pet: Annotated[Pet, Field(description="Pet object that needs to be added to the store")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -198,8 +210,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> RESTResponseType:
         """Add a new pet to the store
         
         :param pet: Pet object that needs to be added to the store (required)
@@ -208,18 +219,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._add_pet_serialize(
@@ -233,13 +250,10 @@ class PetApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _add_pet_serialize(
@@ -276,6 +290,7 @@ class PetApi:
             _body_params = pet
 
 
+
         # set the HTTP header `Content-Type`
         if _content_type:
             _header_params['Content-Type'] = _content_type
@@ -304,6 +319,7 @@ class PetApi:
 
 
 
+
     @validate_call
     async def delete_pet(
         self,
@@ -327,7 +343,6 @@ class PetApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """Deletes a pet
         
         :param pet_id: Pet id to delete (required)
@@ -338,18 +353,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._delete_pet_serialize(
@@ -364,7 +385,6 @@ class PetApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -374,7 +394,7 @@ class PetApi:
 
 
     @validate_call
-    async def delete_pet_without_preload_content(
+    async def delete_pet_with_http_info(
         self,
         pet_id: Annotated[StrictInt, Field(description="Pet id to delete")],
         api_key: Optional[StrictStr] = None,
@@ -395,8 +415,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """Deletes a pet
         
         :param pet_id: Pet id to delete (required)
@@ -407,18 +426,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._delete_pet_serialize(
@@ -433,14 +458,16 @@ class PetApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def delete_pet_with_http_info(
+    async def delete_pet_without_preload_content(
         self,
         pet_id: Annotated[StrictInt, Field(description="Pet id to delete")],
         api_key: Optional[StrictStr] = None,
@@ -461,8 +488,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> RESTResponseType:
         """Deletes a pet
         
         :param pet_id: Pet id to delete (required)
@@ -473,18 +499,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._delete_pet_serialize(
@@ -499,13 +531,10 @@ class PetApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _delete_pet_serialize(
@@ -546,6 +575,7 @@ class PetApi:
 
 
 
+
         # authentication setting
         _auth_settings: List[str] = ['petstore_auth']  # noqa: E501
 
@@ -566,6 +596,7 @@ class PetApi:
 
 
 
+
     @validate_call
     async def find_pets_by_status(
         self,
@@ -588,7 +619,6 @@ class PetApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> List[Pet]:
-
         """Finds Pets by status
         Multiple status values can be provided with comma separated strings
         :param status: Status values that need to be considered for filter (required)
@@ -597,18 +627,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[List[Pet]]
         """
 
         param = self._find_pets_by_status_serialize(
@@ -624,7 +660,6 @@ class PetApi:
             '400': None
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -634,7 +669,7 @@ class PetApi:
 
 
     @validate_call
-    async def find_pets_by_status_without_preload_content(
+    async def find_pets_by_status_with_http_info(
         self,
         status: Annotated[List[StrictStr], Field(description="Status values that need to be considered for filter")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -654,8 +689,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[List[Pet]]:
         """Finds Pets by status
         Multiple status values can be provided with comma separated strings
         :param status: Status values that need to be considered for filter (required)
@@ -664,18 +698,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[List[Pet]]
         """
 
         param = self._find_pets_by_status_serialize(
@@ -691,14 +731,16 @@ class PetApi:
             '400': None
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def find_pets_by_status_with_http_info(
+    async def find_pets_by_status_without_preload_content(
         self,
         status: Annotated[List[StrictStr], Field(description="Status values that need to be considered for filter")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -718,8 +760,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> List[Pet]:
-
+    ) -> RESTResponseType:
         """Finds Pets by status
         Multiple status values can be provided with comma separated strings
         :param status: Status values that need to be considered for filter (required)
@@ -728,18 +769,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[List[Pet]]
         """
 
         param = self._find_pets_by_status_serialize(
@@ -755,13 +802,10 @@ class PetApi:
             '400': None
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _find_pets_by_status_serialize(
@@ -800,6 +844,7 @@ class PetApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/xml', 'application/json'])  # noqa: E501
@@ -825,6 +870,7 @@ class PetApi:
 
 
 
+
     @validate_call
     async def find_pets_by_tags(
         self,
@@ -847,7 +893,6 @@ class PetApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> List[Pet]:
-
         """(Deprecated) Finds Pets by tags
         Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
         :param tags: Tags to filter by (required)
@@ -856,18 +901,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[List[Pet]]
         """
         warnings.warn("GET /pet/findByTags is deprecated.", DeprecationWarning)
 
@@ -884,7 +935,6 @@ class PetApi:
             '400': None
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -894,7 +944,7 @@ class PetApi:
 
 
     @validate_call
-    async def find_pets_by_tags_without_preload_content(
+    async def find_pets_by_tags_with_http_info(
         self,
         tags: Annotated[List[StrictStr], Field(description="Tags to filter by")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -914,8 +964,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[List[Pet]]:
         """(Deprecated) Finds Pets by tags
         Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
         :param tags: Tags to filter by (required)
@@ -924,18 +973,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[List[Pet]]
         """
         warnings.warn("GET /pet/findByTags is deprecated.", DeprecationWarning)
 
@@ -952,14 +1007,16 @@ class PetApi:
             '400': None
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def find_pets_by_tags_with_http_info(
+    async def find_pets_by_tags_without_preload_content(
         self,
         tags: Annotated[List[StrictStr], Field(description="Tags to filter by")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -979,8 +1036,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> List[Pet]:
-
+    ) -> RESTResponseType:
         """(Deprecated) Finds Pets by tags
         Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
         :param tags: Tags to filter by (required)
@@ -989,18 +1045,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[List[Pet]]
         """
         warnings.warn("GET /pet/findByTags is deprecated.", DeprecationWarning)
 
@@ -1017,13 +1079,10 @@ class PetApi:
             '400': None
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _find_pets_by_tags_serialize(
@@ -1062,6 +1121,7 @@ class PetApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/xml', 'application/json'])  # noqa: E501
@@ -1087,6 +1147,7 @@ class PetApi:
 
 
 
+
     @validate_call
     async def get_pet_by_id(
         self,
@@ -1109,7 +1170,6 @@ class PetApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> Pet:
-
         """Find pet by ID
         Returns a single pet
         :param pet_id: ID of pet to return (required)
@@ -1118,18 +1178,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Pet]
         """
 
         param = self._get_pet_by_id_serialize(
@@ -1146,7 +1212,6 @@ class PetApi:
             '404': None
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -1156,7 +1221,7 @@ class PetApi:
 
 
     @validate_call
-    async def get_pet_by_id_without_preload_content(
+    async def get_pet_by_id_with_http_info(
         self,
         pet_id: Annotated[StrictInt, Field(description="ID of pet to return")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1176,8 +1241,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[Pet]:
         """Find pet by ID
         Returns a single pet
         :param pet_id: ID of pet to return (required)
@@ -1186,18 +1250,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Pet]
         """
 
         param = self._get_pet_by_id_serialize(
@@ -1214,14 +1284,16 @@ class PetApi:
             '404': None
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def get_pet_by_id_with_http_info(
+    async def get_pet_by_id_without_preload_content(
         self,
         pet_id: Annotated[StrictInt, Field(description="ID of pet to return")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1241,8 +1313,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> Pet:
-
+    ) -> RESTResponseType:
         """Find pet by ID
         Returns a single pet
         :param pet_id: ID of pet to return (required)
@@ -1251,18 +1322,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Pet]
         """
 
         param = self._get_pet_by_id_serialize(
@@ -1279,13 +1356,10 @@ class PetApi:
             '404': None
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _get_pet_by_id_serialize(
@@ -1321,6 +1395,7 @@ class PetApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/xml', 'application/json'])  # noqa: E501
@@ -1346,6 +1421,7 @@ class PetApi:
 
 
 
+
     @validate_call
     async def update_pet(
         self,
@@ -1368,7 +1444,6 @@ class PetApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """Update an existing pet
         
         :param pet: Pet object that needs to be added to the store (required)
@@ -1377,18 +1452,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._update_pet_serialize(
@@ -1402,7 +1483,6 @@ class PetApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -1412,7 +1492,7 @@ class PetApi:
 
 
     @validate_call
-    async def update_pet_without_preload_content(
+    async def update_pet_with_http_info(
         self,
         pet: Annotated[Pet, Field(description="Pet object that needs to be added to the store")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1432,8 +1512,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """Update an existing pet
         
         :param pet: Pet object that needs to be added to the store (required)
@@ -1442,18 +1521,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._update_pet_serialize(
@@ -1467,14 +1552,16 @@ class PetApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def update_pet_with_http_info(
+    async def update_pet_without_preload_content(
         self,
         pet: Annotated[Pet, Field(description="Pet object that needs to be added to the store")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1494,8 +1581,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> RESTResponseType:
         """Update an existing pet
         
         :param pet: Pet object that needs to be added to the store (required)
@@ -1504,18 +1590,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._update_pet_serialize(
@@ -1529,13 +1621,10 @@ class PetApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _update_pet_serialize(
@@ -1572,6 +1661,7 @@ class PetApi:
             _body_params = pet
 
 
+
         # set the HTTP header `Content-Type`
         if _content_type:
             _header_params['Content-Type'] = _content_type
@@ -1600,6 +1690,7 @@ class PetApi:
 
 
 
+
     @validate_call
     async def update_pet_with_form(
         self,
@@ -1624,7 +1715,6 @@ class PetApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """Updates a pet in the store with form data
         
         :param pet_id: ID of pet that needs to be updated (required)
@@ -1637,18 +1727,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._update_pet_with_form_serialize(
@@ -1664,7 +1760,6 @@ class PetApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -1674,7 +1769,7 @@ class PetApi:
 
 
     @validate_call
-    async def update_pet_with_form_without_preload_content(
+    async def update_pet_with_form_with_http_info(
         self,
         pet_id: Annotated[StrictInt, Field(description="ID of pet that needs to be updated")],
         name: Annotated[Optional[StrictStr], Field(description="Updated name of the pet")] = None,
@@ -1696,8 +1791,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """Updates a pet in the store with form data
         
         :param pet_id: ID of pet that needs to be updated (required)
@@ -1710,18 +1804,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._update_pet_with_form_serialize(
@@ -1737,14 +1837,16 @@ class PetApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def update_pet_with_form_with_http_info(
+    async def update_pet_with_form_without_preload_content(
         self,
         pet_id: Annotated[StrictInt, Field(description="ID of pet that needs to be updated")],
         name: Annotated[Optional[StrictStr], Field(description="Updated name of the pet")] = None,
@@ -1766,8 +1868,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> RESTResponseType:
         """Updates a pet in the store with form data
         
         :param pet_id: ID of pet that needs to be updated (required)
@@ -1780,18 +1881,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._update_pet_with_form_serialize(
@@ -1807,13 +1914,10 @@ class PetApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _update_pet_with_form_serialize(
@@ -1856,6 +1960,7 @@ class PetApi:
         # process the body parameter
 
 
+
         # set the HTTP header `Content-Type`
         if _content_type:
             _header_params['Content-Type'] = _content_type
@@ -1884,6 +1989,7 @@ class PetApi:
 
 
 
+
     @validate_call
     async def upload_file(
         self,
@@ -1908,7 +2014,6 @@ class PetApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApiResponse:
-
         """uploads an image
         
         :param pet_id: ID of pet to update (required)
@@ -1921,18 +2026,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[ApiResponse]
         """
 
         param = self._upload_file_serialize(
@@ -1949,7 +2060,6 @@ class PetApi:
             '200': "ApiResponse"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -1959,7 +2069,7 @@ class PetApi:
 
 
     @validate_call
-    async def upload_file_without_preload_content(
+    async def upload_file_with_http_info(
         self,
         pet_id: Annotated[StrictInt, Field(description="ID of pet to update")],
         additional_metadata: Annotated[Optional[StrictStr], Field(description="Additional data to pass to server")] = None,
@@ -1981,8 +2091,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[ApiResponse]:
         """uploads an image
         
         :param pet_id: ID of pet to update (required)
@@ -1995,18 +2104,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[ApiResponse]
         """
 
         param = self._upload_file_serialize(
@@ -2023,14 +2138,16 @@ class PetApi:
             '200': "ApiResponse"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def upload_file_with_http_info(
+    async def upload_file_without_preload_content(
         self,
         pet_id: Annotated[StrictInt, Field(description="ID of pet to update")],
         additional_metadata: Annotated[Optional[StrictStr], Field(description="Additional data to pass to server")] = None,
@@ -2052,8 +2169,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApiResponse:
-
+    ) -> RESTResponseType:
         """uploads an image
         
         :param pet_id: ID of pet to update (required)
@@ -2066,18 +2182,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[ApiResponse]
         """
 
         param = self._upload_file_serialize(
@@ -2094,13 +2216,10 @@ class PetApi:
             '200': "ApiResponse"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _upload_file_serialize(
@@ -2142,6 +2261,7 @@ class PetApi:
             _files['file'] = file
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/json'])  # noqa: E501
@@ -2174,6 +2294,7 @@ class PetApi:
 
 
 
+
     @validate_call
     async def upload_file_with_required_file(
         self,
@@ -2198,7 +2319,6 @@ class PetApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApiResponse:
-
         """uploads an image (required)
         
         :param pet_id: ID of pet to update (required)
@@ -2211,18 +2331,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[ApiResponse]
         """
 
         param = self._upload_file_with_required_file_serialize(
@@ -2239,7 +2365,6 @@ class PetApi:
             '200': "ApiResponse"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -2249,7 +2374,7 @@ class PetApi:
 
 
     @validate_call
-    async def upload_file_with_required_file_without_preload_content(
+    async def upload_file_with_required_file_with_http_info(
         self,
         pet_id: Annotated[StrictInt, Field(description="ID of pet to update")],
         required_file: Annotated[Union[StrictBytes, StrictStr], Field(description="file to upload")],
@@ -2271,8 +2396,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[ApiResponse]:
         """uploads an image (required)
         
         :param pet_id: ID of pet to update (required)
@@ -2285,18 +2409,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[ApiResponse]
         """
 
         param = self._upload_file_with_required_file_serialize(
@@ -2313,14 +2443,16 @@ class PetApi:
             '200': "ApiResponse"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def upload_file_with_required_file_with_http_info(
+    async def upload_file_with_required_file_without_preload_content(
         self,
         pet_id: Annotated[StrictInt, Field(description="ID of pet to update")],
         required_file: Annotated[Union[StrictBytes, StrictStr], Field(description="file to upload")],
@@ -2342,8 +2474,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApiResponse:
-
+    ) -> RESTResponseType:
         """uploads an image (required)
         
         :param pet_id: ID of pet to update (required)
@@ -2356,18 +2487,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[ApiResponse]
         """
 
         param = self._upload_file_with_required_file_serialize(
@@ -2384,13 +2521,10 @@ class PetApi:
             '200': "ApiResponse"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _upload_file_with_required_file_serialize(
@@ -2432,6 +2566,7 @@ class PetApi:
             _files['requiredFile'] = required_file
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/json'])  # noqa: E501
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/api/store_api.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/api/store_api.py
index 2ead332260c..251bec874ce 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/api/store_api.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/api/store_api.py
@@ -12,12 +12,16 @@
 """  # noqa: E501
 
 
-import re  # noqa: F401
 import io
 import warnings
 
-from pydantic import validate_call, ValidationError, Field
-from typing import Dict, List, Optional, Tuple, Union, Any, Annotated
+from pydantic import validate_call, Field
+from typing import Dict, List, Optional, Tuple, Union, Any
+
+try:
+    from typing import Annotated
+except ImportError:
+    from typing_extensions import Annotated
 
 from pydantic import Field
 from typing_extensions import Annotated
@@ -29,10 +33,6 @@ from petstore_api.models.order import Order
 
 from petstore_api.api_client import ApiClient
 from petstore_api.api_response import ApiResponse
-from petstore_api.exceptions import (  # noqa: F401
-    ApiTypeError,
-    ApiValueError
-)
 from petstore_api.rest import RESTResponseType
 
 
@@ -49,6 +49,7 @@ class StoreApi:
             api_client = ApiClient.get_default()
         self.api_client = api_client
 
+
     @validate_call
     async def delete_order(
         self,
@@ -71,7 +72,6 @@ class StoreApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """Delete purchase order by ID
         For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
         :param order_id: ID of the order that needs to be deleted (required)
@@ -80,18 +80,24 @@ class StoreApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._delete_order_serialize(
@@ -105,7 +111,6 @@ class StoreApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -115,7 +120,7 @@ class StoreApi:
 
 
     @validate_call
-    async def delete_order_without_preload_content(
+    async def delete_order_with_http_info(
         self,
         order_id: Annotated[StrictStr, Field(description="ID of the order that needs to be deleted")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -135,8 +140,7 @@ class StoreApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """Delete purchase order by ID
         For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
         :param order_id: ID of the order that needs to be deleted (required)
@@ -145,18 +149,24 @@ class StoreApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._delete_order_serialize(
@@ -170,14 +180,16 @@ class StoreApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def delete_order_with_http_info(
+    async def delete_order_without_preload_content(
         self,
         order_id: Annotated[StrictStr, Field(description="ID of the order that needs to be deleted")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -197,8 +209,7 @@ class StoreApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> RESTResponseType:
         """Delete purchase order by ID
         For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
         :param order_id: ID of the order that needs to be deleted (required)
@@ -207,18 +218,24 @@ class StoreApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._delete_order_serialize(
@@ -232,13 +249,10 @@ class StoreApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _delete_order_serialize(
@@ -276,6 +290,7 @@ class StoreApi:
 
 
 
+
         # authentication setting
         _auth_settings: List[str] = []  # noqa: E501
 
@@ -296,6 +311,7 @@ class StoreApi:
 
 
 
+
     @validate_call
     async def get_inventory(
         self,
@@ -317,25 +333,30 @@ class StoreApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> Dict[str, int]:
-
         """Returns pet inventories by status
         Returns a map of status codes to quantities
         :param _request_timeout: timeout setting for this request. If one
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Dict[str, int]]
         """
 
         param = self._get_inventory_serialize(
@@ -349,7 +370,6 @@ class StoreApi:
             '200': "Dict[str, int]"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -359,7 +379,7 @@ class StoreApi:
 
 
     @validate_call
-    async def get_inventory_without_preload_content(
+    async def get_inventory_with_http_info(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -378,26 +398,31 @@ class StoreApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[Dict[str, int]]:
         """Returns pet inventories by status
         Returns a map of status codes to quantities
         :param _request_timeout: timeout setting for this request. If one
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Dict[str, int]]
         """
 
         param = self._get_inventory_serialize(
@@ -411,14 +436,16 @@ class StoreApi:
             '200': "Dict[str, int]"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def get_inventory_with_http_info(
+    async def get_inventory_without_preload_content(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -437,26 +464,31 @@ class StoreApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> Dict[str, int]:
-
+    ) -> RESTResponseType:
         """Returns pet inventories by status
         Returns a map of status codes to quantities
         :param _request_timeout: timeout setting for this request. If one
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Dict[str, int]]
         """
 
         param = self._get_inventory_serialize(
@@ -470,13 +502,10 @@ class StoreApi:
             '200': "Dict[str, int]"
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _get_inventory_serialize(
@@ -509,6 +538,7 @@ class StoreApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/json'])  # noqa: E501
@@ -534,6 +564,7 @@ class StoreApi:
 
 
 
+
     @validate_call
     async def get_order_by_id(
         self,
@@ -556,7 +587,6 @@ class StoreApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> Order:
-
         """Find purchase order by ID
         For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
         :param order_id: ID of pet that needs to be fetched (required)
@@ -565,18 +595,24 @@ class StoreApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Order]
         """
 
         param = self._get_order_by_id_serialize(
@@ -593,7 +629,6 @@ class StoreApi:
             '404': None
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -603,7 +638,7 @@ class StoreApi:
 
 
     @validate_call
-    async def get_order_by_id_without_preload_content(
+    async def get_order_by_id_with_http_info(
         self,
         order_id: Annotated[int, Field(le=5, strict=True, ge=1, description="ID of pet that needs to be fetched")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -623,8 +658,7 @@ class StoreApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[Order]:
         """Find purchase order by ID
         For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
         :param order_id: ID of pet that needs to be fetched (required)
@@ -633,18 +667,24 @@ class StoreApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Order]
         """
 
         param = self._get_order_by_id_serialize(
@@ -661,14 +701,16 @@ class StoreApi:
             '404': None
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def get_order_by_id_with_http_info(
+    async def get_order_by_id_without_preload_content(
         self,
         order_id: Annotated[int, Field(le=5, strict=True, ge=1, description="ID of pet that needs to be fetched")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -688,8 +730,7 @@ class StoreApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> Order:
-
+    ) -> RESTResponseType:
         """Find purchase order by ID
         For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
         :param order_id: ID of pet that needs to be fetched (required)
@@ -698,18 +739,24 @@ class StoreApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Order]
         """
 
         param = self._get_order_by_id_serialize(
@@ -726,13 +773,10 @@ class StoreApi:
             '404': None
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _get_order_by_id_serialize(
@@ -768,6 +812,7 @@ class StoreApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/xml', 'application/json'])  # noqa: E501
@@ -793,6 +838,7 @@ class StoreApi:
 
 
 
+
     @validate_call
     async def place_order(
         self,
@@ -815,7 +861,6 @@ class StoreApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> Order:
-
         """Place an order for a pet
         
         :param order: order placed for purchasing the pet (required)
@@ -824,18 +869,24 @@ class StoreApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Order]
         """
 
         param = self._place_order_serialize(
@@ -851,7 +902,6 @@ class StoreApi:
             '400': None
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -861,7 +911,7 @@ class StoreApi:
 
 
     @validate_call
-    async def place_order_without_preload_content(
+    async def place_order_with_http_info(
         self,
         order: Annotated[Order, Field(description="order placed for purchasing the pet")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -881,8 +931,7 @@ class StoreApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[Order]:
         """Place an order for a pet
         
         :param order: order placed for purchasing the pet (required)
@@ -891,18 +940,24 @@ class StoreApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Order]
         """
 
         param = self._place_order_serialize(
@@ -918,14 +973,16 @@ class StoreApi:
             '400': None
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def place_order_with_http_info(
+    async def place_order_without_preload_content(
         self,
         order: Annotated[Order, Field(description="order placed for purchasing the pet")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -945,8 +1002,7 @@ class StoreApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> Order:
-
+    ) -> RESTResponseType:
         """Place an order for a pet
         
         :param order: order placed for purchasing the pet (required)
@@ -955,18 +1011,24 @@ class StoreApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Order]
         """
 
         param = self._place_order_serialize(
@@ -982,13 +1044,10 @@ class StoreApi:
             '400': None
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _place_order_serialize(
@@ -1024,6 +1083,7 @@ class StoreApi:
         if order is not None:
             _body_params = order
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/xml', 'application/json'])  # noqa: E501
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/api/user_api.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/api/user_api.py
index 75ff603a7d5..ffbe022c0ff 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/api/user_api.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/api/user_api.py
@@ -12,12 +12,16 @@
 """  # noqa: E501
 
 
-import re  # noqa: F401
 import io
 import warnings
 
-from pydantic import validate_call, ValidationError, Field
-from typing import Dict, List, Optional, Tuple, Union, Any, Annotated
+from pydantic import validate_call, Field
+from typing import Dict, List, Optional, Tuple, Union, Any
+
+try:
+    from typing import Annotated
+except ImportError:
+    from typing_extensions import Annotated
 
 from pydantic import Field
 from typing_extensions import Annotated
@@ -29,10 +33,6 @@ from petstore_api.models.user import User
 
 from petstore_api.api_client import ApiClient
 from petstore_api.api_response import ApiResponse
-from petstore_api.exceptions import (  # noqa: F401
-    ApiTypeError,
-    ApiValueError
-)
 from petstore_api.rest import RESTResponseType
 
 
@@ -49,6 +49,7 @@ class UserApi:
             api_client = ApiClient.get_default()
         self.api_client = api_client
 
+
     @validate_call
     async def create_user(
         self,
@@ -71,7 +72,6 @@ class UserApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """Create user
         This can only be done by the logged in user.
         :param user: Created user object (required)
@@ -80,18 +80,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._create_user_serialize(
@@ -105,7 +111,6 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -115,7 +120,7 @@ class UserApi:
 
 
     @validate_call
-    async def create_user_without_preload_content(
+    async def create_user_with_http_info(
         self,
         user: Annotated[User, Field(description="Created user object")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -135,8 +140,7 @@ class UserApi:
             le=3,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """Create user
         This can only be done by the logged in user.
         :param user: Created user object (required)
@@ -145,18 +149,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._create_user_serialize(
@@ -170,14 +180,16 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def create_user_with_http_info(
+    async def create_user_without_preload_content(
         self,
         user: Annotated[User, Field(description="Created user object")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -197,8 +209,7 @@ class UserApi:
             le=3,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> RESTResponseType:
         """Create user
         This can only be done by the logged in user.
         :param user: Created user object (required)
@@ -207,18 +218,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._create_user_serialize(
@@ -232,13 +249,10 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _create_user_serialize(
@@ -278,6 +292,7 @@ class UserApi:
             _body_params = user
 
 
+
         # set the HTTP header `Content-Type`
         if _content_type:
             _header_params['Content-Type'] = _content_type
@@ -306,6 +321,7 @@ class UserApi:
 
 
 
+
     @validate_call
     async def create_users_with_array_input(
         self,
@@ -328,7 +344,6 @@ class UserApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """Creates list of users with given input array
         
         :param user: List of user object (required)
@@ -337,18 +352,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._create_users_with_array_input_serialize(
@@ -362,7 +383,6 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -372,7 +392,7 @@ class UserApi:
 
 
     @validate_call
-    async def create_users_with_array_input_without_preload_content(
+    async def create_users_with_array_input_with_http_info(
         self,
         user: Annotated[List[User], Field(description="List of user object")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -392,8 +412,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """Creates list of users with given input array
         
         :param user: List of user object (required)
@@ -402,18 +421,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._create_users_with_array_input_serialize(
@@ -427,14 +452,16 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def create_users_with_array_input_with_http_info(
+    async def create_users_with_array_input_without_preload_content(
         self,
         user: Annotated[List[User], Field(description="List of user object")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -454,8 +481,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> RESTResponseType:
         """Creates list of users with given input array
         
         :param user: List of user object (required)
@@ -464,18 +490,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._create_users_with_array_input_serialize(
@@ -489,13 +521,10 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _create_users_with_array_input_serialize(
@@ -533,6 +562,7 @@ class UserApi:
             _body_params = user
 
 
+
         # set the HTTP header `Content-Type`
         if _content_type:
             _header_params['Content-Type'] = _content_type
@@ -561,6 +591,7 @@ class UserApi:
 
 
 
+
     @validate_call
     async def create_users_with_list_input(
         self,
@@ -583,7 +614,6 @@ class UserApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """Creates list of users with given input array
         
         :param user: List of user object (required)
@@ -592,18 +622,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._create_users_with_list_input_serialize(
@@ -617,7 +653,6 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -627,7 +662,7 @@ class UserApi:
 
 
     @validate_call
-    async def create_users_with_list_input_without_preload_content(
+    async def create_users_with_list_input_with_http_info(
         self,
         user: Annotated[List[User], Field(description="List of user object")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -647,8 +682,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """Creates list of users with given input array
         
         :param user: List of user object (required)
@@ -657,18 +691,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._create_users_with_list_input_serialize(
@@ -682,14 +722,16 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def create_users_with_list_input_with_http_info(
+    async def create_users_with_list_input_without_preload_content(
         self,
         user: Annotated[List[User], Field(description="List of user object")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -709,8 +751,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> RESTResponseType:
         """Creates list of users with given input array
         
         :param user: List of user object (required)
@@ -719,18 +760,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._create_users_with_list_input_serialize(
@@ -744,13 +791,10 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _create_users_with_list_input_serialize(
@@ -788,6 +832,7 @@ class UserApi:
             _body_params = user
 
 
+
         # set the HTTP header `Content-Type`
         if _content_type:
             _header_params['Content-Type'] = _content_type
@@ -816,6 +861,7 @@ class UserApi:
 
 
 
+
     @validate_call
     async def delete_user(
         self,
@@ -838,7 +884,6 @@ class UserApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """Delete user
         This can only be done by the logged in user.
         :param username: The name that needs to be deleted (required)
@@ -847,18 +892,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._delete_user_serialize(
@@ -872,7 +923,6 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -882,7 +932,7 @@ class UserApi:
 
 
     @validate_call
-    async def delete_user_without_preload_content(
+    async def delete_user_with_http_info(
         self,
         username: Annotated[StrictStr, Field(description="The name that needs to be deleted")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -902,8 +952,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """Delete user
         This can only be done by the logged in user.
         :param username: The name that needs to be deleted (required)
@@ -912,18 +961,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._delete_user_serialize(
@@ -937,14 +992,16 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def delete_user_with_http_info(
+    async def delete_user_without_preload_content(
         self,
         username: Annotated[StrictStr, Field(description="The name that needs to be deleted")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -964,8 +1021,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> RESTResponseType:
         """Delete user
         This can only be done by the logged in user.
         :param username: The name that needs to be deleted (required)
@@ -974,18 +1030,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._delete_user_serialize(
@@ -999,13 +1061,10 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _delete_user_serialize(
@@ -1043,6 +1102,7 @@ class UserApi:
 
 
 
+
         # authentication setting
         _auth_settings: List[str] = []  # noqa: E501
 
@@ -1063,6 +1123,7 @@ class UserApi:
 
 
 
+
     @validate_call
     async def get_user_by_name(
         self,
@@ -1085,7 +1146,6 @@ class UserApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> User:
-
         """Get user by user name
         
         :param username: The name that needs to be fetched. Use user1 for testing. (required)
@@ -1094,18 +1154,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[User]
         """
 
         param = self._get_user_by_name_serialize(
@@ -1122,7 +1188,6 @@ class UserApi:
             '404': None
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -1132,7 +1197,7 @@ class UserApi:
 
 
     @validate_call
-    async def get_user_by_name_without_preload_content(
+    async def get_user_by_name_with_http_info(
         self,
         username: Annotated[StrictStr, Field(description="The name that needs to be fetched. Use user1 for testing.")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1152,8 +1217,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[User]:
         """Get user by user name
         
         :param username: The name that needs to be fetched. Use user1 for testing. (required)
@@ -1162,18 +1226,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[User]
         """
 
         param = self._get_user_by_name_serialize(
@@ -1190,14 +1260,16 @@ class UserApi:
             '404': None
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def get_user_by_name_with_http_info(
+    async def get_user_by_name_without_preload_content(
         self,
         username: Annotated[StrictStr, Field(description="The name that needs to be fetched. Use user1 for testing.")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1217,8 +1289,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> User:
-
+    ) -> RESTResponseType:
         """Get user by user name
         
         :param username: The name that needs to be fetched. Use user1 for testing. (required)
@@ -1227,18 +1298,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[User]
         """
 
         param = self._get_user_by_name_serialize(
@@ -1255,13 +1332,10 @@ class UserApi:
             '404': None
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _get_user_by_name_serialize(
@@ -1297,6 +1371,7 @@ class UserApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/xml', 'application/json'])  # noqa: E501
@@ -1322,6 +1397,7 @@ class UserApi:
 
 
 
+
     @validate_call
     async def login_user(
         self,
@@ -1345,7 +1421,6 @@ class UserApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Logs user into the system
         
         :param username: The user name for login (required)
@@ -1356,18 +1431,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._login_user_serialize(
@@ -1384,7 +1465,6 @@ class UserApi:
             '400': None
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -1394,7 +1474,7 @@ class UserApi:
 
 
     @validate_call
-    async def login_user_without_preload_content(
+    async def login_user_with_http_info(
         self,
         username: Annotated[StrictStr, Field(description="The user name for login")],
         password: Annotated[StrictStr, Field(description="The password for login in clear text")],
@@ -1415,8 +1495,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Logs user into the system
         
         :param username: The user name for login (required)
@@ -1427,18 +1506,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._login_user_serialize(
@@ -1455,14 +1540,16 @@ class UserApi:
             '400': None
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def login_user_with_http_info(
+    async def login_user_without_preload_content(
         self,
         username: Annotated[StrictStr, Field(description="The user name for login")],
         password: Annotated[StrictStr, Field(description="The password for login in clear text")],
@@ -1483,8 +1570,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> RESTResponseType:
         """Logs user into the system
         
         :param username: The user name for login (required)
@@ -1495,18 +1581,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._login_user_serialize(
@@ -1523,13 +1615,10 @@ class UserApi:
             '400': None
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _login_user_serialize(
@@ -1572,6 +1661,7 @@ class UserApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/xml', 'application/json'])  # noqa: E501
@@ -1597,6 +1687,7 @@ class UserApi:
 
 
 
+
     @validate_call
     async def logout_user(
         self,
@@ -1618,25 +1709,30 @@ class UserApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """Logs out current logged in user session
         
         :param _request_timeout: timeout setting for this request. If one
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._logout_user_serialize(
@@ -1649,7 +1745,6 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -1659,7 +1754,7 @@ class UserApi:
 
 
     @validate_call
-    async def logout_user_without_preload_content(
+    async def logout_user_with_http_info(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -1678,26 +1773,31 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """Logs out current logged in user session
         
         :param _request_timeout: timeout setting for this request. If one
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._logout_user_serialize(
@@ -1710,14 +1810,16 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def logout_user_with_http_info(
+    async def logout_user_without_preload_content(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -1736,26 +1838,31 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> RESTResponseType:
         """Logs out current logged in user session
         
         :param _request_timeout: timeout setting for this request. If one
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._logout_user_serialize(
@@ -1768,13 +1875,10 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _logout_user_serialize(
@@ -1809,6 +1913,7 @@ class UserApi:
 
 
 
+
         # authentication setting
         _auth_settings: List[str] = []  # noqa: E501
 
@@ -1829,6 +1934,7 @@ class UserApi:
 
 
 
+
     @validate_call
     async def update_user(
         self,
@@ -1852,7 +1958,6 @@ class UserApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """Updated user
         This can only be done by the logged in user.
         :param username: name that need to be deleted (required)
@@ -1863,18 +1968,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._update_user_serialize(
@@ -1889,7 +2000,6 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
         await response_data.read()
         return self.api_client.response_deserialize(
@@ -1899,7 +2009,7 @@ class UserApi:
 
 
     @validate_call
-    async def update_user_without_preload_content(
+    async def update_user_with_http_info(
         self,
         username: Annotated[StrictStr, Field(description="name that need to be deleted")],
         user: Annotated[User, Field(description="Updated user object")],
@@ -1920,8 +2030,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """Updated user
         This can only be done by the logged in user.
         :param username: name that need to be deleted (required)
@@ -1932,18 +2041,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._update_user_serialize(
@@ -1958,14 +2073,16 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
-
+        await response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
 
     @validate_call
-    async def update_user_with_http_info(
+    async def update_user_without_preload_content(
         self,
         username: Annotated[StrictStr, Field(description="name that need to be deleted")],
         user: Annotated[User, Field(description="Updated user object")],
@@ -1986,8 +2103,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> RESTResponseType:
         """Updated user
         This can only be done by the logged in user.
         :param username: name that need to be deleted (required)
@@ -1998,18 +2114,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._update_user_serialize(
@@ -2024,13 +2146,10 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = await self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        await response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        return response_data.response
+
+
 
 
     def _update_user_serialize(
@@ -2070,6 +2189,7 @@ class UserApi:
             _body_params = user
 
 
+
         # set the HTTP header `Content-Type`
         if _content_type:
             _header_params['Content-Type'] = _content_type
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/api_response.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/api_response.py
index a8d7d49812d..2ac1ada6e9b 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/api_response.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/api_response.py
@@ -15,3 +15,7 @@ class ApiResponse(BaseModel, Generic[T]):
     headers: Optional[Dict[StrictStr, StrictStr]] = Field(None, description="HTTP headers")
     data: T = Field(description="Deserialized data given the data type")
     raw_data: StrictBytes = Field(description="Raw data (HTTP response body)")
+
+    model_config = {
+        "arbitrary_types_allowed": True
+    }
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/additional_properties_any_type.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/additional_properties_any_type.py
index 3d6f78e1748..32e531f8f60 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/additional_properties_any_type.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/additional_properties_any_type.py
@@ -18,9 +18,8 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -80,7 +79,7 @@ class AdditionalPropertiesAnyType(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of AdditionalPropertiesAnyType from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/additional_properties_class.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/additional_properties_class.py
index 14fbcc1e442..2414f23fda8 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/additional_properties_class.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/additional_properties_class.py
@@ -18,9 +18,8 @@ import re  # noqa: F401
 import json
 
 
-from typing import Dict, Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -73,7 +72,7 @@ class AdditionalPropertiesClass(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of AdditionalPropertiesClass from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/additional_properties_object.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/additional_properties_object.py
index 9933c9ac233..14ebe9875cc 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/additional_properties_object.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/additional_properties_object.py
@@ -18,9 +18,8 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -80,7 +79,7 @@ class AdditionalPropertiesObject(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of AdditionalPropertiesObject from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/additional_properties_with_description_only.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/additional_properties_with_description_only.py
index 15d29a1d241..d85a71af863 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/additional_properties_with_description_only.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/additional_properties_with_description_only.py
@@ -18,9 +18,8 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -80,7 +79,7 @@ class AdditionalPropertiesWithDescriptionOnly(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of AdditionalPropertiesWithDescriptionOnly from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/all_of_with_single_ref.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/all_of_with_single_ref.py
index 09693f82e07..57012da834b 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/all_of_with_single_ref.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/all_of_with_single_ref.py
@@ -18,11 +18,10 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
 from pydantic import Field
 from petstore_api.models.single_ref_type import SingleRefType
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -75,7 +74,7 @@ class AllOfWithSingleRef(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of AllOfWithSingleRef from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/animal.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/animal.py
index a1763f52a56..f28022a31e9 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/animal.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/animal.py
@@ -18,10 +18,9 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional, Union
+from typing import Any, ClassVar, Dict, List, Optional, Union
 from pydantic import BaseModel, StrictStr
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -50,7 +49,7 @@ class Animal(BaseModel):
     }
 
     @classmethod
-    def get_discriminator_value(cls, obj: dict) -> str:
+    def get_discriminator_value(cls, obj: Dict) -> str:
         """Returns the discriminator value (object type) of the data"""
         discriminator_value = obj[cls.__discriminator_property_name]
         if discriminator_value:
@@ -91,7 +90,7 @@ class Animal(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Union[Self, Self]:
+    def from_dict(cls, obj: Dict) -> Union[Self, Self]:
         """Create an instance of Animal from a dict"""
         # look up the object type based on discriminator mapping
         object_type = cls.get_discriminator_value(obj)
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/any_of_color.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/any_of_color.py
index db4718b868b..15b9eefd670 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/any_of_color.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/any_of_color.py
@@ -145,7 +145,7 @@ class AnyOfColor(BaseModel):
         else:
             return json.dumps(self.actual_instance)
 
-    def to_dict(self) -> dict:
+    def to_dict(self) -> Dict:
         """Returns the dict representation of the actual instance"""
         if self.actual_instance is None:
             return "null"
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/any_of_pig.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/any_of_pig.py
index 2a2a0493222..be2f65a242e 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/any_of_pig.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/any_of_pig.py
@@ -122,7 +122,7 @@ class AnyOfPig(BaseModel):
         else:
             return json.dumps(self.actual_instance)
 
-    def to_dict(self) -> dict:
+    def to_dict(self) -> Dict:
         """Returns the dict representation of the actual instance"""
         if self.actual_instance is None:
             return "null"
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/api_response.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/api_response.py
index c8a08ad07d6..901f79b1faf 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/api_response.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/api_response.py
@@ -18,9 +18,8 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -74,7 +73,7 @@ class ApiResponse(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of ApiResponse from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/array_of_array_of_model.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/array_of_array_of_model.py
index 9293e3d9ef8..c3696a30efa 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/array_of_array_of_model.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/array_of_array_of_model.py
@@ -18,10 +18,9 @@ import re  # noqa: F401
 import json
 
 
-from typing import List, Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel
 from petstore_api.models.tag import Tag
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -82,7 +81,7 @@ class ArrayOfArrayOfModel(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of ArrayOfArrayOfModel from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/array_of_array_of_number_only.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/array_of_array_of_number_only.py
index 77bccbdcedb..bf02207a65e 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/array_of_array_of_number_only.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/array_of_array_of_number_only.py
@@ -18,10 +18,9 @@ import re  # noqa: F401
 import json
 
 
-from typing import List, Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -73,7 +72,7 @@ class ArrayOfArrayOfNumberOnly(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of ArrayOfArrayOfNumberOnly from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/array_of_number_only.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/array_of_number_only.py
index b9457cc8695..be2c480bd69 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/array_of_number_only.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/array_of_number_only.py
@@ -18,10 +18,9 @@ import re  # noqa: F401
 import json
 
 
-from typing import List, Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -73,7 +72,7 @@ class ArrayOfNumberOnly(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of ArrayOfNumberOnly from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/array_test.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/array_test.py
index ada718465ba..fccc95c7528 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/array_test.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/array_test.py
@@ -18,12 +18,11 @@ import re  # noqa: F401
 import json
 
 
-from typing import List, Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt, StrictStr
 from pydantic import Field
 from typing_extensions import Annotated
 from petstore_api.models.read_only_first import ReadOnlyFirst
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -86,7 +85,7 @@ class ArrayTest(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of ArrayTest from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/basque_pig.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/basque_pig.py
index c0602950bbe..9ad89cb2142 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/basque_pig.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/basque_pig.py
@@ -18,10 +18,9 @@ import re  # noqa: F401
 import json
 
 
-
+from typing import Any, ClassVar, Dict, List
 from pydantic import BaseModel, StrictStr
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -74,7 +73,7 @@ class BasquePig(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of BasquePig from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/capitalization.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/capitalization.py
index fbcb8b78eaf..42fb339453f 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/capitalization.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/capitalization.py
@@ -18,10 +18,9 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -78,7 +77,7 @@ class Capitalization(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Capitalization from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/cat.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/cat.py
index 0af38b8a65f..127d49e9b32 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/cat.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/cat.py
@@ -18,10 +18,9 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import StrictBool
 from petstore_api.models.animal import Animal
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -73,7 +72,7 @@ class Cat(Animal):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Cat from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/category.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/category.py
index 78ee4fecb97..ad3cf8c9323 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/category.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/category.py
@@ -18,9 +18,8 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -73,7 +72,7 @@ class Category(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Category from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/circular_reference_model.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/circular_reference_model.py
index 934c6ea455c..c8bfb4435c3 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/circular_reference_model.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/circular_reference_model.py
@@ -18,9 +18,8 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -76,7 +75,7 @@ class CircularReferenceModel(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of CircularReferenceModel from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/class_model.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/class_model.py
index ae918ce100f..e59a5042266 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/class_model.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/class_model.py
@@ -18,10 +18,9 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -73,7 +72,7 @@ class ClassModel(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of ClassModel from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/client.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/client.py
index 4033f37205e..3c0d3e09ce8 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/client.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/client.py
@@ -18,9 +18,8 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -72,7 +71,7 @@ class Client(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Client from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/color.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/color.py
index b5abaccbd0b..287542b1f82 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/color.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/color.py
@@ -157,7 +157,7 @@ class Color(BaseModel):
         else:
             return json.dumps(self.actual_instance)
 
-    def to_dict(self) -> dict:
+    def to_dict(self) -> Dict:
         """Returns the dict representation of the actual instance"""
         if self.actual_instance is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/creature.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/creature.py
index 1ed4c336049..88281f34b8e 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/creature.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/creature.py
@@ -18,10 +18,9 @@ import re  # noqa: F401
 import json
 
 
-
+from typing import Any, ClassVar, Dict, List
 from pydantic import BaseModel, StrictStr
 from petstore_api.models.creature_info import CreatureInfo
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -77,7 +76,7 @@ class Creature(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Creature from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/creature_info.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/creature_info.py
index 93ab7f14574..3c3ac9efdc0 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/creature_info.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/creature_info.py
@@ -18,9 +18,8 @@ import re  # noqa: F401
 import json
 
 
-
+from typing import Any, ClassVar, Dict, List
 from pydantic import BaseModel, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -72,7 +71,7 @@ class CreatureInfo(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of CreatureInfo from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/danish_pig.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/danish_pig.py
index 95676eefdfc..60adb8fa63d 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/danish_pig.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/danish_pig.py
@@ -18,10 +18,9 @@ import re  # noqa: F401
 import json
 
 
-
+from typing import Any, ClassVar, Dict, List
 from pydantic import BaseModel, StrictInt, StrictStr
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -74,7 +73,7 @@ class DanishPig(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of DanishPig from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/deprecated_object.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/deprecated_object.py
index 6a8ea126a3b..168cee99d21 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/deprecated_object.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/deprecated_object.py
@@ -18,9 +18,8 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -72,7 +71,7 @@ class DeprecatedObject(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of DeprecatedObject from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/dog.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/dog.py
index f038da3dd48..5ec0052e536 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/dog.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/dog.py
@@ -18,10 +18,9 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import StrictStr
 from petstore_api.models.animal import Animal
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -73,7 +72,7 @@ class Dog(Animal):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Dog from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/dummy_model.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/dummy_model.py
index bb8682915ad..773edaa8313 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/dummy_model.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/dummy_model.py
@@ -18,9 +18,8 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -76,7 +75,7 @@ class DummyModel(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of DummyModel from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/enum_arrays.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/enum_arrays.py
index 333440a1165..14286f241f6 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/enum_arrays.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/enum_arrays.py
@@ -18,9 +18,8 @@ import re  # noqa: F401
 import json
 
 
-from typing import List, Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr, field_validator
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -94,7 +93,7 @@ class EnumArrays(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of EnumArrays from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/enum_test.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/enum_test.py
index 0aaab02139d..03eb9885394 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/enum_test.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/enum_test.py
@@ -18,14 +18,13 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt, StrictStr, field_validator
 from pydantic import Field
 from petstore_api.models.outer_enum import OuterEnum
 from petstore_api.models.outer_enum_default_value import OuterEnumDefaultValue
 from petstore_api.models.outer_enum_integer import OuterEnumInteger
 from petstore_api.models.outer_enum_integer_default_value import OuterEnumIntegerDefaultValue
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -137,7 +136,7 @@ class EnumTest(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of EnumTest from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/file.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/file.py
index a4009a1ade9..4a16faf8cad 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/file.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/file.py
@@ -18,10 +18,9 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -73,7 +72,7 @@ class File(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of File from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/file_schema_test_class.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/file_schema_test_class.py
index 0a6d4ed4a80..0f8e662de3a 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/file_schema_test_class.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/file_schema_test_class.py
@@ -18,10 +18,9 @@ import re  # noqa: F401
 import json
 
 
-from typing import List, Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel
 from petstore_api.models.file import File
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -84,7 +83,7 @@ class FileSchemaTestClass(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of FileSchemaTestClass from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/first_ref.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/first_ref.py
index 568eca6f756..46821ab941d 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/first_ref.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/first_ref.py
@@ -18,9 +18,8 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -76,7 +75,7 @@ class FirstRef(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of FirstRef from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/foo.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/foo.py
index cb55c835734..fb223872834 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/foo.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/foo.py
@@ -18,9 +18,8 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -72,7 +71,7 @@ class Foo(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Foo from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/foo_get_default_response.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/foo_get_default_response.py
index c439ed8825e..6a07e0247be 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/foo_get_default_response.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/foo_get_default_response.py
@@ -18,10 +18,9 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel
 from petstore_api.models.foo import Foo
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -76,7 +75,7 @@ class FooGetDefaultResponse(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of FooGetDefaultResponse from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/format_test.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/format_test.py
index 41ea9b696cd..84c04c9b725 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/format_test.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/format_test.py
@@ -18,12 +18,11 @@ import re  # noqa: F401
 import json
 
 from datetime import date, datetime
-from typing import Optional, Union
+from typing import Any, ClassVar, Dict, List, Optional, Union
 from pydantic import BaseModel, StrictBytes, StrictInt, StrictStr, field_validator
 from decimal import Decimal
 from pydantic import Field
 from typing_extensions import Annotated
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -131,7 +130,7 @@ class FormatTest(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of FormatTest from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/has_only_read_only.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/has_only_read_only.py
index 9f85595a044..f669d7ea0d0 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/has_only_read_only.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/has_only_read_only.py
@@ -18,9 +18,8 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -77,7 +76,7 @@ class HasOnlyReadOnly(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of HasOnlyReadOnly from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/health_check_result.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/health_check_result.py
index 851598bedcf..c071f44fcbb 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/health_check_result.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/health_check_result.py
@@ -18,10 +18,9 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -78,7 +77,7 @@ class HealthCheckResult(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of HealthCheckResult from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/inner_dict_with_property.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/inner_dict_with_property.py
index 5e40e20bc9a..ba30e95f4ac 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/inner_dict_with_property.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/inner_dict_with_property.py
@@ -18,10 +18,9 @@ import re  # noqa: F401
 import json
 
 
-from typing import Any, Dict, Optional, Union
+from typing import Any, ClassVar, Dict, List, Optional, Union
 from pydantic import BaseModel
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -73,7 +72,7 @@ class InnerDictWithProperty(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of InnerDictWithProperty from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/int_or_string.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/int_or_string.py
index cd6f56fdeba..2a0998a5b54 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/int_or_string.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/int_or_string.py
@@ -134,7 +134,7 @@ class IntOrString(BaseModel):
         else:
             return json.dumps(self.actual_instance)
 
-    def to_dict(self) -> dict:
+    def to_dict(self) -> Dict:
         """Returns the dict representation of the actual instance"""
         if self.actual_instance is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/list_class.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/list_class.py
index a19ae927fc3..f4e8b6d17e0 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/list_class.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/list_class.py
@@ -18,10 +18,9 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -73,7 +72,7 @@ class ListClass(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of ListClass from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/map_of_array_of_model.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/map_of_array_of_model.py
index ed7287da6db..de707fe172a 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/map_of_array_of_model.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/map_of_array_of_model.py
@@ -18,11 +18,10 @@ import re  # noqa: F401
 import json
 
 
-from typing import Dict, List, Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel
 from pydantic import Field
 from petstore_api.models.tag import Tag
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -83,7 +82,7 @@ class MapOfArrayOfModel(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of MapOfArrayOfModel from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/map_test.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/map_test.py
index 60a0eacea0a..97f5ee499d3 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/map_test.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/map_test.py
@@ -18,9 +18,8 @@ import re  # noqa: F401
 import json
 
 
-from typing import Dict, Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictBool, StrictStr, field_validator
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -85,7 +84,7 @@ class MapTest(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of MapTest from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/mixed_properties_and_additional_properties_class.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/mixed_properties_and_additional_properties_class.py
index 960da22186d..c25786c1ea2 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/mixed_properties_and_additional_properties_class.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/mixed_properties_and_additional_properties_class.py
@@ -18,11 +18,10 @@ import re  # noqa: F401
 import json
 
 from datetime import datetime
-from typing import Dict, Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
 from pydantic import Field
 from petstore_api.models.animal import Animal
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -83,7 +82,7 @@ class MixedPropertiesAndAdditionalPropertiesClass(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of MixedPropertiesAndAdditionalPropertiesClass from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/model200_response.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/model200_response.py
index cf37acaae51..f18d1df6a4e 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/model200_response.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/model200_response.py
@@ -18,10 +18,9 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt, StrictStr
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -74,7 +73,7 @@ class Model200Response(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Model200Response from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/model_return.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/model_return.py
index 7bfc61b95a2..58c5b5b6ff4 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/model_return.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/model_return.py
@@ -18,10 +18,9 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -73,7 +72,7 @@ class ModelReturn(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of ModelReturn from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/name.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/name.py
index 3cf8fb2c48e..173ce56ce2a 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/name.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/name.py
@@ -18,10 +18,9 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt, StrictStr
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -80,7 +79,7 @@ class Name(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Name from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/nullable_class.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/nullable_class.py
index 97a741cec72..962c2783060 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/nullable_class.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/nullable_class.py
@@ -18,9 +18,8 @@ import re  # noqa: F401
 import json
 
 from datetime import date, datetime
-from typing import Any, Dict, List, Optional, Union
+from typing import Any, ClassVar, Dict, List, Optional, Union
 from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -147,7 +146,7 @@ class NullableClass(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of NullableClass from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/nullable_property.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/nullable_property.py
index 440830fe53e..323400687e2 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/nullable_property.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/nullable_property.py
@@ -18,11 +18,10 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt, field_validator
 from pydantic import Field
 from typing_extensions import Annotated
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -90,7 +89,7 @@ class NullableProperty(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of NullableProperty from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/number_only.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/number_only.py
index c4c5e83f8b3..cfaed7c99aa 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/number_only.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/number_only.py
@@ -18,10 +18,9 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -73,7 +72,7 @@ class NumberOnly(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of NumberOnly from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/object_to_test_additional_properties.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/object_to_test_additional_properties.py
index 0d9a69aeda1..c4a3e86a883 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/object_to_test_additional_properties.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/object_to_test_additional_properties.py
@@ -18,10 +18,9 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictBool
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -73,7 +72,7 @@ class ObjectToTestAdditionalProperties(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of ObjectToTestAdditionalProperties from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/object_with_deprecated_fields.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/object_with_deprecated_fields.py
index 37ea3c8b169..495c0b0bce8 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/object_with_deprecated_fields.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/object_with_deprecated_fields.py
@@ -18,11 +18,10 @@ import re  # noqa: F401
 import json
 
 
-from typing import List, Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
 from pydantic import Field
 from petstore_api.models.deprecated_object import DeprecatedObject
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -80,7 +79,7 @@ class ObjectWithDeprecatedFields(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of ObjectWithDeprecatedFields from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/one_of_enum_string.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/one_of_enum_string.py
index 3e9c111a4a7..614e0fd658f 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/one_of_enum_string.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/one_of_enum_string.py
@@ -126,7 +126,7 @@ class OneOfEnumString(BaseModel):
         else:
             return json.dumps(self.actual_instance)
 
-    def to_dict(self) -> dict:
+    def to_dict(self) -> Dict:
         """Returns the dict representation of the actual instance"""
         if self.actual_instance is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/order.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/order.py
index 1481a686d1a..d7a47e469f6 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/order.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/order.py
@@ -18,10 +18,9 @@ import re  # noqa: F401
 import json
 
 from datetime import datetime
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -88,7 +87,7 @@ class Order(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Order from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/outer_composite.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/outer_composite.py
index 7d76d2da971..1710f0193af 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/outer_composite.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/outer_composite.py
@@ -18,9 +18,8 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictBool, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -74,7 +73,7 @@ class OuterComposite(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of OuterComposite from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/outer_object_with_enum_property.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/outer_object_with_enum_property.py
index 476ce266f6b..623da2551e6 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/outer_object_with_enum_property.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/outer_object_with_enum_property.py
@@ -18,11 +18,10 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel
 from petstore_api.models.outer_enum import OuterEnum
 from petstore_api.models.outer_enum_integer import OuterEnumInteger
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -80,7 +79,7 @@ class OuterObjectWithEnumProperty(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of OuterObjectWithEnumProperty from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/parent.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/parent.py
index 6db76ae9dc1..b8b42da5655 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/parent.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/parent.py
@@ -18,11 +18,10 @@ import re  # noqa: F401
 import json
 
 
-from typing import Dict, Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel
 from pydantic import Field
 from petstore_api.models.inner_dict_with_property import InnerDictWithProperty
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -81,7 +80,7 @@ class Parent(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Parent from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/parent_with_optional_dict.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/parent_with_optional_dict.py
index 1dc94bddede..d2632d49c88 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/parent_with_optional_dict.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/parent_with_optional_dict.py
@@ -18,11 +18,10 @@ import re  # noqa: F401
 import json
 
 
-from typing import Dict, Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel
 from pydantic import Field
 from petstore_api.models.inner_dict_with_property import InnerDictWithProperty
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -81,7 +80,7 @@ class ParentWithOptionalDict(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of ParentWithOptionalDict from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/pet.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/pet.py
index 863a4c1c2b0..f0e5ef1c602 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/pet.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/pet.py
@@ -18,13 +18,12 @@ import re  # noqa: F401
 import json
 
 
-from typing import List, Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt, StrictStr, field_validator
 from pydantic import Field
 from typing_extensions import Annotated
 from petstore_api.models.category import Category
 from petstore_api.models.tag import Tag
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -101,7 +100,7 @@ class Pet(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Pet from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/pig.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/pig.py
index 89db853d2ec..09e131e10ea 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/pig.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/pig.py
@@ -129,7 +129,7 @@ class Pig(BaseModel):
         else:
             return json.dumps(self.actual_instance)
 
-    def to_dict(self) -> dict:
+    def to_dict(self) -> Dict:
         """Returns the dict representation of the actual instance"""
         if self.actual_instance is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/property_name_collision.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/property_name_collision.py
index d72994935fc..caeb81722b9 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/property_name_collision.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/property_name_collision.py
@@ -18,10 +18,9 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -75,7 +74,7 @@ class PropertyNameCollision(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of PropertyNameCollision from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/read_only_first.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/read_only_first.py
index 0a50bf6362d..9167f4fc1b8 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/read_only_first.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/read_only_first.py
@@ -18,9 +18,8 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -75,7 +74,7 @@ class ReadOnlyFirst(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of ReadOnlyFirst from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/second_ref.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/second_ref.py
index 9140870ee89..7d1a19ae266 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/second_ref.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/second_ref.py
@@ -18,9 +18,8 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -76,7 +75,7 @@ class SecondRef(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of SecondRef from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/self_reference_model.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/self_reference_model.py
index 2eaf5838dbb..af2d423fde6 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/self_reference_model.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/self_reference_model.py
@@ -18,9 +18,8 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -76,7 +75,7 @@ class SelfReferenceModel(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of SelfReferenceModel from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/special_model_name.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/special_model_name.py
index dcc61fa6f4c..b5e14429b89 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/special_model_name.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/special_model_name.py
@@ -18,10 +18,9 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -73,7 +72,7 @@ class SpecialModelName(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of SpecialModelName from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/special_name.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/special_name.py
index 5bff4d8a2c6..f78c8d799df 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/special_name.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/special_name.py
@@ -18,11 +18,10 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt, StrictStr, field_validator
 from pydantic import Field
 from petstore_api.models.category import Category
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -89,7 +88,7 @@ class SpecialName(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of SpecialName from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/tag.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/tag.py
index be906a578ed..d6e076c9219 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/tag.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/tag.py
@@ -18,9 +18,8 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -73,7 +72,7 @@ class Tag(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Tag from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/test_inline_freeform_additional_properties_request.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/test_inline_freeform_additional_properties_request.py
index 81ae9056508..c07b9528a31 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/test_inline_freeform_additional_properties_request.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/test_inline_freeform_additional_properties_request.py
@@ -18,10 +18,9 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -81,7 +80,7 @@ class TestInlineFreeformAdditionalPropertiesRequest(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of TestInlineFreeformAdditionalPropertiesRequest from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/tiger.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/tiger.py
index c47e200a43d..58c6279fe4b 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/tiger.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/tiger.py
@@ -18,9 +18,8 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -72,7 +71,7 @@ class Tiger(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Tiger from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/unnamed_dict_with_additional_model_list_properties.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/unnamed_dict_with_additional_model_list_properties.py
index abd2f06aa8f..c01f3cb9e95 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/unnamed_dict_with_additional_model_list_properties.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/unnamed_dict_with_additional_model_list_properties.py
@@ -18,11 +18,10 @@ import re  # noqa: F401
 import json
 
 
-from typing import Dict, List, Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel
 from pydantic import Field
 from petstore_api.models.creature_info import CreatureInfo
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -83,7 +82,7 @@ class UnnamedDictWithAdditionalModelListProperties(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of UnnamedDictWithAdditionalModelListProperties from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/unnamed_dict_with_additional_string_list_properties.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/unnamed_dict_with_additional_string_list_properties.py
index 5fad957d5bf..bacc03f217c 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/unnamed_dict_with_additional_string_list_properties.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/unnamed_dict_with_additional_string_list_properties.py
@@ -18,10 +18,9 @@ import re  # noqa: F401
 import json
 
 
-from typing import Dict, List, Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -73,7 +72,7 @@ class UnnamedDictWithAdditionalStringListProperties(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of UnnamedDictWithAdditionalStringListProperties from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/user.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/user.py
index af930f09dd5..862ff31b351 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/user.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/user.py
@@ -18,10 +18,9 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt, StrictStr
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -80,7 +79,7 @@ class User(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of User from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/with_nested_one_of.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/with_nested_one_of.py
index 72130e4dcf3..406256f25ab 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/with_nested_one_of.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/models/with_nested_one_of.py
@@ -18,11 +18,10 @@ import re  # noqa: F401
 import json
 
 
-from typing import Optional
+from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt
 from petstore_api.models.one_of_enum_string import OneOfEnumString
 from petstore_api.models.pig import Pig
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -82,7 +81,7 @@ class WithNestedOneOf(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of WithNestedOneOf from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/rest.py b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/rest.py
index 14c85de72ce..e2c92eda81b 100644
--- a/samples/openapi3/client/petstore/python-aiohttp/petstore_api/rest.py
+++ b/samples/openapi3/client/petstore/python-aiohttp/petstore_api/rest.py
@@ -14,7 +14,6 @@
 
 import io
 import json
-import logging
 import re
 import ssl
 
@@ -33,9 +32,9 @@ class RESTResponse(io.IOBase):
         self.reason = resp.reason
         self.data = None
 
-    async read(self, response):
+    async def read(self):
         if self.data is None:
-            self.data = await response.read()
+            self.data = await self.response.read()
         return self.data
 
     def getheaders(self):
diff --git a/samples/openapi3/client/petstore/python-pydantic-v1-aiohttp/petstore_api/rest.py b/samples/openapi3/client/petstore/python-pydantic-v1-aiohttp/petstore_api/rest.py
index 14c85de72ce..e2c92eda81b 100644
--- a/samples/openapi3/client/petstore/python-pydantic-v1-aiohttp/petstore_api/rest.py
+++ b/samples/openapi3/client/petstore/python-pydantic-v1-aiohttp/petstore_api/rest.py
@@ -14,7 +14,6 @@
 
 import io
 import json
-import logging
 import re
 import ssl
 
@@ -33,9 +32,9 @@ class RESTResponse(io.IOBase):
         self.reason = resp.reason
         self.data = None
 
-    async read(self, response):
+    async def read(self):
         if self.data is None:
-            self.data = await response.read()
+            self.data = await self.response.read()
         return self.data
 
     def getheaders(self):
diff --git a/samples/openapi3/client/petstore/python/petstore_api/api/another_fake_api.py b/samples/openapi3/client/petstore/python/petstore_api/api/another_fake_api.py
index bbd7685d14d..696ccc84a89 100755
--- a/samples/openapi3/client/petstore/python/petstore_api/api/another_fake_api.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/api/another_fake_api.py
@@ -12,12 +12,16 @@
 """  # noqa: E501
 
 
-import re  # noqa: F401
 import io
 import warnings
 
-from pydantic import validate_call, ValidationError, Field
-from typing import Dict, List, Optional, Tuple, Union, Any, Annotated
+from pydantic import validate_call, Field
+from typing import Dict, List, Optional, Tuple, Union, Any
+
+try:
+    from typing import Annotated
+except ImportError:
+    from typing_extensions import Annotated
 
 from pydantic import Field
 from typing_extensions import Annotated
@@ -25,10 +29,6 @@ from petstore_api.models.client import Client
 
 from petstore_api.api_client import ApiClient
 from petstore_api.api_response import ApiResponse
-from petstore_api.exceptions import (  # noqa: F401
-    ApiTypeError,
-    ApiValueError
-)
 from petstore_api.rest import RESTResponseType
 
 from multiprocessing.pool import ApplyResult
@@ -46,6 +46,7 @@ class AnotherFakeApi:
             api_client = ApiClient.get_default()
         self.api_client = api_client
 
+
     @validate_call
     def call_123_test_special_tags(
         self,
@@ -68,7 +69,6 @@ class AnotherFakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> Client:
-
         """To test special tags
         To test special tags and operation ID starting with number
                 This method makes a synchronous HTTP request by default.
@@ -78,18 +78,24 @@ class AnotherFakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Client]
         """
 
         param = self._call_123_test_special_tags_serialize(
@@ -104,7 +110,6 @@ class AnotherFakeApi:
             '200': "Client"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -114,7 +119,7 @@ class AnotherFakeApi:
 
 
     @validate_call
-    def call_123_test_special_tags_without_preload_content(
+    def call_123_test_special_tags_with_http_info(
         self,
         client: Annotated[Client, Field(description="client model")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -134,8 +139,7 @@ class AnotherFakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[Client]:
         """To test special tags
         To test special tags and operation ID starting with number
                 This method makes a synchronous HTTP request by default.
@@ -145,18 +149,24 @@ class AnotherFakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Client]
         """
 
         param = self._call_123_test_special_tags_serialize(
@@ -171,12 +181,16 @@ class AnotherFakeApi:
             '200': "Client"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def call_123_test_special_tags_with_async(
+    def call_123_test_special_tags_without_preload_content(
         self,
         client: Annotated[Client, Field(description="client model")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -196,8 +210,7 @@ class AnotherFakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """To test special tags
         To test special tags and operation ID starting with number
                 This method makes a synchronous HTTP request by default.
@@ -207,18 +220,24 @@ class AnotherFakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Client]
         """
 
         param = self._call_123_test_special_tags_serialize(
@@ -233,18 +252,12 @@ class AnotherFakeApi:
             '200': "Client"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def call_123_test_special_tags_with_http_info_async(
+    def call_123_test_special_tags_with_async(
         self,
         client: Annotated[Client, Field(description="client model")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -265,7 +278,6 @@ class AnotherFakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """To test special tags
         To test special tags and operation ID starting with number
                 This method makes a synchronous HTTP request by default.
@@ -275,18 +287,24 @@ class AnotherFakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Client]
         """
 
         param = self._call_123_test_special_tags_serialize(
@@ -301,20 +319,18 @@ class AnotherFakeApi:
             '200': "Client"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def call_123_test_special_tags_with_http_info(
+    def call_123_test_special_tags_with_http_info_async(
         self,
         client: Annotated[Client, Field(description="client model")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -334,8 +350,7 @@ class AnotherFakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> Client:
-
+    ) -> ApplyResult:
         """To test special tags
         To test special tags and operation ID starting with number
                 This method makes a synchronous HTTP request by default.
@@ -345,18 +360,24 @@ class AnotherFakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Client]
         """
 
         param = self._call_123_test_special_tags_serialize(
@@ -371,13 +392,14 @@ class AnotherFakeApi:
             '200': "Client"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _call_123_test_special_tags_serialize(
@@ -413,6 +435,7 @@ class AnotherFakeApi:
         if client is not None:
             _body_params = client
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/json'])  # noqa: E501
diff --git a/samples/openapi3/client/petstore/python/petstore_api/api/default_api.py b/samples/openapi3/client/petstore/python/petstore_api/api/default_api.py
index 01e0d58eb4e..d8f308e8427 100755
--- a/samples/openapi3/client/petstore/python/petstore_api/api/default_api.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/api/default_api.py
@@ -12,21 +12,21 @@
 """  # noqa: E501
 
 
-import re  # noqa: F401
 import io
 import warnings
 
-from pydantic import validate_call, ValidationError, Field
-from typing import Dict, List, Optional, Tuple, Union, Any, Annotated
+from pydantic import validate_call, Field
+from typing import Dict, List, Optional, Tuple, Union, Any
+
+try:
+    from typing import Annotated
+except ImportError:
+    from typing_extensions import Annotated
 
 from petstore_api.models.foo_get_default_response import FooGetDefaultResponse
 
 from petstore_api.api_client import ApiClient
 from petstore_api.api_response import ApiResponse
-from petstore_api.exceptions import (  # noqa: F401
-    ApiTypeError,
-    ApiValueError
-)
 from petstore_api.rest import RESTResponseType
 
 from multiprocessing.pool import ApplyResult
@@ -44,6 +44,7 @@ class DefaultApi:
             api_client = ApiClient.get_default()
         self.api_client = api_client
 
+
     @validate_call
     def foo_get(
         self,
@@ -65,25 +66,30 @@ class DefaultApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> FooGetDefaultResponse:
-
         """foo_get
                 This method makes a synchronous HTTP request by default.
         :param _request_timeout: timeout setting for this request. If one
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[FooGetDefaultResponse]
         """
 
         param = self._foo_get_serialize(
@@ -97,7 +103,6 @@ class DefaultApi:
             
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -107,7 +112,7 @@ class DefaultApi:
 
 
     @validate_call
-    def foo_get_without_preload_content(
+    def foo_get_with_http_info(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -126,26 +131,31 @@ class DefaultApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[FooGetDefaultResponse]:
         """foo_get
                 This method makes a synchronous HTTP request by default.
         :param _request_timeout: timeout setting for this request. If one
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[FooGetDefaultResponse]
         """
 
         param = self._foo_get_serialize(
@@ -159,12 +169,16 @@ class DefaultApi:
             
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def foo_get_with_async(
+    def foo_get_without_preload_content(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -183,26 +197,31 @@ class DefaultApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """foo_get
                 This method makes a synchronous HTTP request by default.
         :param _request_timeout: timeout setting for this request. If one
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[FooGetDefaultResponse]
         """
 
         param = self._foo_get_serialize(
@@ -216,18 +235,12 @@ class DefaultApi:
             
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def foo_get_with_http_info_async(
+    def foo_get_with_async(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -247,25 +260,30 @@ class DefaultApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """foo_get
                 This method makes a synchronous HTTP request by default.
         :param _request_timeout: timeout setting for this request. If one
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[FooGetDefaultResponse]
         """
 
         param = self._foo_get_serialize(
@@ -279,20 +297,18 @@ class DefaultApi:
             
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def foo_get_with_http_info(
+    def foo_get_with_http_info_async(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -311,26 +327,31 @@ class DefaultApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> FooGetDefaultResponse:
-
+    ) -> ApplyResult:
         """foo_get
                 This method makes a synchronous HTTP request by default.
         :param _request_timeout: timeout setting for this request. If one
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[FooGetDefaultResponse]
         """
 
         param = self._foo_get_serialize(
@@ -344,13 +365,14 @@ class DefaultApi:
             
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _foo_get_serialize(
@@ -383,6 +405,7 @@ class DefaultApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/json'])  # noqa: E501
diff --git a/samples/openapi3/client/petstore/python/petstore_api/api/fake_api.py b/samples/openapi3/client/petstore/python/petstore_api/api/fake_api.py
index d5d748b9af5..ac4f75a102d 100755
--- a/samples/openapi3/client/petstore/python/petstore_api/api/fake_api.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/api/fake_api.py
@@ -12,12 +12,16 @@
 """  # noqa: E501
 
 
-import re  # noqa: F401
 import io
 import warnings
 
-from pydantic import validate_call, ValidationError, Field
-from typing import Dict, List, Optional, Tuple, Union, Any, Annotated
+from pydantic import validate_call, Field
+from typing import Dict, List, Optional, Tuple, Union, Any
+
+try:
+    from typing import Annotated
+except ImportError:
+    from typing_extensions import Annotated
 
 from pydantic import Field
 from typing_extensions import Annotated
@@ -40,10 +44,6 @@ from petstore_api.models.user import User
 
 from petstore_api.api_client import ApiClient
 from petstore_api.api_response import ApiResponse
-from petstore_api.exceptions import (  # noqa: F401
-    ApiTypeError,
-    ApiValueError
-)
 from petstore_api.rest import RESTResponseType
 
 from multiprocessing.pool import ApplyResult
@@ -61,6 +61,7 @@ class FakeApi:
             api_client = ApiClient.get_default()
         self.api_client = api_client
 
+
     @validate_call
     def fake_any_type_request_body(
         self,
@@ -83,7 +84,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """test any type request body
                 This method makes a synchronous HTTP request by default.
         :param body:
@@ -92,18 +92,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._fake_any_type_request_body_serialize(
@@ -117,7 +123,6 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -127,7 +132,7 @@ class FakeApi:
 
 
     @validate_call
-    def fake_any_type_request_body_without_preload_content(
+    def fake_any_type_request_body_with_http_info(
         self,
         body: Optional[Dict[str, Any]] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -147,8 +152,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """test any type request body
                 This method makes a synchronous HTTP request by default.
         :param body:
@@ -157,18 +161,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._fake_any_type_request_body_serialize(
@@ -182,12 +192,16 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def fake_any_type_request_body_with_async(
+    def fake_any_type_request_body_without_preload_content(
         self,
         body: Optional[Dict[str, Any]] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -207,8 +221,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """test any type request body
                 This method makes a synchronous HTTP request by default.
         :param body:
@@ -217,18 +230,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._fake_any_type_request_body_serialize(
@@ -242,18 +261,12 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def fake_any_type_request_body_with_http_info_async(
+    def fake_any_type_request_body_with_async(
         self,
         body: Optional[Dict[str, Any]] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -274,7 +287,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """test any type request body
                 This method makes a synchronous HTTP request by default.
         :param body:
@@ -283,18 +295,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._fake_any_type_request_body_serialize(
@@ -308,20 +326,18 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def fake_any_type_request_body_with_http_info(
+    def fake_any_type_request_body_with_http_info_async(
         self,
         body: Optional[Dict[str, Any]] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -341,8 +357,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> ApplyResult:
         """test any type request body
                 This method makes a synchronous HTTP request by default.
         :param body:
@@ -351,18 +366,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._fake_any_type_request_body_serialize(
@@ -376,13 +397,14 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _fake_any_type_request_body_serialize(
@@ -419,6 +441,7 @@ class FakeApi:
             _body_params = body
 
 
+
         # set the HTTP header `Content-Type`
         if _content_type:
             _header_params['Content-Type'] = _content_type
@@ -447,6 +470,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     def fake_enum_ref_query_parameter(
         self,
@@ -469,7 +493,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """test enum reference query parameter
                 This method makes a synchronous HTTP request by default.
         :param enum_ref: enum reference
@@ -478,18 +501,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._fake_enum_ref_query_parameter_serialize(
@@ -503,7 +532,6 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -513,7 +541,7 @@ class FakeApi:
 
 
     @validate_call
-    def fake_enum_ref_query_parameter_without_preload_content(
+    def fake_enum_ref_query_parameter_with_http_info(
         self,
         enum_ref: Annotated[Optional[EnumClass], Field(description="enum reference")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -533,8 +561,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """test enum reference query parameter
                 This method makes a synchronous HTTP request by default.
         :param enum_ref: enum reference
@@ -543,18 +570,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._fake_enum_ref_query_parameter_serialize(
@@ -568,12 +601,16 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def fake_enum_ref_query_parameter_with_async(
+    def fake_enum_ref_query_parameter_without_preload_content(
         self,
         enum_ref: Annotated[Optional[EnumClass], Field(description="enum reference")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -593,8 +630,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """test enum reference query parameter
                 This method makes a synchronous HTTP request by default.
         :param enum_ref: enum reference
@@ -603,18 +639,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._fake_enum_ref_query_parameter_serialize(
@@ -628,18 +670,12 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def fake_enum_ref_query_parameter_with_http_info_async(
+    def fake_enum_ref_query_parameter_with_async(
         self,
         enum_ref: Annotated[Optional[EnumClass], Field(description="enum reference")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -660,7 +696,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """test enum reference query parameter
                 This method makes a synchronous HTTP request by default.
         :param enum_ref: enum reference
@@ -669,18 +704,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._fake_enum_ref_query_parameter_serialize(
@@ -694,20 +735,18 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def fake_enum_ref_query_parameter_with_http_info(
+    def fake_enum_ref_query_parameter_with_http_info_async(
         self,
         enum_ref: Annotated[Optional[EnumClass], Field(description="enum reference")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -727,8 +766,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> ApplyResult:
         """test enum reference query parameter
                 This method makes a synchronous HTTP request by default.
         :param enum_ref: enum reference
@@ -737,18 +775,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._fake_enum_ref_query_parameter_serialize(
@@ -762,13 +806,14 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _fake_enum_ref_query_parameter_serialize(
@@ -808,6 +853,7 @@ class FakeApi:
 
 
 
+
         # authentication setting
         _auth_settings: List[str] = []  # noqa: E501
 
@@ -828,6 +874,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     def fake_health_get(
         self,
@@ -849,25 +896,30 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> HealthCheckResult:
-
         """Health check endpoint
                 This method makes a synchronous HTTP request by default.
         :param _request_timeout: timeout setting for this request. If one
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[HealthCheckResult]
         """
 
         param = self._fake_health_get_serialize(
@@ -881,7 +933,6 @@ class FakeApi:
             '200': "HealthCheckResult"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -891,7 +942,7 @@ class FakeApi:
 
 
     @validate_call
-    def fake_health_get_without_preload_content(
+    def fake_health_get_with_http_info(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -910,26 +961,31 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[HealthCheckResult]:
         """Health check endpoint
                 This method makes a synchronous HTTP request by default.
         :param _request_timeout: timeout setting for this request. If one
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[HealthCheckResult]
         """
 
         param = self._fake_health_get_serialize(
@@ -943,12 +999,16 @@ class FakeApi:
             '200': "HealthCheckResult"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def fake_health_get_with_async(
+    def fake_health_get_without_preload_content(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -967,26 +1027,31 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Health check endpoint
                 This method makes a synchronous HTTP request by default.
         :param _request_timeout: timeout setting for this request. If one
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[HealthCheckResult]
         """
 
         param = self._fake_health_get_serialize(
@@ -1000,18 +1065,12 @@ class FakeApi:
             '200': "HealthCheckResult"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def fake_health_get_with_http_info_async(
+    def fake_health_get_with_async(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -1031,25 +1090,30 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Health check endpoint
                 This method makes a synchronous HTTP request by default.
         :param _request_timeout: timeout setting for this request. If one
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[HealthCheckResult]
         """
 
         param = self._fake_health_get_serialize(
@@ -1063,20 +1127,18 @@ class FakeApi:
             '200': "HealthCheckResult"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def fake_health_get_with_http_info(
+    def fake_health_get_with_http_info_async(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -1095,26 +1157,31 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> HealthCheckResult:
-
+    ) -> ApplyResult:
         """Health check endpoint
                 This method makes a synchronous HTTP request by default.
         :param _request_timeout: timeout setting for this request. If one
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[HealthCheckResult]
         """
 
         param = self._fake_health_get_serialize(
@@ -1128,13 +1195,14 @@ class FakeApi:
             '200': "HealthCheckResult"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _fake_health_get_serialize(
@@ -1167,6 +1235,7 @@ class FakeApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/json'])  # noqa: E501
@@ -1192,6 +1261,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     def fake_http_signature_test(
         self,
@@ -1216,7 +1286,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """test http signature authentication
                 This method makes a synchronous HTTP request by default.
         :param pet: Pet object that needs to be added to the store (required)
@@ -1229,18 +1298,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._fake_http_signature_test_serialize(
@@ -1256,7 +1331,6 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -1266,7 +1340,7 @@ class FakeApi:
 
 
     @validate_call
-    def fake_http_signature_test_without_preload_content(
+    def fake_http_signature_test_with_http_info(
         self,
         pet: Annotated[Pet, Field(description="Pet object that needs to be added to the store")],
         query_1: Annotated[Optional[StrictStr], Field(description="query parameter")] = None,
@@ -1288,8 +1362,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """test http signature authentication
                 This method makes a synchronous HTTP request by default.
         :param pet: Pet object that needs to be added to the store (required)
@@ -1302,18 +1375,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._fake_http_signature_test_serialize(
@@ -1329,12 +1408,16 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def fake_http_signature_test_with_async(
+    def fake_http_signature_test_without_preload_content(
         self,
         pet: Annotated[Pet, Field(description="Pet object that needs to be added to the store")],
         query_1: Annotated[Optional[StrictStr], Field(description="query parameter")] = None,
@@ -1356,8 +1439,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """test http signature authentication
                 This method makes a synchronous HTTP request by default.
         :param pet: Pet object that needs to be added to the store (required)
@@ -1370,18 +1452,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._fake_http_signature_test_serialize(
@@ -1397,18 +1485,12 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def fake_http_signature_test_with_http_info_async(
+    def fake_http_signature_test_with_async(
         self,
         pet: Annotated[Pet, Field(description="Pet object that needs to be added to the store")],
         query_1: Annotated[Optional[StrictStr], Field(description="query parameter")] = None,
@@ -1431,7 +1513,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """test http signature authentication
                 This method makes a synchronous HTTP request by default.
         :param pet: Pet object that needs to be added to the store (required)
@@ -1444,18 +1525,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._fake_http_signature_test_serialize(
@@ -1471,20 +1558,18 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def fake_http_signature_test_with_http_info(
+    def fake_http_signature_test_with_http_info_async(
         self,
         pet: Annotated[Pet, Field(description="Pet object that needs to be added to the store")],
         query_1: Annotated[Optional[StrictStr], Field(description="query parameter")] = None,
@@ -1506,8 +1591,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> ApplyResult:
         """test http signature authentication
                 This method makes a synchronous HTTP request by default.
         :param pet: Pet object that needs to be added to the store (required)
@@ -1520,18 +1604,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._fake_http_signature_test_serialize(
@@ -1547,13 +1637,14 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _fake_http_signature_test_serialize(
@@ -1598,6 +1689,7 @@ class FakeApi:
             _body_params = pet
 
 
+
         # set the HTTP header `Content-Type`
         if _content_type:
             _header_params['Content-Type'] = _content_type
@@ -1626,6 +1718,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     def fake_outer_boolean_serialize(
         self,
@@ -1648,7 +1741,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> bool:
-
         """fake_outer_boolean_serialize
         Test serialization of outer boolean types
                 This method makes a synchronous HTTP request by default.
@@ -1658,18 +1750,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[bool]
         """
 
         param = self._fake_outer_boolean_serialize_serialize(
@@ -1684,7 +1782,6 @@ class FakeApi:
             '200': "bool"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -1694,7 +1791,7 @@ class FakeApi:
 
 
     @validate_call
-    def fake_outer_boolean_serialize_without_preload_content(
+    def fake_outer_boolean_serialize_with_http_info(
         self,
         body: Annotated[Optional[StrictBool], Field(description="Input boolean as post body")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1714,8 +1811,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[bool]:
         """fake_outer_boolean_serialize
         Test serialization of outer boolean types
                 This method makes a synchronous HTTP request by default.
@@ -1725,18 +1821,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[bool]
         """
 
         param = self._fake_outer_boolean_serialize_serialize(
@@ -1751,12 +1853,16 @@ class FakeApi:
             '200': "bool"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def fake_outer_boolean_serialize_with_async(
+    def fake_outer_boolean_serialize_without_preload_content(
         self,
         body: Annotated[Optional[StrictBool], Field(description="Input boolean as post body")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1776,8 +1882,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """fake_outer_boolean_serialize
         Test serialization of outer boolean types
                 This method makes a synchronous HTTP request by default.
@@ -1787,18 +1892,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[bool]
         """
 
         param = self._fake_outer_boolean_serialize_serialize(
@@ -1813,18 +1924,12 @@ class FakeApi:
             '200': "bool"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def fake_outer_boolean_serialize_with_http_info_async(
+    def fake_outer_boolean_serialize_with_async(
         self,
         body: Annotated[Optional[StrictBool], Field(description="Input boolean as post body")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1845,7 +1950,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """fake_outer_boolean_serialize
         Test serialization of outer boolean types
                 This method makes a synchronous HTTP request by default.
@@ -1855,18 +1959,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[bool]
         """
 
         param = self._fake_outer_boolean_serialize_serialize(
@@ -1881,20 +1991,18 @@ class FakeApi:
             '200': "bool"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def fake_outer_boolean_serialize_with_http_info(
+    def fake_outer_boolean_serialize_with_http_info_async(
         self,
         body: Annotated[Optional[StrictBool], Field(description="Input boolean as post body")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1914,8 +2022,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> bool:
-
+    ) -> ApplyResult:
         """fake_outer_boolean_serialize
         Test serialization of outer boolean types
                 This method makes a synchronous HTTP request by default.
@@ -1925,18 +2032,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[bool]
         """
 
         param = self._fake_outer_boolean_serialize_serialize(
@@ -1951,13 +2064,14 @@ class FakeApi:
             '200': "bool"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _fake_outer_boolean_serialize_serialize(
@@ -1993,6 +2107,7 @@ class FakeApi:
         if body is not None:
             _body_params = body
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['*/*'])  # noqa: E501
@@ -2025,6 +2140,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     def fake_outer_composite_serialize(
         self,
@@ -2047,7 +2163,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> OuterComposite:
-
         """fake_outer_composite_serialize
         Test serialization of object with outer number type
                 This method makes a synchronous HTTP request by default.
@@ -2057,18 +2172,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[OuterComposite]
         """
 
         param = self._fake_outer_composite_serialize_serialize(
@@ -2083,7 +2204,6 @@ class FakeApi:
             '200': "OuterComposite"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -2093,7 +2213,7 @@ class FakeApi:
 
 
     @validate_call
-    def fake_outer_composite_serialize_without_preload_content(
+    def fake_outer_composite_serialize_with_http_info(
         self,
         outer_composite: Annotated[Optional[OuterComposite], Field(description="Input composite as post body")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2113,8 +2233,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[OuterComposite]:
         """fake_outer_composite_serialize
         Test serialization of object with outer number type
                 This method makes a synchronous HTTP request by default.
@@ -2124,18 +2243,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[OuterComposite]
         """
 
         param = self._fake_outer_composite_serialize_serialize(
@@ -2150,12 +2275,16 @@ class FakeApi:
             '200': "OuterComposite"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def fake_outer_composite_serialize_with_async(
+    def fake_outer_composite_serialize_without_preload_content(
         self,
         outer_composite: Annotated[Optional[OuterComposite], Field(description="Input composite as post body")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2175,8 +2304,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """fake_outer_composite_serialize
         Test serialization of object with outer number type
                 This method makes a synchronous HTTP request by default.
@@ -2186,18 +2314,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[OuterComposite]
         """
 
         param = self._fake_outer_composite_serialize_serialize(
@@ -2212,18 +2346,12 @@ class FakeApi:
             '200': "OuterComposite"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def fake_outer_composite_serialize_with_http_info_async(
+    def fake_outer_composite_serialize_with_async(
         self,
         outer_composite: Annotated[Optional[OuterComposite], Field(description="Input composite as post body")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2244,7 +2372,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """fake_outer_composite_serialize
         Test serialization of object with outer number type
                 This method makes a synchronous HTTP request by default.
@@ -2254,18 +2381,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[OuterComposite]
         """
 
         param = self._fake_outer_composite_serialize_serialize(
@@ -2280,20 +2413,18 @@ class FakeApi:
             '200': "OuterComposite"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def fake_outer_composite_serialize_with_http_info(
+    def fake_outer_composite_serialize_with_http_info_async(
         self,
         outer_composite: Annotated[Optional[OuterComposite], Field(description="Input composite as post body")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2313,8 +2444,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> OuterComposite:
-
+    ) -> ApplyResult:
         """fake_outer_composite_serialize
         Test serialization of object with outer number type
                 This method makes a synchronous HTTP request by default.
@@ -2324,18 +2454,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[OuterComposite]
         """
 
         param = self._fake_outer_composite_serialize_serialize(
@@ -2350,13 +2486,14 @@ class FakeApi:
             '200': "OuterComposite"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _fake_outer_composite_serialize_serialize(
@@ -2392,6 +2529,7 @@ class FakeApi:
         if outer_composite is not None:
             _body_params = outer_composite
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['*/*'])  # noqa: E501
@@ -2424,6 +2562,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     def fake_outer_number_serialize(
         self,
@@ -2446,7 +2585,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> float:
-
         """fake_outer_number_serialize
         Test serialization of outer number types
                 This method makes a synchronous HTTP request by default.
@@ -2456,18 +2594,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[float]
         """
 
         param = self._fake_outer_number_serialize_serialize(
@@ -2482,7 +2626,6 @@ class FakeApi:
             '200': "float"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -2492,7 +2635,7 @@ class FakeApi:
 
 
     @validate_call
-    def fake_outer_number_serialize_without_preload_content(
+    def fake_outer_number_serialize_with_http_info(
         self,
         body: Annotated[Optional[StrictFloat], Field(description="Input number as post body")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2512,8 +2655,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[float]:
         """fake_outer_number_serialize
         Test serialization of outer number types
                 This method makes a synchronous HTTP request by default.
@@ -2523,18 +2665,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[float]
         """
 
         param = self._fake_outer_number_serialize_serialize(
@@ -2549,12 +2697,16 @@ class FakeApi:
             '200': "float"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def fake_outer_number_serialize_with_async(
+    def fake_outer_number_serialize_without_preload_content(
         self,
         body: Annotated[Optional[StrictFloat], Field(description="Input number as post body")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2574,8 +2726,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """fake_outer_number_serialize
         Test serialization of outer number types
                 This method makes a synchronous HTTP request by default.
@@ -2585,18 +2736,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[float]
         """
 
         param = self._fake_outer_number_serialize_serialize(
@@ -2611,18 +2768,12 @@ class FakeApi:
             '200': "float"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def fake_outer_number_serialize_with_http_info_async(
+    def fake_outer_number_serialize_with_async(
         self,
         body: Annotated[Optional[StrictFloat], Field(description="Input number as post body")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2643,7 +2794,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """fake_outer_number_serialize
         Test serialization of outer number types
                 This method makes a synchronous HTTP request by default.
@@ -2653,18 +2803,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[float]
         """
 
         param = self._fake_outer_number_serialize_serialize(
@@ -2679,20 +2835,18 @@ class FakeApi:
             '200': "float"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def fake_outer_number_serialize_with_http_info(
+    def fake_outer_number_serialize_with_http_info_async(
         self,
         body: Annotated[Optional[StrictFloat], Field(description="Input number as post body")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2712,8 +2866,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> float:
-
+    ) -> ApplyResult:
         """fake_outer_number_serialize
         Test serialization of outer number types
                 This method makes a synchronous HTTP request by default.
@@ -2723,18 +2876,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[float]
         """
 
         param = self._fake_outer_number_serialize_serialize(
@@ -2749,13 +2908,14 @@ class FakeApi:
             '200': "float"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _fake_outer_number_serialize_serialize(
@@ -2791,6 +2951,7 @@ class FakeApi:
         if body is not None:
             _body_params = body
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['*/*'])  # noqa: E501
@@ -2823,6 +2984,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     def fake_outer_string_serialize(
         self,
@@ -2845,7 +3007,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """fake_outer_string_serialize
         Test serialization of outer string types
                 This method makes a synchronous HTTP request by default.
@@ -2855,18 +3016,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._fake_outer_string_serialize_serialize(
@@ -2881,7 +3048,6 @@ class FakeApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -2891,7 +3057,7 @@ class FakeApi:
 
 
     @validate_call
-    def fake_outer_string_serialize_without_preload_content(
+    def fake_outer_string_serialize_with_http_info(
         self,
         body: Annotated[Optional[StrictStr], Field(description="Input string as post body")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2911,8 +3077,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """fake_outer_string_serialize
         Test serialization of outer string types
                 This method makes a synchronous HTTP request by default.
@@ -2922,18 +3087,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._fake_outer_string_serialize_serialize(
@@ -2948,12 +3119,16 @@ class FakeApi:
             '200': "str"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def fake_outer_string_serialize_with_async(
+    def fake_outer_string_serialize_without_preload_content(
         self,
         body: Annotated[Optional[StrictStr], Field(description="Input string as post body")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2973,8 +3148,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """fake_outer_string_serialize
         Test serialization of outer string types
                 This method makes a synchronous HTTP request by default.
@@ -2984,18 +3158,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._fake_outer_string_serialize_serialize(
@@ -3010,18 +3190,12 @@ class FakeApi:
             '200': "str"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def fake_outer_string_serialize_with_http_info_async(
+    def fake_outer_string_serialize_with_async(
         self,
         body: Annotated[Optional[StrictStr], Field(description="Input string as post body")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -3042,7 +3216,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """fake_outer_string_serialize
         Test serialization of outer string types
                 This method makes a synchronous HTTP request by default.
@@ -3052,18 +3225,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._fake_outer_string_serialize_serialize(
@@ -3078,20 +3257,18 @@ class FakeApi:
             '200': "str"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def fake_outer_string_serialize_with_http_info(
+    def fake_outer_string_serialize_with_http_info_async(
         self,
         body: Annotated[Optional[StrictStr], Field(description="Input string as post body")] = None,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -3111,8 +3288,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """fake_outer_string_serialize
         Test serialization of outer string types
                 This method makes a synchronous HTTP request by default.
@@ -3122,18 +3298,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._fake_outer_string_serialize_serialize(
@@ -3148,13 +3330,14 @@ class FakeApi:
             '200': "str"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _fake_outer_string_serialize_serialize(
@@ -3190,6 +3373,7 @@ class FakeApi:
         if body is not None:
             _body_params = body
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['*/*'])  # noqa: E501
@@ -3222,6 +3406,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     def fake_property_enum_integer_serialize(
         self,
@@ -3244,7 +3429,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> OuterObjectWithEnumProperty:
-
         """fake_property_enum_integer_serialize
         Test serialization of enum (int) properties with examples
                 This method makes a synchronous HTTP request by default.
@@ -3254,18 +3438,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[OuterObjectWithEnumProperty]
         """
 
         param = self._fake_property_enum_integer_serialize_serialize(
@@ -3280,7 +3470,6 @@ class FakeApi:
             '200': "OuterObjectWithEnumProperty"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -3290,7 +3479,7 @@ class FakeApi:
 
 
     @validate_call
-    def fake_property_enum_integer_serialize_without_preload_content(
+    def fake_property_enum_integer_serialize_with_http_info(
         self,
         outer_object_with_enum_property: Annotated[OuterObjectWithEnumProperty, Field(description="Input enum (int) as post body")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -3310,8 +3499,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[OuterObjectWithEnumProperty]:
         """fake_property_enum_integer_serialize
         Test serialization of enum (int) properties with examples
                 This method makes a synchronous HTTP request by default.
@@ -3321,18 +3509,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[OuterObjectWithEnumProperty]
         """
 
         param = self._fake_property_enum_integer_serialize_serialize(
@@ -3347,12 +3541,16 @@ class FakeApi:
             '200': "OuterObjectWithEnumProperty"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def fake_property_enum_integer_serialize_with_async(
+    def fake_property_enum_integer_serialize_without_preload_content(
         self,
         outer_object_with_enum_property: Annotated[OuterObjectWithEnumProperty, Field(description="Input enum (int) as post body")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -3372,8 +3570,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """fake_property_enum_integer_serialize
         Test serialization of enum (int) properties with examples
                 This method makes a synchronous HTTP request by default.
@@ -3383,18 +3580,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[OuterObjectWithEnumProperty]
         """
 
         param = self._fake_property_enum_integer_serialize_serialize(
@@ -3409,18 +3612,12 @@ class FakeApi:
             '200': "OuterObjectWithEnumProperty"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def fake_property_enum_integer_serialize_with_http_info_async(
+    def fake_property_enum_integer_serialize_with_async(
         self,
         outer_object_with_enum_property: Annotated[OuterObjectWithEnumProperty, Field(description="Input enum (int) as post body")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -3441,7 +3638,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """fake_property_enum_integer_serialize
         Test serialization of enum (int) properties with examples
                 This method makes a synchronous HTTP request by default.
@@ -3451,18 +3647,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[OuterObjectWithEnumProperty]
         """
 
         param = self._fake_property_enum_integer_serialize_serialize(
@@ -3477,20 +3679,18 @@ class FakeApi:
             '200': "OuterObjectWithEnumProperty"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def fake_property_enum_integer_serialize_with_http_info(
+    def fake_property_enum_integer_serialize_with_http_info_async(
         self,
         outer_object_with_enum_property: Annotated[OuterObjectWithEnumProperty, Field(description="Input enum (int) as post body")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -3510,8 +3710,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> OuterObjectWithEnumProperty:
-
+    ) -> ApplyResult:
         """fake_property_enum_integer_serialize
         Test serialization of enum (int) properties with examples
                 This method makes a synchronous HTTP request by default.
@@ -3521,18 +3720,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[OuterObjectWithEnumProperty]
         """
 
         param = self._fake_property_enum_integer_serialize_serialize(
@@ -3547,13 +3752,14 @@ class FakeApi:
             '200': "OuterObjectWithEnumProperty"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _fake_property_enum_integer_serialize_serialize(
@@ -3589,6 +3795,7 @@ class FakeApi:
         if outer_object_with_enum_property is not None:
             _body_params = outer_object_with_enum_property
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['*/*'])  # noqa: E501
@@ -3621,6 +3828,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     def fake_return_list_of_objects(
         self,
@@ -3642,25 +3850,30 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> List[List[Tag]]:
-
         """test returning list of objects
                 This method makes a synchronous HTTP request by default.
         :param _request_timeout: timeout setting for this request. If one
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[List[List[Tag]]]
         """
 
         param = self._fake_return_list_of_objects_serialize(
@@ -3674,7 +3887,6 @@ class FakeApi:
             '200': "List[List[Tag]]"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -3684,7 +3896,7 @@ class FakeApi:
 
 
     @validate_call
-    def fake_return_list_of_objects_without_preload_content(
+    def fake_return_list_of_objects_with_http_info(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -3703,26 +3915,31 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[List[List[Tag]]]:
         """test returning list of objects
                 This method makes a synchronous HTTP request by default.
         :param _request_timeout: timeout setting for this request. If one
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[List[List[Tag]]]
         """
 
         param = self._fake_return_list_of_objects_serialize(
@@ -3736,12 +3953,16 @@ class FakeApi:
             '200': "List[List[Tag]]"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def fake_return_list_of_objects_with_async(
+    def fake_return_list_of_objects_without_preload_content(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -3760,26 +3981,31 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """test returning list of objects
                 This method makes a synchronous HTTP request by default.
         :param _request_timeout: timeout setting for this request. If one
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[List[List[Tag]]]
         """
 
         param = self._fake_return_list_of_objects_serialize(
@@ -3793,18 +4019,12 @@ class FakeApi:
             '200': "List[List[Tag]]"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def fake_return_list_of_objects_with_http_info_async(
+    def fake_return_list_of_objects_with_async(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -3824,25 +4044,30 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """test returning list of objects
                 This method makes a synchronous HTTP request by default.
         :param _request_timeout: timeout setting for this request. If one
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[List[List[Tag]]]
         """
 
         param = self._fake_return_list_of_objects_serialize(
@@ -3856,20 +4081,18 @@ class FakeApi:
             '200': "List[List[Tag]]"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def fake_return_list_of_objects_with_http_info(
+    def fake_return_list_of_objects_with_http_info_async(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -3888,26 +4111,31 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> List[List[Tag]]:
-
+    ) -> ApplyResult:
         """test returning list of objects
                 This method makes a synchronous HTTP request by default.
         :param _request_timeout: timeout setting for this request. If one
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[List[List[Tag]]]
         """
 
         param = self._fake_return_list_of_objects_serialize(
@@ -3921,13 +4149,14 @@ class FakeApi:
             '200': "List[List[Tag]]"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _fake_return_list_of_objects_serialize(
@@ -3960,6 +4189,7 @@ class FakeApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/json'])  # noqa: E501
@@ -3985,6 +4215,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     def fake_uuid_example(
         self,
@@ -4007,7 +4238,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """test uuid example
                 This method makes a synchronous HTTP request by default.
         :param uuid_example: uuid example (required)
@@ -4016,18 +4246,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._fake_uuid_example_serialize(
@@ -4041,7 +4277,6 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -4051,7 +4286,7 @@ class FakeApi:
 
 
     @validate_call
-    def fake_uuid_example_without_preload_content(
+    def fake_uuid_example_with_http_info(
         self,
         uuid_example: Annotated[StrictStr, Field(description="uuid example")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -4071,8 +4306,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """test uuid example
                 This method makes a synchronous HTTP request by default.
         :param uuid_example: uuid example (required)
@@ -4081,18 +4315,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._fake_uuid_example_serialize(
@@ -4106,12 +4346,16 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def fake_uuid_example_with_async(
+    def fake_uuid_example_without_preload_content(
         self,
         uuid_example: Annotated[StrictStr, Field(description="uuid example")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -4131,8 +4375,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """test uuid example
                 This method makes a synchronous HTTP request by default.
         :param uuid_example: uuid example (required)
@@ -4141,18 +4384,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._fake_uuid_example_serialize(
@@ -4166,18 +4415,12 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def fake_uuid_example_with_http_info_async(
+    def fake_uuid_example_with_async(
         self,
         uuid_example: Annotated[StrictStr, Field(description="uuid example")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -4198,7 +4441,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """test uuid example
                 This method makes a synchronous HTTP request by default.
         :param uuid_example: uuid example (required)
@@ -4207,18 +4449,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._fake_uuid_example_serialize(
@@ -4232,20 +4480,18 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def fake_uuid_example_with_http_info(
+    def fake_uuid_example_with_http_info_async(
         self,
         uuid_example: Annotated[StrictStr, Field(description="uuid example")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -4265,8 +4511,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> ApplyResult:
         """test uuid example
                 This method makes a synchronous HTTP request by default.
         :param uuid_example: uuid example (required)
@@ -4275,18 +4520,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._fake_uuid_example_serialize(
@@ -4300,13 +4551,14 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _fake_uuid_example_serialize(
@@ -4346,6 +4598,7 @@ class FakeApi:
 
 
 
+
         # authentication setting
         _auth_settings: List[str] = []  # noqa: E501
 
@@ -4366,6 +4619,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     def test_body_with_binary(
         self,
@@ -4388,7 +4642,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """test_body_with_binary
         For this test, the body has to be a binary file.
                 This method makes a synchronous HTTP request by default.
@@ -4398,18 +4651,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_body_with_binary_serialize(
@@ -4423,7 +4682,6 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -4433,7 +4691,7 @@ class FakeApi:
 
 
     @validate_call
-    def test_body_with_binary_without_preload_content(
+    def test_body_with_binary_with_http_info(
         self,
         body: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="image to upload")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -4453,8 +4711,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """test_body_with_binary
         For this test, the body has to be a binary file.
                 This method makes a synchronous HTTP request by default.
@@ -4464,18 +4721,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_body_with_binary_serialize(
@@ -4489,12 +4752,16 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_body_with_binary_with_async(
+    def test_body_with_binary_without_preload_content(
         self,
         body: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="image to upload")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -4514,8 +4781,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """test_body_with_binary
         For this test, the body has to be a binary file.
                 This method makes a synchronous HTTP request by default.
@@ -4525,18 +4791,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_body_with_binary_serialize(
@@ -4550,18 +4822,12 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_body_with_binary_with_http_info_async(
+    def test_body_with_binary_with_async(
         self,
         body: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="image to upload")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -4582,7 +4848,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """test_body_with_binary
         For this test, the body has to be a binary file.
                 This method makes a synchronous HTTP request by default.
@@ -4592,18 +4857,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_body_with_binary_serialize(
@@ -4617,20 +4888,18 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_body_with_binary_with_http_info(
+    def test_body_with_binary_with_http_info_async(
         self,
         body: Annotated[Optional[Union[StrictBytes, StrictStr]], Field(description="image to upload")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -4650,8 +4919,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> ApplyResult:
         """test_body_with_binary
         For this test, the body has to be a binary file.
                 This method makes a synchronous HTTP request by default.
@@ -4661,18 +4929,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_body_with_binary_serialize(
@@ -4686,13 +4960,14 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_body_with_binary_serialize(
@@ -4727,9 +5002,12 @@ class FakeApi:
         # process the body parameter
         if body is not None:
             # convert to byte array if the input is a file name (str)
-            if isinstance(_body_params, str):
-                with io.open(_body_params, "rb", encoding="utf-8") as _fp:
+            if isinstance(body, str):
+                with io.open(body, "rb") as _fp:
                     _body_params = _fp.read()
+            else:
+                _body_params = body
+
 
 
         # set the HTTP header `Content-Type`
@@ -4760,6 +5038,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     def test_body_with_file_schema(
         self,
@@ -4782,7 +5061,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """test_body_with_file_schema
         For this test, the body for this request must reference a schema named `File`.
                 This method makes a synchronous HTTP request by default.
@@ -4792,18 +5070,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_body_with_file_schema_serialize(
@@ -4817,7 +5101,6 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -4827,7 +5110,7 @@ class FakeApi:
 
 
     @validate_call
-    def test_body_with_file_schema_without_preload_content(
+    def test_body_with_file_schema_with_http_info(
         self,
         file_schema_test_class: FileSchemaTestClass,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -4847,8 +5130,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """test_body_with_file_schema
         For this test, the body for this request must reference a schema named `File`.
                 This method makes a synchronous HTTP request by default.
@@ -4858,18 +5140,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_body_with_file_schema_serialize(
@@ -4883,12 +5171,16 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_body_with_file_schema_with_async(
+    def test_body_with_file_schema_without_preload_content(
         self,
         file_schema_test_class: FileSchemaTestClass,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -4908,8 +5200,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """test_body_with_file_schema
         For this test, the body for this request must reference a schema named `File`.
                 This method makes a synchronous HTTP request by default.
@@ -4919,18 +5210,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_body_with_file_schema_serialize(
@@ -4944,18 +5241,12 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_body_with_file_schema_with_http_info_async(
+    def test_body_with_file_schema_with_async(
         self,
         file_schema_test_class: FileSchemaTestClass,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -4976,7 +5267,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """test_body_with_file_schema
         For this test, the body for this request must reference a schema named `File`.
                 This method makes a synchronous HTTP request by default.
@@ -4986,18 +5276,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_body_with_file_schema_serialize(
@@ -5011,20 +5307,18 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_body_with_file_schema_with_http_info(
+    def test_body_with_file_schema_with_http_info_async(
         self,
         file_schema_test_class: FileSchemaTestClass,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -5044,8 +5338,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> ApplyResult:
         """test_body_with_file_schema
         For this test, the body for this request must reference a schema named `File`.
                 This method makes a synchronous HTTP request by default.
@@ -5055,18 +5348,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_body_with_file_schema_serialize(
@@ -5080,13 +5379,14 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_body_with_file_schema_serialize(
@@ -5123,6 +5423,7 @@ class FakeApi:
             _body_params = file_schema_test_class
 
 
+
         # set the HTTP header `Content-Type`
         if _content_type:
             _header_params['Content-Type'] = _content_type
@@ -5151,6 +5452,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     def test_body_with_query_params(
         self,
@@ -5174,7 +5476,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """test_body_with_query_params
                 This method makes a synchronous HTTP request by default.
         :param query: (required)
@@ -5185,18 +5486,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_body_with_query_params_serialize(
@@ -5211,7 +5518,6 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -5221,7 +5527,7 @@ class FakeApi:
 
 
     @validate_call
-    def test_body_with_query_params_without_preload_content(
+    def test_body_with_query_params_with_http_info(
         self,
         query: StrictStr,
         user: User,
@@ -5242,8 +5548,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """test_body_with_query_params
                 This method makes a synchronous HTTP request by default.
         :param query: (required)
@@ -5254,18 +5559,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_body_with_query_params_serialize(
@@ -5280,12 +5591,16 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
 
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
 
     @validate_call
-    def test_body_with_query_params_with_async(
+    def test_body_with_query_params_without_preload_content(
         self,
         query: StrictStr,
         user: User,
@@ -5306,8 +5621,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """test_body_with_query_params
                 This method makes a synchronous HTTP request by default.
         :param query: (required)
@@ -5318,18 +5632,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_body_with_query_params_serialize(
@@ -5344,18 +5664,12 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_body_with_query_params_with_http_info_async(
+    def test_body_with_query_params_with_async(
         self,
         query: StrictStr,
         user: User,
@@ -5377,7 +5691,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """test_body_with_query_params
                 This method makes a synchronous HTTP request by default.
         :param query: (required)
@@ -5388,18 +5701,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_body_with_query_params_serialize(
@@ -5414,20 +5733,18 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_body_with_query_params_with_http_info(
+    def test_body_with_query_params_with_http_info_async(
         self,
         query: StrictStr,
         user: User,
@@ -5448,8 +5765,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> ApplyResult:
         """test_body_with_query_params
                 This method makes a synchronous HTTP request by default.
         :param query: (required)
@@ -5460,18 +5776,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_body_with_query_params_serialize(
@@ -5486,13 +5808,14 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_body_with_query_params_serialize(
@@ -5534,6 +5857,7 @@ class FakeApi:
             _body_params = user
 
 
+
         # set the HTTP header `Content-Type`
         if _content_type:
             _header_params['Content-Type'] = _content_type
@@ -5562,6 +5886,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     def test_client_model(
         self,
@@ -5584,7 +5909,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> Client:
-
         """To test \"client\" model
         To test \"client\" model
                 This method makes a synchronous HTTP request by default.
@@ -5594,18 +5918,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Client]
         """
 
         param = self._test_client_model_serialize(
@@ -5620,7 +5950,6 @@ class FakeApi:
             '200': "Client"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -5630,7 +5959,7 @@ class FakeApi:
 
 
     @validate_call
-    def test_client_model_without_preload_content(
+    def test_client_model_with_http_info(
         self,
         client: Annotated[Client, Field(description="client model")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -5650,8 +5979,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[Client]:
         """To test \"client\" model
         To test \"client\" model
                 This method makes a synchronous HTTP request by default.
@@ -5661,18 +5989,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Client]
         """
 
         param = self._test_client_model_serialize(
@@ -5687,12 +6021,16 @@ class FakeApi:
             '200': "Client"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_client_model_with_async(
+    def test_client_model_without_preload_content(
         self,
         client: Annotated[Client, Field(description="client model")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -5712,8 +6050,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """To test \"client\" model
         To test \"client\" model
                 This method makes a synchronous HTTP request by default.
@@ -5723,18 +6060,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Client]
         """
 
         param = self._test_client_model_serialize(
@@ -5749,18 +6092,12 @@ class FakeApi:
             '200': "Client"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_client_model_with_http_info_async(
+    def test_client_model_with_async(
         self,
         client: Annotated[Client, Field(description="client model")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -5781,7 +6118,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """To test \"client\" model
         To test \"client\" model
                 This method makes a synchronous HTTP request by default.
@@ -5791,18 +6127,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Client]
         """
 
         param = self._test_client_model_serialize(
@@ -5817,20 +6159,18 @@ class FakeApi:
             '200': "Client"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_client_model_with_http_info(
+    def test_client_model_with_http_info_async(
         self,
         client: Annotated[Client, Field(description="client model")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -5850,8 +6190,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> Client:
-
+    ) -> ApplyResult:
         """To test \"client\" model
         To test \"client\" model
                 This method makes a synchronous HTTP request by default.
@@ -5861,18 +6200,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Client]
         """
 
         param = self._test_client_model_serialize(
@@ -5887,13 +6232,14 @@ class FakeApi:
             '200': "Client"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_client_model_serialize(
@@ -5929,6 +6275,7 @@ class FakeApi:
         if client is not None:
             _body_params = client
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/json'])  # noqa: E501
@@ -5961,6 +6308,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     def test_date_time_query_parameter(
         self,
@@ -5984,7 +6332,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """test_date_time_query_parameter
                 This method makes a synchronous HTTP request by default.
         :param date_time_query: (required)
@@ -5995,18 +6342,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_date_time_query_parameter_serialize(
@@ -6021,7 +6374,6 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -6031,7 +6383,7 @@ class FakeApi:
 
 
     @validate_call
-    def test_date_time_query_parameter_without_preload_content(
+    def test_date_time_query_parameter_with_http_info(
         self,
         date_time_query: datetime,
         str_query: StrictStr,
@@ -6052,8 +6404,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """test_date_time_query_parameter
                 This method makes a synchronous HTTP request by default.
         :param date_time_query: (required)
@@ -6064,18 +6415,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_date_time_query_parameter_serialize(
@@ -6090,12 +6447,16 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_date_time_query_parameter_with_async(
+    def test_date_time_query_parameter_without_preload_content(
         self,
         date_time_query: datetime,
         str_query: StrictStr,
@@ -6116,8 +6477,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """test_date_time_query_parameter
                 This method makes a synchronous HTTP request by default.
         :param date_time_query: (required)
@@ -6128,18 +6488,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_date_time_query_parameter_serialize(
@@ -6154,18 +6520,12 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_date_time_query_parameter_with_http_info_async(
+    def test_date_time_query_parameter_with_async(
         self,
         date_time_query: datetime,
         str_query: StrictStr,
@@ -6187,7 +6547,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """test_date_time_query_parameter
                 This method makes a synchronous HTTP request by default.
         :param date_time_query: (required)
@@ -6198,18 +6557,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_date_time_query_parameter_serialize(
@@ -6224,20 +6589,18 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_date_time_query_parameter_with_http_info(
+    def test_date_time_query_parameter_with_http_info_async(
         self,
         date_time_query: datetime,
         str_query: StrictStr,
@@ -6258,8 +6621,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> ApplyResult:
         """test_date_time_query_parameter
                 This method makes a synchronous HTTP request by default.
         :param date_time_query: (required)
@@ -6270,18 +6632,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_date_time_query_parameter_serialize(
@@ -6296,13 +6664,14 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_date_time_query_parameter_serialize(
@@ -6349,6 +6718,7 @@ class FakeApi:
 
 
 
+
         # authentication setting
         _auth_settings: List[str] = []  # noqa: E501
 
@@ -6369,6 +6739,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     def test_endpoint_parameters(
         self,
@@ -6405,7 +6776,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
         Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
                 This method makes a synchronous HTTP request by default.
@@ -6443,18 +6813,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_endpoint_parameters_serialize(
@@ -6482,7 +6858,6 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -6492,7 +6867,7 @@ class FakeApi:
 
 
     @validate_call
-    def test_endpoint_parameters_without_preload_content(
+    def test_endpoint_parameters_with_http_info(
         self,
         number: Annotated[float, Field(le=543.2, strict=True, ge=32.1, description="None")],
         double: Annotated[float, Field(le=123.4, strict=True, ge=67.8, description="None")],
@@ -6526,8 +6901,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
         Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
                 This method makes a synchronous HTTP request by default.
@@ -6565,18 +6939,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_endpoint_parameters_serialize(
@@ -6604,12 +6984,16 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_endpoint_parameters_with_async(
+    def test_endpoint_parameters_without_preload_content(
         self,
         number: Annotated[float, Field(le=543.2, strict=True, ge=32.1, description="None")],
         double: Annotated[float, Field(le=123.4, strict=True, ge=67.8, description="None")],
@@ -6643,8 +7027,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
         Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
                 This method makes a synchronous HTTP request by default.
@@ -6682,18 +7065,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_endpoint_parameters_serialize(
@@ -6721,18 +7110,12 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_endpoint_parameters_with_http_info_async(
+    def test_endpoint_parameters_with_async(
         self,
         number: Annotated[float, Field(le=543.2, strict=True, ge=32.1, description="None")],
         double: Annotated[float, Field(le=123.4, strict=True, ge=67.8, description="None")],
@@ -6767,7 +7150,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
         Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
                 This method makes a synchronous HTTP request by default.
@@ -6805,18 +7187,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_endpoint_parameters_serialize(
@@ -6844,20 +7232,18 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_endpoint_parameters_with_http_info(
+    def test_endpoint_parameters_with_http_info_async(
         self,
         number: Annotated[float, Field(le=543.2, strict=True, ge=32.1, description="None")],
         double: Annotated[float, Field(le=123.4, strict=True, ge=67.8, description="None")],
@@ -6891,8 +7277,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> ApplyResult:
         """Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
         Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
                 This method makes a synchronous HTTP request by default.
@@ -6930,18 +7315,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_endpoint_parameters_serialize(
@@ -6969,13 +7360,14 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_endpoint_parameters_serialize(
@@ -7054,6 +7446,7 @@ class FakeApi:
         # process the body parameter
 
 
+
         # set the HTTP header `Content-Type`
         if _content_type:
             _header_params['Content-Type'] = _content_type
@@ -7082,6 +7475,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     def test_group_parameters(
         self,
@@ -7109,7 +7503,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """Fake endpoint to test group parameters (optional)
         Fake endpoint to test group parameters (optional)
                 This method makes a synchronous HTTP request by default.
@@ -7129,18 +7522,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_group_parameters_serialize(
@@ -7159,7 +7558,6 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -7169,7 +7567,7 @@ class FakeApi:
 
 
     @validate_call
-    def test_group_parameters_without_preload_content(
+    def test_group_parameters_with_http_info(
         self,
         required_string_group: Annotated[StrictInt, Field(description="Required String in group parameters")],
         required_boolean_group: Annotated[StrictBool, Field(description="Required Boolean in group parameters")],
@@ -7194,8 +7592,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """Fake endpoint to test group parameters (optional)
         Fake endpoint to test group parameters (optional)
                 This method makes a synchronous HTTP request by default.
@@ -7215,18 +7612,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_group_parameters_serialize(
@@ -7245,12 +7648,16 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_group_parameters_with_async(
+    def test_group_parameters_without_preload_content(
         self,
         required_string_group: Annotated[StrictInt, Field(description="Required String in group parameters")],
         required_boolean_group: Annotated[StrictBool, Field(description="Required Boolean in group parameters")],
@@ -7275,8 +7682,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Fake endpoint to test group parameters (optional)
         Fake endpoint to test group parameters (optional)
                 This method makes a synchronous HTTP request by default.
@@ -7296,18 +7702,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_group_parameters_serialize(
@@ -7326,18 +7738,12 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_group_parameters_with_http_info_async(
+    def test_group_parameters_with_async(
         self,
         required_string_group: Annotated[StrictInt, Field(description="Required String in group parameters")],
         required_boolean_group: Annotated[StrictBool, Field(description="Required Boolean in group parameters")],
@@ -7363,7 +7769,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Fake endpoint to test group parameters (optional)
         Fake endpoint to test group parameters (optional)
                 This method makes a synchronous HTTP request by default.
@@ -7383,18 +7788,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_group_parameters_serialize(
@@ -7413,20 +7824,18 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_group_parameters_with_http_info(
+    def test_group_parameters_with_http_info_async(
         self,
         required_string_group: Annotated[StrictInt, Field(description="Required String in group parameters")],
         required_boolean_group: Annotated[StrictBool, Field(description="Required Boolean in group parameters")],
@@ -7451,8 +7860,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> ApplyResult:
         """Fake endpoint to test group parameters (optional)
         Fake endpoint to test group parameters (optional)
                 This method makes a synchronous HTTP request by default.
@@ -7472,18 +7880,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_group_parameters_serialize(
@@ -7502,13 +7916,14 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_group_parameters_serialize(
@@ -7569,6 +7984,7 @@ class FakeApi:
 
 
 
+
         # authentication setting
         _auth_settings: List[str] = ['bearer_test']  # noqa: E501
 
@@ -7589,6 +8005,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     def test_inline_additional_properties(
         self,
@@ -7611,7 +8028,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """test inline additionalProperties
         
                 This method makes a synchronous HTTP request by default.
@@ -7621,18 +8037,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_inline_additional_properties_serialize(
@@ -7646,7 +8068,6 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -7656,7 +8077,7 @@ class FakeApi:
 
 
     @validate_call
-    def test_inline_additional_properties_without_preload_content(
+    def test_inline_additional_properties_with_http_info(
         self,
         request_body: Annotated[Dict[str, StrictStr], Field(description="request body")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -7676,8 +8097,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """test inline additionalProperties
         
                 This method makes a synchronous HTTP request by default.
@@ -7687,18 +8107,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_inline_additional_properties_serialize(
@@ -7712,12 +8138,16 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_inline_additional_properties_with_async(
+    def test_inline_additional_properties_without_preload_content(
         self,
         request_body: Annotated[Dict[str, StrictStr], Field(description="request body")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -7737,8 +8167,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """test inline additionalProperties
         
                 This method makes a synchronous HTTP request by default.
@@ -7748,18 +8177,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_inline_additional_properties_serialize(
@@ -7773,18 +8208,12 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_inline_additional_properties_with_http_info_async(
+    def test_inline_additional_properties_with_async(
         self,
         request_body: Annotated[Dict[str, StrictStr], Field(description="request body")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -7805,7 +8234,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """test inline additionalProperties
         
                 This method makes a synchronous HTTP request by default.
@@ -7815,18 +8243,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_inline_additional_properties_serialize(
@@ -7840,20 +8274,18 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_inline_additional_properties_with_http_info(
+    def test_inline_additional_properties_with_http_info_async(
         self,
         request_body: Annotated[Dict[str, StrictStr], Field(description="request body")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -7873,8 +8305,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> ApplyResult:
         """test inline additionalProperties
         
                 This method makes a synchronous HTTP request by default.
@@ -7884,18 +8315,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_inline_additional_properties_serialize(
@@ -7909,13 +8346,14 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_inline_additional_properties_serialize(
@@ -7952,6 +8390,7 @@ class FakeApi:
             _body_params = request_body
 
 
+
         # set the HTTP header `Content-Type`
         if _content_type:
             _header_params['Content-Type'] = _content_type
@@ -7980,6 +8419,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     def test_inline_freeform_additional_properties(
         self,
@@ -8002,7 +8442,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """test inline free-form additionalProperties
         
                 This method makes a synchronous HTTP request by default.
@@ -8012,18 +8451,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_inline_freeform_additional_properties_serialize(
@@ -8037,7 +8482,6 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -8047,7 +8491,7 @@ class FakeApi:
 
 
     @validate_call
-    def test_inline_freeform_additional_properties_without_preload_content(
+    def test_inline_freeform_additional_properties_with_http_info(
         self,
         test_inline_freeform_additional_properties_request: Annotated[TestInlineFreeformAdditionalPropertiesRequest, Field(description="request body")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -8067,8 +8511,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """test inline free-form additionalProperties
         
                 This method makes a synchronous HTTP request by default.
@@ -8078,18 +8521,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_inline_freeform_additional_properties_serialize(
@@ -8103,12 +8552,16 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_inline_freeform_additional_properties_with_async(
+    def test_inline_freeform_additional_properties_without_preload_content(
         self,
         test_inline_freeform_additional_properties_request: Annotated[TestInlineFreeformAdditionalPropertiesRequest, Field(description="request body")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -8128,8 +8581,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """test inline free-form additionalProperties
         
                 This method makes a synchronous HTTP request by default.
@@ -8139,18 +8591,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_inline_freeform_additional_properties_serialize(
@@ -8164,18 +8622,12 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_inline_freeform_additional_properties_with_http_info_async(
+    def test_inline_freeform_additional_properties_with_async(
         self,
         test_inline_freeform_additional_properties_request: Annotated[TestInlineFreeformAdditionalPropertiesRequest, Field(description="request body")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -8196,7 +8648,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """test inline free-form additionalProperties
         
                 This method makes a synchronous HTTP request by default.
@@ -8206,18 +8657,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_inline_freeform_additional_properties_serialize(
@@ -8231,20 +8688,18 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_inline_freeform_additional_properties_with_http_info(
+    def test_inline_freeform_additional_properties_with_http_info_async(
         self,
         test_inline_freeform_additional_properties_request: Annotated[TestInlineFreeformAdditionalPropertiesRequest, Field(description="request body")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -8264,8 +8719,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> ApplyResult:
         """test inline free-form additionalProperties
         
                 This method makes a synchronous HTTP request by default.
@@ -8275,18 +8729,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_inline_freeform_additional_properties_serialize(
@@ -8300,13 +8760,14 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_inline_freeform_additional_properties_serialize(
@@ -8343,6 +8804,7 @@ class FakeApi:
             _body_params = test_inline_freeform_additional_properties_request
 
 
+
         # set the HTTP header `Content-Type`
         if _content_type:
             _header_params['Content-Type'] = _content_type
@@ -8371,6 +8833,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     def test_json_form_data(
         self,
@@ -8394,7 +8857,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """test json serialization of form data
         
                 This method makes a synchronous HTTP request by default.
@@ -8406,18 +8868,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_json_form_data_serialize(
@@ -8432,7 +8900,6 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -8442,7 +8909,7 @@ class FakeApi:
 
 
     @validate_call
-    def test_json_form_data_without_preload_content(
+    def test_json_form_data_with_http_info(
         self,
         param: Annotated[StrictStr, Field(description="field1")],
         param2: Annotated[StrictStr, Field(description="field2")],
@@ -8463,8 +8930,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """test json serialization of form data
         
                 This method makes a synchronous HTTP request by default.
@@ -8476,18 +8942,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_json_form_data_serialize(
@@ -8502,12 +8974,16 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_json_form_data_with_async(
+    def test_json_form_data_without_preload_content(
         self,
         param: Annotated[StrictStr, Field(description="field1")],
         param2: Annotated[StrictStr, Field(description="field2")],
@@ -8528,8 +9004,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """test json serialization of form data
         
                 This method makes a synchronous HTTP request by default.
@@ -8541,18 +9016,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_json_form_data_serialize(
@@ -8567,18 +9048,12 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_json_form_data_with_http_info_async(
+    def test_json_form_data_with_async(
         self,
         param: Annotated[StrictStr, Field(description="field1")],
         param2: Annotated[StrictStr, Field(description="field2")],
@@ -8600,7 +9075,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """test json serialization of form data
         
                 This method makes a synchronous HTTP request by default.
@@ -8612,18 +9086,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_json_form_data_serialize(
@@ -8638,20 +9118,18 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_json_form_data_with_http_info(
+    def test_json_form_data_with_http_info_async(
         self,
         param: Annotated[StrictStr, Field(description="field1")],
         param2: Annotated[StrictStr, Field(description="field2")],
@@ -8672,8 +9150,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> ApplyResult:
         """test json serialization of form data
         
                 This method makes a synchronous HTTP request by default.
@@ -8685,18 +9162,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_json_form_data_serialize(
@@ -8711,13 +9194,14 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_json_form_data_serialize(
@@ -8757,6 +9241,7 @@ class FakeApi:
         # process the body parameter
 
 
+
         # set the HTTP header `Content-Type`
         if _content_type:
             _header_params['Content-Type'] = _content_type
@@ -8785,6 +9270,7 @@ class FakeApi:
 
 
 
+
     @validate_call
     def test_query_parameter_collection_format(
         self,
@@ -8813,7 +9299,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """test_query_parameter_collection_format
         To test the collection format in query parameters
                 This method makes a synchronous HTTP request by default.
@@ -8835,18 +9320,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_query_parameter_collection_format_serialize(
@@ -8866,7 +9357,6 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -8876,7 +9366,7 @@ class FakeApi:
 
 
     @validate_call
-    def test_query_parameter_collection_format_without_preload_content(
+    def test_query_parameter_collection_format_with_http_info(
         self,
         pipe: List[StrictStr],
         ioutil: List[StrictStr],
@@ -8902,8 +9392,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """test_query_parameter_collection_format
         To test the collection format in query parameters
                 This method makes a synchronous HTTP request by default.
@@ -8925,18 +9414,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_query_parameter_collection_format_serialize(
@@ -8956,12 +9451,16 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_query_parameter_collection_format_with_async(
+    def test_query_parameter_collection_format_without_preload_content(
         self,
         pipe: List[StrictStr],
         ioutil: List[StrictStr],
@@ -8987,8 +9486,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """test_query_parameter_collection_format
         To test the collection format in query parameters
                 This method makes a synchronous HTTP request by default.
@@ -9010,18 +9508,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_query_parameter_collection_format_serialize(
@@ -9041,18 +9545,12 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_query_parameter_collection_format_with_http_info_async(
+    def test_query_parameter_collection_format_with_async(
         self,
         pipe: List[StrictStr],
         ioutil: List[StrictStr],
@@ -9079,7 +9577,6 @@ class FakeApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """test_query_parameter_collection_format
         To test the collection format in query parameters
                 This method makes a synchronous HTTP request by default.
@@ -9101,18 +9598,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_query_parameter_collection_format_serialize(
@@ -9132,20 +9635,18 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_query_parameter_collection_format_with_http_info(
+    def test_query_parameter_collection_format_with_http_info_async(
         self,
         pipe: List[StrictStr],
         ioutil: List[StrictStr],
@@ -9171,8 +9672,7 @@ class FakeApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> ApplyResult:
         """test_query_parameter_collection_format
         To test the collection format in query parameters
                 This method makes a synchronous HTTP request by default.
@@ -9194,18 +9694,24 @@ class FakeApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._test_query_parameter_collection_format_serialize(
@@ -9225,13 +9731,14 @@ class FakeApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_query_parameter_collection_format_serialize(
@@ -9306,6 +9813,7 @@ class FakeApi:
 
 
 
+
         # authentication setting
         _auth_settings: List[str] = []  # noqa: E501
 
diff --git a/samples/openapi3/client/petstore/python/petstore_api/api/fake_classname_tags123_api.py b/samples/openapi3/client/petstore/python/petstore_api/api/fake_classname_tags123_api.py
index fce6a013e19..49182ecbfb4 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/api/fake_classname_tags123_api.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/api/fake_classname_tags123_api.py
@@ -12,12 +12,16 @@
 """  # noqa: E501
 
 
-import re  # noqa: F401
 import io
 import warnings
 
-from pydantic import validate_call, ValidationError, Field
-from typing import Dict, List, Optional, Tuple, Union, Any, Annotated
+from pydantic import validate_call, Field
+from typing import Dict, List, Optional, Tuple, Union, Any
+
+try:
+    from typing import Annotated
+except ImportError:
+    from typing_extensions import Annotated
 
 from pydantic import Field
 from typing_extensions import Annotated
@@ -25,10 +29,6 @@ from petstore_api.models.client import Client
 
 from petstore_api.api_client import ApiClient
 from petstore_api.api_response import ApiResponse
-from petstore_api.exceptions import (  # noqa: F401
-    ApiTypeError,
-    ApiValueError
-)
 from petstore_api.rest import RESTResponseType
 
 from multiprocessing.pool import ApplyResult
@@ -46,6 +46,7 @@ class FakeClassnameTags123Api:
             api_client = ApiClient.get_default()
         self.api_client = api_client
 
+
     @validate_call
     def test_classname(
         self,
@@ -68,7 +69,6 @@ class FakeClassnameTags123Api:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> Client:
-
         """To test class name in snake case
         To test class name in snake case
                 This method makes a synchronous HTTP request by default.
@@ -78,18 +78,24 @@ class FakeClassnameTags123Api:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Client]
         """
 
         param = self._test_classname_serialize(
@@ -104,7 +110,6 @@ class FakeClassnameTags123Api:
             '200': "Client"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -114,7 +119,7 @@ class FakeClassnameTags123Api:
 
 
     @validate_call
-    def test_classname_without_preload_content(
+    def test_classname_with_http_info(
         self,
         client: Annotated[Client, Field(description="client model")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -134,8 +139,7 @@ class FakeClassnameTags123Api:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[Client]:
         """To test class name in snake case
         To test class name in snake case
                 This method makes a synchronous HTTP request by default.
@@ -145,18 +149,24 @@ class FakeClassnameTags123Api:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Client]
         """
 
         param = self._test_classname_serialize(
@@ -171,12 +181,16 @@ class FakeClassnameTags123Api:
             '200': "Client"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def test_classname_with_async(
+    def test_classname_without_preload_content(
         self,
         client: Annotated[Client, Field(description="client model")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -196,8 +210,7 @@ class FakeClassnameTags123Api:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """To test class name in snake case
         To test class name in snake case
                 This method makes a synchronous HTTP request by default.
@@ -207,18 +220,24 @@ class FakeClassnameTags123Api:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Client]
         """
 
         param = self._test_classname_serialize(
@@ -233,18 +252,12 @@ class FakeClassnameTags123Api:
             '200': "Client"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def test_classname_with_http_info_async(
+    def test_classname_with_async(
         self,
         client: Annotated[Client, Field(description="client model")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -265,7 +278,6 @@ class FakeClassnameTags123Api:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """To test class name in snake case
         To test class name in snake case
                 This method makes a synchronous HTTP request by default.
@@ -275,18 +287,24 @@ class FakeClassnameTags123Api:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Client]
         """
 
         param = self._test_classname_serialize(
@@ -301,20 +319,18 @@ class FakeClassnameTags123Api:
             '200': "Client"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def test_classname_with_http_info(
+    def test_classname_with_http_info_async(
         self,
         client: Annotated[Client, Field(description="client model")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -334,8 +350,7 @@ class FakeClassnameTags123Api:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> Client:
-
+    ) -> ApplyResult:
         """To test class name in snake case
         To test class name in snake case
                 This method makes a synchronous HTTP request by default.
@@ -345,18 +360,24 @@ class FakeClassnameTags123Api:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Client]
         """
 
         param = self._test_classname_serialize(
@@ -371,13 +392,14 @@ class FakeClassnameTags123Api:
             '200': "Client"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _test_classname_serialize(
@@ -413,6 +435,7 @@ class FakeClassnameTags123Api:
         if client is not None:
             _body_params = client
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/json'])  # noqa: E501
diff --git a/samples/openapi3/client/petstore/python/petstore_api/api/pet_api.py b/samples/openapi3/client/petstore/python/petstore_api/api/pet_api.py
index afd0157c956..de30725616e 100755
--- a/samples/openapi3/client/petstore/python/petstore_api/api/pet_api.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/api/pet_api.py
@@ -12,12 +12,16 @@
 """  # noqa: E501
 
 
-import re  # noqa: F401
 import io
 import warnings
 
-from pydantic import validate_call, ValidationError, Field
-from typing import Dict, List, Optional, Tuple, Union, Any, Annotated
+from pydantic import validate_call, Field
+from typing import Dict, List, Optional, Tuple, Union, Any
+
+try:
+    from typing import Annotated
+except ImportError:
+    from typing_extensions import Annotated
 
 from pydantic import Field
 from typing_extensions import Annotated
@@ -30,10 +34,6 @@ from petstore_api.models.pet import Pet
 
 from petstore_api.api_client import ApiClient
 from petstore_api.api_response import ApiResponse
-from petstore_api.exceptions import (  # noqa: F401
-    ApiTypeError,
-    ApiValueError
-)
 from petstore_api.rest import RESTResponseType
 
 from multiprocessing.pool import ApplyResult
@@ -51,6 +51,7 @@ class PetApi:
             api_client = ApiClient.get_default()
         self.api_client = api_client
 
+
     @validate_call
     def add_pet(
         self,
@@ -73,7 +74,6 @@ class PetApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """Add a new pet to the store
         
                 This method makes a synchronous HTTP request by default.
@@ -83,18 +83,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._add_pet_serialize(
@@ -108,7 +114,6 @@ class PetApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -118,7 +123,7 @@ class PetApi:
 
 
     @validate_call
-    def add_pet_without_preload_content(
+    def add_pet_with_http_info(
         self,
         pet: Annotated[Pet, Field(description="Pet object that needs to be added to the store")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -138,8 +143,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """Add a new pet to the store
         
                 This method makes a synchronous HTTP request by default.
@@ -149,18 +153,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._add_pet_serialize(
@@ -174,12 +184,16 @@ class PetApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def add_pet_with_async(
+    def add_pet_without_preload_content(
         self,
         pet: Annotated[Pet, Field(description="Pet object that needs to be added to the store")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -199,8 +213,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Add a new pet to the store
         
                 This method makes a synchronous HTTP request by default.
@@ -210,18 +223,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._add_pet_serialize(
@@ -235,18 +254,12 @@ class PetApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def add_pet_with_http_info_async(
+    def add_pet_with_async(
         self,
         pet: Annotated[Pet, Field(description="Pet object that needs to be added to the store")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -267,7 +280,6 @@ class PetApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Add a new pet to the store
         
                 This method makes a synchronous HTTP request by default.
@@ -277,18 +289,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._add_pet_serialize(
@@ -302,20 +320,18 @@ class PetApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def add_pet_with_http_info(
+    def add_pet_with_http_info_async(
         self,
         pet: Annotated[Pet, Field(description="Pet object that needs to be added to the store")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -335,8 +351,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> ApplyResult:
         """Add a new pet to the store
         
                 This method makes a synchronous HTTP request by default.
@@ -346,18 +361,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._add_pet_serialize(
@@ -371,13 +392,14 @@ class PetApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _add_pet_serialize(
@@ -414,6 +436,7 @@ class PetApi:
             _body_params = pet
 
 
+
         # set the HTTP header `Content-Type`
         if _content_type:
             _header_params['Content-Type'] = _content_type
@@ -442,6 +465,7 @@ class PetApi:
 
 
 
+
     @validate_call
     def delete_pet(
         self,
@@ -465,7 +489,6 @@ class PetApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """Deletes a pet
         
                 This method makes a synchronous HTTP request by default.
@@ -477,18 +500,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._delete_pet_serialize(
@@ -503,7 +532,6 @@ class PetApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -513,7 +541,7 @@ class PetApi:
 
 
     @validate_call
-    def delete_pet_without_preload_content(
+    def delete_pet_with_http_info(
         self,
         pet_id: Annotated[StrictInt, Field(description="Pet id to delete")],
         api_key: Optional[StrictStr] = None,
@@ -534,8 +562,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """Deletes a pet
         
                 This method makes a synchronous HTTP request by default.
@@ -547,18 +574,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._delete_pet_serialize(
@@ -573,12 +606,16 @@ class PetApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def delete_pet_with_async(
+    def delete_pet_without_preload_content(
         self,
         pet_id: Annotated[StrictInt, Field(description="Pet id to delete")],
         api_key: Optional[StrictStr] = None,
@@ -599,8 +636,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Deletes a pet
         
                 This method makes a synchronous HTTP request by default.
@@ -612,18 +648,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._delete_pet_serialize(
@@ -638,18 +680,12 @@ class PetApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def delete_pet_with_http_info_async(
+    def delete_pet_with_async(
         self,
         pet_id: Annotated[StrictInt, Field(description="Pet id to delete")],
         api_key: Optional[StrictStr] = None,
@@ -671,7 +707,6 @@ class PetApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Deletes a pet
         
                 This method makes a synchronous HTTP request by default.
@@ -683,18 +718,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._delete_pet_serialize(
@@ -709,20 +750,18 @@ class PetApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def delete_pet_with_http_info(
+    def delete_pet_with_http_info_async(
         self,
         pet_id: Annotated[StrictInt, Field(description="Pet id to delete")],
         api_key: Optional[StrictStr] = None,
@@ -743,8 +782,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> ApplyResult:
         """Deletes a pet
         
                 This method makes a synchronous HTTP request by default.
@@ -756,18 +794,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._delete_pet_serialize(
@@ -782,13 +826,14 @@ class PetApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _delete_pet_serialize(
@@ -829,6 +874,7 @@ class PetApi:
 
 
 
+
         # authentication setting
         _auth_settings: List[str] = ['petstore_auth']  # noqa: E501
 
@@ -849,6 +895,7 @@ class PetApi:
 
 
 
+
     @validate_call
     def find_pets_by_status(
         self,
@@ -871,7 +918,6 @@ class PetApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> List[Pet]:
-
         """Finds Pets by status
         Multiple status values can be provided with comma separated strings
                 This method makes a synchronous HTTP request by default.
@@ -881,18 +927,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[List[Pet]]
         """
 
         param = self._find_pets_by_status_serialize(
@@ -908,7 +960,6 @@ class PetApi:
             '400': None
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -918,7 +969,7 @@ class PetApi:
 
 
     @validate_call
-    def find_pets_by_status_without_preload_content(
+    def find_pets_by_status_with_http_info(
         self,
         status: Annotated[List[StrictStr], Field(description="Status values that need to be considered for filter")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -938,8 +989,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[List[Pet]]:
         """Finds Pets by status
         Multiple status values can be provided with comma separated strings
                 This method makes a synchronous HTTP request by default.
@@ -949,18 +999,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[List[Pet]]
         """
 
         param = self._find_pets_by_status_serialize(
@@ -976,12 +1032,16 @@ class PetApi:
             '400': None
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def find_pets_by_status_with_async(
+    def find_pets_by_status_without_preload_content(
         self,
         status: Annotated[List[StrictStr], Field(description="Status values that need to be considered for filter")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1001,8 +1061,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Finds Pets by status
         Multiple status values can be provided with comma separated strings
                 This method makes a synchronous HTTP request by default.
@@ -1012,18 +1071,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[List[Pet]]
         """
 
         param = self._find_pets_by_status_serialize(
@@ -1039,18 +1104,12 @@ class PetApi:
             '400': None
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def find_pets_by_status_with_http_info_async(
+    def find_pets_by_status_with_async(
         self,
         status: Annotated[List[StrictStr], Field(description="Status values that need to be considered for filter")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1071,7 +1130,6 @@ class PetApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Finds Pets by status
         Multiple status values can be provided with comma separated strings
                 This method makes a synchronous HTTP request by default.
@@ -1081,18 +1139,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[List[Pet]]
         """
 
         param = self._find_pets_by_status_serialize(
@@ -1108,20 +1172,18 @@ class PetApi:
             '400': None
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def find_pets_by_status_with_http_info(
+    def find_pets_by_status_with_http_info_async(
         self,
         status: Annotated[List[StrictStr], Field(description="Status values that need to be considered for filter")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1141,8 +1203,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> List[Pet]:
-
+    ) -> ApplyResult:
         """Finds Pets by status
         Multiple status values can be provided with comma separated strings
                 This method makes a synchronous HTTP request by default.
@@ -1152,18 +1213,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[List[Pet]]
         """
 
         param = self._find_pets_by_status_serialize(
@@ -1179,13 +1246,14 @@ class PetApi:
             '400': None
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _find_pets_by_status_serialize(
@@ -1224,6 +1292,7 @@ class PetApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/xml', 'application/json'])  # noqa: E501
@@ -1249,6 +1318,7 @@ class PetApi:
 
 
 
+
     @validate_call
     def find_pets_by_tags(
         self,
@@ -1271,7 +1341,6 @@ class PetApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> List[Pet]:
-
         """(Deprecated) Finds Pets by tags
         Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
                 This method makes a synchronous HTTP request by default.
@@ -1281,18 +1350,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[List[Pet]]
         """
         warnings.warn("GET /pet/findByTags is deprecated.", DeprecationWarning)
 
@@ -1309,7 +1384,6 @@ class PetApi:
             '400': None
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -1319,7 +1393,7 @@ class PetApi:
 
 
     @validate_call
-    def find_pets_by_tags_without_preload_content(
+    def find_pets_by_tags_with_http_info(
         self,
         tags: Annotated[List[StrictStr], Field(description="Tags to filter by")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1339,8 +1413,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[List[Pet]]:
         """(Deprecated) Finds Pets by tags
         Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
                 This method makes a synchronous HTTP request by default.
@@ -1350,18 +1423,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[List[Pet]]
         """
         warnings.warn("GET /pet/findByTags is deprecated.", DeprecationWarning)
 
@@ -1378,12 +1457,16 @@ class PetApi:
             '400': None
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def find_pets_by_tags_with_async(
+    def find_pets_by_tags_without_preload_content(
         self,
         tags: Annotated[List[StrictStr], Field(description="Tags to filter by")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1403,8 +1486,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """(Deprecated) Finds Pets by tags
         Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
                 This method makes a synchronous HTTP request by default.
@@ -1414,18 +1496,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[List[Pet]]
         """
         warnings.warn("GET /pet/findByTags is deprecated.", DeprecationWarning)
 
@@ -1442,18 +1530,12 @@ class PetApi:
             '400': None
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def find_pets_by_tags_with_http_info_async(
+    def find_pets_by_tags_with_async(
         self,
         tags: Annotated[List[StrictStr], Field(description="Tags to filter by")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1474,7 +1556,6 @@ class PetApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """(Deprecated) Finds Pets by tags
         Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
                 This method makes a synchronous HTTP request by default.
@@ -1484,18 +1565,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[List[Pet]]
         """
         warnings.warn("GET /pet/findByTags is deprecated.", DeprecationWarning)
 
@@ -1512,20 +1599,18 @@ class PetApi:
             '400': None
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def find_pets_by_tags_with_http_info(
+    def find_pets_by_tags_with_http_info_async(
         self,
         tags: Annotated[List[StrictStr], Field(description="Tags to filter by")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1545,8 +1630,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> List[Pet]:
-
+    ) -> ApplyResult:
         """(Deprecated) Finds Pets by tags
         Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
                 This method makes a synchronous HTTP request by default.
@@ -1556,18 +1640,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[List[Pet]]
         """
         warnings.warn("GET /pet/findByTags is deprecated.", DeprecationWarning)
 
@@ -1584,13 +1674,14 @@ class PetApi:
             '400': None
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _find_pets_by_tags_serialize(
@@ -1629,6 +1720,7 @@ class PetApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/xml', 'application/json'])  # noqa: E501
@@ -1654,6 +1746,7 @@ class PetApi:
 
 
 
+
     @validate_call
     def get_pet_by_id(
         self,
@@ -1676,7 +1769,6 @@ class PetApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> Pet:
-
         """Find pet by ID
         Returns a single pet
                 This method makes a synchronous HTTP request by default.
@@ -1686,18 +1778,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Pet]
         """
 
         param = self._get_pet_by_id_serialize(
@@ -1714,7 +1812,6 @@ class PetApi:
             '404': None
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -1724,7 +1821,7 @@ class PetApi:
 
 
     @validate_call
-    def get_pet_by_id_without_preload_content(
+    def get_pet_by_id_with_http_info(
         self,
         pet_id: Annotated[StrictInt, Field(description="ID of pet to return")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1744,8 +1841,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[Pet]:
         """Find pet by ID
         Returns a single pet
                 This method makes a synchronous HTTP request by default.
@@ -1755,18 +1851,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Pet]
         """
 
         param = self._get_pet_by_id_serialize(
@@ -1783,12 +1885,16 @@ class PetApi:
             '404': None
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def get_pet_by_id_with_async(
+    def get_pet_by_id_without_preload_content(
         self,
         pet_id: Annotated[StrictInt, Field(description="ID of pet to return")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1808,8 +1914,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Find pet by ID
         Returns a single pet
                 This method makes a synchronous HTTP request by default.
@@ -1819,18 +1924,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Pet]
         """
 
         param = self._get_pet_by_id_serialize(
@@ -1847,18 +1958,12 @@ class PetApi:
             '404': None
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def get_pet_by_id_with_http_info_async(
+    def get_pet_by_id_with_async(
         self,
         pet_id: Annotated[StrictInt, Field(description="ID of pet to return")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1879,7 +1984,6 @@ class PetApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Find pet by ID
         Returns a single pet
                 This method makes a synchronous HTTP request by default.
@@ -1889,18 +1993,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Pet]
         """
 
         param = self._get_pet_by_id_serialize(
@@ -1917,20 +2027,18 @@ class PetApi:
             '404': None
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def get_pet_by_id_with_http_info(
+    def get_pet_by_id_with_http_info_async(
         self,
         pet_id: Annotated[StrictInt, Field(description="ID of pet to return")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1950,8 +2058,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> Pet:
-
+    ) -> ApplyResult:
         """Find pet by ID
         Returns a single pet
                 This method makes a synchronous HTTP request by default.
@@ -1961,18 +2068,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Pet]
         """
 
         param = self._get_pet_by_id_serialize(
@@ -1989,13 +2102,14 @@ class PetApi:
             '404': None
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _get_pet_by_id_serialize(
@@ -2031,6 +2145,7 @@ class PetApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/xml', 'application/json'])  # noqa: E501
@@ -2056,6 +2171,7 @@ class PetApi:
 
 
 
+
     @validate_call
     def update_pet(
         self,
@@ -2078,7 +2194,6 @@ class PetApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """Update an existing pet
         
                 This method makes a synchronous HTTP request by default.
@@ -2088,18 +2203,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._update_pet_serialize(
@@ -2113,7 +2234,6 @@ class PetApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -2123,7 +2243,7 @@ class PetApi:
 
 
     @validate_call
-    def update_pet_without_preload_content(
+    def update_pet_with_http_info(
         self,
         pet: Annotated[Pet, Field(description="Pet object that needs to be added to the store")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2143,8 +2263,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """Update an existing pet
         
                 This method makes a synchronous HTTP request by default.
@@ -2154,18 +2273,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._update_pet_serialize(
@@ -2179,12 +2304,16 @@ class PetApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def update_pet_with_async(
+    def update_pet_without_preload_content(
         self,
         pet: Annotated[Pet, Field(description="Pet object that needs to be added to the store")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2204,8 +2333,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Update an existing pet
         
                 This method makes a synchronous HTTP request by default.
@@ -2215,18 +2343,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._update_pet_serialize(
@@ -2240,18 +2374,12 @@ class PetApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def update_pet_with_http_info_async(
+    def update_pet_with_async(
         self,
         pet: Annotated[Pet, Field(description="Pet object that needs to be added to the store")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2272,7 +2400,6 @@ class PetApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Update an existing pet
         
                 This method makes a synchronous HTTP request by default.
@@ -2282,18 +2409,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._update_pet_serialize(
@@ -2307,20 +2440,18 @@ class PetApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def update_pet_with_http_info(
+    def update_pet_with_http_info_async(
         self,
         pet: Annotated[Pet, Field(description="Pet object that needs to be added to the store")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -2340,8 +2471,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> ApplyResult:
         """Update an existing pet
         
                 This method makes a synchronous HTTP request by default.
@@ -2351,18 +2481,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._update_pet_serialize(
@@ -2376,13 +2512,14 @@ class PetApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _update_pet_serialize(
@@ -2419,6 +2556,7 @@ class PetApi:
             _body_params = pet
 
 
+
         # set the HTTP header `Content-Type`
         if _content_type:
             _header_params['Content-Type'] = _content_type
@@ -2447,6 +2585,7 @@ class PetApi:
 
 
 
+
     @validate_call
     def update_pet_with_form(
         self,
@@ -2471,7 +2610,6 @@ class PetApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """Updates a pet in the store with form data
         
                 This method makes a synchronous HTTP request by default.
@@ -2485,18 +2623,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._update_pet_with_form_serialize(
@@ -2512,7 +2656,6 @@ class PetApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -2522,7 +2665,7 @@ class PetApi:
 
 
     @validate_call
-    def update_pet_with_form_without_preload_content(
+    def update_pet_with_form_with_http_info(
         self,
         pet_id: Annotated[StrictInt, Field(description="ID of pet that needs to be updated")],
         name: Annotated[Optional[StrictStr], Field(description="Updated name of the pet")] = None,
@@ -2544,8 +2687,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """Updates a pet in the store with form data
         
                 This method makes a synchronous HTTP request by default.
@@ -2559,18 +2701,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._update_pet_with_form_serialize(
@@ -2586,12 +2734,16 @@ class PetApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def update_pet_with_form_with_async(
+    def update_pet_with_form_without_preload_content(
         self,
         pet_id: Annotated[StrictInt, Field(description="ID of pet that needs to be updated")],
         name: Annotated[Optional[StrictStr], Field(description="Updated name of the pet")] = None,
@@ -2613,8 +2765,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Updates a pet in the store with form data
         
                 This method makes a synchronous HTTP request by default.
@@ -2628,18 +2779,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._update_pet_with_form_serialize(
@@ -2655,18 +2812,12 @@ class PetApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def update_pet_with_form_with_http_info_async(
+    def update_pet_with_form_with_async(
         self,
         pet_id: Annotated[StrictInt, Field(description="ID of pet that needs to be updated")],
         name: Annotated[Optional[StrictStr], Field(description="Updated name of the pet")] = None,
@@ -2689,7 +2840,6 @@ class PetApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Updates a pet in the store with form data
         
                 This method makes a synchronous HTTP request by default.
@@ -2703,18 +2853,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._update_pet_with_form_serialize(
@@ -2730,20 +2886,18 @@ class PetApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def update_pet_with_form_with_http_info(
+    def update_pet_with_form_with_http_info_async(
         self,
         pet_id: Annotated[StrictInt, Field(description="ID of pet that needs to be updated")],
         name: Annotated[Optional[StrictStr], Field(description="Updated name of the pet")] = None,
@@ -2765,8 +2919,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> ApplyResult:
         """Updates a pet in the store with form data
         
                 This method makes a synchronous HTTP request by default.
@@ -2780,18 +2933,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._update_pet_with_form_serialize(
@@ -2807,13 +2966,14 @@ class PetApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _update_pet_with_form_serialize(
@@ -2856,6 +3016,7 @@ class PetApi:
         # process the body parameter
 
 
+
         # set the HTTP header `Content-Type`
         if _content_type:
             _header_params['Content-Type'] = _content_type
@@ -2884,6 +3045,7 @@ class PetApi:
 
 
 
+
     @validate_call
     def upload_file(
         self,
@@ -2908,7 +3070,6 @@ class PetApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApiResponse:
-
         """uploads an image
         
                 This method makes a synchronous HTTP request by default.
@@ -2922,18 +3083,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[ApiResponse]
         """
 
         param = self._upload_file_serialize(
@@ -2950,7 +3117,6 @@ class PetApi:
             '200': "ApiResponse"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -2960,7 +3126,7 @@ class PetApi:
 
 
     @validate_call
-    def upload_file_without_preload_content(
+    def upload_file_with_http_info(
         self,
         pet_id: Annotated[StrictInt, Field(description="ID of pet to update")],
         additional_metadata: Annotated[Optional[StrictStr], Field(description="Additional data to pass to server")] = None,
@@ -2982,8 +3148,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[ApiResponse]:
         """uploads an image
         
                 This method makes a synchronous HTTP request by default.
@@ -2997,18 +3162,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[ApiResponse]
         """
 
         param = self._upload_file_serialize(
@@ -3025,12 +3196,16 @@ class PetApi:
             '200': "ApiResponse"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def upload_file_with_async(
+    def upload_file_without_preload_content(
         self,
         pet_id: Annotated[StrictInt, Field(description="ID of pet to update")],
         additional_metadata: Annotated[Optional[StrictStr], Field(description="Additional data to pass to server")] = None,
@@ -3052,8 +3227,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """uploads an image
         
                 This method makes a synchronous HTTP request by default.
@@ -3067,18 +3241,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[ApiResponse]
         """
 
         param = self._upload_file_serialize(
@@ -3095,18 +3275,12 @@ class PetApi:
             '200': "ApiResponse"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def upload_file_with_http_info_async(
+    def upload_file_with_async(
         self,
         pet_id: Annotated[StrictInt, Field(description="ID of pet to update")],
         additional_metadata: Annotated[Optional[StrictStr], Field(description="Additional data to pass to server")] = None,
@@ -3129,7 +3303,6 @@ class PetApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """uploads an image
         
                 This method makes a synchronous HTTP request by default.
@@ -3143,18 +3316,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[ApiResponse]
         """
 
         param = self._upload_file_serialize(
@@ -3171,20 +3350,18 @@ class PetApi:
             '200': "ApiResponse"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def upload_file_with_http_info(
+    def upload_file_with_http_info_async(
         self,
         pet_id: Annotated[StrictInt, Field(description="ID of pet to update")],
         additional_metadata: Annotated[Optional[StrictStr], Field(description="Additional data to pass to server")] = None,
@@ -3206,8 +3383,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApiResponse:
-
+    ) -> ApplyResult:
         """uploads an image
         
                 This method makes a synchronous HTTP request by default.
@@ -3221,18 +3397,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[ApiResponse]
         """
 
         param = self._upload_file_serialize(
@@ -3249,13 +3431,14 @@ class PetApi:
             '200': "ApiResponse"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _upload_file_serialize(
@@ -3297,6 +3480,7 @@ class PetApi:
             _files['file'] = file
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/json'])  # noqa: E501
@@ -3329,6 +3513,7 @@ class PetApi:
 
 
 
+
     @validate_call
     def upload_file_with_required_file(
         self,
@@ -3353,7 +3538,6 @@ class PetApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApiResponse:
-
         """uploads an image (required)
         
                 This method makes a synchronous HTTP request by default.
@@ -3367,18 +3551,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[ApiResponse]
         """
 
         param = self._upload_file_with_required_file_serialize(
@@ -3395,7 +3585,6 @@ class PetApi:
             '200': "ApiResponse"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -3405,7 +3594,7 @@ class PetApi:
 
 
     @validate_call
-    def upload_file_with_required_file_without_preload_content(
+    def upload_file_with_required_file_with_http_info(
         self,
         pet_id: Annotated[StrictInt, Field(description="ID of pet to update")],
         required_file: Annotated[Union[StrictBytes, StrictStr], Field(description="file to upload")],
@@ -3427,8 +3616,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[ApiResponse]:
         """uploads an image (required)
         
                 This method makes a synchronous HTTP request by default.
@@ -3442,18 +3630,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[ApiResponse]
         """
 
         param = self._upload_file_with_required_file_serialize(
@@ -3470,12 +3664,16 @@ class PetApi:
             '200': "ApiResponse"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def upload_file_with_required_file_with_async(
+    def upload_file_with_required_file_without_preload_content(
         self,
         pet_id: Annotated[StrictInt, Field(description="ID of pet to update")],
         required_file: Annotated[Union[StrictBytes, StrictStr], Field(description="file to upload")],
@@ -3497,8 +3695,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """uploads an image (required)
         
                 This method makes a synchronous HTTP request by default.
@@ -3512,18 +3709,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[ApiResponse]
         """
 
         param = self._upload_file_with_required_file_serialize(
@@ -3540,18 +3743,12 @@ class PetApi:
             '200': "ApiResponse"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def upload_file_with_required_file_with_http_info_async(
+    def upload_file_with_required_file_with_async(
         self,
         pet_id: Annotated[StrictInt, Field(description="ID of pet to update")],
         required_file: Annotated[Union[StrictBytes, StrictStr], Field(description="file to upload")],
@@ -3574,7 +3771,6 @@ class PetApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """uploads an image (required)
         
                 This method makes a synchronous HTTP request by default.
@@ -3588,18 +3784,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[ApiResponse]
         """
 
         param = self._upload_file_with_required_file_serialize(
@@ -3616,20 +3818,18 @@ class PetApi:
             '200': "ApiResponse"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def upload_file_with_required_file_with_http_info(
+    def upload_file_with_required_file_with_http_info_async(
         self,
         pet_id: Annotated[StrictInt, Field(description="ID of pet to update")],
         required_file: Annotated[Union[StrictBytes, StrictStr], Field(description="file to upload")],
@@ -3651,8 +3851,7 @@ class PetApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApiResponse:
-
+    ) -> ApplyResult:
         """uploads an image (required)
         
                 This method makes a synchronous HTTP request by default.
@@ -3666,18 +3865,24 @@ class PetApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[ApiResponse]
         """
 
         param = self._upload_file_with_required_file_serialize(
@@ -3694,13 +3899,14 @@ class PetApi:
             '200': "ApiResponse"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _upload_file_with_required_file_serialize(
@@ -3742,6 +3948,7 @@ class PetApi:
             _files['requiredFile'] = required_file
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/json'])  # noqa: E501
diff --git a/samples/openapi3/client/petstore/python/petstore_api/api/store_api.py b/samples/openapi3/client/petstore/python/petstore_api/api/store_api.py
index a0a009b5e7b..d527b7a8856 100755
--- a/samples/openapi3/client/petstore/python/petstore_api/api/store_api.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/api/store_api.py
@@ -12,12 +12,16 @@
 """  # noqa: E501
 
 
-import re  # noqa: F401
 import io
 import warnings
 
-from pydantic import validate_call, ValidationError, Field
-from typing import Dict, List, Optional, Tuple, Union, Any, Annotated
+from pydantic import validate_call, Field
+from typing import Dict, List, Optional, Tuple, Union, Any
+
+try:
+    from typing import Annotated
+except ImportError:
+    from typing_extensions import Annotated
 
 from pydantic import Field
 from typing_extensions import Annotated
@@ -29,10 +33,6 @@ from petstore_api.models.order import Order
 
 from petstore_api.api_client import ApiClient
 from petstore_api.api_response import ApiResponse
-from petstore_api.exceptions import (  # noqa: F401
-    ApiTypeError,
-    ApiValueError
-)
 from petstore_api.rest import RESTResponseType
 
 from multiprocessing.pool import ApplyResult
@@ -50,6 +50,7 @@ class StoreApi:
             api_client = ApiClient.get_default()
         self.api_client = api_client
 
+
     @validate_call
     def delete_order(
         self,
@@ -72,7 +73,6 @@ class StoreApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """Delete purchase order by ID
         For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
                 This method makes a synchronous HTTP request by default.
@@ -82,18 +82,24 @@ class StoreApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._delete_order_serialize(
@@ -107,7 +113,6 @@ class StoreApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -117,7 +122,7 @@ class StoreApi:
 
 
     @validate_call
-    def delete_order_without_preload_content(
+    def delete_order_with_http_info(
         self,
         order_id: Annotated[StrictStr, Field(description="ID of the order that needs to be deleted")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -137,8 +142,7 @@ class StoreApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """Delete purchase order by ID
         For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
                 This method makes a synchronous HTTP request by default.
@@ -148,18 +152,24 @@ class StoreApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._delete_order_serialize(
@@ -173,12 +183,16 @@ class StoreApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def delete_order_with_async(
+    def delete_order_without_preload_content(
         self,
         order_id: Annotated[StrictStr, Field(description="ID of the order that needs to be deleted")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -198,8 +212,7 @@ class StoreApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Delete purchase order by ID
         For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
                 This method makes a synchronous HTTP request by default.
@@ -209,18 +222,24 @@ class StoreApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._delete_order_serialize(
@@ -234,18 +253,12 @@ class StoreApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def delete_order_with_http_info_async(
+    def delete_order_with_async(
         self,
         order_id: Annotated[StrictStr, Field(description="ID of the order that needs to be deleted")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -266,7 +279,6 @@ class StoreApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Delete purchase order by ID
         For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
                 This method makes a synchronous HTTP request by default.
@@ -276,18 +288,24 @@ class StoreApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._delete_order_serialize(
@@ -301,20 +319,18 @@ class StoreApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def delete_order_with_http_info(
+    def delete_order_with_http_info_async(
         self,
         order_id: Annotated[StrictStr, Field(description="ID of the order that needs to be deleted")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -334,8 +350,7 @@ class StoreApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> ApplyResult:
         """Delete purchase order by ID
         For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
                 This method makes a synchronous HTTP request by default.
@@ -345,18 +360,24 @@ class StoreApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._delete_order_serialize(
@@ -370,13 +391,14 @@ class StoreApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _delete_order_serialize(
@@ -414,6 +436,7 @@ class StoreApi:
 
 
 
+
         # authentication setting
         _auth_settings: List[str] = []  # noqa: E501
 
@@ -434,6 +457,7 @@ class StoreApi:
 
 
 
+
     @validate_call
     def get_inventory(
         self,
@@ -455,7 +479,6 @@ class StoreApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> Dict[str, int]:
-
         """Returns pet inventories by status
         Returns a map of status codes to quantities
                 This method makes a synchronous HTTP request by default.
@@ -463,18 +486,24 @@ class StoreApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Dict[str, int]]
         """
 
         param = self._get_inventory_serialize(
@@ -488,7 +517,6 @@ class StoreApi:
             '200': "Dict[str, int]"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -498,7 +526,7 @@ class StoreApi:
 
 
     @validate_call
-    def get_inventory_without_preload_content(
+    def get_inventory_with_http_info(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -517,8 +545,7 @@ class StoreApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[Dict[str, int]]:
         """Returns pet inventories by status
         Returns a map of status codes to quantities
                 This method makes a synchronous HTTP request by default.
@@ -526,18 +553,24 @@ class StoreApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Dict[str, int]]
         """
 
         param = self._get_inventory_serialize(
@@ -551,12 +584,16 @@ class StoreApi:
             '200': "Dict[str, int]"
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def get_inventory_with_async(
+    def get_inventory_without_preload_content(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -575,8 +612,7 @@ class StoreApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Returns pet inventories by status
         Returns a map of status codes to quantities
                 This method makes a synchronous HTTP request by default.
@@ -584,18 +620,24 @@ class StoreApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Dict[str, int]]
         """
 
         param = self._get_inventory_serialize(
@@ -609,18 +651,12 @@ class StoreApi:
             '200': "Dict[str, int]"
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def get_inventory_with_http_info_async(
+    def get_inventory_with_async(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -640,7 +676,6 @@ class StoreApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Returns pet inventories by status
         Returns a map of status codes to quantities
                 This method makes a synchronous HTTP request by default.
@@ -648,18 +683,24 @@ class StoreApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Dict[str, int]]
         """
 
         param = self._get_inventory_serialize(
@@ -673,20 +714,18 @@ class StoreApi:
             '200': "Dict[str, int]"
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def get_inventory_with_http_info(
+    def get_inventory_with_http_info_async(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -705,8 +744,7 @@ class StoreApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> Dict[str, int]:
-
+    ) -> ApplyResult:
         """Returns pet inventories by status
         Returns a map of status codes to quantities
                 This method makes a synchronous HTTP request by default.
@@ -714,18 +752,24 @@ class StoreApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Dict[str, int]]
         """
 
         param = self._get_inventory_serialize(
@@ -739,13 +783,14 @@ class StoreApi:
             '200': "Dict[str, int]"
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _get_inventory_serialize(
@@ -778,6 +823,7 @@ class StoreApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/json'])  # noqa: E501
@@ -803,6 +849,7 @@ class StoreApi:
 
 
 
+
     @validate_call
     def get_order_by_id(
         self,
@@ -825,7 +872,6 @@ class StoreApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> Order:
-
         """Find purchase order by ID
         For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
                 This method makes a synchronous HTTP request by default.
@@ -835,18 +881,24 @@ class StoreApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Order]
         """
 
         param = self._get_order_by_id_serialize(
@@ -863,7 +915,6 @@ class StoreApi:
             '404': None
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -873,7 +924,7 @@ class StoreApi:
 
 
     @validate_call
-    def get_order_by_id_without_preload_content(
+    def get_order_by_id_with_http_info(
         self,
         order_id: Annotated[int, Field(le=5, strict=True, ge=1, description="ID of pet that needs to be fetched")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -893,8 +944,7 @@ class StoreApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[Order]:
         """Find purchase order by ID
         For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
                 This method makes a synchronous HTTP request by default.
@@ -904,18 +954,24 @@ class StoreApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Order]
         """
 
         param = self._get_order_by_id_serialize(
@@ -932,12 +988,16 @@ class StoreApi:
             '404': None
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def get_order_by_id_with_async(
+    def get_order_by_id_without_preload_content(
         self,
         order_id: Annotated[int, Field(le=5, strict=True, ge=1, description="ID of pet that needs to be fetched")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -957,8 +1017,7 @@ class StoreApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Find purchase order by ID
         For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
                 This method makes a synchronous HTTP request by default.
@@ -968,18 +1027,24 @@ class StoreApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Order]
         """
 
         param = self._get_order_by_id_serialize(
@@ -996,18 +1061,12 @@ class StoreApi:
             '404': None
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def get_order_by_id_with_http_info_async(
+    def get_order_by_id_with_async(
         self,
         order_id: Annotated[int, Field(le=5, strict=True, ge=1, description="ID of pet that needs to be fetched")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1028,7 +1087,6 @@ class StoreApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Find purchase order by ID
         For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
                 This method makes a synchronous HTTP request by default.
@@ -1038,18 +1096,24 @@ class StoreApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Order]
         """
 
         param = self._get_order_by_id_serialize(
@@ -1066,20 +1130,18 @@ class StoreApi:
             '404': None
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def get_order_by_id_with_http_info(
+    def get_order_by_id_with_http_info_async(
         self,
         order_id: Annotated[int, Field(le=5, strict=True, ge=1, description="ID of pet that needs to be fetched")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1099,8 +1161,7 @@ class StoreApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> Order:
-
+    ) -> ApplyResult:
         """Find purchase order by ID
         For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
                 This method makes a synchronous HTTP request by default.
@@ -1110,18 +1171,24 @@ class StoreApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Order]
         """
 
         param = self._get_order_by_id_serialize(
@@ -1138,13 +1205,14 @@ class StoreApi:
             '404': None
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _get_order_by_id_serialize(
@@ -1180,6 +1248,7 @@ class StoreApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/xml', 'application/json'])  # noqa: E501
@@ -1205,6 +1274,7 @@ class StoreApi:
 
 
 
+
     @validate_call
     def place_order(
         self,
@@ -1227,7 +1297,6 @@ class StoreApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> Order:
-
         """Place an order for a pet
         
                 This method makes a synchronous HTTP request by default.
@@ -1237,18 +1306,24 @@ class StoreApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Order]
         """
 
         param = self._place_order_serialize(
@@ -1264,7 +1339,6 @@ class StoreApi:
             '400': None
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -1274,7 +1348,7 @@ class StoreApi:
 
 
     @validate_call
-    def place_order_without_preload_content(
+    def place_order_with_http_info(
         self,
         order: Annotated[Order, Field(description="order placed for purchasing the pet")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1294,8 +1368,7 @@ class StoreApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[Order]:
         """Place an order for a pet
         
                 This method makes a synchronous HTTP request by default.
@@ -1305,18 +1378,24 @@ class StoreApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Order]
         """
 
         param = self._place_order_serialize(
@@ -1332,12 +1411,16 @@ class StoreApi:
             '400': None
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def place_order_with_async(
+    def place_order_without_preload_content(
         self,
         order: Annotated[Order, Field(description="order placed for purchasing the pet")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1357,8 +1440,7 @@ class StoreApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Place an order for a pet
         
                 This method makes a synchronous HTTP request by default.
@@ -1368,18 +1450,24 @@ class StoreApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Order]
         """
 
         param = self._place_order_serialize(
@@ -1395,18 +1483,12 @@ class StoreApi:
             '400': None
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def place_order_with_http_info_async(
+    def place_order_with_async(
         self,
         order: Annotated[Order, Field(description="order placed for purchasing the pet")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1427,7 +1509,6 @@ class StoreApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Place an order for a pet
         
                 This method makes a synchronous HTTP request by default.
@@ -1437,18 +1518,24 @@ class StoreApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Order]
         """
 
         param = self._place_order_serialize(
@@ -1464,20 +1551,18 @@ class StoreApi:
             '400': None
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def place_order_with_http_info(
+    def place_order_with_http_info_async(
         self,
         order: Annotated[Order, Field(description="order placed for purchasing the pet")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1497,8 +1582,7 @@ class StoreApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> Order:
-
+    ) -> ApplyResult:
         """Place an order for a pet
         
                 This method makes a synchronous HTTP request by default.
@@ -1508,18 +1592,24 @@ class StoreApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[Order]
         """
 
         param = self._place_order_serialize(
@@ -1535,13 +1625,14 @@ class StoreApi:
             '400': None
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _place_order_serialize(
@@ -1577,6 +1668,7 @@ class StoreApi:
         if order is not None:
             _body_params = order
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/xml', 'application/json'])  # noqa: E501
diff --git a/samples/openapi3/client/petstore/python/petstore_api/api/user_api.py b/samples/openapi3/client/petstore/python/petstore_api/api/user_api.py
index bbab413517a..2b3511d1f49 100755
--- a/samples/openapi3/client/petstore/python/petstore_api/api/user_api.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/api/user_api.py
@@ -12,12 +12,16 @@
 """  # noqa: E501
 
 
-import re  # noqa: F401
 import io
 import warnings
 
-from pydantic import validate_call, ValidationError, Field
-from typing import Dict, List, Optional, Tuple, Union, Any, Annotated
+from pydantic import validate_call, Field
+from typing import Dict, List, Optional, Tuple, Union, Any
+
+try:
+    from typing import Annotated
+except ImportError:
+    from typing_extensions import Annotated
 
 from pydantic import Field
 from typing_extensions import Annotated
@@ -29,10 +33,6 @@ from petstore_api.models.user import User
 
 from petstore_api.api_client import ApiClient
 from petstore_api.api_response import ApiResponse
-from petstore_api.exceptions import (  # noqa: F401
-    ApiTypeError,
-    ApiValueError
-)
 from petstore_api.rest import RESTResponseType
 
 from multiprocessing.pool import ApplyResult
@@ -50,6 +50,7 @@ class UserApi:
             api_client = ApiClient.get_default()
         self.api_client = api_client
 
+
     @validate_call
     def create_user(
         self,
@@ -72,7 +73,6 @@ class UserApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """Create user
         This can only be done by the logged in user.
                 This method makes a synchronous HTTP request by default.
@@ -82,18 +82,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._create_user_serialize(
@@ -107,7 +113,6 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -117,7 +122,7 @@ class UserApi:
 
 
     @validate_call
-    def create_user_without_preload_content(
+    def create_user_with_http_info(
         self,
         user: Annotated[User, Field(description="Created user object")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -137,8 +142,7 @@ class UserApi:
             le=3,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """Create user
         This can only be done by the logged in user.
                 This method makes a synchronous HTTP request by default.
@@ -148,18 +152,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._create_user_serialize(
@@ -173,12 +183,16 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def create_user_with_async(
+    def create_user_without_preload_content(
         self,
         user: Annotated[User, Field(description="Created user object")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -198,8 +212,7 @@ class UserApi:
             le=3,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Create user
         This can only be done by the logged in user.
                 This method makes a synchronous HTTP request by default.
@@ -209,18 +222,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._create_user_serialize(
@@ -234,18 +253,12 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def create_user_with_http_info_async(
+    def create_user_with_async(
         self,
         user: Annotated[User, Field(description="Created user object")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -266,7 +279,6 @@ class UserApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Create user
         This can only be done by the logged in user.
                 This method makes a synchronous HTTP request by default.
@@ -276,18 +288,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._create_user_serialize(
@@ -301,20 +319,18 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def create_user_with_http_info(
+    def create_user_with_http_info_async(
         self,
         user: Annotated[User, Field(description="Created user object")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -334,8 +350,7 @@ class UserApi:
             le=3,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> ApplyResult:
         """Create user
         This can only be done by the logged in user.
                 This method makes a synchronous HTTP request by default.
@@ -345,18 +360,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._create_user_serialize(
@@ -370,13 +391,14 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _create_user_serialize(
@@ -416,6 +438,7 @@ class UserApi:
             _body_params = user
 
 
+
         # set the HTTP header `Content-Type`
         if _content_type:
             _header_params['Content-Type'] = _content_type
@@ -444,6 +467,7 @@ class UserApi:
 
 
 
+
     @validate_call
     def create_users_with_array_input(
         self,
@@ -466,7 +490,6 @@ class UserApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """Creates list of users with given input array
         
                 This method makes a synchronous HTTP request by default.
@@ -476,18 +499,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._create_users_with_array_input_serialize(
@@ -501,7 +530,6 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -511,7 +539,7 @@ class UserApi:
 
 
     @validate_call
-    def create_users_with_array_input_without_preload_content(
+    def create_users_with_array_input_with_http_info(
         self,
         user: Annotated[List[User], Field(description="List of user object")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -531,8 +559,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """Creates list of users with given input array
         
                 This method makes a synchronous HTTP request by default.
@@ -542,18 +569,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._create_users_with_array_input_serialize(
@@ -567,12 +600,16 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def create_users_with_array_input_with_async(
+    def create_users_with_array_input_without_preload_content(
         self,
         user: Annotated[List[User], Field(description="List of user object")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -592,8 +629,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Creates list of users with given input array
         
                 This method makes a synchronous HTTP request by default.
@@ -603,18 +639,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._create_users_with_array_input_serialize(
@@ -628,18 +670,12 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def create_users_with_array_input_with_http_info_async(
+    def create_users_with_array_input_with_async(
         self,
         user: Annotated[List[User], Field(description="List of user object")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -660,7 +696,6 @@ class UserApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Creates list of users with given input array
         
                 This method makes a synchronous HTTP request by default.
@@ -670,18 +705,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._create_users_with_array_input_serialize(
@@ -695,20 +736,18 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def create_users_with_array_input_with_http_info(
+    def create_users_with_array_input_with_http_info_async(
         self,
         user: Annotated[List[User], Field(description="List of user object")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -728,8 +767,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> ApplyResult:
         """Creates list of users with given input array
         
                 This method makes a synchronous HTTP request by default.
@@ -739,18 +777,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._create_users_with_array_input_serialize(
@@ -764,13 +808,14 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _create_users_with_array_input_serialize(
@@ -808,6 +853,7 @@ class UserApi:
             _body_params = user
 
 
+
         # set the HTTP header `Content-Type`
         if _content_type:
             _header_params['Content-Type'] = _content_type
@@ -836,6 +882,7 @@ class UserApi:
 
 
 
+
     @validate_call
     def create_users_with_list_input(
         self,
@@ -858,7 +905,6 @@ class UserApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """Creates list of users with given input array
         
                 This method makes a synchronous HTTP request by default.
@@ -868,18 +914,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._create_users_with_list_input_serialize(
@@ -893,7 +945,6 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -903,7 +954,7 @@ class UserApi:
 
 
     @validate_call
-    def create_users_with_list_input_without_preload_content(
+    def create_users_with_list_input_with_http_info(
         self,
         user: Annotated[List[User], Field(description="List of user object")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -923,8 +974,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """Creates list of users with given input array
         
                 This method makes a synchronous HTTP request by default.
@@ -934,18 +984,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._create_users_with_list_input_serialize(
@@ -959,12 +1015,16 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def create_users_with_list_input_with_async(
+    def create_users_with_list_input_without_preload_content(
         self,
         user: Annotated[List[User], Field(description="List of user object")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -984,8 +1044,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Creates list of users with given input array
         
                 This method makes a synchronous HTTP request by default.
@@ -995,18 +1054,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._create_users_with_list_input_serialize(
@@ -1020,18 +1085,12 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def create_users_with_list_input_with_http_info_async(
+    def create_users_with_list_input_with_async(
         self,
         user: Annotated[List[User], Field(description="List of user object")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1052,7 +1111,6 @@ class UserApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Creates list of users with given input array
         
                 This method makes a synchronous HTTP request by default.
@@ -1062,18 +1120,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._create_users_with_list_input_serialize(
@@ -1087,20 +1151,18 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def create_users_with_list_input_with_http_info(
+    def create_users_with_list_input_with_http_info_async(
         self,
         user: Annotated[List[User], Field(description="List of user object")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1120,8 +1182,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> ApplyResult:
         """Creates list of users with given input array
         
                 This method makes a synchronous HTTP request by default.
@@ -1131,18 +1192,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._create_users_with_list_input_serialize(
@@ -1156,13 +1223,14 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _create_users_with_list_input_serialize(
@@ -1200,6 +1268,7 @@ class UserApi:
             _body_params = user
 
 
+
         # set the HTTP header `Content-Type`
         if _content_type:
             _header_params['Content-Type'] = _content_type
@@ -1228,6 +1297,7 @@ class UserApi:
 
 
 
+
     @validate_call
     def delete_user(
         self,
@@ -1250,7 +1320,6 @@ class UserApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """Delete user
         This can only be done by the logged in user.
                 This method makes a synchronous HTTP request by default.
@@ -1260,18 +1329,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._delete_user_serialize(
@@ -1285,7 +1360,6 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -1295,7 +1369,7 @@ class UserApi:
 
 
     @validate_call
-    def delete_user_without_preload_content(
+    def delete_user_with_http_info(
         self,
         username: Annotated[StrictStr, Field(description="The name that needs to be deleted")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1315,8 +1389,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """Delete user
         This can only be done by the logged in user.
                 This method makes a synchronous HTTP request by default.
@@ -1326,18 +1399,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._delete_user_serialize(
@@ -1351,12 +1430,16 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def delete_user_with_async(
+    def delete_user_without_preload_content(
         self,
         username: Annotated[StrictStr, Field(description="The name that needs to be deleted")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1376,8 +1459,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Delete user
         This can only be done by the logged in user.
                 This method makes a synchronous HTTP request by default.
@@ -1387,18 +1469,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._delete_user_serialize(
@@ -1412,18 +1500,12 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def delete_user_with_http_info_async(
+    def delete_user_with_async(
         self,
         username: Annotated[StrictStr, Field(description="The name that needs to be deleted")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1444,7 +1526,6 @@ class UserApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Delete user
         This can only be done by the logged in user.
                 This method makes a synchronous HTTP request by default.
@@ -1454,18 +1535,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._delete_user_serialize(
@@ -1479,20 +1566,18 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def delete_user_with_http_info(
+    def delete_user_with_http_info_async(
         self,
         username: Annotated[StrictStr, Field(description="The name that needs to be deleted")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1512,8 +1597,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> ApplyResult:
         """Delete user
         This can only be done by the logged in user.
                 This method makes a synchronous HTTP request by default.
@@ -1523,18 +1607,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._delete_user_serialize(
@@ -1548,13 +1638,14 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _delete_user_serialize(
@@ -1592,6 +1683,7 @@ class UserApi:
 
 
 
+
         # authentication setting
         _auth_settings: List[str] = []  # noqa: E501
 
@@ -1612,6 +1704,7 @@ class UserApi:
 
 
 
+
     @validate_call
     def get_user_by_name(
         self,
@@ -1634,7 +1727,6 @@ class UserApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> User:
-
         """Get user by user name
         
                 This method makes a synchronous HTTP request by default.
@@ -1644,18 +1736,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[User]
         """
 
         param = self._get_user_by_name_serialize(
@@ -1672,7 +1770,6 @@ class UserApi:
             '404': None
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -1682,7 +1779,7 @@ class UserApi:
 
 
     @validate_call
-    def get_user_by_name_without_preload_content(
+    def get_user_by_name_with_http_info(
         self,
         username: Annotated[StrictStr, Field(description="The name that needs to be fetched. Use user1 for testing.")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1702,8 +1799,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[User]:
         """Get user by user name
         
                 This method makes a synchronous HTTP request by default.
@@ -1713,18 +1809,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[User]
         """
 
         param = self._get_user_by_name_serialize(
@@ -1741,12 +1843,16 @@ class UserApi:
             '404': None
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def get_user_by_name_with_async(
+    def get_user_by_name_without_preload_content(
         self,
         username: Annotated[StrictStr, Field(description="The name that needs to be fetched. Use user1 for testing.")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1766,8 +1872,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Get user by user name
         
                 This method makes a synchronous HTTP request by default.
@@ -1777,18 +1882,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[User]
         """
 
         param = self._get_user_by_name_serialize(
@@ -1805,18 +1916,12 @@ class UserApi:
             '404': None
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def get_user_by_name_with_http_info_async(
+    def get_user_by_name_with_async(
         self,
         username: Annotated[StrictStr, Field(description="The name that needs to be fetched. Use user1 for testing.")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1837,7 +1942,6 @@ class UserApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Get user by user name
         
                 This method makes a synchronous HTTP request by default.
@@ -1847,18 +1951,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[User]
         """
 
         param = self._get_user_by_name_serialize(
@@ -1875,20 +1985,18 @@ class UserApi:
             '404': None
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def get_user_by_name_with_http_info(
+    def get_user_by_name_with_http_info_async(
         self,
         username: Annotated[StrictStr, Field(description="The name that needs to be fetched. Use user1 for testing.")],
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
@@ -1908,8 +2016,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> User:
-
+    ) -> ApplyResult:
         """Get user by user name
         
                 This method makes a synchronous HTTP request by default.
@@ -1919,18 +2026,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[User]
         """
 
         param = self._get_user_by_name_serialize(
@@ -1947,13 +2060,14 @@ class UserApi:
             '404': None
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _get_user_by_name_serialize(
@@ -1989,6 +2103,7 @@ class UserApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/xml', 'application/json'])  # noqa: E501
@@ -2014,6 +2129,7 @@ class UserApi:
 
 
 
+
     @validate_call
     def login_user(
         self,
@@ -2037,7 +2153,6 @@ class UserApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> str:
-
         """Logs user into the system
         
                 This method makes a synchronous HTTP request by default.
@@ -2049,18 +2164,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._login_user_serialize(
@@ -2077,7 +2198,6 @@ class UserApi:
             '400': None
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -2087,7 +2207,7 @@ class UserApi:
 
 
     @validate_call
-    def login_user_without_preload_content(
+    def login_user_with_http_info(
         self,
         username: Annotated[StrictStr, Field(description="The user name for login")],
         password: Annotated[StrictStr, Field(description="The password for login in clear text")],
@@ -2108,8 +2228,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[str]:
         """Logs user into the system
         
                 This method makes a synchronous HTTP request by default.
@@ -2121,18 +2240,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._login_user_serialize(
@@ -2149,12 +2274,16 @@ class UserApi:
             '400': None
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def login_user_with_async(
+    def login_user_without_preload_content(
         self,
         username: Annotated[StrictStr, Field(description="The user name for login")],
         password: Annotated[StrictStr, Field(description="The password for login in clear text")],
@@ -2175,8 +2304,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Logs user into the system
         
                 This method makes a synchronous HTTP request by default.
@@ -2188,18 +2316,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._login_user_serialize(
@@ -2216,18 +2350,12 @@ class UserApi:
             '400': None
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def login_user_with_http_info_async(
+    def login_user_with_async(
         self,
         username: Annotated[StrictStr, Field(description="The user name for login")],
         password: Annotated[StrictStr, Field(description="The password for login in clear text")],
@@ -2249,7 +2377,6 @@ class UserApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Logs user into the system
         
                 This method makes a synchronous HTTP request by default.
@@ -2261,18 +2388,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._login_user_serialize(
@@ -2289,20 +2422,18 @@ class UserApi:
             '400': None
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def login_user_with_http_info(
+    def login_user_with_http_info_async(
         self,
         username: Annotated[StrictStr, Field(description="The user name for login")],
         password: Annotated[StrictStr, Field(description="The password for login in clear text")],
@@ -2323,8 +2454,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> str:
-
+    ) -> ApplyResult:
         """Logs user into the system
         
                 This method makes a synchronous HTTP request by default.
@@ -2336,18 +2466,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[str]
         """
 
         param = self._login_user_serialize(
@@ -2364,13 +2500,14 @@ class UserApi:
             '400': None
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _login_user_serialize(
@@ -2413,6 +2550,7 @@ class UserApi:
         # process the form parameters
         # process the body parameter
 
+
         # set the HTTP header `Accept`
         _header_params['Accept'] = self.api_client.select_header_accept(
             ['application/xml', 'application/json'])  # noqa: E501
@@ -2438,6 +2576,7 @@ class UserApi:
 
 
 
+
     @validate_call
     def logout_user(
         self,
@@ -2459,7 +2598,6 @@ class UserApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """Logs out current logged in user session
         
                 This method makes a synchronous HTTP request by default.
@@ -2467,18 +2605,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._logout_user_serialize(
@@ -2491,7 +2635,6 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -2501,7 +2644,7 @@ class UserApi:
 
 
     @validate_call
-    def logout_user_without_preload_content(
+    def logout_user_with_http_info(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -2520,8 +2663,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """Logs out current logged in user session
         
                 This method makes a synchronous HTTP request by default.
@@ -2529,18 +2671,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._logout_user_serialize(
@@ -2553,12 +2701,16 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def logout_user_with_async(
+    def logout_user_without_preload_content(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -2577,8 +2729,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Logs out current logged in user session
         
                 This method makes a synchronous HTTP request by default.
@@ -2586,18 +2737,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._logout_user_serialize(
@@ -2610,18 +2767,12 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def logout_user_with_http_info_async(
+    def logout_user_with_async(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -2641,7 +2792,6 @@ class UserApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Logs out current logged in user session
         
                 This method makes a synchronous HTTP request by default.
@@ -2649,18 +2799,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._logout_user_serialize(
@@ -2673,20 +2829,18 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def logout_user_with_http_info(
+    def logout_user_with_http_info_async(
         self,
         _request_timeout: Annotated[Union[float, Tuple[float, float], None], Field(
             description="timeout setting for this request. If one number provided, it will be total request timeout. It can also be a pair (tuple) of (connection, read) timeouts.",
@@ -2705,8 +2859,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> ApplyResult:
         """Logs out current logged in user session
         
                 This method makes a synchronous HTTP request by default.
@@ -2714,18 +2867,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._logout_user_serialize(
@@ -2738,13 +2897,14 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _logout_user_serialize(
@@ -2779,6 +2939,7 @@ class UserApi:
 
 
 
+
         # authentication setting
         _auth_settings: List[str] = []  # noqa: E501
 
@@ -2799,6 +2960,7 @@ class UserApi:
 
 
 
+
     @validate_call
     def update_user(
         self,
@@ -2822,7 +2984,6 @@ class UserApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> None:
-
         """Updated user
         This can only be done by the logged in user.
                 This method makes a synchronous HTTP request by default.
@@ -2834,18 +2995,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._update_user_serialize(
@@ -2860,7 +3027,6 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
         response_data.read()
         return self.api_client.response_deserialize(
@@ -2870,7 +3036,7 @@ class UserApi:
 
 
     @validate_call
-    def update_user_without_preload_content(
+    def update_user_with_http_info(
         self,
         username: Annotated[StrictStr, Field(description="name that need to be deleted")],
         user: Annotated[User, Field(description="Updated user object")],
@@ -2891,8 +3057,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> RESTResponseType:
-
+    ) -> ApiResponse[None]:
         """Updated user
         This can only be done by the logged in user.
                 This method makes a synchronous HTTP request by default.
@@ -2904,18 +3069,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._update_user_serialize(
@@ -2930,12 +3101,16 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        return response_data.response
+        response_data.read()
+        return self.api_client.response_deserialize(
+            response_data=response_data,
+            response_types_map=_response_types_map,
+        )
+
 
     @validate_call
-    def update_user_with_async(
+    def update_user_without_preload_content(
         self,
         username: Annotated[StrictStr, Field(description="name that need to be deleted")],
         user: Annotated[User, Field(description="Updated user object")],
@@ -2956,8 +3131,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> ApplyResult:
-
+    ) -> RESTResponseType:
         """Updated user
         This can only be done by the logged in user.
                 This method makes a synchronous HTTP request by default.
@@ -2969,18 +3143,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._update_user_serialize(
@@ -2995,18 +3175,12 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
+        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
+        return response_data.response
 
-        def callback(*args):
-            response_data = self.api_client.call_api(*args)
-            response_data.read()
-            return self.api_client.response_deserialize(
-                response_data=response_data,
-                response_types_map=_response_types_map,
-            ).data
-        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
     @validate_call
-    def update_user_with_http_info_async(
+    def update_user_with_async(
         self,
         username: Annotated[StrictStr, Field(description="name that need to be deleted")],
         user: Annotated[User, Field(description="Updated user object")],
@@ -3028,7 +3202,6 @@ class UserApi:
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
     ) -> ApplyResult:
-
         """Updated user
         This can only be done by the logged in user.
                 This method makes a synchronous HTTP request by default.
@@ -3040,18 +3213,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._update_user_serialize(
@@ -3066,20 +3245,18 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
         def callback(*args):
             response_data = self.api_client.call_api(*args)
             response_data.read()
             return self.api_client.response_deserialize(
                 response_data=response_data,
                 response_types_map=_response_types_map,
-            )
-
+            ).data
         return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     @validate_call
-    def update_user_with_http_info(
+    def update_user_with_http_info_async(
         self,
         username: Annotated[StrictStr, Field(description="name that need to be deleted")],
         user: Annotated[User, Field(description="Updated user object")],
@@ -3100,8 +3277,7 @@ class UserApi:
             le=0,
             description="index of the host to use, if the server has multiple hosts",
         )] = 0,
-    ) -> None:
-
+    ) -> ApplyResult:
         """Updated user
         This can only be done by the logged in user.
                 This method makes a synchronous HTTP request by default.
@@ -3113,18 +3289,24 @@ class UserApi:
                                  number provided, it will be total request
                                  timeout. It can also be a pair (tuple) of
                                  (connection, read) timeouts.
+        :type _request_timeout: int, tuple(int, int), optional
         :param _request_auth: set to override the auth_settings for an a single
                               request; this effectively ignores the authentication
                               in the spec for a single request.
         :type _request_auth: dict, optional
-        :type _content_type: string, optional: force content-type for the request
-        :type _headers: dict, optional: set to override the header params for an a single
-                        request; this effectively ignores the header params
-                        in the spec for a single request.
+        :param _content_type: force content-type for the request.
+        :type _content_type: str, Optional
+        :param _headers: set to override the headers for a single
+                         request; this effectively ignores the headers
+                         in the spec for a single request.
+        :type _headers: dict, optional
+        :param _host_index: set to override the host_index for a single
+                            request; this effectively ignores the host_index
+                            in the spec for a single request.
+        :type _host_index: int, optional
         :return: Returns the result object.
                  If the method is called asynchronously,
                  returns the request thread.
-        :rtype: ApiResponse[None]
         """
 
         param = self._update_user_serialize(
@@ -3139,13 +3321,14 @@ class UserApi:
         _response_types_map: Dict[str, Optional[str]] = {
             
         }
-
-        response_data = self.api_client.call_api(*param, _request_timeout=_request_timeout)
-        response_data.read()
-        return self.api_client.response_deserialize(
-            response_data=response_data,
-            response_types_map=_response_types_map,
-        )
+        def callback(*args):
+            response_data = self.api_client.call_api(*args)
+            response_data.read()
+            return self.api_client.response_deserialize(
+                response_data=response_data,
+                response_types_map=_response_types_map,
+            )
+        return self.api_client.pool.apply_async(callback, param + (_request_timeout,))
 
 
     def _update_user_serialize(
@@ -3185,6 +3368,7 @@ class UserApi:
             _body_params = user
 
 
+
         # set the HTTP header `Content-Type`
         if _content_type:
             _header_params['Content-Type'] = _content_type
diff --git a/samples/openapi3/client/petstore/python/petstore_api/api_response.py b/samples/openapi3/client/petstore/python/petstore_api/api_response.py
index a8d7d49812d..2ac1ada6e9b 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/api_response.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/api_response.py
@@ -15,3 +15,7 @@ class ApiResponse(BaseModel, Generic[T]):
     headers: Optional[Dict[StrictStr, StrictStr]] = Field(None, description="HTTP headers")
     data: T = Field(description="Deserialized data given the data type")
     raw_data: StrictBytes = Field(description="Raw data (HTTP response body)")
+
+    model_config = {
+        "arbitrary_types_allowed": True
+    }
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/additional_properties_any_type.py b/samples/openapi3/client/petstore/python/petstore_api/models/additional_properties_any_type.py
index 0c7dbcc6557..32e531f8f60 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/additional_properties_any_type.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/additional_properties_any_type.py
@@ -20,7 +20,6 @@ import json
 
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -80,7 +79,7 @@ class AdditionalPropertiesAnyType(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of AdditionalPropertiesAnyType from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/additional_properties_class.py b/samples/openapi3/client/petstore/python/petstore_api/models/additional_properties_class.py
index 396e7d12bcc..e8db92eb7aa 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/additional_properties_class.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/additional_properties_class.py
@@ -20,7 +20,6 @@ import json
 
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -81,7 +80,7 @@ class AdditionalPropertiesClass(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of AdditionalPropertiesClass from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/additional_properties_object.py b/samples/openapi3/client/petstore/python/petstore_api/models/additional_properties_object.py
index 3b562c4f800..14ebe9875cc 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/additional_properties_object.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/additional_properties_object.py
@@ -20,7 +20,6 @@ import json
 
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -80,7 +79,7 @@ class AdditionalPropertiesObject(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of AdditionalPropertiesObject from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/additional_properties_with_description_only.py b/samples/openapi3/client/petstore/python/petstore_api/models/additional_properties_with_description_only.py
index a626cd66730..d85a71af863 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/additional_properties_with_description_only.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/additional_properties_with_description_only.py
@@ -20,7 +20,6 @@ import json
 
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -80,7 +79,7 @@ class AdditionalPropertiesWithDescriptionOnly(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of AdditionalPropertiesWithDescriptionOnly from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/all_of_with_single_ref.py b/samples/openapi3/client/petstore/python/petstore_api/models/all_of_with_single_ref.py
index c25ff635069..ac3aca2317b 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/all_of_with_single_ref.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/all_of_with_single_ref.py
@@ -22,7 +22,6 @@ from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
 from pydantic import Field
 from petstore_api.models.single_ref_type import SingleRefType
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -83,7 +82,7 @@ class AllOfWithSingleRef(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of AllOfWithSingleRef from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/animal.py b/samples/openapi3/client/petstore/python/petstore_api/models/animal.py
index 138891981e1..9dc009379c7 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/animal.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/animal.py
@@ -21,7 +21,6 @@ import json
 from typing import Any, ClassVar, Dict, List, Optional, Union
 from pydantic import BaseModel, StrictStr
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -51,7 +50,7 @@ class Animal(BaseModel):
     }
 
     @classmethod
-    def get_discriminator_value(cls, obj: dict) -> str:
+    def get_discriminator_value(cls, obj: Dict) -> str:
         """Returns the discriminator value (object type) of the data"""
         discriminator_value = obj[cls.__discriminator_property_name]
         if discriminator_value:
@@ -99,7 +98,7 @@ class Animal(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Union[Self, Self]:
+    def from_dict(cls, obj: Dict) -> Union[Self, Self]:
         """Create an instance of Animal from a dict"""
         # look up the object type based on discriminator mapping
         object_type = cls.get_discriminator_value(obj)
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/any_of_color.py b/samples/openapi3/client/petstore/python/petstore_api/models/any_of_color.py
index db4718b868b..15b9eefd670 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/any_of_color.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/any_of_color.py
@@ -145,7 +145,7 @@ class AnyOfColor(BaseModel):
         else:
             return json.dumps(self.actual_instance)
 
-    def to_dict(self) -> dict:
+    def to_dict(self) -> Dict:
         """Returns the dict representation of the actual instance"""
         if self.actual_instance is None:
             return "null"
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/any_of_pig.py b/samples/openapi3/client/petstore/python/petstore_api/models/any_of_pig.py
index 2a2a0493222..be2f65a242e 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/any_of_pig.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/any_of_pig.py
@@ -122,7 +122,7 @@ class AnyOfPig(BaseModel):
         else:
             return json.dumps(self.actual_instance)
 
-    def to_dict(self) -> dict:
+    def to_dict(self) -> Dict:
         """Returns the dict representation of the actual instance"""
         if self.actual_instance is None:
             return "null"
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/api_response.py b/samples/openapi3/client/petstore/python/petstore_api/models/api_response.py
index 91af78b6d65..932223b9243 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/api_response.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/api_response.py
@@ -20,7 +20,6 @@ import json
 
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -82,7 +81,7 @@ class ApiResponse(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of ApiResponse from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/array_of_array_of_model.py b/samples/openapi3/client/petstore/python/petstore_api/models/array_of_array_of_model.py
index 1a1517f6371..419dac9635d 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/array_of_array_of_model.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/array_of_array_of_model.py
@@ -21,7 +21,6 @@ import json
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel
 from petstore_api.models.tag import Tag
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -90,7 +89,7 @@ class ArrayOfArrayOfModel(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of ArrayOfArrayOfModel from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/array_of_array_of_number_only.py b/samples/openapi3/client/petstore/python/petstore_api/models/array_of_array_of_number_only.py
index 22b78207654..55360c14b5f 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/array_of_array_of_number_only.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/array_of_array_of_number_only.py
@@ -21,7 +21,6 @@ import json
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictFloat
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -81,7 +80,7 @@ class ArrayOfArrayOfNumberOnly(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of ArrayOfArrayOfNumberOnly from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/array_of_number_only.py b/samples/openapi3/client/petstore/python/petstore_api/models/array_of_number_only.py
index af483a7d7c7..955bb7e3f31 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/array_of_number_only.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/array_of_number_only.py
@@ -21,7 +21,6 @@ import json
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictFloat
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -81,7 +80,7 @@ class ArrayOfNumberOnly(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of ArrayOfNumberOnly from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/array_test.py b/samples/openapi3/client/petstore/python/petstore_api/models/array_test.py
index 4a105ad0356..871b5264e35 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/array_test.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/array_test.py
@@ -23,7 +23,6 @@ from pydantic import BaseModel, StrictInt, StrictStr
 from pydantic import Field
 from typing_extensions import Annotated
 from petstore_api.models.read_only_first import ReadOnlyFirst
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -94,7 +93,7 @@ class ArrayTest(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of ArrayTest from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/basque_pig.py b/samples/openapi3/client/petstore/python/petstore_api/models/basque_pig.py
index 7bf0494f171..fb90cfde678 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/basque_pig.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/basque_pig.py
@@ -21,7 +21,6 @@ import json
 from typing import Any, ClassVar, Dict, List
 from pydantic import BaseModel, StrictStr
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -82,7 +81,7 @@ class BasquePig(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of BasquePig from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/capitalization.py b/samples/openapi3/client/petstore/python/petstore_api/models/capitalization.py
index 6405f1383e7..1a088764168 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/capitalization.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/capitalization.py
@@ -21,7 +21,6 @@ import json
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -86,7 +85,7 @@ class Capitalization(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Capitalization from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/cat.py b/samples/openapi3/client/petstore/python/petstore_api/models/cat.py
index 3801d7c5e73..1dbed945ff9 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/cat.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/cat.py
@@ -21,7 +21,6 @@ import json
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import StrictBool
 from petstore_api.models.animal import Animal
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -81,7 +80,7 @@ class Cat(Animal):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Cat from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/category.py b/samples/openapi3/client/petstore/python/petstore_api/models/category.py
index 655d732f274..21d6669777f 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/category.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/category.py
@@ -20,7 +20,6 @@ import json
 
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -81,7 +80,7 @@ class Category(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Category from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/circular_reference_model.py b/samples/openapi3/client/petstore/python/petstore_api/models/circular_reference_model.py
index 87c75c69894..e5dca285488 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/circular_reference_model.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/circular_reference_model.py
@@ -20,7 +20,6 @@ import json
 
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -84,7 +83,7 @@ class CircularReferenceModel(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of CircularReferenceModel from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/class_model.py b/samples/openapi3/client/petstore/python/petstore_api/models/class_model.py
index 44c2a4c46d6..72536e0d1d8 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/class_model.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/class_model.py
@@ -21,7 +21,6 @@ import json
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -81,7 +80,7 @@ class ClassModel(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of ClassModel from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/client.py b/samples/openapi3/client/petstore/python/petstore_api/models/client.py
index 6699b5e70d6..48295505d3d 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/client.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/client.py
@@ -20,7 +20,6 @@ import json
 
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -80,7 +79,7 @@ class Client(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Client from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/color.py b/samples/openapi3/client/petstore/python/petstore_api/models/color.py
index b5abaccbd0b..287542b1f82 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/color.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/color.py
@@ -157,7 +157,7 @@ class Color(BaseModel):
         else:
             return json.dumps(self.actual_instance)
 
-    def to_dict(self) -> dict:
+    def to_dict(self) -> Dict:
         """Returns the dict representation of the actual instance"""
         if self.actual_instance is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/creature.py b/samples/openapi3/client/petstore/python/petstore_api/models/creature.py
index eb6ef06e7dc..431da8677bc 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/creature.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/creature.py
@@ -21,7 +21,6 @@ import json
 from typing import Any, ClassVar, Dict, List
 from pydantic import BaseModel, StrictStr
 from petstore_api.models.creature_info import CreatureInfo
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -85,7 +84,7 @@ class Creature(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Creature from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/creature_info.py b/samples/openapi3/client/petstore/python/petstore_api/models/creature_info.py
index 4a8fc9bbf11..944bc3733b6 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/creature_info.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/creature_info.py
@@ -20,7 +20,6 @@ import json
 
 from typing import Any, ClassVar, Dict, List
 from pydantic import BaseModel, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -80,7 +79,7 @@ class CreatureInfo(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of CreatureInfo from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/danish_pig.py b/samples/openapi3/client/petstore/python/petstore_api/models/danish_pig.py
index 42858fbaca6..dd6de261279 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/danish_pig.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/danish_pig.py
@@ -21,7 +21,6 @@ import json
 from typing import Any, ClassVar, Dict, List
 from pydantic import BaseModel, StrictInt, StrictStr
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -82,7 +81,7 @@ class DanishPig(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of DanishPig from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/deprecated_object.py b/samples/openapi3/client/petstore/python/petstore_api/models/deprecated_object.py
index a0eec30d42a..09df86c8626 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/deprecated_object.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/deprecated_object.py
@@ -20,7 +20,6 @@ import json
 
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -80,7 +79,7 @@ class DeprecatedObject(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of DeprecatedObject from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/dog.py b/samples/openapi3/client/petstore/python/petstore_api/models/dog.py
index ce75782ef43..b6db7a445e4 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/dog.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/dog.py
@@ -21,7 +21,6 @@ import json
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import StrictStr
 from petstore_api.models.animal import Animal
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -81,7 +80,7 @@ class Dog(Animal):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Dog from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/dummy_model.py b/samples/openapi3/client/petstore/python/petstore_api/models/dummy_model.py
index f36c7e906d7..4f2cf753052 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/dummy_model.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/dummy_model.py
@@ -20,7 +20,6 @@ import json
 
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -84,7 +83,7 @@ class DummyModel(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of DummyModel from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/enum_arrays.py b/samples/openapi3/client/petstore/python/petstore_api/models/enum_arrays.py
index f0a8bcd34e1..490a03203dd 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/enum_arrays.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/enum_arrays.py
@@ -20,7 +20,6 @@ import json
 
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr, field_validator
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -102,7 +101,7 @@ class EnumArrays(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of EnumArrays from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/enum_test.py b/samples/openapi3/client/petstore/python/petstore_api/models/enum_test.py
index 3072578a82c..dd3b77923fb 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/enum_test.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/enum_test.py
@@ -25,7 +25,6 @@ from petstore_api.models.outer_enum import OuterEnum
 from petstore_api.models.outer_enum_default_value import OuterEnumDefaultValue
 from petstore_api.models.outer_enum_integer import OuterEnumInteger
 from petstore_api.models.outer_enum_integer_default_value import OuterEnumIntegerDefaultValue
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -145,7 +144,7 @@ class EnumTest(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of EnumTest from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/file.py b/samples/openapi3/client/petstore/python/petstore_api/models/file.py
index e3fa35e73d4..91eb410b72d 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/file.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/file.py
@@ -21,7 +21,6 @@ import json
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -81,7 +80,7 @@ class File(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of File from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/file_schema_test_class.py b/samples/openapi3/client/petstore/python/petstore_api/models/file_schema_test_class.py
index a1dadbb4a2f..f3aaf78f420 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/file_schema_test_class.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/file_schema_test_class.py
@@ -21,7 +21,6 @@ import json
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel
 from petstore_api.models.file import File
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -92,7 +91,7 @@ class FileSchemaTestClass(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of FileSchemaTestClass from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/first_ref.py b/samples/openapi3/client/petstore/python/petstore_api/models/first_ref.py
index c74cacde3be..ee5c7f4cdff 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/first_ref.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/first_ref.py
@@ -20,7 +20,6 @@ import json
 
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -84,7 +83,7 @@ class FirstRef(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of FirstRef from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/foo.py b/samples/openapi3/client/petstore/python/petstore_api/models/foo.py
index 263cd0026ec..60eff423236 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/foo.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/foo.py
@@ -20,7 +20,6 @@ import json
 
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -80,7 +79,7 @@ class Foo(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Foo from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/foo_get_default_response.py b/samples/openapi3/client/petstore/python/petstore_api/models/foo_get_default_response.py
index 8fdaee41b98..3af0e92268e 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/foo_get_default_response.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/foo_get_default_response.py
@@ -21,7 +21,6 @@ import json
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel
 from petstore_api.models.foo import Foo
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -84,7 +83,7 @@ class FooGetDefaultResponse(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of FooGetDefaultResponse from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/format_test.py b/samples/openapi3/client/petstore/python/petstore_api/models/format_test.py
index 685fb0250f6..64ce9d7a255 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/format_test.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/format_test.py
@@ -23,7 +23,6 @@ from pydantic import BaseModel, StrictBytes, StrictInt, StrictStr, field_validat
 from decimal import Decimal
 from pydantic import Field
 from typing_extensions import Annotated
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -139,7 +138,7 @@ class FormatTest(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of FormatTest from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/has_only_read_only.py b/samples/openapi3/client/petstore/python/petstore_api/models/has_only_read_only.py
index 68f2b2da1f4..479283b8630 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/has_only_read_only.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/has_only_read_only.py
@@ -20,7 +20,6 @@ import json
 
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -85,7 +84,7 @@ class HasOnlyReadOnly(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of HasOnlyReadOnly from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/health_check_result.py b/samples/openapi3/client/petstore/python/petstore_api/models/health_check_result.py
index 7665cc0df35..52c85cf5c9a 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/health_check_result.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/health_check_result.py
@@ -21,7 +21,6 @@ import json
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -86,7 +85,7 @@ class HealthCheckResult(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of HealthCheckResult from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/inner_dict_with_property.py b/samples/openapi3/client/petstore/python/petstore_api/models/inner_dict_with_property.py
index 73aba7cd2b0..adb80d8548b 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/inner_dict_with_property.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/inner_dict_with_property.py
@@ -21,7 +21,6 @@ import json
 from typing import Any, ClassVar, Dict, List, Optional, Union
 from pydantic import BaseModel
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -81,7 +80,7 @@ class InnerDictWithProperty(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of InnerDictWithProperty from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/int_or_string.py b/samples/openapi3/client/petstore/python/petstore_api/models/int_or_string.py
index cd6f56fdeba..2a0998a5b54 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/int_or_string.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/int_or_string.py
@@ -134,7 +134,7 @@ class IntOrString(BaseModel):
         else:
             return json.dumps(self.actual_instance)
 
-    def to_dict(self) -> dict:
+    def to_dict(self) -> Dict:
         """Returns the dict representation of the actual instance"""
         if self.actual_instance is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/list_class.py b/samples/openapi3/client/petstore/python/petstore_api/models/list_class.py
index f0951e6ca3d..1dde5f7e593 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/list_class.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/list_class.py
@@ -21,7 +21,6 @@ import json
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -81,7 +80,7 @@ class ListClass(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of ListClass from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/map_of_array_of_model.py b/samples/openapi3/client/petstore/python/petstore_api/models/map_of_array_of_model.py
index cbc1f669c86..c98b2bd495e 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/map_of_array_of_model.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/map_of_array_of_model.py
@@ -22,7 +22,6 @@ from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel
 from pydantic import Field
 from petstore_api.models.tag import Tag
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -91,7 +90,7 @@ class MapOfArrayOfModel(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of MapOfArrayOfModel from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/map_test.py b/samples/openapi3/client/petstore/python/petstore_api/models/map_test.py
index 504c11a9aed..c8f669145dc 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/map_test.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/map_test.py
@@ -20,7 +20,6 @@ import json
 
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictBool, StrictStr, field_validator
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -93,7 +92,7 @@ class MapTest(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of MapTest from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/mixed_properties_and_additional_properties_class.py b/samples/openapi3/client/petstore/python/petstore_api/models/mixed_properties_and_additional_properties_class.py
index a9dbe95b3da..db7f0f3b962 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/mixed_properties_and_additional_properties_class.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/mixed_properties_and_additional_properties_class.py
@@ -22,7 +22,6 @@ from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
 from pydantic import Field
 from petstore_api.models.animal import Animal
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -91,7 +90,7 @@ class MixedPropertiesAndAdditionalPropertiesClass(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of MixedPropertiesAndAdditionalPropertiesClass from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/model200_response.py b/samples/openapi3/client/petstore/python/petstore_api/models/model200_response.py
index 1f190eb4a08..a9306bfe504 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/model200_response.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/model200_response.py
@@ -21,7 +21,6 @@ import json
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt, StrictStr
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -82,7 +81,7 @@ class Model200Response(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Model200Response from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/model_return.py b/samples/openapi3/client/petstore/python/petstore_api/models/model_return.py
index 38d635780f1..d542e53bdf2 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/model_return.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/model_return.py
@@ -21,7 +21,6 @@ import json
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -81,7 +80,7 @@ class ModelReturn(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of ModelReturn from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/name.py b/samples/openapi3/client/petstore/python/petstore_api/models/name.py
index 00575c96891..a001aa195d9 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/name.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/name.py
@@ -21,7 +21,6 @@ import json
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt, StrictStr
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -88,7 +87,7 @@ class Name(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Name from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/nullable_class.py b/samples/openapi3/client/petstore/python/petstore_api/models/nullable_class.py
index 4b76865b0d3..0967bd1b98b 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/nullable_class.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/nullable_class.py
@@ -20,7 +20,6 @@ import json
 from datetime import date, datetime
 from typing import Any, ClassVar, Dict, List, Optional, Union
 from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -147,7 +146,7 @@ class NullableClass(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of NullableClass from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/nullable_property.py b/samples/openapi3/client/petstore/python/petstore_api/models/nullable_property.py
index da7b79fcb40..28cfc830ab4 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/nullable_property.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/nullable_property.py
@@ -22,7 +22,6 @@ from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt, field_validator
 from pydantic import Field
 from typing_extensions import Annotated
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -98,7 +97,7 @@ class NullableProperty(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of NullableProperty from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/number_only.py b/samples/openapi3/client/petstore/python/petstore_api/models/number_only.py
index 2b8d76dab0d..b062d1b38f2 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/number_only.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/number_only.py
@@ -21,7 +21,6 @@ import json
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictFloat
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -81,7 +80,7 @@ class NumberOnly(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of NumberOnly from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/object_to_test_additional_properties.py b/samples/openapi3/client/petstore/python/petstore_api/models/object_to_test_additional_properties.py
index b09bcedac46..db43d31f898 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/object_to_test_additional_properties.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/object_to_test_additional_properties.py
@@ -21,7 +21,6 @@ import json
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictBool
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -81,7 +80,7 @@ class ObjectToTestAdditionalProperties(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of ObjectToTestAdditionalProperties from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/object_with_deprecated_fields.py b/samples/openapi3/client/petstore/python/petstore_api/models/object_with_deprecated_fields.py
index b1113b9a817..233a40801ce 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/object_with_deprecated_fields.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/object_with_deprecated_fields.py
@@ -22,7 +22,6 @@ from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictFloat, StrictStr
 from pydantic import Field
 from petstore_api.models.deprecated_object import DeprecatedObject
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -88,7 +87,7 @@ class ObjectWithDeprecatedFields(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of ObjectWithDeprecatedFields from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/one_of_enum_string.py b/samples/openapi3/client/petstore/python/petstore_api/models/one_of_enum_string.py
index 3e9c111a4a7..614e0fd658f 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/one_of_enum_string.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/one_of_enum_string.py
@@ -126,7 +126,7 @@ class OneOfEnumString(BaseModel):
         else:
             return json.dumps(self.actual_instance)
 
-    def to_dict(self) -> dict:
+    def to_dict(self) -> Dict:
         """Returns the dict representation of the actual instance"""
         if self.actual_instance is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/order.py b/samples/openapi3/client/petstore/python/petstore_api/models/order.py
index 5d58dc22d2e..6037cc47dd6 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/order.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/order.py
@@ -21,7 +21,6 @@ from datetime import datetime
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -96,7 +95,7 @@ class Order(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Order from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/outer_composite.py b/samples/openapi3/client/petstore/python/petstore_api/models/outer_composite.py
index ca58500b235..fa4ee7f8146 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/outer_composite.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/outer_composite.py
@@ -20,7 +20,6 @@ import json
 
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictBool, StrictFloat, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -82,7 +81,7 @@ class OuterComposite(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of OuterComposite from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/outer_object_with_enum_property.py b/samples/openapi3/client/petstore/python/petstore_api/models/outer_object_with_enum_property.py
index 4ee7ca1a091..b969041eb2e 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/outer_object_with_enum_property.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/outer_object_with_enum_property.py
@@ -22,7 +22,6 @@ from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel
 from petstore_api.models.outer_enum import OuterEnum
 from petstore_api.models.outer_enum_integer import OuterEnumInteger
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -88,7 +87,7 @@ class OuterObjectWithEnumProperty(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of OuterObjectWithEnumProperty from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/parent.py b/samples/openapi3/client/petstore/python/petstore_api/models/parent.py
index 727a54a2523..aff3baf962c 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/parent.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/parent.py
@@ -22,7 +22,6 @@ from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel
 from pydantic import Field
 from petstore_api.models.inner_dict_with_property import InnerDictWithProperty
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -89,7 +88,7 @@ class Parent(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Parent from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/parent_with_optional_dict.py b/samples/openapi3/client/petstore/python/petstore_api/models/parent_with_optional_dict.py
index c0192fdcba4..f22ca812e80 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/parent_with_optional_dict.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/parent_with_optional_dict.py
@@ -22,7 +22,6 @@ from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel
 from pydantic import Field
 from petstore_api.models.inner_dict_with_property import InnerDictWithProperty
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -89,7 +88,7 @@ class ParentWithOptionalDict(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of ParentWithOptionalDict from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/pet.py b/samples/openapi3/client/petstore/python/petstore_api/models/pet.py
index 50ee73984a3..dad0e81f5a0 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/pet.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/pet.py
@@ -24,7 +24,6 @@ from pydantic import Field
 from typing_extensions import Annotated
 from petstore_api.models.category import Category
 from petstore_api.models.tag import Tag
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -109,7 +108,7 @@ class Pet(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Pet from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/pig.py b/samples/openapi3/client/petstore/python/petstore_api/models/pig.py
index a7912f71a22..8fef73ebb80 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/pig.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/pig.py
@@ -144,7 +144,7 @@ class Pig(BaseModel):
         else:
             return json.dumps(self.actual_instance)
 
-    def to_dict(self) -> dict:
+    def to_dict(self) -> Dict:
         """Returns the dict representation of the actual instance"""
         if self.actual_instance is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/property_name_collision.py b/samples/openapi3/client/petstore/python/petstore_api/models/property_name_collision.py
index 40e492c3d8c..b09d733a980 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/property_name_collision.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/property_name_collision.py
@@ -21,7 +21,6 @@ import json
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -83,7 +82,7 @@ class PropertyNameCollision(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of PropertyNameCollision from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/read_only_first.py b/samples/openapi3/client/petstore/python/petstore_api/models/read_only_first.py
index c513afd99ea..cc07342a2ba 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/read_only_first.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/read_only_first.py
@@ -20,7 +20,6 @@ import json
 
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -83,7 +82,7 @@ class ReadOnlyFirst(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of ReadOnlyFirst from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/second_ref.py b/samples/openapi3/client/petstore/python/petstore_api/models/second_ref.py
index 440a92d69ff..ebf85734035 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/second_ref.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/second_ref.py
@@ -20,7 +20,6 @@ import json
 
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -84,7 +83,7 @@ class SecondRef(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of SecondRef from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/self_reference_model.py b/samples/openapi3/client/petstore/python/petstore_api/models/self_reference_model.py
index dea2c090fa2..5375ea925ab 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/self_reference_model.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/self_reference_model.py
@@ -20,7 +20,6 @@ import json
 
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -84,7 +83,7 @@ class SelfReferenceModel(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of SelfReferenceModel from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/special_model_name.py b/samples/openapi3/client/petstore/python/petstore_api/models/special_model_name.py
index 1ebdc712468..6a253c44912 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/special_model_name.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/special_model_name.py
@@ -21,7 +21,6 @@ import json
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -81,7 +80,7 @@ class SpecialModelName(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of SpecialModelName from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/special_name.py b/samples/openapi3/client/petstore/python/petstore_api/models/special_name.py
index cb6d63fbfa9..7ebd0f3b9d9 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/special_name.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/special_name.py
@@ -22,7 +22,6 @@ from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt, StrictStr, field_validator
 from pydantic import Field
 from petstore_api.models.category import Category
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -97,7 +96,7 @@ class SpecialName(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of SpecialName from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/tag.py b/samples/openapi3/client/petstore/python/petstore_api/models/tag.py
index 64fbd720e3c..20861301246 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/tag.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/tag.py
@@ -20,7 +20,6 @@ import json
 
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -81,7 +80,7 @@ class Tag(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Tag from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/test_inline_freeform_additional_properties_request.py b/samples/openapi3/client/petstore/python/petstore_api/models/test_inline_freeform_additional_properties_request.py
index ffd24d69c23..c07b9528a31 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/test_inline_freeform_additional_properties_request.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/test_inline_freeform_additional_properties_request.py
@@ -21,7 +21,6 @@ import json
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -81,7 +80,7 @@ class TestInlineFreeformAdditionalPropertiesRequest(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of TestInlineFreeformAdditionalPropertiesRequest from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/tiger.py b/samples/openapi3/client/petstore/python/petstore_api/models/tiger.py
index d2d1f61b440..c4cb5a9c2f7 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/tiger.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/tiger.py
@@ -20,7 +20,6 @@ import json
 
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -80,7 +79,7 @@ class Tiger(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of Tiger from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/unnamed_dict_with_additional_model_list_properties.py b/samples/openapi3/client/petstore/python/petstore_api/models/unnamed_dict_with_additional_model_list_properties.py
index 4aa1fcbac58..229f86fcd75 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/unnamed_dict_with_additional_model_list_properties.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/unnamed_dict_with_additional_model_list_properties.py
@@ -22,7 +22,6 @@ from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel
 from pydantic import Field
 from petstore_api.models.creature_info import CreatureInfo
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -91,7 +90,7 @@ class UnnamedDictWithAdditionalModelListProperties(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of UnnamedDictWithAdditionalModelListProperties from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/unnamed_dict_with_additional_string_list_properties.py b/samples/openapi3/client/petstore/python/petstore_api/models/unnamed_dict_with_additional_string_list_properties.py
index bee320032a9..097b235aea9 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/unnamed_dict_with_additional_string_list_properties.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/unnamed_dict_with_additional_string_list_properties.py
@@ -21,7 +21,6 @@ import json
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictStr
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -81,7 +80,7 @@ class UnnamedDictWithAdditionalStringListProperties(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of UnnamedDictWithAdditionalStringListProperties from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/user.py b/samples/openapi3/client/petstore/python/petstore_api/models/user.py
index 250c3aac639..a88166b5453 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/user.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/user.py
@@ -21,7 +21,6 @@ import json
 from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt, StrictStr
 from pydantic import Field
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -88,7 +87,7 @@ class User(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of User from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/models/with_nested_one_of.py b/samples/openapi3/client/petstore/python/petstore_api/models/with_nested_one_of.py
index 75fc92ba286..fd1fb22708d 100644
--- a/samples/openapi3/client/petstore/python/petstore_api/models/with_nested_one_of.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/models/with_nested_one_of.py
@@ -22,7 +22,6 @@ from typing import Any, ClassVar, Dict, List, Optional
 from pydantic import BaseModel, StrictInt
 from petstore_api.models.one_of_enum_string import OneOfEnumString
 from petstore_api.models.pig import Pig
-from typing import Dict, Any
 try:
     from typing import Self
 except ImportError:
@@ -90,7 +89,7 @@ class WithNestedOneOf(BaseModel):
         return _dict
 
     @classmethod
-    def from_dict(cls, obj: dict) -> Self:
+    def from_dict(cls, obj: Dict) -> Self:
         """Create an instance of WithNestedOneOf from a dict"""
         if obj is None:
             return None
diff --git a/samples/openapi3/client/petstore/python/petstore_api/rest.py b/samples/openapi3/client/petstore/python/petstore_api/rest.py
index f6d79fc6ba9..b1dd17f6207 100755
--- a/samples/openapi3/client/petstore/python/petstore_api/rest.py
+++ b/samples/openapi3/client/petstore/python/petstore_api/rest.py
@@ -14,14 +14,13 @@
 
 import io
 import json
-import logging
 import re
 import ssl
 
 from urllib.parse import urlencode, quote_plus
 import urllib3
 
-from petstore_api.exceptions import ApiException
+from petstore_api.exceptions import ApiException, ApiValueError
 
 RESTResponseType = urllib3.HTTPResponse
 
