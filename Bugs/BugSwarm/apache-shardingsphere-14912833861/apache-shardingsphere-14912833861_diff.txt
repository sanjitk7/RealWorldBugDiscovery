diff --git a/jdbc/core/src/test/java/org/apache/shardingsphere/driver/jdbc/context/JDBCContextTest.java b/jdbc/core/src/test/java/org/apache/shardingsphere/driver/jdbc/context/JDBCContextTest.java
deleted file mode 100644
index 2f89a1494fe..00000000000
--- a/jdbc/core/src/test/java/org/apache/shardingsphere/driver/jdbc/context/JDBCContextTest.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.driver.jdbc.context;
-
-import org.apache.shardingsphere.driver.state.circuit.datasource.CircuitBreakerDataSource;
-import org.apache.shardingsphere.mode.manager.cluster.coordinator.registry.config.event.datasource.DataSourceUnitsChangedEvent;
-import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.extension.ExtendWith;
-import org.mockito.junit.jupiter.MockitoExtension;
-
-import java.sql.SQLException;
-import java.util.Collections;
-
-import static org.junit.jupiter.api.Assertions.assertNotNull;
-import static org.junit.jupiter.api.Assertions.assertNull;
-import static org.mockito.Mockito.mock;
-
-@ExtendWith(MockitoExtension.class)
-class JDBCContextTest {
-    
-    @Test
-    void assertGetCachedDatabaseMetaDataForNullValue() throws Exception {
-        assertNull(new JDBCContext(Collections.emptyMap()).getCachedDatabaseMetaData());
-    }
-    
-    @Test
-    void assertGetCachedDatabaseMetaDataForSingleValue() throws SQLException {
-        assertNotNull(new JDBCContext(Collections.singletonMap("foo_db", new CircuitBreakerDataSource())).getCachedDatabaseMetaData());
-    }
-    
-    @Test
-    void assertGetCachedDatabaseMetaDataAfterRefreshingExisting() throws SQLException {
-        JDBCContext jdbcContext = new JDBCContext(Collections.singletonMap("foo_db", new CircuitBreakerDataSource()));
-        jdbcContext.refreshCachedDatabaseMetaData(mock(DataSourceUnitsChangedEvent.class));
-        assertNull(jdbcContext.getCachedDatabaseMetaData());
-    }
-}
diff --git a/mode/core/src/main/java/org/apache/shardingsphere/mode/manager/ContextManager.java b/mode/core/src/main/java/org/apache/shardingsphere/mode/manager/ContextManager.java
index ff90bc8731c..a9288c9b7a6 100644
--- a/mode/core/src/main/java/org/apache/shardingsphere/mode/manager/ContextManager.java
+++ b/mode/core/src/main/java/org/apache/shardingsphere/mode/manager/ContextManager.java
@@ -330,6 +330,40 @@ public final class ContextManager implements AutoCloseable {
         switchingResource.closeStaleDataSources();
     }
     
+    /**
+     * Register storage node.
+     *
+     * @param databaseName database name
+     * @param dataSourceProps data source properties
+     */
+    @SuppressWarnings("rawtypes")
+    public synchronized void registerStorageNode(final String databaseName, final Map<String, DataSourceProperties> dataSourceProps) {
+        // TODO Support for registering storage node #25447
+    }
+    
+    /**
+     * Alter storage node.
+     *
+     * @param databaseName database name
+     * @param storageUnitName storage unit name
+     * @param dataSourceProps data source properties
+     */
+    @SuppressWarnings("rawtypes")
+    public synchronized void alterStorageNode(final String databaseName, final String storageUnitName, final Map<String, DataSourceProperties> dataSourceProps) {
+        // TODO Support for registering storage node #25447
+    }
+    
+    /**
+     * Unregister storage node.
+     *
+     * @param databaseName database name
+     * @param storageUnitName storage unit name
+     */
+    @SuppressWarnings("rawtypes")
+    public synchronized void unregisterStorageNode(final String databaseName, final String storageUnitName) {
+        // TODO Support for registering storage node #25447
+    }
+    
     /**
      * Alter rule configuration.
      * 
diff --git a/mode/type/cluster/core/src/main/java/org/apache/shardingsphere/mode/manager/cluster/coordinator/registry/metadata/watcher/MetaDataChangedWatcher.java b/mode/type/cluster/core/src/main/java/org/apache/shardingsphere/mode/manager/cluster/coordinator/registry/metadata/watcher/MetaDataChangedWatcher.java
index c09cc5de149..f188bc90b09 100644
--- a/mode/type/cluster/core/src/main/java/org/apache/shardingsphere/mode/manager/cluster/coordinator/registry/metadata/watcher/MetaDataChangedWatcher.java
+++ b/mode/type/cluster/core/src/main/java/org/apache/shardingsphere/mode/manager/cluster/coordinator/registry/metadata/watcher/MetaDataChangedWatcher.java
@@ -173,7 +173,7 @@ public final class MetaDataChangedWatcher implements GovernanceWatcher<Governanc
         Map<String, DataSourceProperties> dataSourcePropertiesMap = yamlDataSources.isEmpty()
                 ? new HashMap<>()
                 : yamlDataSources.entrySet().stream().collect(Collectors.toMap(
-                Entry::getKey, entry -> new YamlDataSourceConfigurationSwapper().swapToDataSourceProperties(entry.getValue()), (oldValue, currentValue) -> oldValue, LinkedHashMap::new));
+                        Entry::getKey, entry -> new YamlDataSourceConfigurationSwapper().swapToDataSourceProperties(entry.getValue()), (oldValue, currentValue) -> oldValue, LinkedHashMap::new));
         return new DataSourceNodesChangedEvent(databaseName, databaseVersion, dataSourcePropertiesMap);
     }
     
diff --git a/mode/type/cluster/core/src/main/java/org/apache/shardingsphere/mode/manager/cluster/coordinator/subscriber/NewConfigurationChangedSubscriber.java b/mode/type/cluster/core/src/main/java/org/apache/shardingsphere/mode/manager/cluster/coordinator/subscriber/NewConfigurationChangedSubscriber.java
index a2e841d74d6..c67f82d8ce2 100644
--- a/mode/type/cluster/core/src/main/java/org/apache/shardingsphere/mode/manager/cluster/coordinator/subscriber/NewConfigurationChangedSubscriber.java
+++ b/mode/type/cluster/core/src/main/java/org/apache/shardingsphere/mode/manager/cluster/coordinator/subscriber/NewConfigurationChangedSubscriber.java
@@ -22,6 +22,9 @@ import org.apache.shardingsphere.mode.event.config.AlterDatabaseRuleConfiguratio
 import org.apache.shardingsphere.mode.event.config.DropDatabaseRuleConfigurationEvent;
 import org.apache.shardingsphere.mode.event.config.global.AlterGlobalRuleConfigurationEvent;
 import org.apache.shardingsphere.mode.event.config.global.AlterPropertiesEvent;
+import org.apache.shardingsphere.mode.event.datasource.nodes.AlterStorageNodeEvent;
+import org.apache.shardingsphere.mode.event.datasource.nodes.RegisterStorageNodeEvent;
+import org.apache.shardingsphere.mode.event.datasource.nodes.UnregisterStorageNodeEvent;
 import org.apache.shardingsphere.mode.event.datasource.unit.AlterStorageUnitEvent;
 import org.apache.shardingsphere.mode.event.datasource.unit.RegisterStorageUnitEvent;
 import org.apache.shardingsphere.mode.event.datasource.unit.UnregisterStorageUnitEvent;
@@ -82,6 +85,47 @@ public final class NewConfigurationChangedSubscriber {
         contextManager.unregisterStorageUnit(event.getDatabaseName(), event.getStorageUnitName());
     }
     
+    /**
+     * Renew for register storage node.
+     *
+     * @param event register storage node event
+     */
+    @Subscribe
+    public void renew(final RegisterStorageNodeEvent event) {
+        if (!event.getActiveVersion().equals(contextManager.getMetaDataContexts().getPersistService().getMetaDataVersionPersistService().getActiveVersionByFullPath(event.getActiveVersionKey()))) {
+            return;
+        }
+        contextManager.registerStorageNode(event.getDatabaseName(),
+                contextManager.getMetaDataContexts().getPersistService().getDataSourceUnitService().load(event.getDatabaseName(), event.getStorageNodeName()));
+    }
+    
+    /**
+     * Renew for alter storage node.
+     *
+     * @param event register storage node event
+     */
+    @Subscribe
+    public void renew(final AlterStorageNodeEvent event) {
+        if (!event.getActiveVersion().equals(contextManager.getMetaDataContexts().getPersistService().getMetaDataVersionPersistService().getActiveVersionByFullPath(event.getActiveVersionKey()))) {
+            return;
+        }
+        contextManager.alterStorageNode(event.getDatabaseName(), event.getStorageNodeName(),
+                contextManager.getMetaDataContexts().getPersistService().getDataSourceUnitService().load(event.getDatabaseName(), event.getStorageNodeName()));
+    }
+    
+    /**
+     * Renew for unregister storage node.
+     *
+     * @param event register storage node event
+     */
+    @Subscribe
+    public void renew(final UnregisterStorageNodeEvent event) {
+        if (!contextManager.getMetaDataContexts().getMetaData().containsDatabase(event.getDatabaseName())) {
+            return;
+        }
+        contextManager.unregisterStorageNode(event.getDatabaseName(), event.getStorageNodeName());
+    }
+    
     /**
      * Renew for database rule configuration.
      *
diff --git a/mode/type/cluster/core/src/test/java/org/apache/shardingsphere/mode/manager/cluster/coordinator/registry/metadata/watcher/MetaDataChangedWatcherTest.java b/mode/type/cluster/core/src/test/java/org/apache/shardingsphere/mode/manager/cluster/coordinator/registry/metadata/watcher/MetaDataChangedWatcherTest.java
index 14abec184af..9c4325c22e1 100644
--- a/mode/type/cluster/core/src/test/java/org/apache/shardingsphere/mode/manager/cluster/coordinator/registry/metadata/watcher/MetaDataChangedWatcherTest.java
+++ b/mode/type/cluster/core/src/test/java/org/apache/shardingsphere/mode/manager/cluster/coordinator/registry/metadata/watcher/MetaDataChangedWatcherTest.java
@@ -75,7 +75,7 @@ class MetaDataChangedWatcherTest {
     
     @Test
     void assertCreateDataSourceChangedEvent() {
-        String key = "/metadata/sharding_db/versions/0/data_sources";
+        String key = "/metadata/sharding_db/versions/0/data_sources/units";
         String value = "{}";
         Optional<GovernanceEvent> actual = createEvent(key, value, Type.UPDATED);
         assertTrue(actual.isPresent());
@@ -83,7 +83,7 @@ class MetaDataChangedWatcherTest {
     
     @Test
     void assertCreateDataSourceChangedEventWithAddEvent() {
-        String key = "/metadata/sharding_db/versions/0/data_sources";
+        String key = "/metadata/sharding_db/versions/0/data_sources/units";
         String value = "{}";
         Optional<GovernanceEvent> actual = createEvent(key, value, Type.ADDED);
         assertTrue(actual.isPresent());
