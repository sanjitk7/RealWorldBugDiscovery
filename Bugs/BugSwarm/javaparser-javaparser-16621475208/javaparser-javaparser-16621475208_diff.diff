diff --git a/javaparser-core-testing/src/test/java/com/github/javaparser/ast/validator/Java15ValidatorTest.java b/javaparser-core-testing/src/test/java/com/github/javaparser/ast/validator/Java15ValidatorTest.java
index b9111bb7d..11f295086 100644
--- a/javaparser-core-testing/src/test/java/com/github/javaparser/ast/validator/Java15ValidatorTest.java
+++ b/javaparser-core-testing/src/test/java/com/github/javaparser/ast/validator/Java15ValidatorTest.java
@@ -69,7 +69,7 @@ class Java15ValidatorTest {
             void recordDeclaration() {
                 String s = "record X() { }";
                 ParseResult<CompilationUnit> result = javaParser.parse(COMPILATION_UNIT, provider(s));
-                TestUtils.assertProblems(result, "(line 1,col 1) Record Declarations are not supported.");
+                TestUtils.assertProblems(result, "(line 1,col 1) Record Declarations are not supported. Pay attention that this feature is supported starting from 'JAVA_14' language level. If you need that feature the language level must be configured in the configuration before parsing the source files.");
             }
         }
     }
diff --git a/javaparser-core-testing/src/test/java/com/github/javaparser/ast/validator/Java1_3ValidatorTest.java b/javaparser-core-testing/src/test/java/com/github/javaparser/ast/validator/Java1_3ValidatorTest.java
index ee359479d..c37e61a7e 100644
--- a/javaparser-core-testing/src/test/java/com/github/javaparser/ast/validator/Java1_3ValidatorTest.java
+++ b/javaparser-core-testing/src/test/java/com/github/javaparser/ast/validator/Java1_3ValidatorTest.java
@@ -38,6 +38,6 @@ class Java1_3ValidatorTest {
     @Test
     void noAssert() {
         ParseResult<Statement> result = javaParser.parse(STATEMENT, provider("assert a;"));
-        assertProblems(result, "(line 1,col 1) Record Declarations are not supported. Pay attention that this feature is supported starting from 'JAVA_14' language level. If you need that feature the language level must be configured in the configuration before parsing the source files.");
+        assertProblems(result, "(line 1,col 1) 'assert' keyword is not supported. Pay attention that this feature is supported starting from 'JAVA_1_4' language level. If you need that feature the language level must be configured in the configuration before parsing the source files.");
     }
 }
diff --git a/javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/resolution/InstanceOfTest.java b/javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/resolution/InstanceOfTest.java
index 20cfd7c28..667ca576a 100644
--- a/javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/resolution/InstanceOfTest.java
+++ b/javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/resolution/InstanceOfTest.java
@@ -228,7 +228,7 @@ public class InstanceOfTest {
                 .parse(ParseStart.COMPILATION_UNIT, new StringProvider(x));
 
         assertEquals(1, parseResult.getProblems().size());
-        assertEquals("Use of patterns with instanceof is not supported.", parseResult.getProblem(0).getMessage());
+        assertEquals("Use of patterns with instanceof is not supported. Pay attention that this feature is supported starting from 'JAVA_14' language level. If you need that feature the language level must be configured in the configuration before parsing the source files.", parseResult.getProblem(0).getMessage());
     }
 
     @Nested
