diff --git a/core/src/main/java/nl/nn/adapterframework/configuration/ConfigurationDigester.java b/core/src/main/java/nl/nn/adapterframework/configuration/ConfigurationDigester.java
index 467c397e3..98ba12026 100644
--- a/core/src/main/java/nl/nn/adapterframework/configuration/ConfigurationDigester.java
+++ b/core/src/main/java/nl/nn/adapterframework/configuration/ConfigurationDigester.java
@@ -208,8 +208,8 @@ public class ConfigurationDigester {
 				throw new ConfigurationException("Configuration file not found: " + configurationFile);
 			}
 
-			fillConfigWarnDefaultValueExceptions(configurationResource.asSource());
 			String original = XmlUtils.identityTransform(configurationResource);
+			fillConfigWarnDefaultValueExceptions(XmlUtils.stringToSource(original)); // must use 'original', cannot use configurationResource, because EntityResolver will not be properly set
 			configuration.setOriginalConfiguration(original);
 			List<String> propsToHide = new ArrayList<String>();
 			String propertiesHideString = AppConstants.getInstance(Thread.currentThread().getContextClassLoader()).getString("properties.hide", null);
diff --git a/core/src/main/java/nl/nn/adapterframework/configuration/IbisContext.java b/core/src/main/java/nl/nn/adapterframework/configuration/IbisContext.java
index 58bcd250c..b98ee071b 100644
--- a/core/src/main/java/nl/nn/adapterframework/configuration/IbisContext.java
+++ b/core/src/main/java/nl/nn/adapterframework/configuration/IbisContext.java
@@ -407,16 +407,10 @@ public class IbisContext extends IbisApplicationContext {
 				if (currentConfigurationVersion == null) {
 					currentConfigurationVersion = configuration.getVersion();
 				} else if (!currentConfigurationVersion.equals(configuration.getVersion())) {
-					log(currentConfigurationName, currentConfigurationVersion,
-							"configuration version doesn't match Configuration version attribute: "
-							+ configuration.getVersion(),
-							MessageKeeperMessage.WARN_LEVEL);
+					log(currentConfigurationName, currentConfigurationVersion, "configuration version doesn't match Configuration version attribute: " + configuration.getVersion(), MessageKeeperMessage.WARN_LEVEL);
 				}
 				if (!currentConfigurationName.equals(configuration.getName())) {
-					log(currentConfigurationName, currentConfigurationVersion,
-							"configuration name doesn't match Configuration name attribute: "
-							+ configuration.getName(),
-							MessageKeeperMessage.WARN_LEVEL);
+					log(currentConfigurationName, currentConfigurationVersion, "configuration name doesn't match Configuration name attribute: " + configuration.getName(), MessageKeeperMessage.WARN_LEVEL);
 					messageKeepers.put(configuration.getName(),
 							messageKeepers.remove(currentConfigurationName));
 				}
diff --git a/core/src/main/java/nl/nn/adapterframework/core/Resource.java b/core/src/main/java/nl/nn/adapterframework/core/Resource.java
index 47f0ea079..f44d488a5 100644
--- a/core/src/main/java/nl/nn/adapterframework/core/Resource.java
+++ b/core/src/main/java/nl/nn/adapterframework/core/Resource.java
@@ -58,19 +58,16 @@ public class Resource {
 		if(classLoader == null) {
 			classLoader = Thread.currentThread().getContextClassLoader();
 		}
-		URL url = ClassUtils.getResourceURL(classLoader, resource, allowedProtocols);
+		String ref=resource.startsWith(ClassLoaderBase.CLASSPATH_RESOURCE_SCHEME)?resource.substring(ClassLoaderBase.CLASSPATH_RESOURCE_SCHEME.length()):resource;
+		URL url = ClassUtils.getResourceURL(classLoader, ref, allowedProtocols);
 		if (url==null) {
 			return null;
 		}
 		String systemId;
-		if (resource.startsWith(ClassLoaderBase.CLASSPATH_RESOURCE_SCHEME)) {
-			systemId=resource;
+		if (ref.indexOf(':')<0) {
+			systemId=ClassLoaderBase.CLASSPATH_RESOURCE_SCHEME+ref;
 		} else {
-			if (resource.indexOf(':')<0) {
-				systemId=ClassLoaderBase.CLASSPATH_RESOURCE_SCHEME+resource;
-			} else {
-				systemId=url.toExternalForm();
-			}
+			systemId=url.toExternalForm();
 		}
 		return new Resource(classLoader, url, systemId);
 	}
diff --git a/core/src/main/java/nl/nn/adapterframework/extensions/test/IbisTester.java b/core/src/main/java/nl/nn/adapterframework/extensions/test/IbisTester.java
index 59a3191cc..741f81b2f 100644
--- a/core/src/main/java/nl/nn/adapterframework/extensions/test/IbisTester.java
+++ b/core/src/main/java/nl/nn/adapterframework/extensions/test/IbisTester.java
@@ -61,6 +61,7 @@ public class IbisTester {
 			this.scenario = scenario;
 		}
 
+		@Override
 		public String call() throws Exception {
 			MockHttpServletRequest request = new MockHttpServletRequest();
 			request.setServletPath("/larva/index.jsp");
@@ -106,8 +107,7 @@ public class IbisTester {
 			args[1] = request;
 			args[2] = out;
 			args[3] = silent;
-			Class.forName("nl.nn.adapterframework.testtool.TestTool")
-					.getMethod("runScenarios", args_types).invoke(null, args);
+			Class.forName("nl.nn.adapterframework.testtool.TestTool").getMethod("runScenarios", args_types).invoke(null, args);
 		}
 	}
 
@@ -162,8 +162,7 @@ public class IbisTester {
 		webAppPath = getWebContentDirectory();
 		String projectBaseDir = Misc.getProjectBaseDir();
 		appConstants.put("project.basedir", projectBaseDir);
-		debug("***set property with name [project.basedir] and value ["
-				+ projectBaseDir + "]***");
+		debug("***set property with name [project.basedir] and value [" + projectBaseDir + "]***");
 
 		System.setProperty("jdbc.migrator.active", "true");
 		// appConstants.put("validators.disabled", "true");
@@ -172,21 +171,18 @@ public class IbisTester {
 
 		ibisContext = new IbisContext();
 		long configLoadStartTime = System.currentTimeMillis();
-		ibisContext.init();
+		ibisContext.init(false);
 		long configLoadEndTime = System.currentTimeMillis();
-		debug("***configuration loaded in ["
-				+ (configLoadEndTime - configLoadStartTime) + "] msec***");
+		debug("***configuration loaded in ["+ (configLoadEndTime - configLoadStartTime) + "] msec***");
 
 		int adaptersStarted = 0;
 		int adaptersCount = 0;
-		List<IAdapter> registeredAdapters = ibisContext.getIbisManager()
-				.getRegisteredAdapters();
+		List<IAdapter> registeredAdapters = ibisContext.getIbisManager().getRegisteredAdapters();
 		for (IAdapter adapter : registeredAdapters) {
 			adaptersCount++;
 			RunStateEnum runState = adapter.getRunState();
 			if (!(RunStateEnum.STARTED).equals(runState)) {
-				debug("adapter [" + adapter.getName() + "] has state ["
-						+ runState + "], will retry...");
+				debug("adapter [" + adapter.getName() + "] has state [" + runState + "], will retry...");
 				int count = 30;
 				while (count-- > 0 && !(RunStateEnum.STARTED).equals(runState)) {
 					try {
@@ -196,26 +192,21 @@ public class IbisTester {
 					}
 					runState = adapter.getRunState();
 					if (!(RunStateEnum.STARTED).equals(runState)) {
-						debug("adapter [" + adapter.getName() + "] has state ["
-								+ runState + "], retries left [" + count + "]");
+						debug("adapter [" + adapter.getName() + "] has state [" + runState + "], retries left [" + count + "]");
 					} else {
-						debug("adapter [" + adapter.getName() + "] has state ["
-								+ runState + "]");
+						debug("adapter [" + adapter.getName() + "] has state [" + runState + "]");
 					}
 				}
 			} else {
-				debug("adapter [" + adapter.getName() + "] has state ["
-						+ runState + "]");
+				debug("adapter [" + adapter.getName() + "] has state [" + runState + "]");
 			}
 			if ((RunStateEnum.STARTED).equals(runState)) {
 				adaptersStarted++;
 			} else {
-				error("adapter [" + adapter.getName() + "] has state ["
-						+ runState + "]");
+				error("adapter [" + adapter.getName() + "] has state [" + runState + "]");
 			}
 		}
-		String msg = "adapters started [" + adaptersStarted + "] from ["
-				+ adaptersCount + "]";
+		String msg = "adapters started [" + adaptersStarted + "] from [" + adaptersCount + "]";
 		if (adaptersCount == adaptersStarted) {
 			debug(msg);
 			return null;
@@ -237,16 +228,12 @@ public class IbisTester {
 		if (result == null) {
 			return error("First call to get scenarios failed");
 		} else {
-			Double countScenariosRootDirs = evaluateXPathNumber(
-					result.resultString,
-					"count(html/body//select[@name='scenariosrootdirectory']/option)");
+			Double countScenariosRootDirs = evaluateXPathNumber(result.resultString, "count(html/body//select[@name='scenariosrootdirectory']/option)");
 			if (countScenariosRootDirs == 0) {
 				return error("No scenarios root directories found");
 			}
 
-			Collection<String> scenariosRootDirsUnselected = evaluateXPath(
-					result.resultString,
-					"(html/body//select[@name='scenariosrootdirectory'])[1]/option[not(@selected)]/@value");
+			Collection<String> scenariosRootDirsUnselected = evaluateXPath(result.resultString, "(html/body//select[@name='scenariosrootdirectory'])[1]/option[not(@selected)]/@value");
 
 			String runScenariosResult = runScenarios(result.resultString);
 			if (runScenariosResult!=null) {
@@ -264,8 +251,7 @@ public class IbisTester {
 					}
 
 					if (result == null) {
-						return error("Call to get scenarios from ["
-								+ scenariosRootDirUnselected + "] failed");
+						return error("Call to get scenarios from [" + scenariosRootDirUnselected + "] failed");
 					}
 
 					runScenariosResult = runScenarios(result.resultString);
@@ -329,18 +315,15 @@ public class IbisTester {
 					if (result.resultString != null
 						&& result.resultString.contains("passed")
 					) {
-						debug(scenarioInfo + " passed in [" + result.duration
-								+ "] msec");
+						debug(scenarioInfo + " passed in [" + result.duration + "] msec");
 						scenariosPassed++;
 					} else {
-						error(scenarioInfo + " failed in [" + result.duration
-								+ "] msec");
+						error(scenarioInfo + " failed in [" + result.duration + "] msec");
 						error(result.resultString);
 					}
 				}
 			}
-			String msg = "scenarios passed [" + scenariosPassed + "] from ["
-					+ scenariosCount + "]";
+			String msg = "scenarios passed [" + scenariosPassed + "] from [" + scenariosCount + "]";
 
 			if (scenariosCount == scenariosPassed) {
 				debug(msg);
@@ -365,14 +348,11 @@ public class IbisTester {
 			long timeout = 60;
 			try {
 				try {
-					resultString = (String) future.get(timeout,
-							TimeUnit.SECONDS);
+					resultString = (String) future.get(timeout, TimeUnit.SECONDS);
 				} catch (TimeoutException e) {
-					debug(scenarioInfo + " timed out, retries left [" + count
-							+ "]");
+					debug(scenarioInfo + " timed out, retries left [" + count + "]");
 				} catch (Exception e) {
-					debug(scenarioInfo + " got error, retries left [" + count
-							+ "]");
+					debug(scenarioInfo + " got error, retries left [" + count + "]");
 				}
 			} finally {
 				service.shutdown();
@@ -384,13 +364,11 @@ public class IbisTester {
 	}
 
 	private static void debug(String string) {
-		System.out.println(getIsoTimeStamp() + " " + getMemoryInfo() + " "
-				+ string);
+		System.out.println(getIsoTimeStamp() + " " + getMemoryInfo() + " " + string);
 	}
 
 	private static String error(String string) {
-		System.err.println(getIsoTimeStamp() + " " + getMemoryInfo() + " "
-				+ string);
+		System.err.println(getIsoTimeStamp() + " " + getMemoryInfo() + " " + string);
 		return string;
 	}
 
@@ -401,14 +379,12 @@ public class IbisTester {
 	private static String getMemoryInfo() {
 		long freeMem = Runtime.getRuntime().freeMemory();
 		long totalMem = Runtime.getRuntime().totalMemory();
-		return "[" + ProcessMetrics.normalizedNotation(totalMem - freeMem)
-				+ "/" + ProcessMetrics.normalizedNotation(totalMem) + "]";
+		return "[" + ProcessMetrics.normalizedNotation(totalMem - freeMem) + "/" + ProcessMetrics.normalizedNotation(totalMem) + "]";
 	}
 
 	private static String evaluateXPathFirst(String xhtml, String xpath) {
 		try {
-			return XmlUtils
-					.evaluateXPathNodeSetFirstElement(xhtml, xpath);
+			return XmlUtils.evaluateXPathNodeSetFirstElement(xhtml, xpath);
 		} catch (Exception e) {
 			// TODO Auto-generated catch block
 			e.printStackTrace();
@@ -438,8 +414,7 @@ public class IbisTester {
 
 	private static String getWebContentDirectory() {
 		String buildOutputDirectory = Misc.getBuildOutputDirectory();
-		if (buildOutputDirectory != null
-				&& buildOutputDirectory.endsWith("classes")) {
+		if (buildOutputDirectory != null && buildOutputDirectory.endsWith("classes")) {
 			String wcDirectory = null;
 			File file = new File(buildOutputDirectory);
 			while (wcDirectory == null) {
diff --git a/core/src/main/java/nl/nn/adapterframework/webcontrol/pipes/ConfigurationBase.java b/core/src/main/java/nl/nn/adapterframework/webcontrol/pipes/ConfigurationBase.java
index 4e3ed7f8b..17f1e7e3d 100644
--- a/core/src/main/java/nl/nn/adapterframework/webcontrol/pipes/ConfigurationBase.java
+++ b/core/src/main/java/nl/nn/adapterframework/webcontrol/pipes/ConfigurationBase.java
@@ -21,6 +21,7 @@ import javax.servlet.http.HttpServletRequest;
 
 import nl.nn.adapterframework.configuration.Configuration;
 import nl.nn.adapterframework.configuration.IbisManager;
+import nl.nn.adapterframework.core.IAdapter;
 import nl.nn.adapterframework.core.IPipeLineSession;
 import nl.nn.adapterframework.core.PipeRunException;
 import nl.nn.adapterframework.http.RestListenerUtils;
@@ -131,6 +132,14 @@ public abstract class ConfigurationBase extends TimeoutGuardPipe {
 	}
 
 	protected IbisManager retrieveIbisManager() {
-		return getAdapter().getConfiguration().getIbisManager();
+		IAdapter adapter = getAdapter();
+		if (adapter==null) {
+			throw new IllegalStateException("Adapter is null");
+		}
+		Configuration configuration = adapter.getConfiguration();
+		if (configuration==null) {
+			throw new IllegalStateException("Configuration of Adapter ["+adapter.getName()+"] is null");
+		}
+		return configuration.getIbisManager();
 	}
 }
\ No newline at end of file
diff --git a/core/src/test/java/nl/nn/adapterframework/core/ResourceTest.java b/core/src/test/java/nl/nn/adapterframework/core/ResourceTest.java
new file mode 100644
index 000000000..2bdeba08a
--- /dev/null
+++ b/core/src/test/java/nl/nn/adapterframework/core/ResourceTest.java
@@ -0,0 +1,181 @@
+package nl.nn.adapterframework.core;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+
+import java.io.IOException;
+import java.net.URL;
+import java.util.jar.JarFile;
+
+import javax.xml.transform.TransformerException;
+
+import org.junit.Test;
+import org.xml.sax.SAXException;
+
+import nl.nn.adapterframework.configuration.ConfigurationException;
+import nl.nn.adapterframework.configuration.classloaders.JarFileClassLoader;
+import nl.nn.adapterframework.util.ClassUtils;
+import nl.nn.adapterframework.util.XmlUtils;
+
+public class ResourceTest {
+
+	protected final String JAR_FILE = "/ClassLoader/zip/classLoader-test.zip";
+
+	
+	private void testUri(ClassLoader cl, String ref, String expectedContents, String expectedSystemId) throws TransformerException, SAXException, IOException {
+		testUri(cl, ref, null, expectedContents, expectedSystemId);
+	}
+	
+	private void testUri(ClassLoader cl, String ref, String allowedProtocol, String expectedContents, String expectedSystemId) throws TransformerException, SAXException, IOException {
+		Resource resource = Resource.getResource(cl, ref, allowedProtocol);
+		assertNotNull(ref,resource);
+		if (expectedContents!=null) {
+			assertEquals(expectedContents, XmlUtils.source2String(resource.asSource(), false));
+		} else {
+			assertNotNull( XmlUtils.source2String(resource.asSource(), false));
+		}
+		assertEquals(expectedSystemId,resource.getSystemId());
+	}
+	
+
+	@Test
+	public void localClassLoaderPlainRef() throws TransformerException, SAXException, IOException {
+		testUri(null, "/ClassLoader/ClassLoaderTestFile.xml", "<?xml version=\"1.0\" encoding=\"UTF-8\"?><file>/ClassLoader/ClassLoaderTestFile.xml</file>", "classpath:/ClassLoader/ClassLoaderTestFile.xml");
+	}
+	
+	@Test
+	public void localClassLoaderClasspathRef() throws TransformerException, SAXException, IOException {
+		testUri(null, "classpath:/ClassLoader/ClassLoaderTestFile.xml", "<?xml version=\"1.0\" encoding=\"UTF-8\"?><file>/ClassLoader/ClassLoaderTestFile.xml</file>", "classpath:/ClassLoader/ClassLoaderTestFile.xml");
+	}
+
+	@Test
+	public void localClassLoaderFileRef() throws TransformerException, SAXException, IOException {
+		URL url = ClassUtils.getResourceURL(null, "/ClassLoader/ClassLoaderTestFile.xml");
+		assertNotNull(url);
+		String ref=url.toExternalForm();
+		testUri(null, ref, "file", "<?xml version=\"1.0\" encoding=\"UTF-8\"?><file>/ClassLoader/ClassLoaderTestFile.xml</file>", ref);
+	}
+
+	@Test
+	public void bytesClassLoaderPlainRef() throws TransformerException, SAXException, IOException, ConfigurationException {
+		ClassLoader classLoader = getBytesClassLoader();
+		testUri(classLoader, "/ClassLoader/ClassLoaderTestFile.xml", "<?xml version=\"1.0\" encoding=\"UTF-8\"?><file>/ClassLoader/ClassLoaderTestFile.xml</file>", "classpath:/ClassLoader/ClassLoaderTestFile.xml");
+	}
+	
+	@Test
+	public void bytesClassLoaderClasspathRef() throws TransformerException, SAXException, IOException, ConfigurationException {
+		ClassLoader classLoader = getBytesClassLoader();
+		testUri(classLoader, "classpath:/ClassLoader/ClassLoaderTestFile.xml", "<?xml version=\"1.0\" encoding=\"UTF-8\"?><file>/ClassLoader/ClassLoaderTestFile.xml</file>", "classpath:/ClassLoader/ClassLoaderTestFile.xml");
+	}
+
+	@Test
+	public void bytesClassLoaderFileRef() throws TransformerException, SAXException, IOException, ConfigurationException {
+		URL url = ClassUtils.getResourceURL(null, "/ClassLoader/ClassLoaderTestFile.xml");
+		assertNotNull(url);
+		String ref=url.toExternalForm();
+		ClassLoader classLoader = getBytesClassLoader();
+		testUri(classLoader, ref, "file", "<?xml version=\"1.0\" encoding=\"UTF-8\"?><file>/ClassLoader/ClassLoaderTestFile.xml</file>", ref);
+	}
+
+
+//	private ClassLoader getClassLoader(BaseType baseType) throws ConfigurationException, IOException {
+//		if (baseType==BaseType.BYTES) {
+//			return getBytesClassLoader();
+//		}
+//		return Thread.currentThread().getContextClassLoader();
+//	}
+//	
+//	private String getBase(ClassLoader classLoader, BaseType baseType) throws ConfigurationException, IOException {
+//		URL result=null;
+//		switch (baseType) {
+//		case LOCAL:
+//			return "/ClassLoader/Xslt/root.xsl";
+//		case BYTES:
+//			result = ClassUtils.getResourceURL(classLoader, "/ClassLoader/Xslt/root.xsl");
+//			return result.toExternalForm();
+//		case FILE_SCHEME:
+//			result = ClassUtils.getResourceURL(classLoader, "/ClassLoader/Xslt/root.xsl");
+//			return result.toExternalForm();
+//		case NULL:
+//			return null;
+//		default:
+//			throw new ConfigurationException("getBase() appears to be missing case for baseType ["+baseType+"]");
+//		}
+//	}
+//
+//	private String getRef(BaseType baseType, RefType refType) throws ConfigurationException {
+//		switch (refType) {
+//		case ROOT:
+//			return "/ClassLoaderTestFile.xml";
+//		case ABS_PATH:
+//			return "/ClassLoader/ClassLoaderTestFile.xml";
+//		case DOTDOT:
+//			if (baseType==BaseType.NULL) {
+//				return null;
+//			}
+//			return "../subfolder/ClassLoaderTestFile.xml";
+//		case SAME_FOLDER:
+//			if (baseType==BaseType.NULL) {
+//				return null;
+//			}
+//			return "names.xsl";
+//		case OVERRIDABLE:
+//			return "/ClassLoader/overridablefile.xml";
+//		case FILE_SCHEME:
+//			return ClassUtils.getResourceURL(this, "/ClassLoader/overridablefile.xml").toExternalForm();
+//		default:
+//			throw new ConfigurationException("getRef() appears to be missing case for refType ["+refType+"]");
+//		}
+//	}
+//
+//	private String getExpected(BaseType baseType, RefType refType) throws ConfigurationException {
+//		switch(refType) {
+//		case ROOT: 
+//			return "<?xml version=\"1.0\" encoding=\"UTF-8\"?><file>/ClassLoaderTestFile.xml</file>";
+//		case ABS_PATH:
+//			return "<?xml version=\"1.0\" encoding=\"UTF-8\"?><file>/ClassLoader/ClassLoaderTestFile.xml</file>";
+//		case DOTDOT: 
+//			return "<?xml version=\"1.0\" encoding=\"UTF-8\"?><file>/ClassLoader/subfolder/ClassLoaderTestFile.xml</file>";
+//		case SAME_FOLDER: 
+//			return null;
+//		case OVERRIDABLE: 
+//			if (baseType==BaseType.BYTES) {
+//				return "<?xml version=\"1.0\" encoding=\"UTF-8\"?><file>zip:/overrideablefile.xml</file>";
+//			}
+//			return "<?xml version=\"1.0\" encoding=\"UTF-8\"?><file>local:/overrideablefile.xml</file>";
+//		case FILE_SCHEME:
+//			return "<?xml version=\"1.0\" encoding=\"UTF-8\"?><file>local:/overrideablefile.xml</file>";
+//		default:
+//			throw new ConfigurationException("getExpected() appears to be missing case for refType ["+refType+"]");
+//		}
+//	}
+//
+//	@Test
+//	public void test() throws ConfigurationException, IOException, TransformerException {
+//		ClassLoader classLoader = getClassLoader(baseType);
+//		String baseUrl = getBase(classLoader, baseType);
+//		System.out.println("BaseType ["+baseType+"] classLoader ["+classLoader+"] BaseUrl ["+baseUrl+"]");
+//		
+//		String ref = getRef(baseType,refType);
+//		String expected = getExpected(baseType,refType);
+//		System.out.println("BaseType ["+baseType+"] refType ["+refType+"] ref ["+ref+"] expected ["+expected+"]");
+//		if (ref!=null) {
+//			testUri(baseType.name(), refType.name(), classLoader, baseUrl, ref, expected);
+//		}
+//	}
+
+	
+	private ClassLoader getBytesClassLoader() throws IOException, ConfigurationException {
+		ClassLoader localClassLoader = Thread.currentThread().getContextClassLoader();
+
+		URL file = this.getClass().getResource(JAR_FILE);
+		assertNotNull("jar url ["+JAR_FILE+"] not found", file);
+		JarFile jarFile = new JarFile(file.getFile());
+		assertNotNull("jar file not found",jarFile);
+
+		JarFileClassLoader cl = new JarFileClassLoader(localClassLoader);
+		cl.setJar(file.getFile());
+		cl.configure(null, "");
+		return cl;
+	}
+}
