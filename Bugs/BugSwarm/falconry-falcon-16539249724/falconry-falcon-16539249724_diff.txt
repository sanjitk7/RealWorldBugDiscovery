diff --git a/falcon/errors.py b/falcon/errors.py
index 8c9826b..2cef973 100644
--- a/falcon/errors.py
+++ b/falcon/errors.py
@@ -38,6 +38,7 @@ package namespace::
 from datetime import datetime
 from typing import Iterable
 from typing import Optional
+from typing import Union
 
 import falcon.status_codes as status
 from falcon.typing import NormalizedHeaders
@@ -174,8 +175,8 @@ class WebSocketServerError(WebSocketDisconnected):
     pass
 
 
-Kwargs = str | int | None
-RetryAfter = int | datetime | None
+Kwargs = Union[str, int, None]
+RetryAfter = Union[int, datetime, None]
 
 
 class HTTPBadRequest(HTTPError):
@@ -2647,7 +2648,7 @@ class MediaMalformedError(HTTPBadRequest):
             base articles related to this error (default ``None``).
     """
 
-    def __init__(self, media_type: str, **kwargs: RawHeaders | Kwargs):
+    def __init__(self, media_type: str, **kwargs: Union[RawHeaders, Kwargs]):
         super().__init__(
             title='Invalid {0}'.format(media_type), description=None, **kwargs
         )
@@ -2748,7 +2749,7 @@ class MultipartParseError(MediaMalformedError):
 
     @deprecated_args(allowed_positional=0)
     def __init__(
-        self, description: Optional[str] = None, **kwargs: RawHeaders | Kwargs
+        self, description: Optional[str] = None, **kwargs: Union[RawHeaders, Kwargs]
     ) -> None:
         HTTPBadRequest.__init__(
             self,
diff --git a/falcon/hooks.py b/falcon/hooks.py
index c7f44f0..5b0d6df 100644
--- a/falcon/hooks.py
+++ b/falcon/hooks.py
@@ -25,6 +25,7 @@ from typing import Callable
 from typing import Dict
 from typing import List
 from typing import Tuple
+from typing import Union
 
 from falcon import asgi
 from falcon.constants import COMBINED_METHODS
@@ -40,7 +41,7 @@ _DECORABLE_METHOD_NAME = re.compile(
 
 SynchronousResource = Callable[..., Any]
 AsynchronousResource = Callable[..., Awaitable[Any]]
-Resource = SynchronousResource | AsynchronousResource
+Resource = Union[SynchronousResource, AsynchronousResource]
 
 
 def before(
@@ -265,7 +266,7 @@ def _wrap_with_before(
     action_args: Tuple[Any, ...],
     action_kwargs: Dict[str, Any],
     is_async: bool,
-) -> Callable[..., Awaitable[None]] | Callable[..., None]:
+) -> Union[Callable[..., Awaitable[None]], Callable[..., None]]:
     """Execute the given action function before a responder method.
 
     Args:
diff --git a/falcon/http_error.py b/falcon/http_error.py
index 2d5a82e..308b35c 100644
--- a/falcon/http_error.py
+++ b/falcon/http_error.py
@@ -18,6 +18,7 @@ from collections import OrderedDict
 from typing import MutableMapping
 from typing import Optional
 from typing import Type
+from typing import Union
 import xml.etree.ElementTree as et
 
 from falcon.constants import MEDIA_JSON
@@ -156,8 +157,8 @@ class HTTPError(Exception):
         return http_status_to_code(self.status)
 
     def to_dict(
-        self, obj_type: Type[MutableMapping[str, str | int | None | Link]] = dict
-    ) -> MutableMapping[str, str | int | None | Link]:
+        self, obj_type: Type[MutableMapping[str, Union[str, int, None, Link]]] = dict
+    ) -> MutableMapping[str, Union[str, int, None, Link]]:
         """Return a basic dictionary representing the error.
 
         This method can be useful when serializing the error to hash-like
diff --git a/falcon/inspect.py b/falcon/inspect.py
index 023c9e3..6d8e6ea 100644
--- a/falcon/inspect.py
+++ b/falcon/inspect.py
@@ -26,6 +26,7 @@ from typing import List
 from typing import Optional
 from typing import Tuple
 from typing import Type
+from typing import Union
 
 from falcon import app_helpers
 from falcon.app import App
@@ -614,7 +615,7 @@ class StringVisitor(InspectVisitor):
         return text
 
     def _methods_to_string(
-        self, methods: List[RouteMethodInfo] | List[MiddlewareMethodInfo]
+        self, methods: Union[List[RouteMethodInfo], List[MiddlewareMethodInfo]]
     ) -> str:
         """Return a string from the list of methods."""
         tab = self.tab + ' ' * 3
@@ -813,11 +814,13 @@ def _is_internal(obj: Any) -> bool:
 
 
 def _filter_internal(
-    iterable: Iterable[RouteMethodInfo]
-    | Iterable[ErrorHandlerInfo]
-    | Iterable[MiddlewareMethodInfo],
+    iterable: Union[
+        Iterable[RouteMethodInfo],
+        Iterable[ErrorHandlerInfo],
+        Iterable[MiddlewareMethodInfo],
+    ],
     return_internal: bool,
-) -> Iterable[_Traversable] | List[_Traversable]:
+) -> Union[Iterable[_Traversable], List[_Traversable]]:
     """Filter the internal elements of an iterable."""
     if return_internal:
         return iterable
diff --git a/falcon/middleware.py b/falcon/middleware.py
index 19558db..0bb043d 100644
--- a/falcon/middleware.py
+++ b/falcon/middleware.py
@@ -3,6 +3,7 @@ from __future__ import annotations
 from typing import Any
 from typing import Iterable
 from typing import Optional
+from typing import Union
 
 from .request import Request
 from .response import Response
@@ -44,9 +45,9 @@ class CORSMiddleware(object):
 
     def __init__(
         self,
-        allow_origins: str | Iterable[str] = '*',
-        expose_headers: Optional[str | Iterable[str]] = None,
-        allow_credentials: Optional[str | Iterable[str]] = None,
+        allow_origins: Union[str, Iterable[str]] = '*',
+        expose_headers: Optional[Union[str, Iterable[str]]] = None,
+        allow_credentials: Optional[Union[str, Iterable[str]]] = None,
     ):
         if allow_origins == '*':
             self.allow_origins = allow_origins
diff --git a/falcon/stream.py b/falcon/stream.py
index 387fbcd..c300ee9 100644
--- a/falcon/stream.py
+++ b/falcon/stream.py
@@ -17,12 +17,12 @@
 from __future__ import annotations
 
 import io
-from typing import BinaryIO, Callable, List, Optional, TypeVar
+from typing import BinaryIO, Callable, List, Optional, TypeVar, Union
 
 __all__ = ['BoundedStream']
 
 
-Result = TypeVar('Result', bound=bytes | List[bytes])
+Result = TypeVar('Result', bound=Union[bytes, List[bytes]])
 
 
 class BoundedStream(io.IOBase):
diff --git a/falcon/typing.py b/falcon/typing.py
index 5410a7e..0f68c6d 100644
--- a/falcon/typing.py
+++ b/falcon/typing.py
@@ -23,6 +23,7 @@ from typing import MutableMapping
 from typing import Optional
 from typing import Pattern
 from typing import Tuple
+from typing import Union
 
 
 Link = Dict[str, str]
@@ -30,7 +31,7 @@ Link = Dict[str, str]
 
 class Serializer:
     def serialize(
-        self, media: MutableMapping[str, str | int | None | Link], content_type: str
+        self, media: MutableMapping[str, Union[str, int, None, Link]], content_type: str
     ) -> bytes:
         raise NotImplementedError()
 
@@ -53,7 +54,7 @@ ErrorHandler = Callable[[Request, Response, BaseException, dict], Any]
 ErrorSerializer = Callable[[Request, Response, BaseException], Any]
 
 # Sinks
-SinkPrefix = str | Pattern
+SinkPrefix = Union[str, Pattern]
 
 # TODO(vytas): Is it possible to specify a Callable or a Protocol that defines
 #   type hints for the two first parameters, but accepts any number of keyword
@@ -61,5 +62,5 @@ SinkPrefix = str | Pattern
 # class SinkCallable(Protocol):
 #     def __call__(sef, req: Request, resp: Response, <how to do?>): ...
 NormalizedHeaders = Dict[str, str]
-RawHeaders = NormalizedHeaders | List[Tuple[str, str]]
-Status = http.HTTPStatus | str | int
+RawHeaders = Union[NormalizedHeaders, List[Tuple[str, str]]]
+Status = Union[http.HTTPStatus, str, int]
