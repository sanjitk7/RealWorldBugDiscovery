diff --git a/docs/user-guide/configuration.md b/docs/user-guide/configuration.md
index 91767c25..60c50a3f 100644
--- a/docs/user-guide/configuration.md
+++ b/docs/user-guide/configuration.md
@@ -374,7 +374,7 @@ This is a tree of configs, and for each one the value can be one of the three: `
 >     absolute_links: info
 >   links:
 >     not_found: warn
->     anchors: info
+>     anchors: ignore
 >     absolute_links: info
 >     unrecognized_links: info
 > ```
@@ -389,7 +389,6 @@ The defaults of some of the behaviors already differ from MkDocs 1.4 and below -
 > validation:
 >   absolute_links: ignore
 >   unrecognized_links: ignore
->   anchors: ignore
 > ```
 <!-- -->
 >! EXAMPLE: **Recommended settings for most sites (maximal strictness):**
diff --git a/mkdocs/config/defaults.py b/mkdocs/config/defaults.py
index 89f073e3..2ce42bb8 100644
--- a/mkdocs/config/defaults.py
+++ b/mkdocs/config/defaults.py
@@ -166,7 +166,7 @@ class MkDocsConfig(base.Config):
             """Warning level for when a Markdown doc links to a relative path that doesn't look like
             it could be a valid internal link. For example, if the link ends with `/`."""
 
-            anchors = c._LogLevel(default='info')
+            anchors = c._LogLevel(default='ignore')
             """Warning level for when a Markdown doc links to an anchor that's not present on the target page."""
 
         links = c.SubConfig(LinksValidation)
diff --git a/mkdocs/structure/pages.py b/mkdocs/structure/pages.py
index c16983ff..07e1737a 100644
--- a/mkdocs/structure/pages.py
+++ b/mkdocs/structure/pages.py
@@ -9,7 +9,6 @@ from urllib.parse import unquote as urlunquote
 from urllib.parse import urljoin, urlsplit, urlunsplit
 
 import markdown
-import markdown.htmlparser  # type: ignore
 import markdown.postprocessors
 import markdown.treeprocessors
 from markdown.util import AMP_SUBSTITUTE
@@ -263,9 +262,6 @@ class Page(StructureItem):
             extension_configs=config['mdx_configs'] or {},
         )
 
-        raw_html_ext = _RawHTMLPreprocessor()
-        raw_html_ext._register(md)
-
         relative_path_ext = _RelativePathTreeprocessor(self.file, files, config)
         relative_path_ext._register(md)
 
@@ -275,9 +271,7 @@ class Page(StructureItem):
         self.content = md.convert(self.markdown)
         self.toc = get_toc(getattr(md, 'toc_tokens', []))
         self._title_from_render = extract_title_ext.title
-        self.present_anchor_ids = (
-            relative_path_ext.present_anchor_ids | raw_html_ext.present_anchor_ids
-        )
+        self.present_anchor_ids = relative_path_ext.present_anchor_ids
         if log.getEffectiveLevel() > logging.DEBUG:
             self.links_to_anchors = relative_path_ext.links_to_anchors
 
@@ -288,8 +282,7 @@ class Page(StructureItem):
     """Links to anchors in other files that this page contains.
 
     The structure is: `{file_that_is_linked_to: {'anchor': 'original_link/to/some_file.md#anchor'}}`.
-    Populated after `.render()`. Populated only if `validation: {anchors: info}` (or greater) is set.
-    """
+    Populated after `.render()`. Populated only if `validation: {anchors: info}` (or greater) is set"""
 
     def validate_anchor_links(self, *, files: Files, log_level: int) -> None:
         if not self.links_to_anchors:
@@ -335,8 +328,6 @@ class _RelativePathTreeprocessor(markdown.treeprocessors.Treeprocessor):
             if anchor := element.get('id'):
                 self.present_anchor_ids.add(anchor)
             if element.tag == 'a':
-                if anchor := element.get('name'):
-                    self.present_anchor_ids.add(anchor)
                 key = 'href'
             elif element.tag == 'img':
                 key = 'src'
@@ -492,36 +483,6 @@ class _RelativePathTreeprocessor(markdown.treeprocessors.Treeprocessor):
         md.treeprocessors.register(self, "relpath", 0)
 
 
-class _RawHTMLPreprocessor(markdown.preprocessors.Preprocessor):
-    def __init__(self) -> None:
-        super().__init__()
-        self.present_anchor_ids: set[str] = set()
-
-    def run(self, lines: list[str]) -> list[str]:
-        parser = _HTMLHandler()
-        parser.feed('\n'.join(lines))
-        parser.close()
-        self.present_anchor_ids = parser.present_anchor_ids
-        return lines
-
-    def _register(self, md: markdown.Markdown) -> None:
-        md.preprocessors.register(
-            self, "mkdocs_raw_html", priority=21  # Right before 'html_block'.
-        )
-
-
-class _HTMLHandler(markdown.htmlparser.htmlparser.HTMLParser):
-    def __init__(self) -> None:
-        super().__init__()
-        self.present_anchor_ids: set[str] = set()
-
-    def handle_starttag(self, tag: str, attrs: Sequence[tuple[str, str]]) -> None:
-        for k, v in attrs:
-            if k == 'id' or (k == 'name' and tag == 'a'):
-                self.present_anchor_ids.add(v)
-        return super().handle_starttag(tag, attrs)
-
-
 class _ExtractTitleTreeprocessor(markdown.treeprocessors.Treeprocessor):
     title: str | None = None
     postprocessors: Sequence[markdown.postprocessors.Postprocessor] = ()
@@ -544,4 +505,8 @@ class _ExtractTitleTreeprocessor(markdown.treeprocessors.Treeprocessor):
 
     def _register(self, md: markdown.Markdown) -> None:
         self.postprocessors = tuple(md.postprocessors)
-        md.treeprocessors.register(self, "mkdocs_extract_title", priority=-1)  # After the end.
+        md.treeprocessors.register(
+            self,
+            "mkdocs_extract_title",
+            priority=-1,  # After the end.
+        )
diff --git a/mkdocs/tests/build_tests.py b/mkdocs/tests/build_tests.py
index a2ecb1b0..4dc85c77 100644
--- a/mkdocs/tests/build_tests.py
+++ b/mkdocs/tests/build_tests.py
@@ -700,6 +700,7 @@ class BuildTests(PathAssertionMixin, unittest.TestCase):
         cfg = load_config(docs_dir=docs_dir, site_dir=site_dir, validation={'anchors': 'warn'})
         build.build(cfg)
 
+    @unittest.skip("The implementation is not good enough to understand this yet.")  # TODO
     @tempdir(
         files={
             'test/foo.md': '[bar](bar.md#heading2)',
diff --git a/mkdocs/tests/config/config_options_tests.py b/mkdocs/tests/config/config_options_tests.py
index 119cd726..9d8592f9 100644
--- a/mkdocs/tests/config/config_options_tests.py
+++ b/mkdocs/tests/config/config_options_tests.py
@@ -1586,7 +1586,7 @@ class NestedSubConfigTest(TestCase):
                 'not_found': logging.WARNING,
                 'absolute_links': logging.INFO,
                 'unrecognized_links': logging.INFO,
-                'anchors': logging.INFO,
+                'anchors': logging.DEBUG,
             },
         }
 
