diff --git a/src/main/java/com/alibaba/fastjson/parser/deserializer/Jdk8DateCodec.java b/src/main/java/com/alibaba/fastjson/parser/deserializer/Jdk8DateCodec.java
index 15094297d..b1d5b521c 100644
--- a/src/main/java/com/alibaba/fastjson/parser/deserializer/Jdk8DateCodec.java
+++ b/src/main/java/com/alibaba/fastjson/parser/deserializer/Jdk8DateCodec.java
@@ -120,7 +120,7 @@ public class Jdk8DateCodec extends ContextObjectDeserializer implements ObjectSe
                         }
                     }
 
-                    if (digit && text.length() < 19) {
+                    if (digit && text.length() > 8 && text.length() < 19) {
                         long epochMillis = Long.parseLong(text);
                         localTime = LocalDateTime
                                 .ofInstant(
@@ -183,7 +183,7 @@ public class Jdk8DateCodec extends ContextObjectDeserializer implements ObjectSe
                         break;
                     }
                 }
-                if (digit && text.length() < 19) {
+                if (digit && text.length() > 8 && text.length() < 19) {
                     long epochMillis = Long.parseLong(text);
                     return (T) Instant.ofEpochMilli(epochMillis);
                 }
@@ -332,7 +332,7 @@ public class Jdk8DateCodec extends ContextObjectDeserializer implements ObjectSe
                     break;
                 }
             }
-            if (digit && text.length() < 19) {
+            if (digit && text.length() > 8 && text.length() < 19) {
                 long epochMillis = Long.parseLong(text);
                 return LocalDateTime.ofInstant(Instant.ofEpochMilli(epochMillis), JSON.defaultTimeZone.toZoneId());
             }
@@ -402,7 +402,7 @@ public class Jdk8DateCodec extends ContextObjectDeserializer implements ObjectSe
                     break;
                 }
             }
-            if (digit && text.length() < 19) {
+            if (digit && text.length() > 8 && text.length() < 19) {
                 long epochMillis = Long.parseLong(text);
                 return LocalDateTime
                         .ofInstant(
@@ -487,7 +487,7 @@ public class Jdk8DateCodec extends ContextObjectDeserializer implements ObjectSe
                     break;
                 }
             }
-            if (digit && text.length() < 19) {
+            if (digit && text.length() > 8 && text.length() < 19) {
                 long epochMillis = Long.parseLong(text);
                 return ZonedDateTime.ofInstant(Instant.ofEpochMilli(epochMillis), JSON.defaultTimeZone.toZoneId());
             }
diff --git a/src/main/java/com/alibaba/fastjson/serializer/JodaCodec.java b/src/main/java/com/alibaba/fastjson/serializer/JodaCodec.java
index 01a7a58ef..d2c66b03a 100644
--- a/src/main/java/com/alibaba/fastjson/serializer/JodaCodec.java
+++ b/src/main/java/com/alibaba/fastjson/serializer/JodaCodec.java
@@ -132,7 +132,7 @@ public class JodaCodec implements ObjectSerializer, ContextObjectSerializer, Obj
                         break;
                     }
                 }
-                if (digit && text.length() < 19) {
+                if (digit && text.length() > 8 && text.length() < 19) {
                     long epochMillis = Long.parseLong(text);
                     return (T) new Instant(epochMillis);
                 }
@@ -269,7 +269,7 @@ public class JodaCodec implements ObjectSerializer, ContextObjectSerializer, Obj
                     break;
                 }
             }
-            if (digit && text.length() < 19) {
+            if (digit && text.length() > 8 && text.length() < 19) {
                 long epochMillis = Long.parseLong(text);
                 return new LocalDateTime(epochMillis, DateTimeZone.forTimeZone(JSON.defaultTimeZone));
             }
@@ -339,7 +339,7 @@ public class JodaCodec implements ObjectSerializer, ContextObjectSerializer, Obj
                     break;
                 }
             }
-            if (digit && text.length() < 19) {
+            if (digit && text.length() > 8 && text.length() < 19) {
                 long epochMillis = Long.parseLong(text);
                 return new LocalDateTime(epochMillis, DateTimeZone.forTimeZone(JSON.defaultTimeZone))
                         .toLocalDate();
