diff --git a/src/qinfer/derived_models.py b/src/qinfer/derived_models.py
index df89b97..c9b59b9 100644
--- a/src/qinfer/derived_models.py
+++ b/src/qinfer/derived_models.py
@@ -464,7 +464,7 @@ def likelihood(self, outcomes, modelparams, expparams):
         assert np.all(sigma > 0)
 
         # Now we can rescale the outcomes to be random variates z drawn from N(0, 1).
-        scaled_outcomes = (outcomes - mu) / sigma
+        scaled_outcomes = (outcomes[np.newaxis,:,np.newaxis,np.newaxis] - mu) / sigma
 
         # We can then compute the conditional likelihood Pr(z | underlying_outcome, model).
         conditional_L = norm(0, 1).pdf(scaled_outcomes)
@@ -491,7 +491,7 @@ def simulate_experiment(self, modelparams, expparams, repeat=1):
         # Next, we sample a bunch of underlying outcomes to figure out
         # how to rescale everything.
         underlying_outcomes = self.underlying_model.simulate_experiment(
-            modelparams[:, :-4], expparams
+            modelparams[:, :-4], expparams, repeat=repeat
         )
 
         # We can now rescale zs to obtain the actual outcomes.
diff --git a/src/qinfer/test_models.py b/src/qinfer/test_models.py
index 9ed5ea9..61a5a3b 100644
--- a/src/qinfer/test_models.py
+++ b/src/qinfer/test_models.py
@@ -189,7 +189,10 @@ def likelihood(self, outcomes, modelparams, expparams):
         # Pass the expparams to the superclass as a record array.
         new_eps = np.empty(expparams.shape, dtype=super(SimplePrecessionModel, self).expparams_dtype)
         new_eps['w_'] = 0
-        new_eps['t'] = expparams
+        try:
+            new_eps['t'] = expparams
+        except ValueError:
+            new_eps['t'] = expparams['t']
 
         return super(SimplePrecessionModel, self).likelihood(outcomes, modelparams, new_eps)
 
@@ -197,7 +200,10 @@ def score(self, outcomes, modelparams, expparams, return_L=False):
         # Pass the expparams to the superclass as a record array.
         new_eps = np.empty(expparams.shape, dtype=super(SimplePrecessionModel, self).expparams_dtype)
         new_eps['w_'] = 0
-        new_eps['t'] = expparams
+        try:
+            new_eps['t'] = expparams
+        except ValueError:
+            new_eps['t'] = expparams['t']
 
         q = super(SimplePrecessionModel, self).score(outcomes, modelparams, new_eps, return_L=False)
 
